subreddit,title,selftext,author,id,permalink,url,created_utc,score,upvote_ratio,ups,downs,num_comments,total_awards_received,gilded,is_video,is_original_content,is_self,over_18,spoiler,link_flair_text,thumbnail,name
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1gydn91,https://reddit.com/r/Python/comments/1gydn91/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1gydn91/sunday_daily_thread_whats_everyone_working_on/,2024-11-24 00:00:08,8,0.8,8,0,2,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gydn91
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1h2zjp4,https://reddit.com/r/Python/comments/1h2zjp4/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1h2zjp4/saturday_daily_thread_resource_request_and/,2024-11-30 00:00:19,3,0.72,3,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1h2zjp4
Python,Tech Events @ Europe,"In the repository¬†[https://github.com/ortolanph/tech-events-europe](https://github.com/ortolanph/tech-events-europe)¬†there is a listing of events for Europe for this year (I know that's only Portugal, but this is what I have done for now). If you want to contribute to next year's event, just follow the rules on the site.

Thanks!",ortolanph,1h3bhgl,https://reddit.com/r/Python/comments/1h3bhgl/tech_events_europe/,https://www.reddit.com/r/Python/comments/1h3bhgl/tech_events_europe/,2024-11-30 12:23:50,3,0.72,3,0,0,0,0,False,False,True,False,False,Discussion,self,t3_1h3bhgl
Python,A tutorial on how to create Web Apps using only Python,"Hey everyone! I created an hour-long tutorial on creating a Web App using only Python with Taipy, an open-source Python library. It covers visual elements, interactions, styling, multiple pages, and it touches on authentication and deployment.

Feel free to take a look here:  
[https://youtu.be/4F-266YnTkM?si=qGDra6c68\_jz6ZBK](https://youtu.be/4F-266YnTkM?si=qGDra6c68_jz6ZBK)",Alyx1337,1h32v2g,https://reddit.com/r/Python/comments/1h32v2g/a_tutorial_on_how_to_create_web_apps_using_only/,https://www.reddit.com/r/Python/comments/1h32v2g/a_tutorial_on_how_to_create_web_apps_using_only/,2024-11-30 02:53:31,18,0.71,18,0,2,0,0,False,False,True,False,False,Tutorial,self,t3_1h32v2g
Python,What are some really awesome projects/channels you have encountered so far in YouTube?,"What are some really awesome projects/channels you have encountered so far in YouTube? Looking for some ideas to work on for a long time now. 

Doing same automation and using same libraries, I am feeling kinda bored now. Need some fresh ideas.",ElasticMusk,1h2quqa,https://reddit.com/r/Python/comments/1h2quqa/what_are_some_really_awesome_projectschannels_you/,https://www.reddit.com/r/Python/comments/1h2quqa/what_are_some_really_awesome_projectschannels_you/,2024-11-29 17:25:39,75,0.88,75,0,30,0,0,False,False,True,False,False,Discussion,self,t3_1h2quqa
Python,YTSage: A Modern YouTube Downloader with a Stunning PyQt6 Interface!,"**What My Project Does:**  
**[YTSage](https://github.com/oop7/YTSage)** is a modern YouTube downloader designed for simplicity and functionality. With a sleek PyQt6 interface, it allows users to:  
- üé• Download videos in various qualities with automatic audio merging.  
- üéµ Extract audio in multiple formats.  
- üìù Fetch both manual and auto-generated subtitles.  
- ‚ÑπÔ∏è View detailed video metadata (e.g., views, upload date, duration).  
- üñºÔ∏è Preview video thumbnails before downloading.  

---

**Target Audience:**  
YTSage is ideal for:  
- Casual users who want an easy-to-use video and audio downloader.  
- Developers looking for a robust yt-dlp-based tool with a clean GUI.  
- Educators and content creators who need subtitles or metadata for their projects.  

---

**Comparison with Existing Alternatives:**  
- **vs yt-dlp**: While yt-dlp is powerful, it operates through the command line. YTSage simplifies the process with an intuitive graphical interface.  
- **vs other GUI downloaders**: Many alternatives lack modern design or features like subtitle support and metadata display. YTSage bridges this gap with its PyQt6-powered interface and advanced functionality.  

---

**Getting Started:**  
Download the pre-built executable from the [Releases](https://github.com/oop7/YTSage/releases) page ‚Äì no installation required! For developers, source code and build instructions are available in the repository.

---

**Screenshots:**  
[Main Interface](https://github.com/user-attachments/assets/0dc04ecf-082e-458a-acfe-2c5482d36de2)  
*Main interface with video metadata and thumbnail preview*  

[Subtitle Options](https://github.com/user-attachments/assets/b001ceb5-5446-4b56-b00c-b578814e2cf0)  
*Support for both manual and auto-generated subtitles*  

---

**Feedback and Contributions:**  
I‚Äôd love your thoughts on how to make YTSage better! Contributions are welcome on GitHub.  

üîó [GitHub Repository](https://github.com/oop7/YTSage)",NO-N_A_M_E,1h2ta56,https://reddit.com/r/Python/comments/1h2ta56/ytsage_a_modern_youtube_downloader_with_a/,https://www.reddit.com/r/Python/comments/1h2ta56/ytsage_a_modern_youtube_downloader_with_a/,2024-11-29 19:10:09,51,0.7,51,0,67,0,0,False,False,True,False,False,Showcase,self,t3_1h2ta56
Python,Best way to pull text from a picture of a table?,"Best way to pull text from a picture of a table?

I've tried tesseract but it is not performing well. It extracts the data very messily, incompletely, and it comes out disorganized and disconnected.

I have an image of a table Im trying to convert to an excel sheet. I need it to pull the info from each cell (accurately) and organize it by row. The data includes both numbers and letters.

Is there an easier way or better suited tool than tesseract?",phatBleezy,1h314gl,https://reddit.com/r/Python/comments/1h314gl/best_way_to_pull_text_from_a_picture_of_a_table/,https://www.reddit.com/r/Python/comments/1h314gl/best_way_to_pull_text_from_a_picture_of_a_table/,2024-11-30 01:18:59,13,0.79,13,0,7,0,0,False,False,True,False,False,Discussion,self,t3_1h314gl
Python,Generate Rust code for SymPy expressions with Symars.,"# What My Project Does

SymPy's Rust code generator has always been broken, generating invalid rust code.

I am trying to port some numerical computation pipeline from C++ to rust and tried to find a tool that generates code from symbol representations for me, but in vain after extensive search.

So I made one myself, given that coding up from scratch is way easier than having to read existing SymPy code and improve it : )

# Target Audience

Numerical computation, code generation users. If this is what you need, give it a try! You can always raise issues if you find bugs, or if you believe wrong code is generated.

# [Github link](https://github.com/Da1sypetals/Symars)

# [PyPI link](https://pypi.org/project/symars/)

(Name is picked arbitrarily)

Example:

    import sympy as sp
    from symars import GenScalar, DType
    from sympy import S
    
    expr = sp.Abs(
        sp.sin(
            sp.log(a * 14.1444)
            + sp.Pow(c - a, sp.Rational(1, 4))
            + sp.Rational(3, 5)
            + (sp.Pow(sp.Rational(55, 13), S.Exp1))
            - S.EulerGamma
        )
        + sp.exp(sp.sqrt(b + sp.Pow(c - a, sp.Rational(1, 3) + S.TribonacciConstant)))
    ) - sp.tanh(
        sp.pi
        * sp.cosh(c)
        * (sp.sinc((a + b - c) * a / 2.1123) * sp.cbrt(sp.Abs((d / e) + sp.log(f * g - h))))
    )
    
    gen = GenScalar(DType.F64, precision_digit=15, debug=False)
    
    rust_code = gen.generate_func(""compute"", expr)
    
    print(rust_code)

Generated code: (after `cargo fmt`)

    #[inline]
    pub fn compute(a: f64, b: f64, c: f64, d: f64, e: f64, f: f64, g: f64, h: f64) -&gt; f64 {
        ((-(((3.14159265358979_f64)
            * (((((d) * ((e).recip())) + (((-(h)) + ((f) * (g))).ln())).abs()).cbrt())
            * ((c).cosh())
            * (if ((0.473417601666430_f64) * (a) * ((a) + (b) + (-(c)))).abs() == 0.0_f64 {
                1.0_f64
            } else {
                ((((0.473417601666430_f64) * (a) * ((a) + (b) + (-(c)))).sin())
                    / ((0.473417601666430_f64) * (a) * ((a) + (b) + (-(c)))))
            }))
        .tanh()))
            + ((((((b) + (((c) + (-(a))).powf(((0.333333333333333_f64) + (1.83928675521416_f64)))))
                .sqrt())
            .exp())
                + (((0.600000000000000_f64)
                    + ((4.23076923076923_f64).powf(2.71828182845905_f64))
                    + (((c) + (-(a))).powf(0.250000000000000_f64))
                    + (-(0.577215664901533_f64))
                    + (((14.1444000000000_f64) * (a)).ln()))
                .sin()))
            .abs()))
    }
    

# Comparison

Did not find other project doing similar things.

I‚Äôd love your thoughts on this project! Please click ‚≠ê if you find it useful ‚ù§Ô∏è! PR and issues are welcome ‚ù§Ô∏è",da1sypetals,1h3bn1n,https://reddit.com/r/Python/comments/1h3bn1n/generate_rust_code_for_sympy_expressions_with/,https://www.reddit.com/r/Python/comments/1h3bn1n/generate_rust_code_for_sympy_expressions_with/,2024-11-30 12:33:10,1,0.6,1,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1h3bn1n
Python,Short-Circuiting in Python,"Here is my article on [Short-Circuiting in Python](https://nolowiz.com/short-circuiting-in-python/) . It discusses what is short-circuiting with examples, and also discusses the different advantages of using short-circuiting.",simpleuserhere,1h30nsp,https://reddit.com/r/Python/comments/1h30nsp/shortcircuiting_in_python/,https://www.reddit.com/r/Python/comments/1h30nsp/shortcircuiting_in_python/,2024-11-30 00:55:38,3,0.54,3,0,10,0,0,False,False,True,False,False,Tutorial,self,t3_1h30nsp
Python,"Web Scraping Social Media Profiles [ X, Instagram, Tiktok, Youtube ]","Hi everyone!

I‚Äôve created a script for scraping public social media accounts for work purposes. I‚Äôve wrapped it up, formatted it, and created a repository for anyone who wants to use it.

# What My Project Does
The main focus of this project is to scrape data from profiles and their posts. For example:
- In my job, I‚Äôve automated it to run daily for our social media profiles, storing the data for later analysis.
- A firend of mine wanted to download all the thumbnails of a youtube channel.

# How it works
The script uses Playwright to intercept requests and clean up the data. It also includes a second part that converts images to Base64 encoding, which is useful when image URLs expire or cannot be displayed directly in an `HTML img tag`. For YouTube, it uses the API v3, as it's straightforward to obtain an API key.

I believe the script is easy to use, and you can quickly adapt it to suit your needs. Be sure to check out the README for more details!
 
# Target Audience
This tool is for anyone who needs to scrape social media data. The code is simple enough to copy, modify, and integrate into your project.

# Comparison
I haven‚Äôt extensively researched if there are better solutions out there. However, you can consider using libraries like Instaloader or Twitter-scraper for similar functionality.

# Finally
I‚Äôd love to hear your thoughts and any feedback you have.

# Links
- https://github.com/luciomorocarnero/scraping_media",Lcrack753,1h2o2n5,https://reddit.com/r/Python/comments/1h2o2n5/web_scraping_social_media_profiles_x_instagram/,https://www.reddit.com/r/Python/comments/1h2o2n5/web_scraping_social_media_profiles_x_instagram/,2024-11-29 15:21:13,13,0.74,13,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1h2o2n5
Python,Any channel or playlist that offers the same kinda content as this. ,"https://youtube.com/playlist?list=PL2W-cwk5hZgSpoezKtzlTMcrLqNHmaEP3&amp;si=0KFoBSk8YlgYqWNt

I've seen many channels but nobody offers this kinda content. They be just clickbaiting or showing random ahh content. ",Anonymous_0385,1h34xb7,https://reddit.com/r/Python/comments/1h34xb7/any_channel_or_playlist_that_offers_the_same/,https://www.reddit.com/r/Python/comments/1h34xb7/any_channel_or_playlist_that_offers_the_same/,2024-11-30 04:51:39,1,0.55,1,0,0,0,0,False,False,True,False,False,Resource,self,t3_1h34xb7
Python,spyder for macbook,"I'm rather new to python. I run some python codes on a macbook with apple chips.

  
I have a new machine and installed spyder. while i can run my codes, but there is a blurred app icon called ""REQUIRED"" after installing spyder. Is that something I have to resolve? Is spyder a good thing as I see some errors with it although it's a clean install.",5weather,1h38a61,https://reddit.com/r/Python/comments/1h38a61/spyder_for_macbook/,https://www.reddit.com/r/Python/comments/1h38a61/spyder_for_macbook/,2024-11-30 08:32:35,0,0.22,0,0,1,0,0,False,False,True,False,False,Discussion,self,t3_1h38a61
Python,"Creating a type-safe ""pipe"" function in Python","I'm interested in exploring writing Python in a more functional style, but unfortunately, the most popular libraries that offer fp utility functions (like [toolz](https://github.com/pytoolz/toolz), [funcy](https://github.com/Suor/funcy) and [returns](https://github.com/dry-python/returns)) don't include static types. (The latter tries to, but still often returns `Any`.)

This is my attempt at starting my own collection, beginning with `pipe`: [Creating a type-safe ""pipe"" function in Python](https://michaeluloth.com/python-fp-pipe/). Feedback is welcome! Along with general advice about applying fp to Python effectively.",ooloth,1h2esxo,https://reddit.com/r/Python/comments/1h2esxo/creating_a_typesafe_pipe_function_in_python/,https://www.reddit.com/r/Python/comments/1h2esxo/creating_a_typesafe_pipe_function_in_python/,2024-11-29 05:38:08,9,0.7,9,0,19,0,0,False,False,True,False,False,Tutorial,self,t3_1h2esxo
Python,Chat Application with python ,"I would be happy if anyone help to choose framework/stacks for building a chat application. I am currently using AWS Dynamodb, Amplifier, App Sync for my chat application. I have 20K+ daily active users and the setup is working so far. But, I want full control of chat application and want to migration to python. What stacks should I choose to manage a high performance chat application for a large userbase?
TIA",Mission-Prize-1005,1h2d6g8,https://reddit.com/r/Python/comments/1h2d6g8/chat_application_with_python/,https://www.reddit.com/r/Python/comments/1h2d6g8/chat_application_with_python/,2024-11-29 03:59:56,8,0.64,8,0,18,0,0,False,False,True,False,False,Discussion,self,t3_1h2d6g8
Python,What are you all-time favorite Python talks?,"I recently discovered [https://pyvideo.org/](https://pyvideo.org/) with its 19 163 talks from Python conferences. 

Do you have any favorite talks or speakers you can recommend?",dhaitz,1h1qun7,https://reddit.com/r/Python/comments/1h1qun7/what_are_you_alltime_favorite_python_talks/,https://www.reddit.com/r/Python/comments/1h1qun7/what_are_you_alltime_favorite_python_talks/,2024-11-28 07:42:08,149,0.99,149,0,31,0,0,False,False,True,False,False,Discussion,self,t3_1h1qun7
Python,Python Online IDE,"# 1. What My Project Does

This project is a sample application that integrates a language model to generate code and provides an interface for users to execute it.

# 2. Target Audience

It is built for Python enthusiasts. The purpose of integrating AI is to allow students to query the AI and practice coding at the same time. It is not meant for production use.

It can be helpful for teachers and tutors as well.

# 3. Comparison

It differs in two key ways. First, it automatically downloads the required modules based on the generated code and allows users to upload files. While it is a toy project, Google Colab already provides a 100000 times better alternative for this type of IDE. However, this project can be adapted for other programming languages, as the code execution occurs on the local machine

Code: [https://github.com/MuhammadMuneeb007/PythonOnlineIDE/](https://github.com/MuhammadMuneeb007/PythonOnlineIDE/)",Muneeb007007007,1h2rmkt,https://reddit.com/r/Python/comments/1h2rmkt/python_online_ide/,https://www.reddit.com/r/Python/comments/1h2rmkt/python_online_ide/,2024-11-29 17:59:21,0,0.27,0,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1h2rmkt
Python,"Creating an AI-powered Image Generation API Service with FLUX, Python, and Diffusers",[https://herahaven.ai/blog/creating-an-ai-powered-image-generation-api-service-with-flux-python-and-diffusers/](https://herahaven.ai/blog/creating-an-ai-powered-image-generation-api-service-with-flux-python-and-diffusers/),komninosc,1h1tx73,https://reddit.com/r/Python/comments/1h1tx73/creating_an_aipowered_image_generation_api/,https://www.reddit.com/r/Python/comments/1h1tx73/creating_an_aipowered_image_generation_api/,2024-11-28 11:25:08,28,0.73,28,0,5,0,0,False,False,True,False,False,Tutorial,self,t3_1h1tx73
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1h293f6,https://reddit.com/r/Python/comments/1h293f6/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1h293f6/friday_daily_thread_rpython_meta_and_freetalk/,2024-11-29 00:00:53,2,0.63,2,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1h293f6
Python,Neurosintesis mapping EEG brain data into sound waves,"Full code, data and audio samples: [https://github.com/itzcuintli/neurosintesis](https://github.com/itzcuintli/neurosintesis)

Some audio samples: [https://www.youtube.com/watch?v=zfuD-rfgQSw](https://www.youtube.com/watch?v=zfuD-rfgQSw)

* **What My Project Does:** Different audio mappings of EEG brain waves data recorded using a Muse 2 EEG head band.
* **Target Audience:** Some ideas for musicians, cognitive scientists, etc with inspiration taken from music, cosmology and the Vedas.
* **Comparison:** Just something I wanted to play around for a while! Things such as mapping different scales/modes to each EEG band, playing around with pulses, frequency modulation, oscillatory synthesis, things like that.

Hope you enjoy it!",___mariana___,1h25tgi,https://reddit.com/r/Python/comments/1h25tgi/neurosintesis_mapping_eeg_brain_data_into_sound/,https://www.reddit.com/r/Python/comments/1h25tgi/neurosintesis_mapping_eeg_brain_data_into_sound/,2024-11-28 21:09:41,2,0.63,2,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1h25tgi
Python,My side project has gotten 420k downloads and 69 GitHub stars (noice!),"Hey Redditors! üëã

I couldn't think of a better place to share this achievement other than here with you lot. Sometimes the universe just comes together in such a way that makes you wonder if the simulation is winking back at you...

But now that I've grabbed your attention, allow me tell you a bit about my project.

# What My Project Does

[ridgeplot](https://github.com/tpvasconcelos/ridgeplot?tab=readme-ov-file) is a Python package that provides a simple interface for plotting beautiful and interactive ridgeline plots within the extensive Plotly ecosystem.

Unfortunately, I can't share any screenshots here, but feel free to take a look at our [**getting started guide**](https://ridgeplot.readthedocs.io/en/stable/getting_started/getting_started.html) for some examples of what you can do with it.

# Target Audience

Anyone that needs to plot a ridgeline graph can use this library. That said, I expect it to be mainly used by people in the data science, data analytics, machine learning, and adjacent spaces.

# Comparison

If all you need is a simple ridgeline plot with Plotly without any bells and whistles, take a look at [this example](https://plotly.com/python/violin/#ridgeline-plot) in their official docs. However, if you need more control over how the plot looks like, like plotting multiple traces per row, using different [coloring options](https://ridgeplot.readthedocs.io/en/stable/getting_started/getting_started.html#coloring-options), or mixing [KDEs and histograms](https://github.com/tpvasconcelos/ridgeplot/issues/194#issuecomment-2500864292), then I think my library would be a better choice for you...

Other alternatives include:

* [matplotlib - example blogpost](https://matplotlib.org/matplotblog/posts/create-ridgeplots-in-matplotlib/)
* [joypy - Ridgeplot library using a matplotlib backend](https://github.com/sbebo/joypy)
* [seaborn - also using a matplotlib backend](https://seaborn.pydata.org/examples/kde_ridgeplot)
* [bokeh - using yet a different graphing backend](https://docs.bokeh.org/en/latest/docs/examples/topics/categorical/ridgeplot.html)

I [included](https://ridgeplot.readthedocs.io/en/stable/reference/alternatives.html) these alternatives in the project's documentation. Feel free to contribute more!

# Links

* Repository: [https://github.com/tpvasconcelos/ridgeplot](https://github.com/tpvasconcelos/ridgeplot)
* Docs: [https://ridgeplot.readthedocs.io/](https://ridgeplot.readthedocs.io/)",tpvasconcelos,1h1ccfu,https://reddit.com/r/Python/comments/1h1ccfu/my_side_project_has_gotten_420k_downloads_and_69/,https://www.reddit.com/r/Python/comments/1h1ccfu/my_side_project_has_gotten_420k_downloads_and_69/,2024-11-27 19:15:37,310,0.9,310,0,34,0,0,False,False,True,False,False,Showcase,self,t3_1h1ccfu
Python,Stormchaser: A Python program that collects and animates Western Pacific typhoon data.,"# What my project does:

[Stormchaser](https://github.com/TreacherousDev/Stormchaser) is a real-time typhoon visualization system. It scrapes typhoon data from the [Digital Typhoon database](http://agora.ex.nii.ac.jp/digital-typhoon/), visualizes typhoon paths on a map of the Western Pacific, and animates the data with smooth transitions, dynamic color coding based on typhoon intensity, and additional features like landfall detection, all within an interactive timeline.

# Target Audience

This project is designed for:

* People interested in typhoon tracking and data visualization.
* Educational use, demonstrating the real-world application of data scraping and visualization,

# How it differs from existing alternatives:

Stormchaser is designed for people who want an easy, user-friendly way to visualize typhoon data. No programming or editing skills is required to create animations. Just enter a date and press play, that's it! It is free and open source, and even comes packed as a[ standalone Windows executable](https://github.com/TreacherousDev/Stormchaser/releases/tag/v0.1).

# Information

The app was built using the following resources:

* beautifulsoup4 - webscraping
* cartopy - map generation
* pygame - visual output renderer

To use, simply install and input a date. It will take a while to scrape the web on the first time you input the given year, and afterwards it will redirect you to the main animation window where you can play the animation. Data scraped will be cached into your computer files so that the next time you view the same year, it doesnt have to scrape again.

Project Stormchaser is in early beta and is open to contributions.  
[https://github.com/TreacherousDev/Stormchaser](https://github.com/TreacherousDev/Stormchaser)",treacherous_dev,1h1rk2c,https://reddit.com/r/Python/comments/1h1rk2c/stormchaser_a_python_program_that_collects_and/,https://www.reddit.com/r/Python/comments/1h1rk2c/stormchaser_a_python_program_that_collects_and/,2024-11-28 08:33:00,19,0.87,19,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1h1rk2c
Python,Conversational RAG on local files (on-premises usage),"Hey everyone,

**What My Project Does:**  
That is a local conversational rag on your files. Be honest, you can use this as a rag on-premises, cause it is build with docker, langchain, ollama, fastapi, hf All models download automatically, soon I'll add an ability to choose a model For now solution contains:

* Locally running Ollama (currently qwen-0.5b model hardcoded, soon you'll be able to choose a model from ollama registry)
* Local indexing (using sentence-transformer embedding model, you can switch to other model, but only sentence-transformers applied, also will be changed soon)
* Qdrant container running on your machine
* Reranker running locally (BAAI/bge-reranker-base currently hardcoded, but i will also add an ability to choose a reranker)
* Websocket based chat with saving history
* Simple chat UI written with React
* As a plus, you can use local rag with ChatGPT as a custom GPT, so you able to query your local data through official chatgpt web and mac os/ios app.
* You can deploy it as a RAG on-premises, all containers can work on CPU machines

Couple of ideas/problems:

* Model Context Protocol support
* Right now there is no incremental indexing or reindexing
* No selection for the models (will be added soon)
* Different environment support (cuda, mps, custom npu's)

**Target Audience:**  
This project is designed for developers, as you‚Äôll need to set up Docker to get it running. Unfortunately, there‚Äôs no consumer-friendly app yet.

**Comparison**:  
The closest competitor, though already far ahead (so I doubt I can truly compete with them), is¬†**LLM Studio**.

For anyone interested in making local RAG or on-premises RAG as accessible as possible, you‚Äôre warmly invited to contribute!

Here is a link:¬†[https://github.com/dmayboroda/minima](https://github.com/dmayboroda/minima)

Thank you so much!",davidvroda,1h1qzds,https://reddit.com/r/Python/comments/1h1qzds/conversational_rag_on_local_files_onpremises_usage/,https://www.reddit.com/r/Python/comments/1h1qzds/conversational_rag_on_local_files_onpremises_usage/,2024-11-28 07:51:57,5,0.7,5,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1h1qzds
Python,PixelPurge: Game Cleanup Tool,"Hey everyone üëã

I‚Äôm excited to introduce you to **PixelPurge**, my latest side project!

# What PixelPurge Does

PixelPurge is a lightweight Python tool designed to help gamers clean up after trying new games. It‚Äôs perfect for anyone who loves testing games but hates the leftover files. It tracks new files and folders created while you play and lets you delete them effortlessly.

You can find images and details in the [project repository](https://github.com/Izaan17/PixelPurge).

# Target Audience

If you‚Äôre a gamer who frequently downloads and uninstalls new titles, you‚Äôll love PixelPurge. It‚Äôs also great for anyone who wants to reclaim storage space by ensuring no leftover game files clutter your system. While it‚Äôs aimed at Windows users, macOS users can use it too.

# Comparison

You might be thinking, ‚ÄúWhy not just manually delete leftover files?‚Äù Sure, you can, but PixelPurge takes the guesswork out of the process by:

‚Ä¢ Automatically tracking changes in monitored directories while games are running.

‚Ä¢ Providing an easy GUI for reviewing and selecting files to delete.

‚Ä¢ Supporting recursive folder monitoring so nothing is missed.

# Links

‚Ä¢ **Repository**: [https://github.com/izaan17/PixelPurge](https://github.com/izaan17/PixelPurge)

If you‚Äôre curious or have feedback, I‚Äôd love for you to check it out. Feel free to contribute, suggest features, or just share your thoughts‚Äîthis project is all about making our gaming lives easier. Thanks for reading.",HyperrNuk3z,1h1plj9,https://reddit.com/r/Python/comments/1h1plj9/pixelpurge_game_cleanup_tool/,https://www.reddit.com/r/Python/comments/1h1plj9/pixelpurge_game_cleanup_tool/,2024-11-28 06:17:34,7,0.72,7,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1h1plj9
Python,"opennb: Open Jupyter notebooks from GitHub with dependencies, instantly (with uv)!","**What My Project Does:**

[opennb](https://github.com/basnijholt/opennb) is a tiny CLI tool that lets you open Jupyter notebooks directly from GitHub (or any URL) while automatically handling dependencies in an ephemeral environment. For example:

```
uvx --with ""pipefunc[docs]"" opennb pipefunc/pipefunc/example.ipynb
```

This single command:
- Creates a temporary environment
- Installs all dependencies (instant with uv's cache!)
- Downloads the notebook
- Opens it in Jupyter

With a cold cache ü•∂ it takes 1.5s to do this all, and with a hot cache ü•µ it takes a couple of ms!

GitHub: https://github.com/basnijholt/opennb

**Target Audience:**

- Data scientists and developers who frequently try out tutorial notebooks
- Anyone learning from Jupyter notebooks in GitHub repositories
- Teachers sharing notebooks with students
- People who want to try notebooks without polluting their environment

It's meant for real use but is intentionally simple and focused on doing one thing well.

**Comparison:**

Existing workflows typically involve:
1. Cloning the entire repository
2. Creating a virtual environment
3. Installing dependencies
4. Finding and opening the notebook

This can be tedious, especially when you just want to quickly try a notebook. opennb combines these steps into a single command and leverages uv's speed to make it instant.

The closest alternative would be using Binder, but:
- Binder requires waiting for container builds
- opennb works locally and instantly
- opennb integrates with your local Jupyter installation
- No need for external services

Built on top of the amazing uv tool (https://docs.astral.sh/uv/), which makes this workflow possible through its unprecedented speed and smart caching.",basnijholt,1h1ecw7,https://reddit.com/r/Python/comments/1h1ecw7/opennb_open_jupyter_notebooks_from_github_with/,https://www.reddit.com/r/Python/comments/1h1ecw7/opennb_open_jupyter_notebooks_from_github_with/,2024-11-27 20:40:33,36,0.96,36,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1h1ecw7
Python,ASCII tree generator package,"So i was trying to create an easier way to list the files within my folder structure. Just did some side project to make this happen. Created a package to create these representations in an ascii tree and you can save them in a .md format. Do check it out and lemme know what you guys think

# What My Project Does

[Treeline](https://github.com/duriantaco/treeline) is a simple to use directory tree structure generator that can create ASCII tree representations and save them as markdown files.

# Target Audience

Anyone and everyone that needs to create their folder structure. 

# Comparison

I cant find any packages so far so i created it on my own. Next closest will be, [https://www.text-tree-generator.com/](https://www.text-tree-generator.com/)

# Link

[https://github.com/duriantaco/treeline](https://github.com/duriantaco/treeline)",papersashimi,1h1pmbh,https://reddit.com/r/Python/comments/1h1pmbh/ascii_tree_generator_package/,https://www.reddit.com/r/Python/comments/1h1pmbh/ascii_tree_generator_package/,2024-11-28 06:19:00,5,0.63,5,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1h1pmbh
Python,Open-Source AI tool for Production Engineers,"# What My Project Does:

**Thufir** is a CLI tool and Python library designed for efficient log file parsing and analysis to resolve issues in dev and production.   
  
It allows users to search for keywords, monitor logs in real-time, and uses LiteLLM to connect you to ChatGPT/Claude using your OpenAI/Anthropic API keys for summarizing and analyzing logs. 

# Target Audience:

Thufir is aimed at developers debugging applications, system administrators managing infrastructure logs, DevOps engineers monitoring CI/CD pipelines, and data analysts seeking insights from large log datasets. It's also great for anyone needing a reliable way to manage and analyze log files, whether in development or production environments.

# Comparison:

Thufir sets itself apart by combining traditional log parsing with modern AI capabilities. Unlike existing tools, it offers:

* **AI-Powered Analysis**: Summarize logs or answer questions using OpenAI or Anthropic models.
* **Real-Time Monitoring**: Automatically watch log files for updates with customizable keyword detection.
* **Flexible Interfaces**: Available as both a CLI and a Python library for versatile integration.
* **User-Friendly Configuration**: Easily manage API keys and customize log parsing options.

Its minimal footprint and AI-powered features make it a unique alternative to traditional log management tools.

# GitHub Repo:

[https://github.com/evangelosmeklis/thufir](https://github.com/evangelosmeklis/thufir)

If you have any suggestions for the project or comments on how to improve it, let me know!",_twelvechess,1h26mn2,https://reddit.com/r/Python/comments/1h26mn2/opensource_ai_tool_for_production_engineers/,https://www.reddit.com/r/Python/comments/1h26mn2/opensource_ai_tool_for_production_engineers/,2024-11-28 21:50:00,0,0.33,0,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1h26mn2
Python,"Django Protego - A Flexible and Dynamic Circuit Breaker
","**What My Project Does**

**Django Protego** implements the Circuit Breaker pattern in Django. It helps prevent service failures from propagating through your application by ""breaking"" the circuit after a specified number of consecutive failures. Once the circuit is broken, Protego will stop making requests to the failing service and return a graceful fallback response (like an error message) until the service is healthy again.

By using **Django Protego**, you can:

* Detect failures early: When external services or APIs start to fail, Protego can detect this and break the circuit.
* Gracefully degrade: Instead of letting failures cascade, Protego will return a preconfigured fallback response (e.g., a 503 Service Unavailable) to users.
* Retry after a delay: Protego will attempt to restore the service by retrying the request after a set timeout, once the failure threshold is cleared.

**Target Audience**

Django Protego is built for small to medium size Django projects that are urgent need for circuit breaker pattern for their APIs.

Link: [https://github.com/grandimam/django-protego](https://github.com/grandimam/django-protego)",grandimam,1h1924d,https://reddit.com/r/Python/comments/1h1924d/django_protego_a_flexible_and_dynamic_circuit/,https://www.reddit.com/r/Python/comments/1h1924d/django_protego_a_flexible_and_dynamic_circuit/,2024-11-27 17:00:20,12,0.85,12,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1h1924d
Python, I made a Python signal/slot library that works like Qt but without Qt dependency,"Hi everyone!

**What My Project Does:**  
I've been working on TSignal, a library that implements Qt-style signals and slots in pure Python. It handles async operations and thread communication automatically, making it easy to build event-driven applications without pulling in heavy dependencies.

**Target Audience:**  
This is meant for production use, especially for:

* Python developers who like Qt's signal/slot pattern but don't want Qt as a dependency
* Anyone building async applications that need clean component communication
* Developers working with multi-threaded applications who want easier thread communication

**Comparison:**  
While Qt provides a robust signal/slot system, it comes with the entire Qt framework. Other alternatives like PyPubSub or RxPY exist, but TSignal is unique because it:

* Provides Qt-like syntax without Qt dependencies
* Has native asyncio integration (unlike Qt)
* Handles thread-safety automatically (simpler than manual PyPubSub threading)
* Is much lighter than RxPY while keeping the essential event handling features

Here's a quick example:

    @t_with_signals
    class Counter:
        @t_signal
        def count_changed(self):
            pass
        
        def increment(self):
            self.count += 1
            self.count_changed.emit(self.count)
    
    @t_with_signals
    class Display:
        @t_slot
        async def on_count_changed(self, value):
            print(f""Count is now: {value}"")
    
    # Connect and use
    counter = Counter()
    display = Display()
    counter.count_changed.connect(display, display.on_count_changed)
    counter.increment()  
    # Triggers async update

You can find it here: [https://github.com/TSignalDev/tsignal-python](https://github.com/TSignalDev/tsignal-python)

I'd love to hear what you think! If you're building anything with async/await or need thread communication in Python, give it a try and let me know how it works for you. Any feedback or suggestions would be super helpful!",liaddial,1h115dx,https://reddit.com/r/Python/comments/1h115dx/i_made_a_python_signalslot_library_that_works/,https://www.reddit.com/r/Python/comments/1h115dx/i_made_a_python_signalslot_library_that_works/,2024-11-27 10:15:52,28,0.87,28,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1h115dx
Python,I built an AI tool that post tweets and retweets on my behalf and save my time,"Hello all,

# I have built an AI tool that posts tweets and retweets from my Twitter account.

# What My Project Does

I have been active on Twitter for a very long time. Posting tweets and retweeting tweets on daily basis becomes a very task. So I built this AI app that does this task for me.

# Target Audience

For the developers who are looking to automate their daily tasks and that love building something using AI agents.

Technologies I used:

* [Composio](https://dub.composio.dev/O2A7OJz)¬†\- To integrate Twitter tool
* [CrewAI](https://github.com/crewAIInc/crewAI)¬†\- To configure AI functionality
* [Firebase](https://firebase.google.com/)¬†\- To perform authentication
* React+Vite - To create the UI

Workflow of app:

* First, connect the app with your Twitter account by entering credentials. Also, give the access to your Twitter account so app can post tweets from your account.
* Next, add the Compose API key in the application and link other users' Twitter accounts from which you want to repost and quote repost your tweets. You can add more than 1 user.
* Finally, generate the tweet by providing a few keywords to the application. The application will generate a tweet, with proper format and suitable hashtags. Just click post, and your tweet will be posted.

Here's full code -¬†[https://github.com/abhishekpatil4/tweetify/tree/main](https://github.com/abhishekpatil4/tweetify/tree/main)

Here's live link -¬†[https://tweetify.try.composio.dev/](https://tweetify.try.composio.dev/)

Try it out and share your valuable feedback",tsayush,1h20ipv,https://reddit.com/r/Python/comments/1h20ipv/i_built_an_ai_tool_that_post_tweets_and_retweets/,https://www.reddit.com/r/Python/comments/1h20ipv/i_built_an_ai_tool_that_post_tweets_and_retweets/,2024-11-28 17:04:34,0,0.27,0,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1h20ipv
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1h1isdo,https://reddit.com/r/Python/comments/1h1isdo/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1h1isdo/thursday_daily_thread_python_careers_courses_and/,2024-11-28 00:00:10,2,0.76,2,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1h1isdo
Python,Python and GoHigh Level Integration,I am looking to have python read a list of names from GoHigh Level CRM and this list contains names that clicked in a link I sent them through email. Then I want python to compare that list to anotherr list that I will be feeding into a folder on my computer on a daily basis and this list contains the names of people from the first list but at this point this new list will say witch of those people actually are confirmed to have signed up. Python will compare these two lists and feed the list of those confirmed people back to the CRM so they can continue on my pipeline. Can this be done? ,Gilsong719,1h1pq0x,https://reddit.com/r/Python/comments/1h1pq0x/python_and_gohigh_level_integration/,https://www.reddit.com/r/Python/comments/1h1pq0x/python_and_gohigh_level_integration/,2024-11-28 06:25:37,0,0.45,0,0,6,0,0,False,False,True,False,False,Discussion,self,t3_1h1pq0x
Python,Is there life beyond PyUnit/PyTest?,"Some years ago, there were many alternatives to just using these: [grappa](https://grappa.readthedocs.io/en/latest/intro.html#why-grappa), [behave](https://pypi.org/project/behave/), for instance, with many less-popular alternatives around and thriving.

Today, if you check Snyk Advisor for these, or simply the repo, you will find them abandoned or worse, with security issues. To be sure, checking the *Assertions* category in Pypi will give you some alternatives, a few interesting ones based in a fluent API, for instance, but none of them are even remotely as popular as these ones. [New tutorials](https://testomat.io/blog/a-guide-to-the-basics-of-python-testing-how-to-write-unit-tests-and-organize-execution-test-cases/) don't even bother in telling people to look for alternatives.

Have we arrived to a point where Python is so mature that a single framework is enough to test it all?",Sea-Bug2134,1h0yg58,https://reddit.com/r/Python/comments/1h0yg58/is_there_life_beyond_pyunitpytest/,https://www.reddit.com/r/Python/comments/1h0yg58/is_there_life_beyond_pyunitpytest/,2024-11-27 06:56:40,33,0.75,33,0,51,0,0,False,False,True,False,False,Discussion,self,t3_1h0yg58
Python,Update on pgcrud: CRUD operations for PostgreSQL,"A couple of days ago, I shared a post ([link here](https://www.reddit.com/r/Python/comments/1gy1qg7/crud_operations_for_postgresql_with_pgcrud/)) about my open-source library pgcrud. I've received a lot of positive and constructive feedback and I was even asked to give an update on some topics. Here it is:

**What My Project Does**

pgcrud is a python library that makes Create, Read, Update, and Delete (CRUD) operations for PostgreSQL simple and fast. It serves as the bridge between the PostgreSQL adapter psycopg and Pydantic, the leading library for data modelling, data serialization and validation

**Target Audience**

All python developers that are using PostgreSQL. Most of them either write raw SQL or use ORMs like SQLAlchemy or SQLModel.

**Comparison**

Cons of current methods:  
  
\- Classical ORMs are convenient but struggle handling relations. In addition, you often need separate (Pydantic) models for your output layer (API interface)  
\- Raw SQL can be repetitive and it is difficult to handle dynamic filter or sorting conditions (and I don't parametrisation but optional parameters)

pgcrud solves these problems by using powerful data annotations to in Pydantic models so that you can map any Pydantic model field to a corresponding database object. pgcrud is an abstractly declarative similar to SQLAlchemy Core but is specifically tailored PostgreSQL and with built in Pydantic support.  
  
In my Github repo you can see how you  can handle parent-children relationships with pgcrud in a single database call and recieve a list of Pydantic models as result. Essentially any ""n+1"" problem can be solved in a single database call with pgcrud.

Looking forward to your comments! Any Feedback, positive or negative, is highly appreciated!

The link to my Github Repository is here:  
[https://github.com/dakivara/pgcrud](https://github.com/dakivara/pgcrud)

If you like pgcrud, please consider starring in on GitHub! I also want to avoid spamming this subreddit in the future, so I've created a dedicated pgcrud subreddit:  
[https://www.reddit.com/r/pgcrud/](https://www.reddit.com/r/pgcrud/)

Feel free to join if you're interested! I'll be posting there more frequently and would greatly appreciate any questions or feedback there.",[deleted],1h1di9u,https://reddit.com/r/Python/comments/1h1di9u/update_on_pgcrud_crud_operations_for_postgresql/,https://www.reddit.com/r/Python/comments/1h1di9u/update_on_pgcrud_crud_operations_for_postgresql/,2024-11-27 20:03:57,2,0.6,2,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1h1di9u
Python,"Build, ship and run containers is too slow for Python ‚Äî here‚Äôs what we do instead ","I wrote an article on the motivations for our custom Python dependency resolution flow and fast serverless stack with some of the engineering details behind it. Check it out :)

https://www.bauplanlabs.com/blog/build-ship-and-run-containers-is-too-slow-for-python-and-what-we-do-about-it",yoitsnate,1h0qd22,https://reddit.com/r/Python/comments/1h0qd22/build_ship_and_run_containers_is_too_slow_for/,https://www.reddit.com/r/Python/comments/1h0qd22/build_ship_and_run_containers_is_too_slow_for/,2024-11-26 23:39:40,35,0.8,35,0,31,0,0,False,False,True,False,False,Discussion,self,t3_1h0qd22
Python,Anybody else all the sudden unable to access Python downloads at python.org?,"We have a number of jobs that download python distros from [python.org/ftp](http://python.org/ftp), and they just started failing due to Access Denied errors. Anybody else seeing this? Is this intentional? Everything in [https://www.python.org/downloads/source/](https://www.python.org/downloads/source/) is going to Access Denied

edit: Either¬†[python.org](http://python.org/)¬†got ransomeware'd or some admin pushed a bad config change. Could be infra issues too I suppose. Looks like that backlog card for saving a copy of the source for the versions we use to S3 and pulling from there just got moved to this sprint...

Issue here for tracking - [https://github.com/python/cpython/issues/127307](https://github.com/python/cpython/issues/127307)

  
edit edit: looks like it's back up again",britishbanana,1h0opoj,https://reddit.com/r/Python/comments/1h0opoj/anybody_else_all_the_sudden_unable_to_access/,https://www.reddit.com/r/Python/comments/1h0opoj/anybody_else_all_the_sudden_unable_to_access/,2024-11-26 22:25:37,43,0.85,43,0,19,0,0,False,False,True,False,False,Discussion,self,t3_1h0opoj
Python,Interface programming using abs in Python,"Hi everyone, I just wrote an article about using `abc`¬† for interface programming in python. abstract base classes (ABCs) provide a robust way to enforce contracts, ensuring consistency and reliability across implementation. It is essential for building scalable and maintainable systems. See the details here: [https://www.tk1s.com/python/interface-programming-in-python](https://www.tk1s.com/python/interface-programming-in-python) Hope you like it!",tuple32,1h0rkmn,https://reddit.com/r/Python/comments/1h0rkmn/interface_programming_using_abs_in_python/,https://www.reddit.com/r/Python/comments/1h0rkmn/interface_programming_using_abs_in_python/,2024-11-27 00:36:54,16,0.79,16,0,10,0,0,False,False,True,False,False,Tutorial,self,t3_1h0rkmn
Python,"Promptic: ""requests"" for LLMs","Promptic aims to be the ""[requests](https://requests.readthedocs.io/en/latest/)"" of LLM development -- the most productive and pythonic way to build LLM applications. It leverages [LiteLLM][litellm], so you're never locked in to an LLM provider and can switch to the latest and greatest with a single line of code. Promptic gets out of your way so you can focus entirely on building features.

https://github.com/knowsuchagency/promptic

### At a glance

- üéØ Type-safe structured outputs with Pydantic
- ü§ñ Easy-to-build agents with function calling
- üîÑ Streaming support for real-time responses
- üíæ Built-in conversation memory
- üõ†Ô∏è Error handling and retries
- üîå Extensible state management

## Installation

```bash
pip install promptic
```

## Usage

### Basics

Functions decorated with `@llm` inject arguments into the prompt. You can customize the model, system prompt, and more. Most arguments are passed directly to [litellm.completion](https://docs.litellm.ai/docs/completion/input).

```python
from promptic import llm

@llm
def translate(text, target_language=""Chinese""):
    """"""Translate '{text}' to {target_language}""""""

print(translate(""Hello world!""))
# ÊÇ®Â•ΩÔºå‰∏ñÁïåÔºÅ

@llm(
    model=""claude-3-haiku-20240307"",
    system=""You are a customer service analyst. Provide clear sentiment analysis with key points.""
)
def analyze_sentiment(text):
    """"""Analyze the sentiment of this customer feedback: {text}""""""

print(analyze_sentiment(""The product was okay but shipping took forever""))
# Sentiment: Mixed/Negative
# Key points:
# - Neutral product satisfaction
# - Significant dissatisfaction with shipping time
```

### Structured Outputs

You can use Pydantic models to ensure the LLM returns data in exactly the structure you expect. Simply define a Pydantic model and use it as the return type annotation on your decorated function. The LLM's response will be automatically validated against your model schema and returned as a Pydantic object.

```python
from pydantic import BaseModel
from promptic import llm

class Forecast(BaseModel):
    location: str
    temperature: float
    units: str

@llm
def get_weather(location, units: str = ""fahrenheit"") -&gt; Forecast:
    """"""What's the weather for {location} in {units}?""""""

print(get_weather(""San Francisco"", units=""celsius""))
# location='San Francisco' temperature=16.0 units='Celsius'
```

Alternatively, you can use JSON Schema dictionaries for more low-level validation:

```python
from promptic import llm

schema = {
    ""type"": ""object"",
    ""properties"": {
        ""name"": {
            ""type"": ""string"",
            ""pattern"": ""^[A-Z][a-z]+$"",
            ""minLength"": 2,
            ""maxLength"": 20
        },
        ""age"": {
            ""type"": ""integer"",
            ""minimum"": 0,
            ""maximum"": 120
        },
        ""email"": {
            ""type"": ""string"",
            ""format"": ""email""
        }
    },
    ""required"": [""name"", ""age""],
    ""additionalProperties"": False
}

@llm(json_schema=schema, system=""You generate test data."")
def get_user_info(name: str) -&gt; dict:
    """"""Get information about {name}""""""

print(get_user_info(""Alice""))
# {'name': 'Alice', 'age': 25, 'email': 'alice@example.com'}
```

### Agents

Functions decorated with `@llm.tool` become tools that the LLM can invoke to perform actions or retrieve information. The LLM will automatically execute the appropriate tool calls, creating a seamless agent interaction.

```python
from datetime import datetime

from promptic import llm

@llm(model=""gpt-4o"")
def scheduler(command):
    """"""{command}""""""

@scheduler.tool
def get_current_time():
    """"""Get the current time""""""
    print(""getting current time"")
    return datetime.now().strftime(""%I:%M %p"")

@scheduler.tool
def add_reminder(task: str, time: str):
    """"""Add a reminder for a specific task and time""""""
    print(f""adding reminder: {task} at {time}"")
    return f""Reminder set: {task} at {time}""

@scheduler.tool
def check_calendar(date: str):
    """"""Check calendar for a specific date""""""
    print(f""checking calendar for {date}"")
    return f""Calendar checked for {date}: No conflicts found""

cmd = """"""
What time is it? 
Also, can you check my calendar for tomorrow 
and set a reminder for a team meeting at 2pm?
""""""

print(scheduler(cmd))
# getting current time
# checking calendar for 2023-10-05
# adding reminder: Team meeting at 2023-10-05T14:00:00
# The current time is 3:48 PM. I checked your calendar for tomorrow, and there are no conflicts. I've also set a reminder for your team meeting at 2 PM tomorrow.
```

### Streaming
The streaming feature allows real-time response generation, useful for long-form content or interactive applications:

```python
from promptic import llm

@llm(stream=True)
def write_poem(topic):
    """"""Write a haiku about {topic}.""""""

print("""".join(write_poem(""artificial intelligence"")))
# Binary thoughts hum,
# Electron minds awake, learn,
# Future thinking now.
```

### Error Handling and Dry Runs

Dry runs allow you to see which tools will be called and their arguments without invoking the decorated tool functions. You can also enable debug mode for more detailed logging.

```python
from promptic import llm

@llm(
    system=""you are a posh smart home assistant named Jarvis"",
    dry_run=True,
    debug=True,
)
def jarvis(command):
    """"""{command}""""""

@jarvis.tool
def turn_light_on():
    """"""turn light on""""""
    return True

@jarvis.tool
def get_current_weather(location: str, unit: str = ""fahrenheit""):
    """"""Get the current weather in a given location""""""
    return f""The weather in {location} is 45 degrees {unit}""

print(jarvis(""Please turn the light on and check the weather in San Francisco""))
# ...
# [DRY RUN]: function_name = 'turn_light_on' function_args = {}
# [DRY RUN]: function_name = 'get_current_weather' function_args = {'location': 'San Francisco'}
# ...
```

### Resiliency

`promptic` pairs perfectly with [tenacity](https://github.com/jd/tenacity) for handling rate limits, temporary API failures, and more.

```python
from tenacity import retry, wait_exponential, retry_if_exception_type
from promptic import llm
from litellm.exceptions import RateLimitError

@retry(
    wait=wait_exponential(multiplier=1, min=4, max=10),
    retry=retry_if_exception_type(RateLimitError)
)
@llm
def generate_summary(text):
    """"""Summarize this text in 2-3 sentences: {text}""""""

generate_summary(""Long article text here..."")
```

### Memory and State Management

By default, each function call is independent and stateless. Setting `memory=True` enables built-in conversation memory, allowing the LLM to maintain context across multiple interactions. Here's a practical example using Gradio to create a web-based chatbot interface:

```python
import gradio as gr
from promptic import llm

@llm(memory=True, stream=True)
def assistant(message):
    """"""{message}""""""

def predict(message, history):
    partial_message = """"
    for chunk in assistant(message):
        partial_message += str(chunk)
        yield partial_message

with gr.ChatInterface(title=""Promptic Chatbot Demo"", fn=predict) as demo:
    # ensure clearing the chat window clears the chat history
    demo.chatbot.clear(assistant.clear)

demo.launch()
```

For custom storage solutions, you can extend the `State` class to implement persistence in any database or storage system:

```python
import json
from promptic import State, llm

class RedisState(State):
    def __init__(self, redis_client):
        super().__init__()
        self.redis = redis_client
        self.key = ""chat_history""
    
    def add_message(self, message):
        self.redis.rpush(self.key, json.dumps(message))
    
    def get_messages(self, limit=None):
        messages = self.redis.lrange(self.key, 0, -1)
        return [json.loads(m) for m in messages][-limit:] if limit else messages
    
    def clear(self):
        self.redis.delete(self.key)


@llm(state=RedisState(redis_client))
def persistent_chat(message):
    """"""Chat: {message}""""""
```

* What My Project Does

Promptic aims to be the ""[requests](https://requests.readthedocs.io/en/latest/)"" of LLM development -- the most productive and pythonic way to build LLM applications. It leverages [LiteLLM][litellm], so you're never locked in to an LLM provider and can switch to the latest and greatest with a single line of code. Promptic gets out of your way so you can focus entirely on building features.

* Target Audience

Promptic is for anyone looking to build LLM applications in Python -- both casual and enterprise users.

[litellm]: https://github.com/BerriAI/litellm
",knowsuchagency,1h0lmbk,https://reddit.com/r/Python/comments/1h0lmbk/promptic_requests_for_llms/,https://www.reddit.com/r/Python/comments/1h0lmbk/promptic_requests_for_llms/,2024-11-26 20:16:36,32,0.78,32,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1h0lmbk
Python,Python.org entire download library is inaccessible right now,"I was at work and I was using pyenv to install a virtual environment. I was having issues and was needed to retry my installs pretty frequently. Then suddenly pyenv stopped being able to curl the xz tarball from the python.org download library with 403 return code. I tried on a different network, a different computer, downloading via browser, downloading via browser on my phone. All 403. I had my coworkers try to do the same with the same results. I'm in Seattle, WA so I had someone somewhere else in the world try and they were able to access from Arizona. It seems that the PNW can't download python for the time being.

Update: 
Seems like more regions are also down. Have tried accessing with a VPN to other US regions and countries and nothing.
Arizona person is also down now too

Update 2: it's back up as of 15:26 PST",TheHerosShade,1h0oxlt,https://reddit.com/r/Python/comments/1h0oxlt/pythonorg_entire_download_library_is_inaccessible/,https://www.reddit.com/r/Python/comments/1h0oxlt/pythonorg_entire_download_library_is_inaccessible/,2024-11-26 22:35:16,10,0.71,10,0,8,0,0,False,False,True,False,False,News,self,t3_1h0oxlt
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1h0qsi6,https://reddit.com/r/Python/comments/1h0qsi6/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1h0qsi6/wednesday_daily_thread_beginner_questions/,2024-11-27 00:00:09,7,0.9,7,0,3,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1h0qsi6
Python,Built a research automation API that replaces messy web scraping scripts,"Hey devs! Wanted to share a solution I built after getting frustrated with maintaining multiple scraping scripts.

**The Problem**:
- Different sites need different scraping approaches
- Sites change their structure frequently
- Managing rate limiting and proxies is a pain
- Selenium/Playwright maintenance headaches

**The Solution**:

Built a Python agent API that returns structured JSON for specific queries.

Example:

    import requests
    
    # Instead of complex scraping logic
    response = requests.post('&lt;endpoint&gt;', {
        'query': 'find a therapist in Toronto that does virtual sessions and specializes in ADHD',
        'start_url': (optional)
    })
    
    # Get clean, structured JSON back
    result = response.json()

    {
            jobId: ""job_123456"",
            status: ""completed"",
            results: [
              {
                name: ""Dr. Emily Chen"",
                specialization: ""ADHD, Anxiety"",
                location: ""New York"",
                virtualSessions: true,
                availability: ""Mon, Wed, Fri"",
              },
              {
                name: ""Michael Thompson, MSW"",
                specialization: ""ADHD, Depression"",
                location: ""New York"",
                virtualSessions: true,
                availability: ""Tue, Thu, Sat"",
              },
              {
                name: ""Sarah Patel, PhD"",
                specialization: ""ADHD, Cognitive Behavioral Therapy"",
                location: ""New York"",
                virtualSessions: true,
                availability: ""Mon, Tue, Thu"",
              },
            ],
            sources: [""https://mentalhealthmatch.com""],
         }

Currently building the **[beta](https://query-rho.vercel.app/)** - would love feedback from fellow devs about what research / query tasks you'd want to automate.

Also open sourcing some tools as I build this:

* https://github.com/addy999/omniparser-api

EDIT

* Added in start_url
* Added in response example
* Added in sources",spacespacespapce,1h0kph4,https://reddit.com/r/Python/comments/1h0kph4/built_a_research_automation_api_that_replaces/,https://www.reddit.com/r/Python/comments/1h0kph4/built_a_research_automation_api_that_replaces/,2024-11-26 19:40:08,8,0.7,8,0,5,0,0,False,False,True,False,False,Resource,self,t3_1h0kph4
Python,I made a Report Generation and Project Management Tool [Django Rest],"Hi, I recently released my open-source project APTRS (Automated Penetration Testing Reporting System). It is an automated pentest report generation application built with the Django Rest framework.

  
**What it does:**

* Enables users to create and manage projects while tracking their statuses. 
* Management of customers and their respective projects, as well as any associated security vulnerabilities. 
* Users can generate project reports in Word using a custom template, as well as in PDF and Excel formats.
* Additionally, the application allows users to use the WYSIWYG CKEDITOR to input data and document vulnerabilities for report creation.

  
**Target Audience:**

* Individual Security Consultant
* Cyber Security Companies to manage projects and clients and create a report 

Many similar tools exist, but most Python-based options do not support custom word templates. APTRS stands out by focusing on company needs with features for project management and status tracking. It also plans to introduce customer login functionality, a feature lacking in other open-source tools.

**Tech Stack:**

* Python 3.9+ with Django Rest Framework
* Postgresql
* Redis
* Vite + React Frontend

  
Here's the source:¬†[APTRS](https://github.com/APTRS/APTRS)

  
In case you're interested, I have demo instances hosted in the cloud available at: [https://live.aptrs.com/](https://live.aptrs.com/)  (Default creds are¬†[sourav.kalal@aptrs.com](mailto:sourav.kalal@aptrs.com)¬†&amp; I-am-Weak-Password-Please-Change-Me) - Some APIs are disabled on Demo for security reasons. ",Ano_F,1h0g0us,https://reddit.com/r/Python/comments/1h0g0us/i_made_a_report_generation_and_project_management/,https://www.reddit.com/r/Python/comments/1h0g0us/i_made_a_report_generation_and_project_management/,2024-11-26 16:32:23,7,0.77,7,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1h0g0us
Python,Python Imports... just why! ü•∂,"Forgive me, today I'm just here to friendly rant a bitü§ì... Python's manner of handling imports is just üôÑ. One minute everything is working fine and the next minute ModuleNotFoundError: No module named... The slightest refactoring can endup a day of wanting to smash your keyboardü•∂. And no, \_\_init\_\_.py isn't always the magic stick.‚ú®

After coming back to python from using Flutter/Dart (where a file simply works as a package) to do some backend work, I'm reminded just how imports can be one of those python-things that just ruin your day; you have to be extremely mindful in python with your import style.

Share your thoughts and experience on this topic... you might give me some peace of mind or.... maybe some more wrath.üôÉ",DigiProductive,1h17dpb,https://reddit.com/r/Python/comments/1h17dpb/python_imports_just_why/,https://www.reddit.com/r/Python/comments/1h17dpb/python_imports_just_why/,2024-11-27 15:49:32,0,0.28,0,0,51,0,0,False,False,True,False,False,Discussion,self,t3_1h17dpb
Python,"What do you think is the most visually appealing or 'good-looking' Python GUI library, and why?","I‚Äôm looking for a GUI library that provides a sleek and modern interface with attractive, polished design elements. Ideally, it should support custom styling and look aesthetically pleasing out-of-the-box. Which libraries would you recommend for creating visually appealing desktop applications in Python?",UnemployedTechie2021,1gzmv9p,https://reddit.com/r/Python/comments/1gzmv9p/what_do_you_think_is_the_most_visually_appealing/,https://www.reddit.com/r/Python/comments/1gzmv9p/what_do_you_think_is_the_most_visually_appealing/,2024-11-25 16:28:17,246,0.94,246,0,116,0,0,False,False,True,False,False,Discussion,self,t3_1gzmv9p
Python,Goal Screener (my first python app) ,"* **What My Project Does**
   * it takes your quests/goals as main and side and a picture, then it simply draw them on it and make it the background picture so you can visualize your quests, besides that in the app you can see the list of your goals and track one of them.
* **Target Audience:**
   * this project was meant for my own needs and to help some people boost their productivity to reach their goals
* **Comparison**:
   * i really didn't look that much for comparison but i think there is some extensions or widget to do that especially on phone, no one  draws on the background l  think, the idea is that backgrounds let you see your goals more often that's why i did it this way

here's the link to the code [github ](https://github.com/L4z3x/goal_screener/) if anyone's interested, and remember to give me your feedback so i can develop my skills for future projects",L4z3x,1h064ct,https://reddit.com/r/Python/comments/1h064ct/goal_screener_my_first_python_app/,https://www.reddit.com/r/Python/comments/1h064ct/goal_screener_my_first_python_app/,2024-11-26 07:12:46,16,0.84,16,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1h064ct
Python,Stock Etf Tracker,"having trouble with the dates being accuratly measured. LMK if anyone knows what the problem is

[https://colab.research.google.com/drive/1Lx4XVyRB8O7gSn9ezcWDhC0RS3Yd--61?usp=sharing](https://colab.research.google.com/drive/1Lx4XVyRB8O7gSn9ezcWDhC0RS3Yd--61?usp=sharing)",Ok-Network-74,1h0tr0k,https://reddit.com/r/Python/comments/1h0tr0k/stock_etf_tracker/,https://www.reddit.com/r/Python/comments/1h0tr0k/stock_etf_tracker/,2024-11-27 02:25:48,0,0.45,0,0,5,0,0,False,False,True,False,False,Discussion,self,t3_1h0tr0k
Python,error: use of undeclared identifier 'BPF_SK_LOOKUP'; did you mean 'BPF_F_LOCK'?,"the machine: 4.18.0-240.el8.x86\_64, bpftrace v0.10.0,  Centos8.3

when I  run

In file included from /virtual/main.c:3:

In file included from include/net/sock.h:13:

In file included from include/linux/netdevice.h:19:

In file included from include/net/net\_namespace.h:35:

In file included from include/net/netns/bpf.h:7:

include/linux/bpf-netns.h:21:7: error: use of undeclared identifier 'BPF\_SK\_LOOKUP'; did you mean 'BPF\_F\_LOCK'?

case BPF\_SK\_LOOKUP:

\^\~\~\~\~\~\~\~\~\~\~\~\~

BPF\_F\_LOCK

/virtual/include/bcc/bpf.h:338:2: note: 'BPF\_F\_LOCK' declared here

BPF\_F\_LOCK      = 4, /\* spin\_lock-ed map\_lookup/map\_update \*/

\^

In file included from /virtual/main.c:3:

In file included from include/net/sock.h:13:

In file included from include/linux/netdevice.h:23:

In file included from include/net/netprio\_cgroup.h:6:

In file included from include/linux/cgroup.h:22:

In file included from include/linux/cgroup-defs.h:17:

In file included from include/linux/bpf-cgroup.h:7:

include/linux/bpf.h:809:21: error: field has incomplete type 'enum bpf\_link\_type'

enum bpf\_link\_type type;

\^

include/linux/bpf.h:809:7: note: forward declaration of 'enum bpf\_link\_type'

enum bpf\_link\_type type;

\^

include/linux/bpf.h:823:17: warning: declaration of 'struct bpf\_link\_info' will not be visible outside of this function \[-Wvisibility\]

struct bpf\_link\_info \*info);

\^

include/linux/bpf.h:1220:12: warning: declaration of 'union bpf\_iter\_link\_info' will not be visible outside of this function \[-Wvisibility\]

union bpf\_iter\_link\_info \*linfo,

\^

include/linux/bpf.h:1226:14: warning: declaration of 'struct bpf\_link\_info' will not be visible outside of this function \[-Wvisibility\]

struct bpf\_link\_info \*info);

\^

include/linux/bpf.h:1269:12: warning: declaration of 'struct bpf\_link\_info' will not be visible outside of this function \[-Wvisibility\]

struct bpf\_link\_info \*info);

  
\#!/usr/bin/python

\#

\# tcpv4connect  Trace TCP IPv4 connect()s.

\#       For Linux, uses BCC, eBPF. Embedded C.

\#

\# USAGE: tcpv4connect \[-h\] \[-t\] \[-p PID\]

\#

\# This is provided as a basic example of TCP connection &amp; socket tracing.

\#

\# All IPv4 connection attempts are traced, even if they ultimately fail.

\#

\# Copyright (c) 2015 Brendan Gregg.

\# Licensed under the Apache License, Version 2.0 (the ""License"")

\#

\# 15-Oct-2015   Brendan Gregg   Created this.



from \_\_future\_\_ import print\_function

from bcc import BPF



\# define BPF program

bpf\_text = """"""

\#include &lt;uapi/linux/ptrace.h&gt;

\#include &lt;net/sock.h&gt;

\#include &lt;bcc/proto.h&gt;



BPF\_HASH(currsock, u32, struct sock \*);



int kprobe\_\_tcp\_v4\_connect(struct pt\_regs \*ctx, struct sock \*sk)

{

u32 pid = bpf\_get\_current\_pid\_tgid();



// stash the sock ptr for lookup on return

currsock.update(&amp;pid, &amp;sk);



return 0;

};



int kretprobe\_\_tcp\_v4\_connect(struct pt\_regs \*ctx)

{

int ret = ctx-&gt;ax;

u32 pid = bpf\_get\_current\_pid\_tgid();



struct sock \*\*skpp;

skpp = currsock.lookup(&amp;pid);

if (skpp == 0) {

return 0;   // missed entry

}



if (ret != 0) {

// failed to send SYNC packet, may not have populated

// socket \_\_sk\_common.{skc\_rcv\_saddr, ...}

currsock.delete(&amp;pid);

return 0;

}



// pull in details

struct sock \*skp = \*skpp;

u32 saddr = 0, daddr = 0;

u16 dport = 0;

bpf\_probe\_read(&amp;saddr, sizeof(saddr), &amp;skp-&gt;\_\_sk\_common.skc\_rcv\_saddr);

bpf\_probe\_read(&amp;daddr, sizeof(daddr), &amp;skp-&gt;\_\_sk\_common.skc\_daddr);

bpf\_probe\_read(&amp;dport, sizeof(dport), &amp;skp-&gt;\_\_sk\_common.skc\_dport);



// output

bpf\_trace\_printk(""trace\_tcp4connect %x %x %d\\\\n"", saddr, daddr, ntohs(dport));



currsock.delete(&amp;pid);



return 0;

}

""""""



\# initialize BPF

b = BPF(text=bpf\_text)



\# header

print(""%-6s %-12s %-16s %-16s %-4s"" % (""PID"", ""COMM"", ""SADDR"", ""DADDR"",""DPORT""))



def inet\_ntoa(addr):

dq = ''

for i in range(0, 4):

dq = dq + str(addr &amp; 0xff)

if (i != 3):

dq = dq + '.'

addr = addr &gt;&gt; 8

return dq



\# filter and format output

while 1:

\# Read messages from kernel pipe

try:

(task, pid, cpu, flags, ts, msg) = b.trace\_fields()

(\_tag, saddr\_hs, daddr\_hs, dport\_s) = msg.split("" "")

except ValueError:

\# Ignore messages from other tracers

continue



\# Ignore messages from other tracers

if \_tag != ""trace\_tcp4connect"":

continue



print(""%-6d %-12.12s %-16s %-16s %-4s"" % (pid, task,inet\_ntoa(int(saddr\_hs, 16)),inet\_ntoa(int(daddr\_hs, 16)),dport\_s))",Warm-Tea-403,1h0ukew,https://reddit.com/r/Python/comments/1h0ukew/error_use_of_undeclared_identifier_bpf_sk_lookup/,https://www.reddit.com/r/Python/comments/1h0ukew/error_use_of_undeclared_identifier_bpf_sk_lookup/,2024-11-27 03:08:34,0,0.14,0,0,2,0,0,False,False,True,False,False,Discussion,self,t3_1h0ukew
Python,How important is software testing to you as a Python developer? üêçü§î,"Hey Pythonistas! üëã

In the world of software development, we often talk about shiny new frameworks, libraries, and cool features ‚Äì but what about software testing?

I‚Äôm curious:

- Where does testing sit on your list of priorities?
- Do you use tools like Pytest, Unittest, or even CI/CD pipelines to automate your testing?
- Do you feel like testing helps you code faster and better ‚Äì or is it more of a chore for you?

With Python, writing tests is so straightforward it‚Äôs almost fun (almost, right? üòÖ). Personally, I find that testing not only reduces bugs but also boosts my confidence in the code, especially with larger projects.

What about you? Do you test everything religiously, just the critical stuff, or are you more like, ‚ÄúTesting? Never heard of it.‚Äù

Let‚Äôs chat about best practices, tools, and your experiences ‚Äì we might all learn something new! üöÄ

Looking forward to hearing your thoughts. üôå",ah3n0,1h0kjcy,https://reddit.com/r/Python/comments/1h0kjcy/how_important_is_software_testing_to_you_as_a/,https://www.reddit.com/r/Python/comments/1h0kjcy/how_important_is_software_testing_to_you_as_a/,2024-11-26 19:33:21,0,0.29,0,0,10,0,0,False,False,True,False,False,Discussion,self,t3_1h0kjcy
Python,What do you think of front-end python libraries such as Reflex (old Pynecone)?,"As a doctor, Python has been really useful for me in a bunch of ways. Lately, I\`ve been trying to learn web development, saw some Flask/Jinja/HTML/CSS tutorials, but doing anything without javascript seems very clunky and unnatural. 

  
Then, I saw this library called REFLEX (old Pynecone). Seems very beautiful and powerful.. 



The thing is. Is it worth for me to use my limited time to learn a framework like this or should I just go ahead and learn Javascript/React already?

  
What do you guys think? I won\`t be a professional developer.",Sones_d,1gznoub,https://reddit.com/r/Python/comments/1gznoub/what_do_you_think_of_frontend_python_libraries/,https://www.reddit.com/r/Python/comments/1gznoub/what_do_you_think_of_frontend_python_libraries/,2024-11-25 17:00:58,17,0.82,17,0,37,0,0,False,False,True,False,False,Discussion,self,t3_1gznoub
Python,What do you guys think of this Python course?,What do you guys think of 100 days of python by dr. angela yu? im looking to get into data science/engineering through learning these skills n python. or do u guys have/suggest any better courses? :),Gloomy-Profession-19,1h0ij26,https://reddit.com/r/Python/comments/1h0ij26/what_do_you_guys_think_of_this_python_course/,https://www.reddit.com/r/Python/comments/1h0ij26/what_do_you_guys_think_of_this_python_course/,2024-11-26 18:13:18,0,0.35,0,0,16,0,0,False,False,True,False,False,Discussion,self,t3_1h0ij26
Python,Improving GroupBy.map with Dask and Xarray,"I'm a Dask contributor and wanted to share some recent improvements on using Dask + Xarray for working with large geo datasets.

Over the past couple months, there's been more work on the array integration for Dask, with a focus on geospatial workloads. Running GroupBy-Map patterns backed by Dask arrays is essential for a number of tasks when working with large climate/weather data, like detrending or zonal averaging. The latest version of Dask uses a new algorithm for selecting data that‚Äôs more robust and we're already seeing improved performance.

We are actively working on improvements and are interested in feedback. Feel free to [reach out](https://docs.dask.org/en/stable/support.html#asking-for-help) and let us know if things aren't working for you.

Blog post: [https://docs.coiled.io/blog/dask-detrending.html](https://docs.coiled.io/blog/dask-detrending.html)",already-raining,1gznukm,https://reddit.com/r/Python/comments/1gznukm/improving_groupbymap_with_dask_and_xarray/,https://www.reddit.com/r/Python/comments/1gznukm/improving_groupbymap_with_dask_and_xarray/,2024-11-25 17:07:14,14,0.85,14,0,0,0,0,False,False,True,False,False,News,self,t3_1gznukm
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1gzy1hi,https://reddit.com/r/Python/comments/1gzy1hi/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1gzy1hi/tuesday_daily_thread_advanced_questions/,2024-11-26 00:00:11,2,0.76,2,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gzy1hi
Python,I made a Spotify ‚Üí YouTube Music converter that doesn't need API keys! [GUI],"Hey r/python! After Spotify decided to make their mobile app practically unusable for free users, my friend u/zakede and I decided to switch to YT Music. With our huge libraries, we needed something to convert our playlists, so we made this. It works with a Web GUI (made in FastHTML), and did I mention you don't need any API or OAuth keys?

**What it does:**

* Transfers your Spotify playlists/albums/liked songs to YouTube Music
* Has a simple Web GUI
* Better song search than the default YouTube one (at least in my testing)
* No API keys needed

**Target Audience:** This is for anyone who:

* Is switching from Spotify to YouTube Music
* Wants to maintain libraries on both platforms (Library sync is on the roadmap)
* Is tired of copying playlists manually
* Doesn't want to mess with API keys

**How it's different:** Most existing tools either:

* Require you to get API keys and do OAuth (which is currently [broken](https://github.com/sigma67/ytmusicapi/issues/676) for YT Music)
* Are online services that are slow and have low limits (the one I tried only allowed 150 songs per playlist and a total of 5 playlists)
* Are CLI-only

Here's the source: [spotify-to-ytm](https://github.com/Kan1shak/spotify-to-ytm)

Would love to hear your thoughts! Let me know if you try it out",Kanishak404,1gz2vhf,https://reddit.com/r/Python/comments/1gz2vhf/i_made_a_spotify_youtube_music_converter_that/,https://www.reddit.com/r/Python/comments/1gz2vhf/i_made_a_spotify_youtube_music_converter_that/,2024-11-24 22:03:42,117,0.94,117,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1gz2vhf
Python,Sou iniciante n mundo da progrma√ß√£o,O que voc√™s que j√° tem mais experi√™ncia acham que deve estudar e por onde devo come√ßar no estudo de Python. Se poss√≠vel indique conteudo de leitura.,Confident_Coat_5595,1h0aomx,https://reddit.com/r/Python/comments/1h0aomx/sou_iniciante_n_mundo_da_progrma√ß√£o/,https://www.reddit.com/r/Python/comments/1h0aomx/sou_iniciante_n_mundo_da_progrma√ß√£o/,2024-11-26 12:27:19,0,0.17,0,0,8,0,0,False,False,True,False,False,Discussion,self,t3_1h0aomx
Python,nxt-python and pyusb on OpenSuse Linux,"I have a mindstorm NXT lying around in the house that my kinds used for school several years ago.  I tought of interfacing it with python.  I downloaded the nxt-python.  It uses pyusb.  When I tested it out with the tutorial from [https://ni.srht.site/nxt-python/latest/handbook/tutorial.html](https://ni.srht.site/nxt-python/latest/handbook/tutorial.html) and tried to locate the device using the following code:

    #!/usr/bin/python3
    """"""NXT-Python tutorial: use touch sensor.""""""
    import time
    
    import nxt.locator
    import nxt.sensor
    import nxt.sensor.generic
    
    with nxt.locator.find() as b:
        
    # Get the sensor connected to port 1, not a digital sensor, must give the sensor
        
    # class.
        mysensor = b.get_sensor(nxt.sensor.Port.S1, nxt.sensor.generic.Touch)
        
    # Read the sensor in a loop (until interrupted).
        print(""Use Ctrl-C to interrupt"")
        while True:
            value = mysensor.get_sample()
            print(value)
            time.sleep(0.5)

and I get an error on the nxt.locator.find().  Any pointers, anyone?   The following is the error I am getting:

`usb.core.USBError: [Errno 13] Access denied (insufficient permissions)`

`Here is the complete log.  I redacted the userame with xxxxxx.`

      File ""/home/xxxxxx/workspace/nxt/play/locate.py"", line 9, in &lt;module&gt;
        with nxt.locator.find() as b:
             ~~~~~~~~~~~~~~~~^^
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/nxt/locator.py"", line 213, in find
        brick = next(iter_bricks(), None)
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/nxt/locator.py"", line 191, in iter_bricks
        for brick in backend.find(name=name, host=host, **filters):
                     ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/nxt/backend/usb.py"", line 107, in find
        brick = sock.connect()
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/nxt/backend/usb.py"", line 61, in connect
        self._dev.reset()
        ~~~~~~~~~~~~~~~^^
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/usb/core.py"", line 959, in reset
        self._ctx.managed_open()
        ~~~~~~~~~~~~~~~~~~~~~~^^
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/usb/core.py"", line 113, in wrapper
        return f(self, *args, **kwargs)
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/usb/core.py"", line 131, in managed_open
        self.handle = self.backend.open_device(self.dev)
                      ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/usb/backend/libusb1.py"", line 804, in open_device
        return _DeviceHandle(dev)
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/usb/backend/libusb1.py"", line 652, in __init__
        _check(_lib.libusb_open(self.devid, byref(self.handle)))
        ~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/usb/backend/libusb1.py"", line 604, in _check
        raise USBError(_strerror(ret), ret, _libusb_errno[ret])
    usb.core.USBError: [Errno 13] Access denied (insufficient permissions)
    
    --end--
    ",thuruthy,1gztwtn,https://reddit.com/r/Python/comments/1gztwtn/nxtpython_and_pyusb_on_opensuse_linux/,https://www.reddit.com/r/Python/comments/1gztwtn/nxtpython_and_pyusb_on_opensuse_linux/,2024-11-25 21:06:55,1,0.56,1,0,1,0,0,False,False,True,False,False,Discussion,self,t3_1gztwtn
Python,Can Your Networking Library Do This,"I've been using a networking library for a while and getting some value out it. Especially when I'm dealing with complex collections of process, i.e. distributed processing. It turns out that some wacky ideas actually work, and as far as I know, dont work with any other tools. Here is the repo;

[Can your networking library do this](https://github.com/mr-ansar/can-your-networking-library-do-this)

This repo demonstrates what you might do once you have OSI application layering and a pretty fresh approach to network addressing, i.e. not IPv4, IPv6 or socket id or request id or channel id.

Please find a link to a blog in the README that describes what to do with the modules. Does anyone claim that there is an equivalent, or better? Does anyone think that this kind of capability is missing from current toolsets?",Public_Being3163,1h04rcp,https://reddit.com/r/Python/comments/1h04rcp/can_your_networking_library_do_this/,https://www.reddit.com/r/Python/comments/1h04rcp/can_your_networking_library_do_this/,2024-11-26 05:43:17,0,0.36,0,0,11,0,0,False,False,True,False,False,Discussion,self,t3_1h04rcp
Python,Generate a gradient between 2 colors in python.,"Saving this here for future people. This method relies on a library i made called [hueforge](https://github.com/Schkimansky/Hueforge):

Installation: pip install hueforge  
Code:

    from hueforge import Color
    
    starting_color = Color('red')  # You can use other color formats. to see all check the readme file
    ending_color = Color('orange red')
    print(starting_color.gradient(to=ending_color, steps=5))",Tall_Coffee_1644,1gzdra0,https://reddit.com/r/Python/comments/1gzdra0/generate_a_gradient_between_2_colors_in_python/,https://www.reddit.com/r/Python/comments/1gzdra0/generate_a_gradient_between_2_colors_in_python/,2024-11-25 07:51:17,9,0.62,9,0,18,0,0,False,False,True,False,False,Resource,self,t3_1gzdra0
Python,I Wrote a Guide to Simulation in Python with SimPy,"Hi folks,

I wrote a guide on discrete-event simulation with [SimPy](https://simpy.readthedocs.io/en/latest/), designed to help you learn how to build simulations using Python. Kind of like the official documentation but on steroids.

I have used SimPy personally in my own career for over a decade, it was central in helping me build a [pretty successful engineering career](https://www.reddit.com/r/MechanicalEngineering/comments/1gh8at0/my_13_year_nontraditional_meche_career_journey/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button). Discrete-event simulation is useful for modelling real world industrial systems such as factories, mines, railways, etc.

My latest venture is teaching others all about this.

If you do get the guide, I‚Äôd really appreciate any feedback you have. Feel free to drop your thoughts here in the thread or DM me directly!

Here‚Äôs the link to get the guide: [https://simulation.teachem.digital/free-simulation-in-python-guide](https://simulation.teachem.digital/free-simulation-in-python-guide)

For full transparency, why do I ask for your email?

Well I‚Äôm working on a full course following on from my previous [Udemy course on Python](https://www.udemy.com/course/python-for-engineers-scientists-and-analysts/?referralCode=8E30A5C432085F42D090). This new course will be all about real-world modelling and simulation with SimPy, and I‚Äôd love to send you keep you in the loop via email. If you found the guide helpful you would might be interested in the course. That said, you‚Äôre completely free to hit ‚Äúunsubscribe‚Äù after the guide arrives if you prefer.",bobo-the-merciful,1gz3bgp,https://reddit.com/r/Python/comments/1gz3bgp/i_wrote_a_guide_to_simulation_in_python_with_simpy/,https://www.reddit.com/r/Python/comments/1gz3bgp/i_wrote_a_guide_to_simulation_in_python_with_simpy/,2024-11-24 22:22:55,33,0.81,33,0,11,0,0,False,False,True,False,False,Tutorial,self,t3_1gz3bgp
Python,Im getting an error on the script bellow,"The error:

File ""/home/kali1/reddit\_bypass.py"", line 6

""User-Agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"" 1

\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^

SyntaxError: invalid syntax. Perhaps you forgot a comma?

My script:

import requests

def bypass\_reddit\_login(username):

url = ""[https://www.reddit.com/login](https://www.reddit.com/login)""

headers = {

""User-Agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36""

}

data = {

""username"": username,

""password"": """" # Empty password field

}

response = requests.post(url, headers=headers, data=data)

if response.status\_code == 200:

print(""Login successful!"")

else:

print(""Login failed. Check your username or internet connection."")

if \_\_name\_\_ == ""\_\_main\_\_"":

username = input(""Enter your Reddit username: "")

bypass\_reddit\_login(username)",Quick_Elk3813,1h0259u,https://reddit.com/r/Python/comments/1h0259u/im_getting_an_error_on_the_script_bellow/,https://www.reddit.com/r/Python/comments/1h0259u/im_getting_an_error_on_the_script_bellow/,2024-11-26 03:18:09,0,0.3,0,0,5,0,0,False,False,True,False,False,Meta,self,t3_1h0259u
Python,"Benchmark: DuckDB, Polars, Pandas, Arrow, SQLite, NanoCube on filtering / point queryies ","While working on the [NanoCube project](https://github.com/nanocubeai/nanocube), an in-process OLAP-style query engine written in Python, I needed a baseline **performance comparison** against the most prominent in-process data engines: DuckDB, Polars, Pandas, Arrow and SQLite. I already had a comparison with Pandas, but now I have it for all of them. My findings:

* A purpose-built technology (here OLAP-style queries with NanoCube) written in Python can be faster than general purpose high-end solutions written in C.
* A fully index SQL database is still a thing, although likely a bit outdated for modern data processing and analysis.
* DuckDB and Polars are awesome technologies and best for large scale data processing.
* **Sorting of data matters!** **Do it! Always!** If you can afford the time/cost to sort your data before storing it. Especially DuckDB and Nanocube deliver significantly faster query times.

The [**full comparison**](https://github.com/nanocubeai/nanocube/tree/main#nanocube-benchmarks) with many **very nice charts** can be found in the [**NanoCube GitHub repo**](https://github.com/nanocubeai/nanocube?tab=readme-ov-file#nanocube-benchmarks). Maybe it's of interest to some of you. Enjoy...

|    | technology       |   duration_sec |   factor |
|---:|:-----------------|---------------:|---------:|
|  0 | NanoCube         |          0.016 |    1     |
|  1 | SQLite (indexed) |          0.137 |    8.562 |
|  2 | Polars           |          0.533 |   33.312 |
|  3 | Arrow            |          1.941 |  121.312 |
|  4 | DuckDB           |          4.173 |  260.812 |
|  5 | SQLite           |         12.565 |  785.312 |
|  6 | Pandas           |         37.557 | 2347.31  |

The table above shows the duration for 1000x point queries on the `car_prices_us` dataset (available on [kaggle.com](https://www.kaggle.com)) containing 16x columns and 558,837x rows. The query is highly selective, filtering on 4 dimensions `(model='Optima', trim='LX', make='Kia', body='Sedan')` and aggregating column `mmr`. The factor is the speedup of NanoCube vs. the respective technology. Code for all benchmarks is linked in the readme file.",Psychological-Motor6,1gyoi7n,https://reddit.com/r/Python/comments/1gyoi7n/benchmark_duckdb_polars_pandas_arrow_sqlite/,https://www.reddit.com/r/Python/comments/1gyoi7n/benchmark_duckdb_polars_pandas_arrow_sqlite/,2024-11-24 11:00:22,162,0.95,162,0,40,0,0,False,False,True,False,False,Showcase,self,t3_1gyoi7n
Python,Python scrip to standalone GUI .exe dependency issues. Tried several modules.,"It always throws some module missing while comiling or after running the exe file. tried nuitka, auto-py-to-exe and few others.... here's the list of library my script uses: 

    import sys
    import os
    from PySide6.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, 
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†QPushButton, QFileDialog, QWidget, QLabel, QComboBox, 
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†QCheckBox, QTreeWidget, QTreeWidgetItem, QTextEdit, 
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†QColorDialog, QMessageBox, QDialog, QFormLayout, QScrollArea,
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†QSpinBox)
    from PySide6.QtGui import QAction, QColor, QDragEnterEvent, QDropEvent
    from PySide6.QtCore import Qt, QMimeData
    import geopandas as gpd
    import matplotlib.pyplot as plt
    from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
    from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
    import contextily as ctx
    ",Alone_Swimming_3705,1gzh717,https://reddit.com/r/Python/comments/1gzh717/python_scrip_to_standalone_gui_exe_dependency/,https://www.reddit.com/r/Python/comments/1gzh717/python_scrip_to_standalone_gui_exe_dependency/,2024-11-25 11:59:00,0,0.43,0,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1gzh717
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1gz5fou,https://reddit.com/r/Python/comments/1gz5fou/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1gz5fou/monday_daily_thread_project_ideas/,2024-11-25 00:00:08,8,0.76,8,0,2,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gz5fou
Python,Inviting contributors to an open source project - AI Dashboard Builder,"**Introducing the AI Dashboard Builder**

[pnmartinez/ai-dashboard-builder: Throw your data, let AI make a dashboard](https://github.com/pnmartinez/ai-dashboard-builder)

[AI Dashboard Builder](https://github.com/pnmartinez/ai-dashboard-builder) is an open-source tool designed to simplify the creation of data dashboards using AI. Our motto is: *""Throw your data, let AI make a dashboard.""* By leveraging Large Language Models (LLMs), the project automates the generation of intuitive and interactive dashboards from your datasets.

**What My Project Does**

The AI Dashboard Builder automates the process of creating dashboards by:

* **KPI-Directed Analysis**: Prioritizes your key performance indicators within the dataset using AI.
* **Data Preview and Filtering**: Offers an import wizard to preview data and filter by columns or rows.
* **Dynamic Filters**: Uses AI to infer the most relevant filters for your data dynamically.
* **Custom LLM Support**: Allows integration with your preferred third-party LLMs or local models via Ollama.
* **Reusability**: Generates reusable ""viz\_spec"" JSON files for each dashboard, stored in the ""llm\_responses"" folder. Each visualization includes a ""Code"" tab for easy reproduction elsewhere.

**Target Audience**

This project is ideal for:

* **Data Scientists and Analysts**: Looking to streamline the dashboard creation process.
* **Developers**: Interested in integrating AI-powered visualization tools into their projects.
* **LLM Enthusiasts**: Who want to explore practical applications of language models in data visualization.
* **Privacy-Conscious Users**: Offering the ability to use local LLMs ensures that private data remains secure.

Whether for production environments or as a learning tool, the AI Dashboard Builder caters to both professional and educational purposes.

**Comparison with Existing Alternatives**

While there are many ""data-science-automated with AI"" projects out there, our AI Dashboard Builder stands out due to its:

* **Open Source and Community-Driven Approach**: We believe in collaborative development and welcome contributions from the community.
* **Simplicity**: The project focuses on ease of use and maintains a clean, understandable codebase.
* **Privacy-Friendly Features**: By supporting local LLMs through Ollama, users can keep their data private without relying on external services.
* **Flexibility**:
   * **Customizable AI Interactions**: Users can direct the AI to focus on specific KPIs.
   * **Versatile Data Handling**: The import wizard and dynamic filters make data manipulation straightforward.
   * **Integration Capabilities**: Supports various LLMs and provides reusable code snippets for broader applicability.

**Join Us**

We are seeking contributors who have experience with:

* **Python/Plotly**: To enhance the functionality and user experience of the dashboards.
* **Large Language Models (LLMs)**: To improve AI prompting strategies and performance.
* **Data Visualization Best Practices**: To make the dashboards more intuitive and user-friendly.

If you're passionate about AI, data visualization, and open-source collaboration, we'd love for you to join us in advancing this project!

[GitHub Repository: pnmartinez/ai-dashboard-builder](https://github.com/pnmartinez/ai-dashboard-builder)

Thank you for your interest, and we look forward to your contributions!",nava_7777,1gzflho,https://reddit.com/r/Python/comments/1gzflho/inviting_contributors_to_an_open_source_project/,https://www.reddit.com/r/Python/comments/1gzflho/inviting_contributors_to_an_open_source_project/,2024-11-25 10:09:41,0,0.48,0,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gzflho
Python,Dungeons and Dragon's Character Generator Code,"I have been working on a Dungeon and Dragons's Character Generator in python for months. If you want a percentage I would say 85% done (only because additional info needs added! It works just fine!)

After about 600 random characters flawlessly made (flawlessly as in I made 600 and the code didn't bug out once), I wanted to get community input and maybe make some for others, so I can start stresstesting that portion of code.

Here's a vague idea how it works:
Character provides Character name, player name and player level and whether they wanna provide Character info. There are follow ups based on the response, but in the end it will PyPDF write to a fillable Character sheet and create your character, and for abilities too long to put on the sheet, the ability says (see notes) and a Note.txt file is made for that character/playername.

Edit: The GitHub URL for the repository is:
https://github.com/JJNara39/dndcode/tree/main/dnd-post-split/Multi-Class

Only the files in that repository.",Nara39,1gyv85s,https://reddit.com/r/Python/comments/1gyv85s/dungeons_and_dragons_character_generator_code/,https://www.reddit.com/r/Python/comments/1gyv85s/dungeons_and_dragons_character_generator_code/,2024-11-24 16:42:24,21,0.79,21,0,29,0,0,False,False,True,False,False,Discussion,self,t3_1gyv85s
Python,[OC] (Dooit V3) A very customizable TUI Todo Manager!,"

**What My Project Does:**

Dooit is a TUI based todo manager app which gives you a nice user interface to organize your tasks. Unlike other applications, dooit runs directly in your terminal!

It tries to be function and customizable at the same time



**Key Features:**

* An interactive &amp; beautiful UI
* Fully customizable, you can configure your bar, your colors and how everything is displayed!
* Extensible, python config file allows you to do as much as you like!
* Vim like keybindings
* Topicwise separated Todo Lists (With branching)

  
**Target Audience:**

  
Anyone who uses the terminal!

  
**Comparison with Existing Alternatives:**

There are definitely a lot of options out there but I didnt find anyone which fulfilled all my requirements



**How  to Get Started:**

  
Github Link: [Dooit](https://github.com/dooit-org/dooit)

Get started with the [Dooit Docs](https://dooit-org.github.io/dooit/)",otaku_____,1gysoo4,https://reddit.com/r/Python/comments/1gysoo4/oc_dooit_v3_a_very_customizable_tui_todo_manager/,https://www.reddit.com/r/Python/comments/1gysoo4/oc_dooit_v3_a_very_customizable_tui_todo_manager/,2024-11-24 14:53:03,27,0.97,27,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1gysoo4
Python,Pythonic API for POSIX Named Semaphores,"**What My Project Does:**

Hi!

I wrote¬†[named\_semaphores](https://pypi.org/project/named_semaphores/)¬†a small Python package that provides a pythonic API to POSIX Named Semaphores.

**Key Features:**

* **Named Semaphores**: Handle POSIX IPC named semaphores with ease.
* **Pythonic API**: Similar to Python's built-in¬†`threading.Semaphore`¬†for familiarity.
* **Flexible Creation**: Choose how to handle existing semaphores (`RAISE_IF_EXISTS`,¬†`LINK_OR_CREATE`, etc.).
* **Timeouts**: Optionally specify timeouts for acquiring semaphores (platform-dependent).
* **Automatic Cleanup**: Semaphore can be automatically unlinked when the object is deleted.

**Target Audience:**

Anyone dealing with access to limited resources by different Python programs that are not directly connected. For example, limiting API requests to a AWS Bedrock service between FastAPI workers.

**Comparison with Existing Alternatives:**

It wraps around existing library¬†`posix_ipc`, but adds some features such as automatic unlinking, and an API more similar to¬†`threading.Semaphore`. It also improves the documentation by complete docstrings and typing annotations (the C bindings of the¬†`posix_ipc`¬†library does not provide type hints or docstrings).

**How to Get Started:**

Install from Pypi: [https://pypi.org/project/named\_semaphores/](https://pypi.org/project/named_semaphores/)

Feel free to check out the¬†[Github Repository](https://github.com/johacks/named-semaphores)¬†and/or open any issues. Thanks!",johacks_,1gz2fcn,https://reddit.com/r/Python/comments/1gz2fcn/pythonic_api_for_posix_named_semaphores/,https://www.reddit.com/r/Python/comments/1gz2fcn/pythonic_api_for_posix_named_semaphores/,2024-11-24 21:44:26,6,0.76,6,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gz2fcn
Python,Multipython: Python 2.7 and 3.5 to 3.14 multi-version Docker image for Tox tests and CI/CD,"Hi r/Python, for those who maintains projects for multiple Python versions (including reached end-of-life) and tired of waiting for pyenv builds, there's now a [Docker image](https://hub.docker.com/r/makukha/multipython) with pre-built pyenv versions.

**What My Project Does**

Reduce build time and lines of code in multi-version Tox testing setups.

* CPython 2.7, 3.5, 3.6, 3.7, 3.8, 3.9, 3.10, 3.11, 3.12, 3.13, 3.13 (free threading), 3.14 symlinked to `pythonX.Y`
* Includes latest patch versions for stable and pre-release branches
* Ready to use with Tox (included) and in CI/CD pipelines
* Image itself is tested

**Target Audience**

Maintainers of multi-Python projects, DevOps engineers, QA engineers.

**Comparison**

Existing alternatives don't provide that many Python versions:

* Github Actions (does not support Python 2.7 and 3.13 free threading)
* [divio/multi-python](https://github.com/divio/multi-python) (Apt-managed CPython 3.7 to 3.12 from deadsnakes PPA)
* [dhermes/python-multi](https://github.com/dhermes/python-multi) (pyenv-managed CPython 3.8 to 3.12, PyPy 3.10)
* [vicamo/pyenv](https://hub.docker.com/r/vicamo/pyenv) (not supported for 2 years)

**Feedback**

GitHub: [makukha/multipython](https://github.com/makukha/multipython)

Looking for your feedback, hints, alternatives, and improvement ideas!",mmakukha,1gz3pkh,https://reddit.com/r/Python/comments/1gz3pkh/multipython_python_27_and_35_to_314_multiversion/,https://www.reddit.com/r/Python/comments/1gz3pkh/multipython_python_27_and_35_to_314_multiversion/,2024-11-24 22:40:33,5,0.73,5,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gz3pkh
Python,Make your log spark joy with a single line,"Hey everyone!

I'm excited to reveal **Sane Rich Logging**‚Äîa simple one-liner for beautiful, usable logging, its just a set of defaults for regular logging.

### What My Project Does
**Sane Rich Logging** enhances Python's built-in `logging` by adding colorful, human-readable console output (via [Rich](https://rich.readthedocs.io/en/stable)) and automatic file rotation. Just call `setup_logging()`, nothing else!

### Target Audience
It's for developers who want a hassle-free logging setup. Whether it's a toy project or a production system, **Sane Rich Logging** adds sensible defaults with minimal configuration.

### Comparison
Unlike **loguru** or **structlog**, **Sane Rich Logging** builds on Python's standard `logging`‚Äîno new API to learn. It keeps your existing setup and simply enhances it with better readability and easy file management, works as a drop-in addition to existing code.

### Features
- **Colorful Logs**: Engaging, colorful console output.
- **Simple Setup**: One function to start (`setup_logging()`).
- **Log Rotation**: Automatic, configurable file management.
- **Env Variable Config**: Adjust via `LOG_LEVEL`, `LOG_FILE`, etc.

### Get Started
Install from PyPI and use like this:

```python
from sane_rich_logging import setup_logging
import logging

setup_logging()
logging.debug(""This is a debug message"")
```

### Check It Out
- **PyPI**: [sane-rich-logging](https://pypi.org/project/sane-rich-logging/)
- **GitHub**: [sane-rich-logging](https://github.com/jakob1379/sane-rich-logging)

Any feedback is much appreciated!
",jakob1379,1gzjft6,https://reddit.com/r/Python/comments/1gzjft6/make_your_log_spark_joy_with_a_single_line/,https://www.reddit.com/r/Python/comments/1gzjft6/make_your_log_spark_joy_with_a_single_line/,2024-11-25 14:00:10,0,0.39,0,0,10,0,0,False,False,True,False,False,Showcase,self,t3_1gzjft6
Python,Best Android Python IDE,"I am looking for a Python IDE for my tablet to develop apps on the go, but I couldnt find anything that would allow me to work with virtual enviroments containing older Python versions like 3.9. This feature is crucial for me as I work with libraries that are compatible with these older versions. An ability to organize the files in a hierarchical structure would be also nice.

Any suggestions apprieciated!",WhiteFrost365,1gzfxw5,https://reddit.com/r/Python/comments/1gzfxw5/best_android_python_ide/,https://www.reddit.com/r/Python/comments/1gzfxw5/best_android_python_ide/,2024-11-25 10:34:00,0,0.43,0,0,14,0,0,False,False,True,False,False,Discussion,self,t3_1gzfxw5
Python,Open Source Discord Bot for Live Football Tracking Across 75+ Leagues,"**What My Project Does:**  
I developed **Scoring Returns Bot**, an open-source Discord bot written in Python that tracks live football matches across 75+ leagues. It provides real-time updates, instant event notifications, and detailed match statistics, allowing users to stay informed about their favorite games directly within Discord.

**Key Features:**

* **Live Match Tracking:** Real-time updates on ongoing football matches, similar to platforms like FlashScore and LiveScore.
* **Instant Event Notifications:** Alerts for goals, VAR decisions, red/yellow cards, and more.
* **Comprehensive Statistics:** Includes possession, shots on goal, corner kicks, and other detailed match stats.

**Target Audience:**  
The bot is designed for football fans who want a seamless way to stay updated on matches within their Discord servers. It‚Äôs suitable for production use in communities where live football updates are a key interest and also for developers who want an open-source, customizable solution for tracking games.

**Comparison with Existing Alternatives:**  
Unlike other bots:

1. **Ease of Use:** Scoring Returns Bot is simple to set up and use, with a clean command structure that makes it accessible even to non-technical users.
2. **Customizability:** Being open-source, it allows users to modify it as per their needs, including branding and additional features.
3. **Aesthetics:** The bot provides visually appealing messages with embedded statistics and event announcements.

**How to Get Started:**  
Visit the GitHub page for source code and setup instructions:

*  [https://github.com/BernKing/Scoring-Returns-Bot](https://github.com/BernKing/Scoring-Returns-Bot)

For a detailed breakdown of the implementation and the reasoning behind design choices, check out my blog post:

*  [https://bernking.xyz/2024/Scoring-Returns-Bot/](https://bernking.xyz/2024/Scoring-Returns-Bot/)",BernKing2,1gynfso,https://reddit.com/r/Python/comments/1gynfso/open_source_discord_bot_for_live_football/,https://www.reddit.com/r/Python/comments/1gynfso/open_source_discord_bot_for_live_football/,2024-11-24 09:47:58,12,0.94,12,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gynfso
Python,Bagels - Expense tracker that lives in your terminal (TUI),"Hi r/Python! I'm excited to share [Bagels](https://github.com/EnhancedJax/Bagels) \- a terminal (UI) expense tracker built with the [textual](https://github.com/Textualize/textual) TUI library! Check out the git repo for screenshots.

# Target audience

**But first, why an expense tracker in the terminal?**¬†This is intended for people like me: I found it easier to build a habit and keep an accurate track of my expenses if I did it at the end of the day, instead of on the go. So why not in the terminal where it's fast, and I can keep all my data locally?

# What my project does

Some notable features include:

* Keep track of your expenses with Accounts, (Sub)Categories, Splits, Transfers and Records
* Templates for recurring transactions
* Keep track of who owes you money in the people's view
* Add templated records with number keys
* Clear and concise table layout with collapsible splits
* Transfer to and from non-tracked accounts (outside of wallet)
* ""Jump Mode"" Navigation
* Fewer fields to enter per transaction by default input modes
* Insights
* Customizable config, such as First Day of Week

Comparison: Unlike traditional expense trackers that are accessed by web or mobile, Bagels lives in your terminal. It differs as an expense tracker tool by providing more convenient input fields and a clear and concise layout. (though subjective)

# Quick start

Install uv and install the uv tool:

    uv tool install --python 3.13 bagels

Then run `bagels` to get started!

You can learn more at the project repo: [https://github.com/EnhancedJax/Bagels](https://github.com/EnhancedJax/Bagels)",EnhancedJax,1gy0r1v,https://reddit.com/r/Python/comments/1gy0r1v/bagels_expense_tracker_that_lives_in_your/,https://www.reddit.com/r/Python/comments/1gy0r1v/bagels_expense_tracker_that_lives_in_your/,2024-11-23 14:24:56,154,0.96,154,0,23,0,0,False,False,True,False,False,Showcase,self,t3_1gy0r1v
Python,I cant find the logic error in my code,"import random



a1 = random.randint(1,3)





score\_p = 0

score\_c = 0



player = input(""Choose rock, paper, Or scissors "")



if player == ""rock"":

if a1 == 1:

print(""Tie"")

player = input(""Choose rock, paper, Or scissors "")

elif a1 == 2:

print(""Computer chose paper, one point to computer"")

score\_c += 1

player = input(""Choose rock, paper, Or scissors "")

else :

print(""Computer chose scissors, one point to player"")

score\_p += 1

player = input(""Choose rock, paper, Or scissors "")

if score\_p == 2:

print(""Player Wins the game"")





if score\_c == 2:

print(""Computer wins"")













if player == ""paper"":

if a1 == 2:

print(""Tie"")

player = input(""Choose rock, paper, Or scissors "")

elif a1 == 3:

print(""Computer chose scissors, one point to computer"")

score\_c += 1

player = input(""Choose rock, paper, Or scissors "")

else:

print(""Computer chose rock, one point to player "")

score\_p += 1

player = input(""Choose rock, paper, Or scissors "")

if score\_p == 2:

print(""Player Wins the game"")





if score\_c == 2:

print(""Computer wins"")







if player == ""scissors"":

if a1 == 3:

print(""Tie"")

player = input(""Choose rock, paper, Or scissors "")

elif a1 == 1:

print(""Computer chose rock , one point to computer"")

score\_c += 1

player = input(""Choose rock, paper, Or scissors "")

else :

print(""Computer chose paper, one point to player "")

score\_p += 1

player = input(""Choose rock, paper, Or scissors "")

if score\_p == 2:

print(""Player Wins the game"")





if score\_c == 2:

print(""Computer wins"")















",PristineCharity2972,1gzbkmr,https://reddit.com/r/Python/comments/1gzbkmr/i_cant_find_the_logic_error_in_my_code/,https://www.reddit.com/r/Python/comments/1gzbkmr/i_cant_find_the_logic_error_in_my_code/,2024-11-25 05:24:35,0,0.27,0,0,9,0,0,False,False,True,False,False,Discussion,self,t3_1gzbkmr
Python,Simple deployment options for Python projects?,"Hi everyone,

I‚Äôve been thinking about ways to host and deploy Python projects. For those of you who‚Äôve worked on anything from small Python scripts to full web apps or APIs, what kind of hosting setups have you used?

Do you rely on cloud providers (AWS, Google Cloud‚Ä¶ etc), or have you found platforms that simplify the process for smaller projects? I‚Äôm especially curious about solutions that make deployment and monitoring easier, with features like:
* CI/CD integration (like GitHub or gitlab pipelines)
* Real-time logs
* Ability to pause or stop execution

I‚Äôve been exploring ways to streamline hosting for small to medium-sized Python projects, but I‚Äôd love to hear what‚Äôs been working (or not) for you/your team.

What hosting tools do you use? And what are the biggest pain points you‚Äôve encountered?",ClassicNullPointer,1gy697b,https://reddit.com/r/Python/comments/1gy697b/simple_deployment_options_for_python_projects/,https://www.reddit.com/r/Python/comments/1gy697b/simple_deployment_options_for_python_projects/,2024-11-23 18:27:41,30,0.92,30,0,38,0,0,False,False,True,False,False,Discussion,self,t3_1gy697b
Python,Steganography tool + algo in python,"  
**What My Project Does** 

Stega Shade CLI is a user-friendly command-line interface tool designed for image-based steganography. With a focus on simplicity and security, it provides functionality to encode and decode messages into images, including password-protected encoding for enhanced privacy.

**Comparison**

* **Dual Modes**: Offers both simple and AES-encrypted steganography, catering to users with varying security needs.
* **AES Encryption**: Ensures strong encryption, adding an advanced layer of security to embedded messages.
* **User Experience**: The CLI tool is intuitive, visually engaging, and user-friendly, making it accessible to both beginners and experts.
* **Minimal Impact**: Maintains the original image‚Äôs visual fidelity while effectively hiding the message.

  
**Target Audience**

\- kids intrested in cs

\- hackers

\- fbi

WORKING! -

1. The algorithm encodes the binary representation of a message into the least significant bits (LSBs) of pixel values in the image.
2. Minor changes in the LSBs are imperceptible to the human eye, keeping the message hidden without noticeably altering the image.

[https://github.com/merwin-asm/StegaShade](https://github.com/merwin-asm/StegaShade)  
",MrCactochan,1gyagru,https://reddit.com/r/Python/comments/1gyagru/steganography_tool_algo_in_python/,https://www.reddit.com/r/Python/comments/1gyagru/steganography_tool_algo_in_python/,2024-11-23 21:33:03,15,0.83,15,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1gyagru
Python,CRUD Operations for PostgreSQL with pgcrud,"Over the past few years, I've built a Python application with a PostgreSQL database and spent countless hours optimising CRUD operations without bloating the codebase. I have open-sourced it and want to share **pgcrud** with you:

**What My Project Does**

**pgcrud**¬†is a fast and lightweight library that enables seamless integration between PostgreSQL databases, the psycopg adapter and Pydantic models.¬†**pgcrud**¬†simplifies CRUD operations with straightforward, abstractly declarative functions, eliminating the need for ORMs or redundant SQL queries.

**Target Audience**

Python developers:

Most developers either choose ORMs ( like SQLAlchemy or SQLModel) or write raw SQL

* ORMs are convenient but they map directly to tables and real-world applications often require modelling relationships. This leads to added complexity with extra data models and more database requests
* Raw SQL avoids abstraction but results in repetitive code and difficulties handling optional filter parameters or sorting conditions

**Comparison**

**pgcrud** is a purely abstract declarative module, meaning it's not tied to specific database tables. This flexibility allows developers to model their logic without being constrained by rigid tables. Additionally, **pgcrud** has built-in support for pydantic models and can easily handle reactions between tables via view definitions.

There are more explanations on my Github page. Here is the link: [https://github.com/dakivara/pgcrud](https://github.com/dakivara/pgcrud)

I know that documentation is still lacking and the project is still in progress. I just wanted to get some feedback sooner than later. Any feedback, positive or negative, is highly appreciated.",[deleted],1gy1qg7,https://reddit.com/r/Python/comments/1gy1qg7/crud_operations_for_postgresql_with_pgcrud/,https://www.reddit.com/r/Python/comments/1gy1qg7/crud_operations_for_postgresql_with_pgcrud/,2024-11-23 15:10:56,28,0.94,28,0,13,0,0,False,False,True,False,False,Showcase,self,t3_1gy1qg7
Python,Sparx maths python bot ,Can anybody with good python knowledge perchance try to make a python program which completes your Sparx homework at  sparxmaths.uk and fills in all the questions etc,Own-Background2283,1gyueei,https://reddit.com/r/Python/comments/1gyueei/sparx_maths_python_bot/,https://www.reddit.com/r/Python/comments/1gyueei/sparx_maths_python_bot/,2024-11-24 16:08:02,0,0.27,0,0,2,0,0,False,False,True,False,False,Tutorial,self,t3_1gyueei
Python,Pypi download stat jumped dramatically,"Hello, I am the author of PerpetualBooster. 

https://github.com/perpetual-ml/perpetual

The download stat of the package jumped dramatically in the last two days. 

https://pypistats.org/packages/perpetual

I checked if any other package caused this jump by depending on this package but couldn't find any. 

What could be the reason of this jump?",mutlu_simsek,1gxxbl2,https://reddit.com/r/Python/comments/1gxxbl2/pypi_download_stat_jumped_dramatically/,https://www.reddit.com/r/Python/comments/1gxxbl2/pypi_download_stat_jumped_dramatically/,2024-11-23 11:09:47,24,0.84,24,0,6,0,0,False,False,True,False,False,Discussion,self,t3_1gxxbl2
Python,"Python isn't just glue, it's an implicit JIT ecosystem","Writing more Rust recently led me to a revelation about Python. Rust was vital to my original task, but only a few simplifications away, the shorter Python version leapt to almost as fast. I'd stumbled from a cold path to a hot path...

This is my argument that Python, through a number of features both purposeful and accidental, ended up with an implicit JIT ecosystem, well-worn trails connecting optimized nodes, paved over time by countless developers.

I'm definitely curious to hear how this feels to others.
I've been doing Python half my life (almost two decades) and Rust seriously for the last few years.
I love both languages deeply but the pendulum has now swung back towards Python not as I won't use Rust but as I feel my eyes are now open as to how when and how I should use Rust.

[Python isn't just glue, it's an implicit JIT ecosystem](https://state.smerity.com/smerity/state/01JC39KW1TBEAZTKJJF0BR5ZXD)",smerity,1gxlogn,https://reddit.com/r/Python/comments/1gxlogn/python_isnt_just_glue_its_an_implicit_jit/,https://www.reddit.com/r/Python/comments/1gxlogn/python_isnt_just_glue_its_an_implicit_jit/,2024-11-22 23:34:27,152,0.75,152,0,58,0,0,False,False,True,False,False,Discussion,self,t3_1gxlogn
Python,Simplify Your RabbitMQ Workflow with RabbitMQ Queue Manager,"Hi everyone! üëã

I recently started working on¬†[RabbitMQ Queue Manager](https://github.com/ViktorViskov/rabbit-queue-manager)‚Äîa Python-based tool designed to make managing RabbitMQ queues easier and more efficient. The idea came from my experience on projects where queue management often felt overly complicated, and I wanted to create something lightweight yet powerful to streamline the process.

# What My Project Does:

RabbitMQ Queue Manager simplifies the process of interacting with RabbitMQ queues. It lets you:

* **Send messages**¬†to RabbitMQ queues effortlessly.
* **Receive messages**¬†with automatic acknowledgement for smooth processing.
* Handle¬†**connection losses**¬†with automatic reconnections.
* Perform¬†**batch operations**¬†to handle multiple messages at once.
* Inspect¬†**queue sizes**¬†to monitor system health.
* Use a¬†**Pythonic iterable interface**¬†to consume messages naturally.

This tool is ideal for Python developers looking to integrate RabbitMQ into their applications with minimal overhead.

# Call for Feedback and Collaboration:

Right now, the repository is in its early stages, and I‚Äôm actively working on improving it. If you‚Äôve been searching for a simple RabbitMQ tool, have suggestions for new features, or would like to contribute, your help would be invaluable! üôå

Check it out on GitHub:¬†[RabbitMQ Queue Manager](https://github.com/ViktorViskov/rabbit-queue-manager).

Thanks in advance for your support, and let‚Äôs build something great together! üöÄ",Mean-Still-7293-34,1gxzv0n,https://reddit.com/r/Python/comments/1gxzv0n/simplify_your_rabbitmq_workflow_with_rabbitmq/,https://www.reddit.com/r/Python/comments/1gxzv0n/simplify_your_rabbitmq_workflow_with_rabbitmq/,2024-11-23 13:41:07,5,0.67,5,0,4,0,0,False,False,True,False,False,Discussion,self,t3_1gxzv0n
Python,What cryptography module is everyone using for Python (2024 edition)?,"I need to generate an RSA keypair in python. Sadly there's no standard lib for cryptography in Python, so I was wondering what everyone is using for cryptography?

There's pycryptodome, python-gnupg, pyopenssl, and cryptography.io. Which is the most popular, well maintained (preferably has a long history of proven development), and accuracy in generating secure keys?

I'm leaning towards cryptography.io but I'm not familiar with the crypto space. What's the best?",plantpome,1gxs1su,https://reddit.com/r/Python/comments/1gxs1su/what_cryptography_module_is_everyone_using_for/,https://www.reddit.com/r/Python/comments/1gxs1su/what_cryptography_module_is_everyone_using_for/,2024-11-23 05:06:34,27,0.81,27,0,12,0,0,False,False,True,False,False,Resource,self,t3_1gxs1su
Python,GitHub Projects for begginers,"I'm studying quantitative finance, are there any github project recs that is friendlt to beginners but also challenging at the same time? I need the concepts to stick in and without doing any projects, its hard to conceptualise it. I also need some projects to stuck into my CV to show that I a able to apply the concepts in real life.",Civil_Rutabaga730,1gyklzq,https://reddit.com/r/Python/comments/1gyklzq/github_projects_for_begginers/,https://www.reddit.com/r/Python/comments/1gyklzq/github_projects_for_begginers/,2024-11-24 06:26:58,0,0.35,0,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1gyklzq
Python,Now updated my Python Automated AI Research Assistant to work with OpenAI endpoints and Ollama!,"So yeah now it works with OpenAI compatible endpoints thanks to the kind work of people on the Github who updated it for me here is a recap of the project:

Automated-AI-Web-Researcher: After months of work, I've made a python program that turns local LLMs running on Ollama into online researchers for you, Literally type a single question or topic and wait until you come back to a text document full of research content with links to the sources and a summary and ask it questions too! and more!

**What My Project Does**:

This automated researcher uses internet searching and web scraping to gather information, based on your topic or question of choice, it will generate focus areas relating to your topic designed to explore various aspects of your topic and investigate various related aspects of your topic or question to retrieve relevant information through online research to respond to your topic or question. The LLM breaks down your query into up to 5 specific research focuses, prioritising them based on relevance, then systematically investigates each one through targeted web searches and content analysis starting with the most relevant.

Then after gathering the content from those searching and exhausting all of the focus areas, it will then review the content and use the information within to generate new focus areas, and in the past it has often finding new, relevant focus areas based on findings in research content it has already gathered (like specific case studies which it then looks for specifically relating to your topic or question for example), previously this use of research content already gathered to develop new areas to investigate has ended up leading to interesting and novel research focuses in some cases that would never occur to humans although mileage may vary this program is still a prototype but shockingly it, it actually works!.

Key features:

* Continuously generates new research focuses based on what it discovers
* Saves every piece of content it finds in full, along with source URLs
* Creates a comprehensive summary when you're done of the research contents and uses it to respond to your original query/question
* Enters conversation mode after providing the summary, where you can ask specific questions about its findings and research even things not mentioned in the summary should the research it found provide relevant information about said things.
* You can run it as long as you want until the LLM‚Äôs context is at it‚Äôs max which will then automatically stop it‚Äôs research and still allow for summary and questions to be asked. Or stop it at anytime which will cause it to generate the summary.
* But it also Includes pause feature to assess research progress to determine if enough has been gathered, allowing you the choice to unpause and continue or to terminate the research and receive the summary.
* Works with popular Ollama local models (recommended phi3:3.8b-mini-128k-instruct or phi3:14b-medium-128k-instruct which are the ones I have so far tested and have worked)
* Everything runs locally on your machine, and yet still gives you results from the internet with only a single query you can have a massive amount of actual research given back to you in a relatively short time.

The best part? You can let it run in the background while you do other things. Come back to find a detailed research document with dozens of relevant sources and extracted content, all organised and ready for review. Plus a summary of relevant findings AND able to ask the LLM questions about those findings. Perfect for research, hard to research and novel questions that you can‚Äôt be bothered to actually look into yourself, or just satisfying your curiosity about complex topics!

GitHub repo with full instructions and a demo video:

[https://github.com/TheBlewish/Automated-AI-Web-Researcher-Ollama](https://github.com/TheBlewish/Automated-AI-Web-Researcher-Ollama)

(Built using Python, fully open source, and should work with any Ollama-compatible LLM, although only phi 3 has been tested by me)

**Target Audience**:

Anyone who values locally run LLMs, anyone who wants to do comprehensive research within a single input, anyone who like innovative and novel uses of AI which even large companies (to my knowledge) haven't tried yet.

If your into AI, if your curious about what it can do, how easily you can find quality information using it to find stuff for you online, check this out!

**Comparison**:

Where this differs from per-existing programs and applications, is that it conducts research continuously with a single query online, for potentially hundreds of searches, gathering content from each search, saving that content into a document with the links to each website it gathered information from.

Again potentially hundreds of searches all from a single query, not just random searches either each is well thought out and explores various aspects of your topic/query to gather as much usable information as possible.

Not only does it gather this information, but it summaries it all as well, extracting all the relevant aspects of the info it's gathered when you end it's research session, it goes through all it's found and gives you the important parts relevant to your question. Then you can still even ask it anything you want about the research it has found, which it will then use any of the info it has gathered to respond to your questions.

To top it all off compared to other services like how ChatGPT can search the internet, this is completely open source and 100% running locally on your own device, with any LLM model of your choosing although I have only tested Phi 3, others likely work too!",CuriousAustralianBoy,1gxotms,https://reddit.com/r/Python/comments/1gxotms/now_updated_my_python_automated_ai_research/,https://www.reddit.com/r/Python/comments/1gxotms/now_updated_my_python_automated_ai_research/,2024-11-23 02:05:53,13,0.77,13,0,2,0,0,False,False,True,False,False,Resource,self,t3_1gxotms
Python,Advice please on python,"I‚Äôm in a coding class atm and only have been writing in c++ and she just assigned a python assignment and I don‚Äôt know where to start.

Assignment

You have 2 programs to write this week.
Q1. Write a Python program that declares a List of 7 integer numbers that represent the radii of 7 circles. For each element of the list, your program must ask user to enter A for calculating area or C for circumference of circle, and calculate and display the required value.
You must use loops to access, calculate and print the required quantities with correct units. Write detailed comments in your program to explain what each statement does.
Run the program through all 7 elements of the list and attach a screenshot of your output window. Write detailed comments in your program to explain what each statement does.
 
 
Q2. Write a python program to find the largest element in a list of 5 elements. Run the program and take screenshot of your output. Write detailed comments in your program to explain what each statement does.
",Ok_Tooth8811,1gyaa58,https://reddit.com/r/Python/comments/1gyaa58/advice_please_on_python/,https://www.reddit.com/r/Python/comments/1gyaa58/advice_please_on_python/,2024-11-23 21:24:41,0,0.2,0,0,4,0,0,False,False,True,False,False,Discussion,self,t3_1gyaa58
Python,"pydantic-resolve, a lightweight library based on pydantic which greatly helps on building data. ","**What My Project Does:**

  
[https://allmonday.github.io/pydantic-resolve/v2/why/](https://allmonday.github.io/pydantic-resolve/v2/why/)  why create a new lib.

pydantic-resolve is a lightweight wrapper library based on pydantic, which can greatly simplify the complexity of building data.

With the help of pydantic, it can describe data structures using graph relationships like GraphQL, and also make adjustments based on business requirements while fetching data.

Using an ER-oriented modeling approach, it can provide you with a 3 to 5 times increase in development efficiency and reduce code volume by more than 50%.

It offers¬†`resolve`¬†and¬†`post`¬†methods for pydantic objects.  (pre and post process)

by providing root data and full schema definitions, Resolve will fill all descendants for you.

    from pydantic_resolve import Resolver
    from pydantic import BaseModel
    
    class Car(BaseModel):
        id: int
        name: str
        produced_by: str
    
    class Child(BaseModel):
        id: int
        name: str
    
        cars: List[Car] = []
        async def resolve_cars(self):
            return await get_cars_by_child(self.id)
    
        description: str = ''
        def post_description(self):
            desc = ', '.join([c.name for c in self.cars])
            return f'{self.name} owns {len(self.cars)} cars, they are: {desc}'
    
    children = await Resolver.resolve([
            Child(id=1, name=""Titan""), 
            Child(id=1, name=""Siri"")]
        )

`resolve`¬†is usually used to fetch data, while¬†`post`¬†can perform additional processing after fetching the data.

After defining the object methods and initializing the objects, pydantic-resolve will internally traverse the data and execute these methods to process the data.

With the help of dataloader, pydantic-resolve can avoid the N+1 query problem that often occurs when fetching data in multiple layers, optimizing performance.

In addition, it also provides¬†`expose`¬†and¬†`collector`¬†mechanisms to facilitate cross-layer data processing.

**Target Audience:**

backend developers who need to compose data from different sources

**Comparison:**

GraphQL, ORMÔºå it provides a more general way (declarative way) to build the data.

GraphQL is flexible but the actual query is not maintained at backend.

ORM relationship is powerful but limited in relational db, not easy to join resource from remote

pydantic-resolve aims to provide a balanced tool between GraphQL and ORM,  it joins resource with dataloader and 100% keep data structure at backend (with almost zero extra cost)

**Showcase**:

[https://github.com/allmonday/pydantic-resolve](https://github.com/allmonday/pydantic-resolve)

[https://github.com/allmonday/pydantic-resolve-demo](https://github.com/allmonday/pydantic-resolve-demo)

**Prerequisites:**

\- pydantic v1, v2",TurbulentAd8020,1gx9uyn,https://reddit.com/r/Python/comments/1gx9uyn/pydanticresolve_a_lightweight_library_based_on/,https://www.reddit.com/r/Python/comments/1gx9uyn/pydanticresolve_a_lightweight_library_based_on/,2024-11-22 15:04:53,11,0.62,11,0,22,0,0,False,False,True,False,False,Showcase,self,t3_1gx9uyn
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1gxm8u3,https://reddit.com/r/Python/comments/1gxm8u3/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1gxm8u3/saturday_daily_thread_resource_request_and/,2024-11-23 00:00:21,2,0.67,2,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gxm8u3
Python,Project Guide: AI-Powered Documentation Generator for Codebases,"What My Project Does:  
Project Guide is an AI-powered tool that analyzes codebases and automatically generates comprehensive documentation. It aims to simplify the process of understanding and navigating complex projects, especially those written by others.

Target Audience:  
This tool is intended for developers, both professionals and hobbyists, who work with existing codebases or want to improve documentation for their own projects. It's suitable for production use but can also be valuable for learning and project management.

Comparison:  
Unlike traditional documentation tools that require manual input, Project Guide uses AI to analyze code and generate insights automatically. It differs from static analysis tools by providing higher-level, context-aware documentation that explains project architecture and purpose.

Showcase:  
Ever wished your project could explain itself? Now it can! ü™Ñ Project Guide uses AI to analyze your codebase and generate comprehensive documentation automagically.

Features:  
üîç Deep code analysis  
üìö Generates detailed developer guides  
üéØ Identifies project purpose and architecture  
üó∫Ô∏è Creates clear documentation structure  
ü§ñ AI-powered insights  
üìù Markdown-formatted output  
üîÑ Recursive directory analysis  
üé® Well-organized documentation

Check it out:¬†[https://github.com/sojohnnysaid/project-guide](https://github.com/sojohnnysaid/project-guide)

  
Here is a guidebook.md I created for another project I am working on:

[https://github.com/sojohnnysaid/vim-restman](https://github.com/sojohnnysaid/vim-restman)

Going through codebases that someone else wrote is hard, no matter how long you've been at this. This tool can help give you a lifeline. I believe AI tools, when used correctly, can help us complete our work more efficiently, allowing us to enjoy more of our lives outside of coding.

Quick Start:  
Prerequisites:

* Python 3.8+
* Anthropic API key
* Your favorite code project to document!

I really do hope one day we find an even better way. I miss who I was before I did this kind of work, when I played more music, and loved my friends and family more, spending time with them and connecting. I hope tools like this can help us get our work done early enough to enjoy the late afternoon.",Icy_Foundation3534,1gx2515,https://reddit.com/r/Python/comments/1gx2515/project_guide_aipowered_documentation_generator/,https://www.reddit.com/r/Python/comments/1gx2515/project_guide_aipowered_documentation_generator/,2024-11-22 07:07:33,31,0.71,31,0,18,0,0,False,False,True,False,False,Showcase,self,t3_1gx2515
Python,Library Analyzer - Python libraries and extract detailed information,"Hi [r/python](https://www.reddit.com/r/python/),

I‚Äôm excited to share my latest project, \*\*Library Analyzer\*\*. This Python script is designed to analyze Python libraries and extract detailed information about their elements, such as, Classes, Methods, Functions, Properties, and more.

The analysis results can be saved to a JSON file for further inspection, making it a valuable tool for developers who need to understand and document their codebases.

\### Capabilities of the Script:

\- \*\*Analyze Python Libraries\*\*: The script can analyze Python libraries and extract detailed information about various elements within the library.

\- \*\*Element Types Identified\*\*: It identifies and categorizes elements such as classes, methods, functions, properties, modules, variables, enums, constants, dataclasses, coroutines, generators, descriptors, exceptions, and protocols.

\- \*\*Extract Type Information\*\*: The script can safely evaluate and extract type information for various elements.

\- \*\*Extract Signatures\*\*: It can extract function/method signatures and other relevant details such as docstrings, parameter types, and return types.

\- \*\*Class Analysis\*\*: The script provides detailed information about classes, including base classes, methods, properties, and type hints.

\- \*\*Dataclass and Enum Analysis\*\*: It can analyze dataclasses and enums, extracting field types and enum values.

\- \*\*Save Analysis Results\*\*: The analysis results can be saved to a JSON file for further inspection and documentation.

\### About the Project:

This script was extracted from a larger project, which includes AI and other mechanisms, that I may possibly share soon. The project aims to provide valuable insights into the structure and content of libraries, helping developers understand and utilize them efficiently.

Thank you for reading, and I‚Äôd love to hear your feedback and suggestions!

[https://github.com/JacquesGariepy/library-analyzer](https://github.com/JacquesGariepy/library-analyzer)",Outrageous-Pea9611,1gx9j3t,https://reddit.com/r/Python/comments/1gx9j3t/library_analyzer_python_libraries_and_extract/,https://www.reddit.com/r/Python/comments/1gx9j3t/library_analyzer_python_libraries_and_extract/,2024-11-22 14:50:02,4,0.65,4,0,3,0,0,False,False,True,False,False,Resource,self,t3_1gx9j3t
Python,Light Resilience with the Service Failover System,"Hello r/python,

I share this small project I've been working on: the **Service Failover System**. This system is designed (work in progress) to enhance the resilience of applications by providing mechanisms for handling service failures. Here‚Äôs a quick overview:

### Key Features:
- **Retry Policy**: Handles transient failures with configurable retry attempts and delays.
- **Circuit Breaker**: Monitors service health, preventing requests to unhealthy services.
- **Rate Limiter**: Manages the rate of outgoing requests to prevent service overloads.
- **Connection Pool**: Optimizes connection management by reusing connections.
- **Cache**: Stores responses to minimize requests and enhance performance.
- **Metrics Collector**: Gathers performance and health metrics for monitoring and troubleshooting.

### Usage:
1. **Configuration**: Set up parameters in `config.ini` or environment variables.
2. **Service Registration**: Register services with the `FailoverManager`.
3. **Health Checks**: Implement health checks to ensure services are operational.
4. **Execute Requests**: Use the `FailoverManager` to handle retries, circuit breaking, and rate limiting automatically.

### Use Cases:
- **Microservices Architecture**: Ensures application functionality even if some services fail.
- **API Gateway**: Provides resilience and reliability for external API calls.
- **Distributed Systems**: Manages service failures and maintains system availability.
- **Cloud Services**: Handles transient failures and ensures smooth operation.

### Installation:
1. Clone the repository:
   ```bash
   git clone https://github.com/JacquesGariepy/service-failover.git
   ```
2. Navigate to the project directory:
   ```bash
   cd service-failover
   ```
3. Create a virtual environment:
   ```bash
   python -m venv env
   source env/bin/activate  # On Windows: env\Scripts\activate
   ```
4. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```
### Configuration:
- Edit `config.ini` to set parameters like API keys, base URLs, and settings for retry policies, circuit breakers, and rate limiters.

### Contributions:
Contributions are welcome! Feel free to fork the project, create feature branches, and open pull requests.

**Project Link**: [Service Failover System on GitHub](https://github.com/JacquesGariepy/service-failover)

**Contact**: Jacques Gari√©py - [LinkedIn](https://www.linkedin.com/in/jacquesgariepy/)

Let me know your thoughts and suggestions. Looking forward to your feedback!",Outrageous-Pea9611,1gx69ce,https://reddit.com/r/Python/comments/1gx69ce/light_resilience_with_the_service_failover_system/,https://www.reddit.com/r/Python/comments/1gx69ce/light_resilience_with_the_service_failover_system/,2024-11-22 12:03:48,3,0.81,3,0,2,0,0,False,False,True,False,False,Resource,self,t3_1gx69ce
Python,HPC-Style Job Scripts in the Cloud,"The first parallel computing system I ever used were job scripts on HPC Job schedulers (like SLURM, PBS, SGE, ...).  They had an API straight out of the 90s, but were super straightforward and helped me do research when I was still just a baby programmer.  

The cloud is way more powerful than these systems, but kinda sucks from a UX perspective.  I wanted to replicate the experience I had on HPC on the cloud with Cloud-based Job Arrays.  It wasn't actually all that hard.

* [Post here](https://docs.coiled.io/blog/slurm-job-arrays.html)
* [Video here](https://www.youtube.com/watch?v=cRWXfWgb4Z0)

This is still super new (we haven't even put up proper docs yet) but I'm excited about the feature.  Thoughts/questions/critiques welcome.",mrocklin,1gwj7e6,https://reddit.com/r/Python/comments/1gwj7e6/hpcstyle_job_scripts_in_the_cloud/,https://www.reddit.com/r/Python/comments/1gwj7e6/hpcstyle_job_scripts_in_the_cloud/,2024-11-21 16:23:41,39,0.9,39,0,9,0,0,False,False,True,False,False,Discussion,self,t3_1gwj7e6
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1gwub4n,https://reddit.com/r/Python/comments/1gwub4n/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1gwub4n/friday_daily_thread_rpython_meta_and_freetalk/,2024-11-22 00:00:57,11,0.83,11,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gwub4n
Python,Creating a Python System to Turn All PostgreSQL Servers into Masters with Auto-Recovery and Sync ‚Äì N,"Hello Python community!I‚Äôm currently working on developing a distributed PostgreSQL system using Python, where all servers act as masters. Additionally, I‚Äôm adopting a clear separation between¬†**servers**¬†and¬†**clients**¬†to create a flexible and efficient architecture.The primary goals of this project are as follows:

1. **Master-Master architecture**
   * All servers operate equally, eliminating single points of failure (SPOF).
2. **Server-Client separation**
   * Clients can seamlessly access the system while the internal operations are optimized for distributed workloads.
3. **Automatic recovery**
   * In case of server failures, other nodes automatically handle recovery to maintain uninterrupted service.
4. **Automatic data synchronization**
   * Efficiently synchronizing data across nodes while ensuring consistency.
5. **Leveraging Python and PostgreSQL**
   * Combining Python's flexibility with PostgreSQL's robust features.

# Current Tools

For this project, I‚Äôm focusing on the following two key modules:

* **psycopg3**: To enable efficient communication with PostgreSQL, especially with its asynchronous capabilities.
* **aioquic**: For leveraging the QUIC protocol to achieve fast and reliable data synchronization, particularly for server-client communications in a distributed setup.

# Challenges and Feedback Needed

Here are some specific points where I‚Äôd love to get your insights:

1. **Server-Client Design Approach**
   * What‚Äôs the best way to dynamically determine which server the client should connect to in a distributed master-master setup?
   * Any recommendations for handling automatic failover, where clients detect server failures and switch to another server seamlessly?
2. **Using psycopg3 and aioquic**
   * Any tips on best practices for asynchronous operations with psycopg3 or optimizing aioquic for this use case? Are there other libraries I should consider?
3. **Distributed Database Challenges**
   * In a master-master architecture, what are the best approaches to address consistency and conflict resolution? Are there any recommended algorithms or design patterns?
4. **System Name Suggestions**
   * I‚Äôm considering names like ‚ÄúPostMasterSync‚Äù or ‚ÄúPolyMaster,‚Äù but I‚Äôd love to hear any creative suggestions!

# The Potential of This Project

This project aims to explore new possibilities in distributed databases by combining high availability and flexibility. With the power of Python and PostgreSQL, I‚Äôm excited to see how far this idea can go.I truly value the community‚Äôs knowledge and insights, and I‚Äôm looking forward to your feedback and ideas!Thank you for your time and support",tp-li,1gwghji,https://reddit.com/r/Python/comments/1gwghji/creating_a_python_system_to_turn_all_postgresql/,https://www.reddit.com/r/Python/comments/1gwghji/creating_a_python_system_to_turn_all_postgresql/,2024-11-21 13:39:13,8,0.71,8,0,6,0,0,False,False,True,False,False,Discussion,self,t3_1gwghji
Python,"Just published part 2 of my articles on Python Project Management and Packaging, illustrated with uv","
Hey everyone,

Just finished the second part of my comprehensive guide on Python project management. This part covers both building packages and publishing.

It's like the first article, the goal is to dig in the PEPs and specifications to understand what the standard is, why it came to be and how. This is was mostly covered in the build system section of the article.

The article: https://reinforcedknowledge.com/a-comprehensive-guide-to-python-project-management-and-packaging-concepts-illustrated-with-uv-part-2/

I have tried to implement some of your feedback. I worked a lot on the typos (I believe there aren't any but I may be wrong), and I tried to divide the article into three smaller articles:
- Just the high level overview: https://reinforcedknowledge.com/a-comprehensive-guide-to-python-project-management-and-packaging-part-2-high-level-overview/
- The deeper dive into the PEPs and specs for build systems: https://reinforcedknowledge.com/a-comprehensive-guide-to-python-project-management-and-packaging-part-2-source-trees-and-build-systems-interface/
- The deeper dive into PEPs and specs for package formats: https://reinforcedknowledge.com/a-comprehensive-guide-to-python-project-management-and-packaging-part-2-sdists-and-wheels/
- Editable installs and customizing the build process (+ custom hooks): https://reinforcedknowledge.com/a-comprehensive-guide-to-python-project-management-and-packaging-part-ii-editable-installs-custom-hooks-and-more-customization/

In the parent article there are also two smalls sections about `uv build` and `uv publish`. I don't think they deserve to be in a separate smaller article and I included them for completeness but anyone can just go `uv help &lt;command&gt;` and read about the command and it'd be much better. I did explain some small details that I believe that not everyone knows but I don't think it replaces your own reading of the doc for these commands.


In this part I tried to understand two things:

1- How the tooling works, what is the standard for the build backend, what it is for the build frontend, how do they communicate etc. I think it's the most valuable part of this article. There was a lot to cover, the build environment, how the PEP considered escape hatches and how it thought of some use cases like if you needed to override a build requirement etc. That's the part I enjoyed reading about and writing. I think it builds a deep understand of how these tools work and interact with each other, and what you can expect as well.

There are also two toy examples that I enjoyed explaining, the first is about editable installs, how they differ when they're installed in a project's environment from a regular install.

The second is customising the build process by going beyond the standard with custom hooks. A reader asked in a comment on the first part about integrating Pyarmor as part of its build process so I took that to showcase custom hooks with the `hatchling` build backend, and made some parallels with the specification.

2- What are the package formats for Python projects. I think for this part you can just read the high level overview and go read the specifications directly. Besides some subsections like explaining some particular points in extracting the tarball or signing wheels etc., I don't think I'm bringing much here. You'll obviously learn about the contents of these package formats and how they're extracted / installed, but I copy pasted a lot of the specification. The information can be provided directly without paraphrasing or writing a prose about it. When needed, I do explain a little bit, like why installers must replace leading slashes in files when installing a wheel etc.


I hope you can learn something from this. If you don't want to read through the articles don't hesitate to ask a question in the comments or directly here on Reddit. I'll answer when I can and if I can üòÖ

I still don't think my style of writing is pleasurable or appealing to read but I enjoyed the learning, the understanding, and the writing.

And again, I'l always recommend reading the PEPs and specs yourself, especially the rejected ideas sections, there's a lot of insight to gain from them I believe.

EDIT: Added the link for the sub-article about ""Editable installs and customizing the build process"".",ReinforcedKnowledge,1gw1fe6,https://reddit.com/r/Python/comments/1gw1fe6/just_published_part_2_of_my_articles_on_python/,https://www.reddit.com/r/Python/comments/1gw1fe6/just_published_part_2_of_my_articles_on_python/,2024-11-20 23:10:14,93,0.95,93,0,12,0,0,False,False,True,False,False,Tutorial,self,t3_1gw1fe6
Python,Use python to build mk Converter,"üöÄ Check out my URL/PDF/DOCX to Markdown Converter!

Hey fellow developers! üëã

I'm super excited to share a tool I've been working on that I think might make your life a bit easier. You know that annoying process of converting documents to Markdown? Well, I built something to handle that! 

**What does it do?**
- Converts web pages to Markdown with just a URL
- Transforms PDF files to Markdown (using pdfplumber)
- Converts DOCX files to clean Markdown
- Lets you preview the rendered result right there
- Comes with copy/download buttons for quick access

I built it using FastAPI for the backend (it's crazy fast! ‚ö°) and kept the frontend super clean and simple. You literally just paste a URL or upload a file, hit convert, and boom! üí• You've got your Markdown.

**Why I made this:**
I got tired of manually converting docs for my documentation work, and thought others might find this useful too. Plus, I wanted to learn more about FastAPI and document processing in Python.

**Tech stack:**
- FastAPI (because who doesn't love async Python? üêç)
- pdfplumber for PDF parsing
- python-docx for Word docs
- marked.js for the preview
- Basic HTML/CSS/JS for the frontend

The code is open source, and I'd love to get your feedback or contributions! Check out the screenshots in the README to see it in action.

**Try it out:**
1. Clone the repo
2. Install dependencies
3. Run with uvicorn
4. Convert all the things! üéâ

What do you think? Would love to hear your thoughts or suggestions for improvements! And if anyone wants to contribute, PRs are more than welcome! ü§ù

[py-2-md](https://github.com/DanielZhui/py-2-md)

Thanks for all the feedback! I'm already working on some of your suggestions! üôè",wollensZhang,1gwfscj,https://reddit.com/r/Python/comments/1gwfscj/use_python_to_build_mk_converter/,https://www.reddit.com/r/Python/comments/1gwfscj/use_python_to_build_mk_converter/,2024-11-21 13:04:26,5,0.6,5,0,3,0,0,False,False,True,False,False,News,self,t3_1gwfscj
Python,MetaDataScraper: A Python Package for scraping Facebook page data with ease!,"Hey everyone! üëã

I‚Äôm excited to introduce **MetaDataScraper**, a Python package designed to automate the extraction of valuable data from Facebook pages. Whether you're tracking follower counts, post interactions, or multimedia content like videos, this tool makes scraping Facebook page data a breeze. No API keys or tedious manual effort required ‚Äî just pure automation! üòé

Usage docs here at [ReadTheDocs](https://metadatascraper.readthedocs.io/en/latest/).

# Key Features:

* Automated Extraction: Instantly fetch follower counts, post texts, likes, shares, and video links from public Facebook pages.
* Comprehensive Data Retrieval: Get detailed insights from posts, including text content, interactions (likes, shares), and multimedia (videos, reels, etc.).
* Loginless Scraping: With the LoginlessScraper class, no Facebook login is needed. Perfect for scraping public pages.
* Logged-In Scraping: The LoggedInScraper class allows you to login to Facebook and bypass the limitations of loginless scraping. Access more content and private posts if needed.
* Headless Operation: Scrapes data silently in the background (without opening a visible browser window) ‚Äî perfect for automated tasks or server environments.
* Flexible &amp; Easy-to-Use: Simple setup, clear method calls, and works seamlessly with Selenium WebDriver.

# Example Usage:

1. Installation: Simply install via pip:

&amp;#8203;

    pip install MetaDataScraper

2) Loginless Scraping (no Facebook login required):

    from MetaDataScraper import LoginlessScraper
    
    page_id = ""your_target_page_id""
    scraper = LoginlessScraper(page_id)
    result = scraper.scrape()
    
    print(f""Followers: {result['followers']}"")
    print(f""Post Texts: {result['post_texts']}"")

3) Logged-In Scraping (for more access):

    from MetaDataScraper import LoggedInScraper
    
    page_id = ""your_target_page_id""
    email = ""your_facebook_email""
    password = ""your_facebook_password""
    scraper = LoggedInScraper(page_id, email, password)
    result = scraper.scrape()
    
    print(f""Followers: {result['followers']}"")
    print(f""Post Likes: {result['post_likes']}"")
    print(f""Video Links: {result['video_links']}"")

# Comparision to existing alternatives

* Ease of Use: Setup is quick and easy ‚Äî just pass the Facebook page ID and start scraping!
* No Facebook API Required: No need for dealing with Facebook's complex API limits or token issues. This package uses Selenium for direct web scraping, which is much more flexible.
* Better Data Access: With the LoggedInScraper, you can scrape content that might be unavailable to public visitors, all using your own Facebook account credentials.
* Updated Code Logic: With Meta's code updating quite often, many of the now existing scraper packages are defunct. This package is continuously tested and monitored to make sure that the scraper remains functional.

# Target Audience:

* Data Analysts: For tracking page metrics and social media analytics.
* Marketing Professionals: To monitor engagement on Facebook pages and competitor tracking.
* Researchers: Anyone looking to gather Facebook data for research purposes.
* Social Media Enthusiasts: Those interested in scraping Facebook data for personal projects or insights.

# Dependencies:

* Selenium
* WebDriver Manager

If you‚Äôre interested in automating your data collection from Facebook pages, **MetaDataScraper** will save you tons of time. It's perfect for anyone who needs structured, automated data without getting bogged down by API rate limits, login barriers, or manual work. Check it out on [GitHub](https://github.com/ishan-surana/MetaDataScraper/), if you want to dive deeper into the code or contribute. I‚Äôve set up a [Discord server](https://discord.com/invite/BWrJVYrTWy) for my projects, including MetaDataScraper, where you can get updates, ask questions, or provide feedback as you try out the package. It‚Äôs a new space, so feel free to help shape the community! üöÄ

Looking forward to seeing you there!

Hope it helps some of you automate your Facebook scraping tasks! üöÄ Let me know if you have any questions or run into any issues. I‚Äôm always open to feedback!",TempestTRON,1gwn9yd,https://reddit.com/r/Python/comments/1gwn9yd/metadatascraper_a_python_package_for_scraping/,https://www.reddit.com/r/Python/comments/1gwn9yd/metadatascraper_a_python_package_for_scraping/,2024-11-21 19:01:12,0,0.45,0,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1gwn9yd
Python,Generate Realistic Podcast Sessions Programmatically,"Hey everyone! üëã

I just released `podcast_tts`, a Python library that generates **realistic podcasts and dialogues** with multi-speaker audio, background music, and professional-quality mixing‚Äîall running **100% locally**.

# What My Project Does

`podcast_tts` allows you to programmatically create high-quality audio sessions with multiple speakers, dynamic or premade voice profiles, and customizable background music. You can save the output as MP3 or WAV files and even assign playback to specific audio channels for spatial separation.

It‚Äôs designed to be flexible, whether you‚Äôre building an API with FastAPI or experimenting with personal projects.

# Target Audience

This library is perfect for:

* Developers needing a **local TTS solution** for privacy or offline use.
* Engineers building backend systems for **audio generation** (e.g., podcasts or virtual assistants).
* Anyone looking for an all-in-one tool for **dialogue generation** with professional audio quality.

# Comparison to Alternatives

Unlike many TTS libraries that rely on cloud services, `podcast_tts` is fully offline, ensuring privacy and reducing latency. It also integrates features like **multi-speaker support**, **background music mixing**, and **text normalization**, which are often missing or require multiple tools to achieve.

The project is **open source**, and you can find it on GitHub here: [GitHub Repo](https://github.com/puntorigen/podcast_tts).  
It‚Äôs also available on **PyPI** for easy installation: `pip install podcast_tts`.

I‚Äôve shared more details in a [blog post](https://www.linkedin.com/pulse/creating-realistic-podcasts-python-developers-guide-schaffner-bofill-rdgue/?trackingId=KVXkcD61TX6DTgTHZ0Cagw%3D%3D) on LinkedIn and would love to hear your feedback! Let me know if you try it out or have ideas for improvement. üòä",Popular_Being7765,1gw5j21,https://reddit.com/r/Python/comments/1gw5j21/generate_realistic_podcast_sessions/,https://www.reddit.com/r/Python/comments/1gw5j21/generate_realistic_podcast_sessions/,2024-11-21 02:25:33,13,0.78,13,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gw5j21
Python,Networking applications should not be opening sockets,"From my first development project involving networking I was hooked. I also found some areas of networking software a bit unresolved. There was some strong modeling for people who make networking components but that seemed to peter out after the sockets library. Nobody seemed to have a good compelling way to bundle all that block I/O, byte framing, encoding/decoding, message dispatching etc into something that was reused from project to project.

I finally did something about this and have produced a software library. I also wrote a discussion paper that is the first link in the readme of the following github repo. The repo contains demonstration modules that are referred to in the other readme links.

[Networking is not about sockets](https://github.com/mr-ansar/from-sketches-to-networking-code)

Is there anyone else out there that has thought along similar lines? Has anyone seen something better?",Public_Being3163,1gw3hwi,https://reddit.com/r/Python/comments/1gw3hwi/networking_applications_should_not_be_opening/,https://www.reddit.com/r/Python/comments/1gw3hwi/networking_applications_should_not_be_opening/,2024-11-21 00:50:40,12,0.75,12,0,10,0,0,False,False,True,False,False,Discussion,self,t3_1gw3hwi
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1gw2e4u,https://reddit.com/r/Python/comments/1gw2e4u/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1gw2e4u/thursday_daily_thread_python_careers_courses_and/,2024-11-21 00:00:08,10,1.0,10,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gw2e4u
Python,11 Python Boilerplate Code Snippets Every Developer Needs,"Python's simplicity makes it a favorite among developers, especially in trending fields like AI, machine learning, and automation. But let's face it‚Äîrepeating boilerplate code can be a drag. That‚Äôs where **Python snippets** come in!

From validating emails to shuffling lists, we‚Äôve rounded up 11 essential Python boilerplate snippets to simplify your daily tasks and supercharge your workflow:

# üîç 1. Validate Email Formats (Regex Simplified)

Use regular expressions to validate email strings efficiently:

    pythonCopy codeimport re  
    def validate_email(email):  
        email_pattern = re.compile(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$')  
        return bool(email_pattern.match(email))  
    

# ‚úÇÔ∏è 2. Slice Strings &amp; Lists Like a Pro

Access sub-elements directly without loops for cleaner code:

    pythonCopy codemy_string = ""Hello, World!""  
    print(my_string[0:5])  # Output: Hello  
    

# üîÑ 3. Compare Words: Are They Anagrams?

Quickly check if two strings are anagrams with `collections.Counter`:

    pythonCopy codefrom collections import Counter  
    def are_anagrams(word1, word2):  
        return Counter(word1) == Counter(word2)  
    

# üÜï 4. Capitalize Words with title()

Effortlessly format strings for clean output:

    pythonCopy codeinput_string = ""hello world""  
    print(input_string.title())  # Output: Hello World  
    

# üîç 5. Find Differences Between Sets

Identify unique elements between two sets using `difference()`:

    pythonCopy codeset1 = {1, 2, 3}  
    set2 = {3, 4, 5}  
    print(set1.difference(set2))  # Output: {1, 2}  
    

And there‚Äôs more! From finding the most frequent elements in a list to using `shuffle()` for randomizing data, these snippets save you time and hassle.

  
üëâ Dive into the [full post and access all 11 snippets](https://pieces.app/blog/11-python-boilerplate-code-snippets-every-developer-needs?utm_source=reddit&amp;utm_medium=referral&amp;utm_campaign=r4).",Only_Piccolo5736,1gx1nwb,https://reddit.com/r/Python/comments/1gx1nwb/11_python_boilerplate_code_snippets_every/,https://www.reddit.com/r/Python/comments/1gx1nwb/11_python_boilerplate_code_snippets_every/,2024-11-22 06:34:21,0,0.09,0,0,8,0,0,False,False,True,False,False,Resource,self,t3_1gx1nwb
Python,moka-py: A high performance caching library for Python written in Rust with TTL/TTI support,"Hello!

I'm exited to share my first Rust lib for Python ‚Äî [moka-py](https://github.com/deliro/moka-py)!

# What My Project Does

**moka-py**¬†is a Python binding for the highly efficient¬†[Moka](https://github.com/moka-rs/moka)¬†caching library written in Rust. This library allows you to leverage the power of Moka's high-performance, feature-rich cache in your Python projects.

# Key Features:

* **Synchronous Cache:**¬†Supports thread-safe, in-memory caching for Python applications.
* **TTL Support:**¬†Automatically evicts entries after a configurable time-to-live (TTL).
* **TTI Support:**¬†Automatically evicts entries after a configurable time-to-idle (TTI).
* **Size-based Eviction:**¬†Automatically removes items when the cache exceeds its size limit using the TinyLFU policy.
* **Concurrency:**¬†Optimized for high-performance, concurrent access in multi-threaded environments.
* **Fully typed:** mypy/pyright friendly. Even decorators

# Example (`@lru_cache` drop-in replacement but with TTL and TTI support):

```
from time import sleep
from moka_py import cached


@cached(maxsize=1024, ttl=10.0, tti=1.0)
def f(x, y):
    print(""hard computations"")
    return x + y


f(1, 2)  # calls computations
f(1, 2)  # gets from the cache
sleep(1.1)
f(1, 2)  # calls computations (since TTI has passed)
```

# One more example:

```
from time import sleep
from moka_py import Moka


# Create a cache with a capacity of 100 entries, with a TTL of 30 seconds
# and a TTI of 5.2 seconds. Entries are always removed after 30 seconds
# and are removed after 5.2 seconds if there are no `get`s happened for this time.
# 
# Both TTL and TTI settings are optional. In the absence of an entry, 
# the corresponding policy will not expire it.
cache: Moka[str, list[int]] = Moka(capacity=100, ttl=30, tti=5.2)

# Insert a value.
cache.set(""key"", [3, 2, 1])

# Retrieve the value.
assert cache.get(""key"") == [3, 2, 1]

# Wait for 5.2+ seconds, and the entry will be automatically evicted.
sleep(5.3)
assert cache.get(""key"") is None
```

# Target Audience

**moka-py** might be useful for short-term in-memory caching for frequently-asked data

# Comparison

* [cachetools](https://github.com/tkem/cachetools/) ‚Äî Pure Python caching library. 10-50% slower and has no typing

# TODO:
* Per-entry expiration
* Choosing between eviction policies (LRU/TinyLFU)
* Size-aware eviction
* Support async functions

# Links

* https://github.com/deliro/moka-py
* https://pypi.org/project/moka-py/",del1ro,1gvnsoh,https://reddit.com/r/Python/comments/1gvnsoh/mokapy_a_high_performance_caching_library_for/,https://www.reddit.com/r/Python/comments/1gvnsoh/mokapy_a_high_performance_caching_library_for/,2024-11-20 11:56:34,70,0.95,70,0,15,0,0,False,False,True,False,False,Showcase,self,t3_1gvnsoh
Python,Created an AI Research Assistant that actually DOES research! one query FULL document of knowledge!,"Automated-AI-Web-Researcher: After months of work, I've made a python program that turns local LLMs running on Ollama into online researchers for you, Literally type a single question or topic and wait until you come back to a text document full of research content with links to the sources and a summary and ask it questions too! and more!



**What My Project Does**:



This automated researcher uses internet searching and web scraping to gather information, based on your topic or question of choice, it will generate focus areas relating to your topic designed to explore various aspects of your topic and investigate various related aspects of your topic or question to retrieve relevant information through online research to respond to your topic or question. The LLM breaks down your query into up to 5 specific research focuses, prioritising them based on relevance, then systematically investigates each one through targeted web searches and content analysis starting with the most relevant.

Then after gathering the content from those searching and exhausting all of the focus areas, it will then review the content and use the information within to generate new focus areas, and in the past it has often finding new, relevant focus areas based on findings in research content it has already gathered (like specific case studies which it then looks for specifically relating to your topic or question for example), previously this use of research content already gathered to develop new areas to investigate has ended up leading to interesting and novel research focuses in some cases that would never occur to humans although mileage may vary this program is still a prototype but shockingly it, it actually works!.

Key features:

* Continuously generates new research focuses based on what it discovers
* Saves every piece of content it finds in full, along with source URLs
* Creates a comprehensive summary when you're done of the research contents and uses it to respond to your original query/question
* Enters conversation mode after providing the summary, where you can ask specific questions about its findings and research even things not mentioned in the summary should the research it found provide relevant information about said things.
* You can run it as long as you want until the LLM‚Äôs context is at it‚Äôs max which will then automatically stop it‚Äôs research and still allow for summary and questions to be asked. Or stop it at anytime which will cause it to generate the summary.
* But it also Includes pause feature to assess research progress to determine if enough has been gathered, allowing you the choice to unpause and continue or to terminate the research and receive the summary.
* Works with popular Ollama local models (recommended phi3:3.8b-mini-128k-instruct or phi3:14b-medium-128k-instruct which are the ones I have so far tested and have worked)
* Everything runs locally on your machine, and yet still gives you results from the internet with only a single query you can have a massive amount of actual research given back to you in a relatively short time.

The best part? You can let it run in the background while you do other things. Come back to find a detailed research document with dozens of relevant sources and extracted content, all organised and ready for review. Plus a summary of relevant findings AND able to ask the LLM questions about those findings. Perfect for research, hard to research and novel questions that you can‚Äôt be bothered to actually look into yourself, or just satisfying your curiosity about complex topics!

GitHub repo with full instructions:

[https://github.com/TheBlewish/Automated-AI-Web-Researcher-Ollama](https://github.com/TheBlewish/Automated-AI-Web-Researcher-Ollama)

(Built using Python, fully open source, and should work with any Ollama-compatible LLM, although only phi 3 has been tested by me)

**Target Audience**:

  
Anyone who values locally run LLMs, anyone who wants to do comprehensive research within a single input, anyone who like innovative and novel uses of AI which even large companies (to my knowledge) haven't tried yet.

If your into AI, if your curious about what it can do, how easily you can find quality information using it to find stuff for you online, check this out!

  
**Comparison**:

  
Where this differs from per-existing programs and applications, is that it conducts research continuously with a single query online, for potentially hundreds of searches, gathering content from each search, saving that content into a document with the links to each website it gathered information from. 

Again potentially hundreds of searches all from a single query, not just random searches either each is well thought out and explores various aspects of your topic/query to gather as much usable information as possible.

Not only does it gather this information, but it summaries it all as well, extracting all the relevant aspects of the info it's gathered when you end it's research session, it goes through all it's found and gives you the important parts relevant to your question. Then you can still even ask it anything you want about the research it has found, which it will then use any of the info it has gathered to respond to your questions.

To top it all off compared to other services like how ChatGPT can search the internet, this is completely open source and 100% running locally on your own device,  with any LLM model of your choosing although I have only tested Phi 3, others likely work too!",CuriousAustralianBoy,1gvlzax,https://reddit.com/r/Python/comments/1gvlzax/created_an_ai_research_assistant_that_actually/,https://www.reddit.com/r/Python/comments/1gvlzax/created_an_ai_research_assistant_that_actually/,2024-11-20 09:50:09,86,0.8,86,0,13,0,0,False,False,True,False,False,Showcase,self,t3_1gvlzax
Python,Migrating from black and flake8 to ruff,"as the title says, so i'm currently working on a relatively huge python/django codebase, built over the course of 6 years, which has been using black and flake8 for formatting and linting in pre-commit hook, both have their versions unupdated for about 3 years, now i have a somewhat difficult task on hand.

the formatting and linting engine is to be moved to ruff but in such a way that the formatting and linting changes reflected in codebase due to ruff are minimal, i can't seem to figure out a way of exporting either configs from black and flake8 in their current state so i can somehow replicate them in ruff to control the changes due to formatting. if anyone has been in a similar situation or know any potential way i can approach this, that would greatly help. cheers!

pre-commit-config.yaml (in its current state, as you can see versions are a bit older)

    repos:
    -   repo: https://github.com/psf/black
        rev: 19.10b0
        hooks:
        - id: black
          additional_dependencies: ['click==8.0.4']
    -   repo: https://github.com/pre-commit/pre-commit-hooks
        rev: v1.2.3
        hooks:
        - id: flake8
          args: [--max-line-length=120]
        - id: check-yaml",__Aaliyan__,1gvnfvi,https://reddit.com/r/Python/comments/1gvnfvi/migrating_from_black_and_flake8_to_ruff/,https://www.reddit.com/r/Python/comments/1gvnfvi/migrating_from_black_and_flake8_to_ruff/,2024-11-20 11:33:47,53,0.85,53,0,45,0,0,False,False,True,False,False,Discussion,self,t3_1gvnfvi
Python,Spelunking in Comments and Documentation for Security Footguns,"Hi everyone, we just posted a new article on interesting security footguns that could pop up in applications using third-party Elixir, Python, and Golang libraries. It's a fast read, so check it out! [https://blog.includesecurity.com/2024/11/spelunking-in-comments-and-documentation-for-security-footguns/](https://blog.includesecurity.com/2024/11/spelunking-in-comments-and-documentation-for-security-footguns/)",IncludeSec,1gvxlrz,https://reddit.com/r/Python/comments/1gvxlrz/spelunking_in_comments_and_documentation_for/,https://www.reddit.com/r/Python/comments/1gvxlrz/spelunking_in_comments_and_documentation_for/,2024-11-20 19:16:37,8,0.73,8,0,2,0,0,False,False,True,False,False,Resource,self,t3_1gvxlrz
Python,ImportSpy: Proactive Validation for External Python Modules,"Have you ever wondered how to ensure that external modules importing your code meet the requirements of your project? With ImportSpy, you can define rules that external modules must follow, ensuring smooth and reliable integration.

What ImportSpy Does:

ImportSpy is an open-source Python library that allows developers to enforce specific rules on external modules that import their code. It ensures these modules meet the required structure, including:
	‚Ä¢	Mandatory Functions: Ensure external modules define critical functions you rely on.
	‚Ä¢	Required Classes: Validate the presence of specific classes, along with their methods and attributes.
	‚Ä¢	Essential Variables: Check for the existence of key variables with their expected values.
	‚Ä¢	Environment Variables: Verify that external modules operate in a properly configured environment, with necessary environment variables set.
	‚Ä¢	Version Control: Enforce compatibility by specifying the required module version.

How It Works:

ImportSpy operates proactively, analyzing any module attempting to import your code. If the module does not comply with the rules you‚Äôve defined, ImportSpy raises a detailed error message highlighting exactly what is missing or non-compliant.

Comparison:

Unlike traditional runtime error detection tools, ImportSpy acts proactively by catching problems before the importing module can even run. Here‚Äôs how ImportSpy stands out:
	1.	Prevention over diagnosis: Instead of debugging unexpected issues after runtime, ImportSpy prevents them from occurring by validating external modules upfront.
	2.	Custom validation: Developers define their own rules, tailored to the project‚Äôs needs, from functions to environment variables.
	3.	Enhanced integration: Seamlessly works with CI/CD pipelines, ensuring compliance in automated workflows.
	4.	Actionable feedback: When a module fails validation, ImportSpy provides clear and specific error messages, reducing debugging time.

Other tools might validate only specific elements, like class methods or version numbers, but ImportSpy offers comprehensive, user-defined validation across all critical aspects of a module.

Why It Matters:

Without tools like ImportSpy, identifying errors caused by non-compliant modules can be a time-consuming and frustrating process. ImportSpy prevents these issues at the source by validating external modules during the import process, saving you time and improving the stability of your project.

Who Should Use It:

	‚Ä¢	Developers building modular or plugin-based architectures: ImportSpy helps ensure all components work seamlessly together.
	‚Ä¢	Teams prioritizing security and stability: ImportSpy blocks incorrect imports that could compromise your project.
	‚Ä¢	Anyone leveraging CI/CD pipelines: Ensure critical environment variables are always set as expected.

Key features:

	‚Ä¢	Proactive validation for external modules, catching issues before runtime.
	‚Ä¢	Clear and actionable error messages when modules are non-compliant.
	‚Ä¢	Support for validating environment variables, versioning, functions, and class structures.
	‚Ä¢	Lightweight and easy to integrate into any Python project.

You can find ImportSpy on GitHub with full documentation and examples to get started:

https://github.com/atellaluca/ImportSpy",atellaluca,1gvzy62,https://reddit.com/r/Python/comments/1gvzy62/importspy_proactive_validation_for_external/,https://www.reddit.com/r/Python/comments/1gvzy62/importspy_proactive_validation_for_external/,2024-11-20 21:25:34,6,0.8,6,0,11,0,0,False,False,True,False,False,Showcase,self,t3_1gvzy62
Python,Pyrogram: Command modulation like discord.py,"Hi everyone!

I‚Äôve been working with discord.py for a while, and one of the features I really love is the dynamic command loading system (Cogs). It keeps the codebase clean and scalable by organizing commands into separate files/modules.

Now, I‚Äôve started working with Pyrogram, and I find having all the bot‚Äôs logic in a single file quite messy. I‚Äôm looking for a way to dynamically load commands in main.py from separate files within a commands folder, similar to how Cogs work in Discord.py.

Here‚Äôs my current project structure:

```project/
‚îÇ
‚îú‚îÄ‚îÄ .venv/
‚îú‚îÄ‚îÄ secrets/
‚îÇ   ‚îú‚îÄ‚îÄ .env
‚îÇ   ‚îî‚îÄ‚îÄ config.py
‚îú‚îÄ‚îÄ commands/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ help.py
‚îÇ   ‚îú‚îÄ‚îÄ start.py
‚îÇ   ‚îú‚îÄ‚îÄ example.py
‚îú‚îÄ‚îÄ main.py
```

What I‚Äôm Looking For:

1. A way to dynamically discover and load all commands from the commands folder into main.py.

2. Ideally, commands should be added to the bot without modifying main.py directly.


If anyone has experience with this or can point me toward resources/examples, I‚Äôd appreciate it!",Dull_Caregiver_6883,1gvzn4s,https://reddit.com/r/Python/comments/1gvzn4s/pyrogram_command_modulation_like_discordpy/,https://www.reddit.com/r/Python/comments/1gvzn4s/pyrogram_command_modulation_like_discordpy/,2024-11-20 21:07:43,8,0.89,8,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1gvzn4s
Python,Looking for High-End Face Recognition Systems for Low-Resolution Feeds,"Hey everyone,
I've been working on a project related to face recognition systems, and I'm specifically looking for existing solutions or projects that focus on recognizing faces from low-resolution feeds. Does anyone have experience with or know of any high-end face recognition systems that perform well with low-resolution inputs?

Any insights or suggestions would be greatly appreciated!",Spidey_qbz,1gvoh92,https://reddit.com/r/Python/comments/1gvoh92/looking_for_highend_face_recognition_systems_for/,https://www.reddit.com/r/Python/comments/1gvoh92/looking_for_highend_face_recognition_systems_for/,2024-11-20 12:35:05,11,0.74,11,0,8,0,0,False,False,True,False,False,Discussion,self,t3_1gvoh92
Python,Boiler plate for flask back end.,I am looking for Flask boiler plate for creating backend services. I am exploring cookie cutter but it seems old. Is any other updated resource available ?,ksk99,1gvjp8p,https://reddit.com/r/Python/comments/1gvjp8p/boiler_plate_for_flask_back_end/,https://www.reddit.com/r/Python/comments/1gvjp8p/boiler_plate_for_flask_back_end/,2024-11-20 06:54:14,10,0.71,10,0,4,0,0,False,False,True,False,False,Resource,self,t3_1gvjp8p
Python,Retro Terminal Chatbot (GLaDOS),"Hey everyone! I‚Äôd like to share a Python project I‚Äôve been working on for a while now. It‚Äôs a chatbot based on GLaDOS from the Portal games, with a retro-style terminal interface and her iconic voice. I think any portal fans among you will enjoy it.

# What My Project Does

GLaDOS-Terminal is a fully interactive chatbot experience that brings the personality of GLaDOS to life.

* Chatting: The responses are generated using the llama3.2:3b model, giving her personality depth and sarcasm that feels true to the original character.
* Voice Synthesis: Her iconic voice is recreated using custom fine-tuned Tacotron 2 and HiFi-GAN models that I developed specifically for this project.
* UI and Visuals: The terminal is built using pygame combined with a custom moderngl shader, inspired by the retro visuals from the Portal end credits and [this ](https://github.com/Swordfish90/cool-retro-term)project.

# Target Audience

This project is mainly for:

* Portal fans who want a chance to talk to GLaDOS (or at least her chatbot counterpart).
* Developers or Python enthusiasts who are curious about integrating AI models, custom shaders, and real-time voice synthesis.
* Anyone looking for a cool and unique chatbot experience.

Right now, this is more of a showcase or experimental project since it‚Äôs somewhat technical to set up. However, I‚Äôm planning to release an .exe soon to make it more accessible for non-programmers.

# Comparison

There are other AI chatbots and text-to-speech projects out there, but here‚Äôs how this one stands out:

* GLaDOS Personality: This isn‚Äôt just a generic chatbot with GLaDOS references. I‚Äôve carefully crafted her responses and used a system prompt to stay true to her character.
* Custom Voice Models: The Tacotron 2 and HiFi-GAN models are my own forks, fine-tuned specifically for this project to capture her unique tone and speech patterns.
* Retro UI: The terminal interface isn‚Äôt a simple script running in the console; it‚Äôs a fully custom visual experience made with Python‚Äôs pygame and my own moderngl shader work.

# Links

* GitHub: [https://github.com/LuckeyDuckey/GLaDOS-Terminal](https://github.com/LuckeyDuckey/GLaDOS-Terminal)
* Demo: [https://www.reddit.com/r/Portal/comments/1gui3f4/gladosterminal/](https://www.reddit.com/r/Portal/comments/1gui3f4/gladosterminal/)

Let me know what you think! I‚Äôd love to hear your guys feedback :)",User_638,1gv92l4,https://reddit.com/r/Python/comments/1gv92l4/retro_terminal_chatbot_glados/,https://www.reddit.com/r/Python/comments/1gv92l4/retro_terminal_chatbot_glados/,2024-11-19 21:52:48,26,0.83,26,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gv92l4
Python,I am thinking of making a tool script that makes it easier for linux admins ,To many commands is a pain to recall the switches and so on. Anyone know of any shell script that can provide a menu then sub-menu of options? ,Gold-Temporary-3560,1gvhb2h,https://reddit.com/r/Python/comments/1gvhb2h/i_am_thinking_of_making_a_tool_script_that_makes/,https://www.reddit.com/r/Python/comments/1gvhb2h/i_am_thinking_of_making_a_tool_script_that_makes/,2024-11-20 04:25:56,7,0.63,7,0,7,0,0,False,False,True,False,False,Discussion,self,t3_1gvhb2h
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1gvbziu,https://reddit.com/r/Python/comments/1gvbziu/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1gvbziu/wednesday_daily_thread_beginner_questions/,2024-11-20 00:00:09,5,0.86,5,0,5,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gvbziu
Python,Why threads in backend development might be good.,"Hey everyone! I made a short video which showcases why using threads might be a solid solution and choice in backend development

https://youtu.be/sepGXAqeBJs?si=MnxOJvabE_P8hqJK
",Grouchy_Algae_9972,1gvmqji,https://reddit.com/r/Python/comments/1gvmqji/why_threads_in_backend_development_might_be_good/,https://www.reddit.com/r/Python/comments/1gvmqji/why_threads_in_backend_development_might_be_good/,2024-11-20 10:47:09,0,0.29,0,0,2,0,0,False,False,True,False,False,Tutorial,self,t3_1gvmqji
Python,"Rewriting 4,000 lines of Python to migrate to Quart (async Flask)","[Talk Python rewritten in Quart (async Flask)](https://talkpython.fm/blog/posts/talk-python-rewritten-in-quart-async-flask/)

Here's a massive write up of why over at Talk Python we rewrote our website and why we chose Quart (async Flask). Lots of lessons here if you're choosing a framework for a project or considering rewriting your own. ",mikeckennedy,1gulzjt,https://reddit.com/r/Python/comments/1gulzjt/rewriting_4000_lines_of_python_to_migrate_to/,https://www.reddit.com/r/Python/comments/1gulzjt/rewriting_4000_lines_of_python_to_migrate_to/,2024-11-19 01:52:08,60,0.91,60,0,17,0,0,False,False,True,False,False,News,self,t3_1gulzjt
Python,Joe: writing a Django mini-clone article series,"Hey all!   
I've written a series of article that go through the process of building a minimal Django clone, which I hope could be a useful learning resource. 

[https://artoale.gitlab.io/joe](https://artoale.gitlab.io/joe)  

Feedback welcome! ",artoale,1gutct7,https://reddit.com/r/Python/comments/1gutct7/joe_writing_a_django_miniclone_article_series/,https://www.reddit.com/r/Python/comments/1gutct7/joe_writing_a_django_miniclone_article_series/,2024-11-19 09:29:55,15,0.79,15,0,2,0,0,False,False,True,False,False,Resource,self,t3_1gutct7
Python,Using Python's pathlib module,"I've written a hybrid ""why pathlib"" and ""pathlib cheat sheet"" post: [Python's pathlib module](https://www.pythonmorsels.com/pathlib-module/).

I see this resource as a living document, so feedback is very welcome.",treyhunner,1guhphv,https://reddit.com/r/Python/comments/1guhphv/using_pythons_pathlib_module/,https://www.reddit.com/r/Python/comments/1guhphv/using_pythons_pathlib_module/,2024-11-18 22:35:45,93,0.9,93,0,25,0,0,False,False,True,False,False,Resource,self,t3_1guhphv
Python,I'm stucking in installing numpy ,"Hello everyone , im trying to install numpy library on my terminal and always i face a problem on installing backend dependencies, i try to solve this problem by adding cmake to my system path and the c/cpp compiler and the problem continue , then i try installing .whl files of numpy and still the same problem , can anyone here have a solution for this problem . ",MoistRiver6695,1gvkpbm,https://reddit.com/r/Python/comments/1gvkpbm/im_stucking_in_installing_numpy/,https://www.reddit.com/r/Python/comments/1gvkpbm/im_stucking_in_installing_numpy/,2024-11-20 08:08:31,0,0.33,0,0,14,0,0,False,False,True,False,False,Discussion,self,t3_1gvkpbm
Python,"If you use uv, what are your use cases for uvx?","I really love `uv` as my new All-In-One tool for python project management.  
I also really like the `uv tool` functionality for tools I regularly use like Harlequin or my kanban/tasks apps `kanban-python` and more lately the less minimal `kanban-tui`.

But I it never really clicked for me when I would use `uvx` which basically installs a tool temporary and after usage removes it again (though still cached, so future uses go faster).

Currently I am on my way to release v0.4.0 of [kanban-tui](https://github.com/Zaloog/kanban-tui) with multi board support and board-individual columns. I develop those features in a new branch and just discovered that you can use something like:

```pwhs
uvx --from git+https://github.com/Zaloog/kanban-tui@lg/independent-board-columns ktui demo
```
to install the current development status from a custom branch (or even commit)
within seconds. A great way to quickly share the current progress of your work with friends or use your tool on your system already without creating a new release yet.

I am curious to hear, what are your use cases for `uvx`, and what are your favourite tools to use with it?

",Zaloog1337,1guf2fh,https://reddit.com/r/Python/comments/1guf2fh/if_you_use_uv_what_are_your_use_cases_for_uvx/,https://www.reddit.com/r/Python/comments/1guf2fh/if_you_use_uv_what_are_your_use_cases_for_uvx/,2024-11-18 20:45:59,92,0.94,92,0,36,0,0,False,False,True,False,False,Discussion,self,t3_1guf2fh
Python,Much faster than pandas for simple cases? Leopards...,"... in _particular_ if your data is from CSV:

https://github.com/mkalioby/leopards

Let's admit it guys - Pandas _can_ be overkill, great as it is.",Fancy-Ad-6078,1gvhsz1,https://reddit.com/r/Python/comments/1gvhsz1/much_faster_than_pandas_for_simple_cases_leopards/,https://www.reddit.com/r/Python/comments/1gvhsz1/much_faster_than_pandas_for_simple_cases_leopards/,2024-11-20 04:54:04,0,0.35,0,0,7,0,0,False,False,True,False,False,Resource,self,t3_1gvhsz1
Python,.env safely share ,"How do you manage your .env safely? 

Mostly when you are in a small group and you can‚Äôt be setting up everything to the develop branch all the time 

How do you share that .env with each other and test it locally? ",Used-Feed-3221,1gud1h9,https://reddit.com/r/Python/comments/1gud1h9/env_safely_share/,https://www.reddit.com/r/Python/comments/1gud1h9/env_safely_share/,2024-11-18 19:22:05,45,0.86,45,0,50,0,0,False,False,True,False,False,Discussion,self,t3_1gud1h9
Python,Basic Components: Server-Side UI Components for Python Web Apps (Feedback Appreciated),"Hi everyone! üëã

I'm excited to share a project I've been working on called **Basic Components**, which ports shadcn/ui component to the Python/Jinja.

# What My Project Does

**Basic Components** is a collection of reusable, **server-side UI components** built with [JinjaX](https://jinjax.scaletti.dev/), [htmx](https://htmx.org/), and [Alpine.js](https://alpinejs.dev/) and [Tailwind CSS](https://tailwindcss.com/). It's a port of [shadcn/ui](https://ui.shadcn.com) to Python/Jinja. It allows you to build dynamic, responsive web applications using Python web frameworks like **FastAPI**, **Django**, and **Flask**.

**Key Features**:

* **Copy/Paste Components**: No package to install; simply copy the components you need into your project.
* **Full Customization**: Complete control over the components to modify and extend as needed.
* **Tailwind CSS Styling**: Styled using Tailwind CSS utility classes for consistent and rapid UI development.
* **Accessibility-First Design**: Components are built with accessibility in mind, based on shadcn/ui.
* **Dark Mode Support**: Built-in theming with light and dark modes.
* **Markup Compatibility**: The component markup is the same as in shadcn/ui, making it easy to adapt and integrate.

# Target Audience

This project is intended for Python web developers who prefer a server-first architecture and want to build modern, interactive web applications without relying heavily on client-side JavaScript frameworks.

# Comparison to Existing Alternatives

While there are many frontend component libraries available for JavaScript frameworks like React or Vue, Python web development has fewer options for modern, component-based UI development. **Basic Components** differs by:

* **Server-Side Rendering**: Components are rendered on the server using JinjaX, improving performance, SEO, and accessibility.
* **No Additional Dependencies**: Unlike traditional libraries, there's no package to install; you own the code and can customize it freely.
* **Integration with Python Frameworks**: Runs on anything that supports Jinja templates. I've included examples for **FastAPI**, **Django**, and **Flask**.
* **Minimal Client-Side JavaScript**: Uses **htmx** and **Alpine.js** for dynamic behavior without the overhead of heavy frontend frameworks.
* **Markup Parity with shadcn/ui**: Since components are based on shadcn/ui, the markup is the same, making it easy to transition components created for  shadcn/ui with minimal changes.
* **AI**: I've leveraged LLMs to port code from the shadcn/ui React versions to JinjaX, using Alpine.js for client side logic and maintaining all of the Tailwind CSS styles. I've included a [guide](https://github.com/basicmachines-co/basic-components/blob/main/llms.md) for porting components also that you can drop into an LLM chat for context.

# Example Usage

Here's how a component might look in your template:

    &lt;Button
      variant=""outline""
      hx-get=""/api/data""
      hx-target=""#result""
      x-on:click=""open = !open""
    &gt;
      Click me
    &lt;/Button&gt;

* `&lt;Button&gt;`: A server-side component rendered with JinjaX.
* `hx-get` **/** `hx-target`: **htmx** attributes for dynamic server communication.
* `x-on:click`: **Alpine.js** directive for client-side interactivity.
* **Markup Compatibility**: The markup is consistent with shadcn/ui components, allowing for familiarity and ease of use.

# Links

* **Documentation with Demos**: [https://components.basicmachines.co/](https://components.basicmachines.co/)
* **GitHub Repository**: [https://github.com/basicmachines-co/basic-components](https://github.com/basicmachines-co/basic-components)
* **Why I did this**: [https://components.basicmachines.co/docs/modern\_tools](https://components.basicmachines.co/docs/modern_tools)

# Feedback Welcome

The project is MIT licensed and is a work in progress, and I would greatly appreciate any feedback, suggestions, or contributions if you are interested.

Thank you for your time, and I hope you find **Basic Components** useful!

**Note**: This project is not affiliated with [shadcn](https://twitter.com/shadcn). It's an unofficial port **based on** shadcn/ui, adapted for Python/Jinja.

Thanks!",phernand3z,1gue0s5,https://reddit.com/r/Python/comments/1gue0s5/basic_components_serverside_ui_components_for/,https://www.reddit.com/r/Python/comments/1gue0s5/basic_components_serverside_ui_components_for/,2024-11-18 20:02:25,21,0.9,21,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1gue0s5
Python,Support Python: Our End-of-Year Fundraiser with PyCharm Discount is live,"Our end of year fundraiser and membership drive has launched! There are 3 ways to join in to support Python and the PSF:
- [30% off @PyCharm
 from JetBrains](https://lp.jetbrains.com/psf-q4-2024-fundraiser-3783/)
- [Donate directly](https://psfmember.org/civicrm/contribute/transact/?reset=1&amp;id=52)
- [Become a member](https://www.python.org/psf/membership/supporting/)

[Learn more](https://pyfound.blogspot.com/2024/11/help-power-python-2024-fundraiser.html)

Python empowers you to build amazing tools, build/grow companies, and secure jobs‚Äîall for free! Consider giving back today.",monorepo,1gu7g70,https://reddit.com/r/Python/comments/1gu7g70/support_python_our_endofyear_fundraiser_with/,https://www.reddit.com/r/Python/comments/1gu7g70/support_python_our_endofyear_fundraiser_with/,2024-11-18 15:35:03,29,0.75,29,0,6,0,0,False,False,True,False,False,:pythonLogo: Official Event,self,t3_1gu7g70
Python,"Raspberry Pi camera modules, machine vision and astro cameras in Python","Right now we have a lot of camera modules for Raspberry Pi but also for compatible Arduino boards (ArduCam). Those camera modules can offer higher resolution than webcams as well as more refined control of exposure time, gain and so on - hand for prototyping projects or unconventional imaging.

Webcams themselves can also be used in Python through OpenCV and there are some ""premium"" models offering actual 4K and not absurd resizing (interpolation). Even decent 1080p cameras can give a good quality image - but they do lack more refined control over shutter speed or output formats.

Machine vision cameras are used by various industries, often integrated with advanced commercial software - wherever a medical camera or production line testing/validation systems. Some vendors do offer bindings to some scripting languages, including Python. Those cameras aside of color sensors are available with mono sensors as well and those could be used with custom filters to do UV imaging or something similar (IR imaging - but not thermal). Those cameras also offer lossless output.

Amateur astrophotography uses cameras similar to machine vision (planetary/lunar/solar imaging) with some cameras equipped with large sensors and active cooling for long exposure imaging. Those also can be used in custom projects and often have Python bindings or even Linux ARM support (some RPI based compact/remote-control imaging systems).

* Bunch of Raspberry Pi camera modules showcased: [https://rkblog.dev/posts/electronics/testing-raspberry-pi-cameras/](https://rkblog.dev/posts/electronics/testing-raspberry-pi-cameras/)
* Python bindings for various machine vision and astrophotography cameras: [https://rkblog.dev/posts/python/scripting-machine-vision-and-astronomical-cameras-python/](https://rkblog.dev/posts/python/scripting-machine-vision-and-astronomical-cameras-python/)
* Proof-of-concept GUI for a Ximea vision camera in PyQt and as a web app with Flask/JS: [https://rkblog.dev/posts/python/scripting-ximea-machine-vision-applications-python-flask-and-pyqt/](https://rkblog.dev/posts/python/scripting-ximea-machine-vision-applications-python-flask-and-pyqt/)",riklaunim,1gucbvz,https://reddit.com/r/Python/comments/1gucbvz/raspberry_pi_camera_modules_machine_vision_and/,https://www.reddit.com/r/Python/comments/1gucbvz/raspberry_pi_camera_modules_machine_vision_and/,2024-11-18 18:53:48,12,0.82,12,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1gucbvz
Python,Build a Crypto Market-Making Bot with Python (Live Demo in London),"Hey Python devs,

If you're interested in seeing how Python is used in algorithmic trading, we‚Äôre hosting an **in-person event in London** on **Monday, 25th November** where Jahan Zahid, PhD (co-founder of ProfitView and former algo trader at Bank of America), will give a **live demo** of building a crypto market-making algo.

Reserve your place [**here**](https://www.meetup.com/algorithmic-trading-london/events/304541878/) through Meetup

**What‚Äôs involved?**

* Writing and configuring the bot entirely in Python.
* Deploying it live to crypto markets to trade in real time.
* Exploring the strategies needed to automate market-making in real markets.

This session will dive into **real-world uses of Python in financial markets**, so it could be useful for those curious about Python in fintech, algorithmic trading, and crypto.

üìÖ **When:** Monday, 25th November, 7:00 PM  
üìç **Where:** The City Pride, London

It‚Äôs always fascinating to see Python at work in different domains, and I thought this might resonate with anyone exploring fintech or algo trading. Let me know if you‚Äôd like more details or resources on the topic!",tradrich,1gv1cfe,https://reddit.com/r/Python/comments/1gv1cfe/build_a_crypto_marketmaking_bot_with_python_live/,https://www.reddit.com/r/Python/comments/1gv1cfe/build_a_crypto_marketmaking_bot_with_python_live/,2024-11-19 16:34:15,0,0.29,0,0,2,0,0,False,False,True,False,False,News,self,t3_1gv1cfe
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1gujmbz,https://reddit.com/r/Python/comments/1gujmbz/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1gujmbz/tuesday_daily_thread_advanced_questions/,2024-11-19 00:00:09,3,0.64,3,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gujmbz
Python,Python @classmethod: examples emphasizing use cases in bioinformatics-related problems.,"This article delves into the structures and functionalities of the class method in Python. I have particularly used examples that emphasize the use cases in bioinformatics-related problems. 

[Python @classmethod: Life Sciences Applications and Examples.](https://lifescienceshub.wixsite.com/lifesciencehub/post/clssmethod)

Classmethods are made by assigning \`@classmethod\` decorators to methods in a class context. This enables a method to:

1. Access class states across all instances of the class.

2. Modify class states.

3. Act as a blueprint for creating instances of its class and other subclasses.

4. Access methods and attributes of the parent and/or sibling classes using \`super()\` without instantiation.

",learnwithscholar,1guzcuf,https://reddit.com/r/Python/comments/1guzcuf/python_classmethod_examples_emphasizing_use_cases/,https://www.reddit.com/r/Python/comments/1guzcuf/python_classmethod_examples_emphasizing_use_cases/,2024-11-19 15:11:14,0,0.27,0,0,7,0,0,False,False,True,False,False,Tutorial,self,t3_1guzcuf
Python,Launching Hercules: Open source agent for end to end software testing üí™,"Happy to launch Hercules: World's first opensource software testing agent. Feed in your tests, watch them run and get results (without code, maintenance or costs). Check it out here: [https://github.com/test-zeus-ai/testzeus-hercules](https://github.com/test-zeus-ai/testzeus-hercules)

* **What My Project Does:** Testing modern web applications can be difficult, with frequent changes and complex features making it hard to keep up. That‚Äôs where¬†**Hercules**¬†comes in. Hercules is the world‚Äôs first open-source testing agent, built to handle the toughest testing tasks so you don‚Äôt have to. It turns simple, easy-to-write Gherkin steps into fully automated¬†**end to end**¬†tests‚Äîno coding skills needed. Whether you‚Äôre working with tricky platforms like Salesforce or running tests in your CI/CD pipeline, Hercules adapts to your needs and takes care of the details. With Hercules, testing becomes simple, reliable, and efficient, helping teams everywhere deliver better software.
* **Target Audience**¬†: Software testers, SDET, Developers, QA, QE
* **Comparison**¬†: Hercules isn't just another testing tool‚Äîit's an¬†**agent**. Powered by synthetic intelligence that can¬†**think, reason, and react**¬†based on requirements, Hercules goes beyond simple automation scripts. We bring an industry-first approach to open-source agents for¬†**software testing**. This means faster, smarter, and more resilient testing cycles, especially for complex platforms. With¬†**industry-leading performance**¬†and a fully open-source foundation, Hercules combines powerful capabilities with community-driven flexibility, making top-tier testing accessible and transformative for everyone.",Unhappy-Economics-43,1gu5vtz,https://reddit.com/r/Python/comments/1gu5vtz/launching_hercules_open_source_agent_for_end_to/,https://www.reddit.com/r/Python/comments/1gu5vtz/launching_hercules_open_source_agent_for_end_to/,2024-11-18 14:25:28,13,0.69,13,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gu5vtz
Python,I made my own tetris on Python,"# What my project does

The project is to play the game tetris using the library pygame.

Here's the¬†[source code](https://github.com/RadoTheProgrammer/tetris/tree/main)¬†on github.

If you have time, please try my game or my source code if it works, and give some feedback to improve it, the gameplay, or the code, or anything else.

# Target Audience

For people who just want to have fun, or are ready to try some new projects.

# Comparison

Well, there's almost nothing special here, unless that the music is different (not the classical music of tetris). The main goal of this project is just to show my coding skills, and improve them.



And it would be great for me if you could leave a star on github, if you liked it, or just to support me !",RRTheGuy,1gubukk,https://reddit.com/r/Python/comments/1gubukk/i_made_my_own_tetris_on_python/,https://www.reddit.com/r/Python/comments/1gubukk/i_made_my_own_tetris_on_python/,2024-11-18 18:34:33,4,0.57,4,0,10,0,0,False,False,True,False,False,Showcase,self,t3_1gubukk
Python,Deply: keep your python architecture clean,"Hello everyone,

My name is Archil. I'm a Python/PHP developer originally from Ukraine, now living in Wroc≈Çaw, Poland. I've been working on a tool called [Deply](https://github.com/Vashkatsi/deply), and I'd love to get your feedback and thoughts on it.

# What My Project Does

**Deply** is a standalone Python tool designed to enforce architectural patterns and dependencies in large Python projects. Deply analyzes your code structure and dependencies to ensure that architectural rules are followed. This promotes cleaner, more maintainable, and modular codebases.

**Key Features:**

* **Layer-Based Analysis**: Define custom layers (e.g., models, views, services) and restrict their dependencies.
* **Dynamic Configuration**: Easily configure collectors for each layer using file patterns and class inheritance.
* **CI Integration**: Integrate Deply into your Continuous Integration pipeline to automatically detect and prevent architecture violations before they reach production.

# Target Audience

* **Who It's For**: Developers and teams working on medium to large Python projects who want to maintain a clean architecture.
* **Intended Use**: Ideal for production environments where enforcing module boundaries is critical, as well as educational purposes to teach best practices.

# Use Cases

* **Continuous Integration**: Add Deply to your CI/CD pipeline to catch architectural violations early in the development process.
* **Refactoring**: Use Deply to understand existing dependencies in your codebase, making large-scale refactoring safer and more manageable.
* **Code Reviews**: Assist in code reviews by automatically checking if new changes adhere to architectural rules.

# Comparison

While there are existing tools like [pydeps](https://github.com/thebjorn/pydeps) that visualize dependencies, Deply focuses on:

* **Enforcement Over Visualization**: Not just displaying dependencies but actively enforcing architectural rules by detecting violations.
* **Customization**: Offers dynamic configuration with various collectors to suit different project structures.

# Links

* **GitHub**: [https://github.com/Vashkatsi/deply](https://github.com/Vashkatsi/deply)
* **PyPI**: [https://pypi.org/project/deply/](https://pypi.org/project/deply/)

I'm eager to hear your thoughts, suggestions, or criticisms. Deply is currently at version 0.1.5, so it's not entirely stable yet, but I'm actively working on it. I'm open to pull requests and looking forward to making Deply a useful tool for the Python community.

Thank you for your time!",vashkatsi,1gthdpy,https://reddit.com/r/Python/comments/1gthdpy/deply_keep_your_python_architecture_clean/,https://www.reddit.com/r/Python/comments/1gthdpy/deply_keep_your_python_architecture_clean/,2024-11-17 16:32:03,282,0.95,282,0,62,0,0,False,False,True,False,False,Showcase,self,t3_1gthdpy
Python,ansiplot: Pretty (and legible) small console plots. ,"**What My Project Does**

Hi all! While developing something different I realized that it would be nice to have a way of plotting multiple curves in the console to get comparative insights (which of those curves is better or worse at certain regions). I am thinking of a 40x10 to 60x20 canvas and maybe 10+ curves that will probably be overlapping a lot.

I couldn't find something to match the exact use case, so I made yet another console plotter:

[https://github.com/maniospas/ansiplot](https://github.com/maniospas/ansiplot)

**Target Audience**

This is mostly a toy project in the sense that it covers the functionalities I am interested in and was made pretty quickly (in an evening). That said, I am creating it for my own production and will be polishing it as needed, so all feedback is welcome.

**Comparison**

My previous options were previously \[asciichart\](https://github.com/kroitor/asciichart), \[drawilleplot\](https://github.com/gooofy/drawilleplot) and \[asciiplot\](https://github.com/w2sv/asciiplot). I think ansiplot looks less ""clean"" because it is restricted to using one symbol per curve, creates thicker lines, and does not show axis tics other than the values for mins and maxs (of course, one can add bars to mark precise points).

The first two shortcomings are conscious design decision in service of two features I consider very important:  
\- The plots look pretty with ANSI colors, but different symbols still accommodate colorblind people and text file exports (there is an option to remove colors while getting the raw text). This is a production need that I think existing tools fail hard at - am I missing something obvious here?  
\- Ansiplot runs a simple heuristic (may evolve in the future) for mixing partially overlapping curves and still making some sense of which exhibit greater values. When there are many curves (especially ROC curves which is my intended use case) they tend to overlap a lot, and I needed something that would help tell where each one's value is going.

P.S. For the lack of axis tics, I am still designing a scheme to ensure a (mostly) predictable canvas size irrespective of whether numbers are big or small (I want to allow very small and very large numbers without the risk of them exceeding the plot limits).

  
**Edit**: Typos",Unlikely-Bed-1133,1gtvy3o,https://reddit.com/r/Python/comments/1gtvy3o/ansiplot_pretty_and_legible_small_console_plots/,https://www.reddit.com/r/Python/comments/1gtvy3o/ansiplot_pretty_and_legible_small_console_plots/,2024-11-18 03:49:01,31,0.91,31,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1gtvy3o
Python,SQLModel vs SQLAlchemy for production ,"Hey everyone, I was wondering whether the current releases of SQLModel is appropriate for production? Couldn‚Äôt find a recent post about this
I‚Äôm trying to set up a web app with fastapi backend and react frontend. Was deciding whether to pick SQLAlchemy or not",aerodynamics1,1gtrfpf,https://reddit.com/r/Python/comments/1gtrfpf/sqlmodel_vs_sqlalchemy_for_production/,https://www.reddit.com/r/Python/comments/1gtrfpf/sqlmodel_vs_sqlalchemy_for_production/,2024-11-17 23:57:45,32,0.82,32,0,25,0,0,False,False,True,False,False,Discussion,self,t3_1gtrfpf
Python,I started implementing an AsyncIO event loop in Rust,"The project is called *RLoop* and available [in the relevant GH repository](https://github.com/gi0baro/rloop).

# What My Project Does

RLoop is intended to be a 1:1 replacement for the standard library asyncio event loop. At the moment RLoop is still very pre-alpha, as it only supports I/O handles involving raw socket file descriptors. The aim is to reach a stable and feature-complete release in the next few months.

# Target Audience

RLoop is intended for every `asyncio` developer. Until the project reach a stable state though, is intended for use only in non-production environments and for testing purposes only.

# Comparison to Existing Alternatives

The main existing alternatives to RLoop are the standard library implementation and `uvloop`.

Aside from the lack of features of RLoop at this stage, some preliminary benchmarks on MacOS and Python 3.11 with a basic TCP echo show a 30% gain over the default `asyncio` implementation, while `uvloop` is still 50% faster.

___

Feel free to post your feedbacks, test RLoop within your environment and contribute :)",gi0baro,1gtmvdb,https://reddit.com/r/Python/comments/1gtmvdb/i_started_implementing_an_asyncio_event_loop_in/,https://www.reddit.com/r/Python/comments/1gtmvdb/i_started_implementing_an_asyncio_event_loop_in/,2024-11-17 20:30:54,16,0.82,16,0,13,0,0,False,False,True,False,False,Showcase,self,t3_1gtmvdb
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1gtrhgb,https://reddit.com/r/Python/comments/1gtrhgb/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1gtrhgb/monday_daily_thread_project_ideas/,2024-11-18 00:00:13,5,0.74,5,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gtrhgb
Python,AnyModal: A Python Framework for Multimodal LLMs,"[AnyModal](https://github.com/ritabratamaiti/AnyModal) is a modular and extensible framework for integrating diverse input modalities (e.g., images, audio) into large language models (LLMs). It enables seamless tokenization, encoding, and language generation using pre-trained models for various modalities.

### Why I Built AnyModal

I created AnyModal to address a gap in existing resources for designing vision-language models (VLMs) or other multimodal LLMs. While there are excellent tools for specific tasks, there wasn‚Äôt a cohesive framework for easily combining different input types with LLMs. AnyModal aims to fill that gap by simplifying the process of adding new input processors and tokenizers while leveraging the strengths of pre-trained language models.

### Features

- **Modular Design**: Plug and play with different modalities like vision, audio, or custom data types.
- **Ease of Use**: Minimal setup‚Äîjust implement your modality-specific tokenization and pass it to the framework.
- **Extensibility**: Add support for new modalities with only a few lines of code.

### Example Usage

```python
from transformers import ViTImageProcessor, ViTForImageClassification
from anymodal import MultiModalModel
from vision import VisionEncoder, Projector

# Load vision processor and model
processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224')
vision_model = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')
hidden_size = vision_model.config.hidden_size

# Initialize vision encoder and projector
vision_encoder = VisionEncoder(vision_model)
vision_tokenizer = Projector(in_features=hidden_size, out_features=768)

# Load LLM components
from transformers import AutoTokenizer, AutoModelForCausalLM
llm_tokenizer = AutoTokenizer.from_pretrained(""gpt2"")
llm_model = AutoModelForCausalLM.from_pretrained(""gpt2"")

# Initialize AnyModal
multimodal_model = MultiModalModel(
    input_processor=None,
    input_encoder=vision_encoder,
    input_tokenizer=vision_tokenizer,
    language_tokenizer=llm_tokenizer,
    language_model=llm_model,
    input_start_token='&lt;|imstart|&gt;',
    input_end_token='&lt;|imend|&gt;',
    prompt_text=""The interpretation of the given image is: ""
)
```

### What My Project Does

AnyModal provides a unified framework for combining inputs from different modalities with LLMs. It abstracts much of the boilerplate, allowing users to focus on their specific tasks without worrying about low-level integration.

### Target Audience

- **Researchers and developers** exploring multimodal systems.
- **Prototype builders** testing new ideas quickly.
- **Anyone experimenting with LLMs** for tasks like image captioning, visual question answering, and audio transcription.

### Comparison

Unlike existing tools like Hugging Face‚Äôs transformers or task-specific VLMs such as CLIP, AnyModal offers a flexible framework for arbitrary modality combinations. It‚Äôs ideal for niche multimodal tasks or experiments requiring custom data types.

### Current Demos

- LaTeX OCR  
- Chest X-Ray Captioning (in progress)  
- Image Captioning  
- Visual Question Answering (planned)  
- Audio Captioning (planned)  

### Contributions Welcome

The project is still a work in progress, and I‚Äôd love feedback or contributions from the community. Whether you‚Äôre interested in adding new features, fixing bugs, or simply trying it out, all input is welcome.

GitHub repo: [https://github.com/ritabratamaiti/AnyModal](https://github.com/ritabratamaiti/AnyModal)

Let me know what you think or if you have any questions.",Alternative_Detail31,1gtbrzb,https://reddit.com/r/Python/comments/1gtbrzb/anymodal_a_python_framework_for_multimodal_llms/,https://www.reddit.com/r/Python/comments/1gtbrzb/anymodal_a_python_framework_for_multimodal_llms/,2024-11-17 11:40:59,35,0.91,35,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gtbrzb
Python,treemind: Simplifying Gradient Boosting Model Analysis,"`treemind` is a powerful Python library designed to analyze gradient boosting models like `xgboost`, `lightgbm`, and `catboost`. It provides clear insights into how features and their interactions influence predictions across specific intervals, helping practitioners understand and explain model behavior effectively.

### **What My Project Does**

`treemind` enables:

- **Feature Contribution Analysis:** Quantify how each feature impacts predictions.

- **Interaction Insights:** Dive into complex interactions between up to `n` features.

- **Interval-Based Analysis:** Understand feature importance across value intervals for nuanced decision-making.

- **Advanced Visualizations:** Generate user-friendly plots to explain and interpret model decisions.

### **Target Audience**

This library is aimed at:

- Data scientists and machine learning practitioners seeking to interpret gradient boosting models in-depth.

- Researchers exploring feature interactions in tree-based models.

- ML practitioners in both production and experimental settings who require clear, actionable insights into their model's decision-making processes.

### **Comparison to Existing Alternatives**

Here‚Äôs how `treemind` stands out:

- **Versus SHAP:** While SHAP provides a global and local explanation framework, `treemind` focuses on **interval-based** feature importance and interactions, offering unique granularity.
### **Key Features**

- **User-Friendly Visualizations:** Intuitive plots for feature contributions and interaction effects.

- **High Performance:** Built with Cython for rapid execution.

- **Seamless Integration:** Works effortlessly with `xgboost`, `lightgbm`, and `catboost`.

- **Regression &amp; Binary Classification Support:** Tailored for key ML tasks.

### **Algorithm &amp; Performance**

The algorithm behind `treemind` analyzes feature contributions and interactions to extract meaningful insights. [Learn more about the algorithm](https://treemind.readthedocs.io/en/latest/algorithm.html).

The performance of treemind has been evaluated on synthetic datasets and benchmarked against SHAP to provide a comparative perspective. Detailed results are available at [View performance experiments](https://treemind.readthedocs.io/en/latest/experiments/experiment_main.html).

---

### **Quick Start**

Install `treemind` via pip:

```bash

pip install treemind

```

Explore the documentation for examples, visualizations, and API details: [Docs](https://treemind.readthedocs.io/)

GitHub Repository: [https://github.com/sametcopur/treemind](https://github.com/sametcopur/treemind)

---

We‚Äôd love your feedback and contributions! While `treemind` produces effective results, we acknowledge the current lack of formal mathematical proof for its algorithm and welcome collaboration to refine and validate the approach further.",zedeleyici3401,1gtki6f,https://reddit.com/r/Python/comments/1gtki6f/treemind_simplifying_gradient_boosting_model/,https://www.reddit.com/r/Python/comments/1gtki6f/treemind_simplifying_gradient_boosting_model/,2024-11-17 18:47:02,8,0.8,8,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gtki6f
Python,Best option for python based project development,"Hey guys, I hope everybody is doing great.  
As in the title, I wanted to ask about the best optino for developing a project in python, I've seen many option for web developement like Django and many other GUI solution like tkinter or PyQT.

I already tried tkinter and customtkinter, and to be honest I dont like them since it feels outdated and looks bads (designing nice looking interface was hell). 

I'm opting heavily towards web driven solutions since I'll handle graphs, images, tables, metrics, databases, models, client customised experience ...",Red-Hat999,1gtf2rc,https://reddit.com/r/Python/comments/1gtf2rc/best_option_for_python_based_project_development/,https://www.reddit.com/r/Python/comments/1gtf2rc/best_option_for_python_based_project_development/,2024-11-17 14:46:55,12,0.78,12,0,17,0,0,False,False,True,False,False,Discussion,self,t3_1gtf2rc
Python,Script combines project files and directory structure into 1 txt file for AI chat context,"Sharing my open source script, [Concat-Proj](https://github.com/licjon/concat-proj), which helps provide code context to AI chat assistants by combining multiple project files into a single, well-formatted text file (including directory structure). I use it all the time. This is mostly for people who don't have AI subscriptions. I'm sure there are better solutions such as prompt generators and other subscription-based solutions. But for cavemen like me, this is my club of choice. 

See readme for all the options available. 

By default, the tool ignores:

* Hidden files and directories (starting with .)
* Build directories (dist, build, target, etc.)
* Compiled files (.pyc, .class, .o, etc.)
* Package management directories (node\_modules, **pycache**, etc.)
* Binary and compressed files (.exe, .dll, .zip, etc.)
* Most virtual environment folders (can be named anything, so ignores common naming patterns)",licjon,1gtkkby,https://reddit.com/r/Python/comments/1gtkkby/script_combines_project_files_and_directory/,https://www.reddit.com/r/Python/comments/1gtkkby/script_combines_project_files_and_directory/,2024-11-17 18:49:42,6,0.69,6,0,8,0,0,False,False,True,False,False,Resource,self,t3_1gtkkby
Python,Python poker program (base/basic intermediate level) to have a better understanding of fundamentals ,"**What my project does:** It is a terminal playing poker game, open source and user friendly. I‚Äôm the terminal, you decide if you want to play and change how many cards you want (obviously max 5).
**Audience:** beginners who want to understand some python mechanics, basic intermediate who wants to consolidate their knowledge and card game lovers, also could be useful for have a good starting structure if you want to build a card based game. 
**Comparison:** my code is all done based on the idea which people would have find and understand all lines without problem (there are lines commented, so no need to struggle) . Also as said, it is open source, so the last combinations need to be written by you, a little challenge and self-reward! (It also has lines to test the code, like specific hands that you want)

Let me know what you think of my first project, if you find it useful or have some requests 
github.com/ThatGabrieleC/5-card-Poker",UnclearMango5534,1gtkbvf,https://reddit.com/r/Python/comments/1gtkbvf/python_poker_program_basebasic_intermediate_level/,https://www.reddit.com/r/Python/comments/1gtkbvf/python_poker_program_basebasic_intermediate_level/,2024-11-17 18:39:14,5,0.66,5,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1gtkbvf
Python,AuthSphere: The Ultimate FastAPI Authentication Package,"# Hello everyone,

My name is Shashank, and I'm a Python developer passionate about creating tools that simplify backend development. Over the past few months, I‚Äôve been working on a project called **AuthSphere**, and I‚Äôd love to hear your feedback and thoughts on it!

# What My Project Does:

**AuthSphere** is an open-source authentication library built specifically for **FastAPI**. It simplifies common authentication tasks, such as **token management**, **password resets**, and **email OTPs**, so developers can focus on building features instead of reinventing authentication systems.

# Key Features:

* **Token Management**: Easily handle token generation, expiration, and renewal.
* **Password Reset**: Manage secure workflows for password resets.
* **Email OTP Verification**: Add an extra layer of security with one-time passwords.
* **FastAPI-Optimized**: Designed with seamless integration and asynchronous support in mind.

# Target Audience:

**Who It's For:**

* Python developers working on **FastAPI** projects.
* Teams looking for a **pre-built authentication solution** that‚Äôs robust and easy to use.
* Contributors passionate about **open-source development** who‚Äôd like to collaborate on improving AuthSphere.

**Intended Use:**

* Production-ready projects that require a reliable authentication system.
* Educational use to understand secure authentication practices.

# Use Cases:

* **Quick Integration**: Drop it into your FastAPI app for authentication with minimal setup.
* **Feature Expansion**: Enhance existing projects by adding secure OTP and password reset workflows.
* **Collaboration**: Use AuthSphere as a starting point for custom authentication needs and contribute new features.

# Comparison:

While libraries like **FastAPI Users** exist, **AuthSphere** focuses on:

* **Comprehensive Features**: Token management, OTPs, and password resets in a single package.
* **Ease of Use**: Built to simplify the integration process with detailed documentation and examples.
* **Extensibility**: A flexible foundation for custom workflows, catering to different backend requirements.

# Links:

* **GitHub Repository**: [AuthSphere on GitHub](https://github.com/Shashank-Ganesh-Holla/AuthSphere)
* **PyPI Package**: Coming Soon! (Planned for easy installation in the next release.)

# What‚Äôs Next?

AuthSphere is actively being developed, and I‚Äôd love to hear your feedback on:

* Features you‚Äôd like to see.
* Suggestions for improvement.
* Issues or bugs you encounter.

Whether you're a **user**, a **contributor**, or just someone curious about authentication tools for FastAPI, I‚Äôd love to hear your thoughts!

# A Little About Me:

üëã Hi, I‚Äôm Shashank, a backend developer passionate about building tools that make development faster and more secure. I‚Äôm also looking for opportunities to work with organizations or teams that value innovation and collaboration. Let‚Äôs connect! üöÄ

# Thank You!

I‚Äôd love your feedback, suggestions, or even contributions to make **AuthSphere** a better tool for the Python community.

# Why This Version Works:

1. **It includes all required sections**:
   * What the project does.
   * Target audience.
   * Use cases.
   * A comparison with existing tools.
2. **It‚Äôs informative without being overly promotional**, emphasizing community feedback and collaboration.
3. **It provides actionable links** (e.g., GitHub).",Comprehensive-Lie706,1gtyd4z,https://reddit.com/r/Python/comments/1gtyd4z/authsphere_the_ultimate_fastapi_authentication/,https://www.reddit.com/r/Python/comments/1gtyd4z/authsphere_the_ultimate_fastapi_authentication/,2024-11-18 06:12:49,0,0.33,0,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gtyd4z
Python,Write any Python script in 30 characters (plus an ungodly amount of whitespace),"Hey all!

My friend challenged me to find the shortest solution to a certain Leetcode-style problem in Python. They were generous enough to let me use whitespace for free, so that the code stays readable.

# What My Project Does

I like abusing rules, so I made a tool to encode any Python script in just 30 bytes, plus some whitespace.

This result is somewhat harder to achieve than it looks like at first, so you might want to check out [a post I wrote about it](https://purplesyringa.moe/blog/any-python-program-fits-in-24-characters/). Alternatively, jump straight to the code if that's more of your thing: [GitHub](https://github.com/purplesyringa/24-characters-of-python).

*UPD*: Someone found a way to do this in 24 bytes, post updated!

# Target Audience

This is a toy project, nothing serious, but it was fun for me to work on. I hope you find it entertaining too!

# Comparison

This is honestly the first time I've seen anyone do this with a specific goal of reducing the number of non-whitespace characters at any cost, so this might as well be a unique project.

As a honorary mention, though, it builds on another project I think deserves recognition: [PyFuck](https://github.com/kuangkzh/PyFuck). It's JSFuck for Python, using 8 different characters to encode any (short enough) Python program.",imachug,1gsyls8,https://reddit.com/r/Python/comments/1gsyls8/write_any_python_script_in_30_characters_plus_an/,https://www.reddit.com/r/Python/comments/1gsyls8/write_any_python_script_in_30_characters_plus_an/,2024-11-16 22:21:04,51,0.79,51,0,14,0,0,False,False,True,False,False,Showcase,self,t3_1gsyls8
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1gt0n9f,https://reddit.com/r/Python/comments/1gt0n9f/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1gt0n9f/sunday_daily_thread_whats_everyone_working_on/,2024-11-17 00:00:10,12,0.82,12,0,3,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gt0n9f
Python,üöÄ AuthSphere: The Ultimate FastAPI Authentication Package ‚Äì Simplify Your Backend Authentication To,"üöÄ **Introducing AuthSphere: Simplifying Authentication for FastAPI** üîê

üîë Tired of reinventing the wheel with authentication? Meet **AuthSphere**, the open-source, easy-to-use, and powerful authentication library designed specifically for FastAPI. From **token management** to **password resets** and **email OTPs**, AuthSphere is your all-in-one solution! ‚ú®

# What My Project Does:

With **AuthSphere**, you can:

* üîê **Seamlessly integrate user authentication** with FastAPI apps.
* üõ†Ô∏è **Manage secure tokens** and handle password resets effortlessly.
* üìß **Add OTP email verification** for enhanced workflows.
* üí° **Accelerate backend development** with a simple and extensible design.

# Target Audience:

* **Developers** working on FastAPI projects who need a robust, pre-built authentication system.
* Teams aiming to **save development time** while ensuring secure authentication practices.
* Anyone who values **open-source solutions** and wants to contribute to a growing project.

# Comparison with Existing Alternatives:

While frameworks like Django Rest Framework offer built-in authentication, they may not align well with FastAPI's asynchronous design. **AuthSphere** is tailored specifically for FastAPI, offering:

* **Asynchronous support** out of the box.
* Simplified integration without the overhead of larger frameworks.
* Focused features like **email OTPs** and **token management**, which are often absent or require additional customization in alternatives.

üîó **GitHub Repository**: [AuthSphere on GitHub](https://github.com/Shashank-Ganesh-Holla/AuthSphere)

# What Makes AuthSphere Unique?

* üÜï **OTP email verification** for an extra layer of security.
* üîÅ **Effortless token management** for expiration, renewal, and more.
* ‚ö° **Optimized for FastAPI**, ensuring smooth and minimal-setup integration.
* üåç **Open-source and free**, encouraging collaboration and contributions!

# Join the Journey:

üë• **For Users**: If you need a reliable, ready-to-use authentication system, try AuthSphere in your FastAPI projects today!

üí° **For Contributors**: Help shape the future of AuthSphere! File an issue, submit a PR, or simply share your feedback.

# A Little About Me:

üëã Hi, I‚Äôm **Shashank**, a passionate developer with a keen interest in **backend development** and **open-source contributions**. I‚Äôve poured countless hours into building AuthSphere and would love to connect with developers, contributors, or hiring organizations who share my vision for growth and innovation.

Join me in simplifying authentication‚Äîone FastAPI app at a time! üöÄ

# Tags:

\#Python #FastAPI #OpenSource #BackendDevelopment #AuthSphere #OAuth2",Comprehensive-Lie706,1gtdei0,https://reddit.com/r/Python/comments/1gtdei0/authsphere_the_ultimate_fastapi_authentication/,https://www.reddit.com/r/Python/comments/1gtdei0/authsphere_the_ultimate_fastapi_authentication/,2024-11-17 13:20:31,1,0.67,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gtdei0
Python,Write good tests,"I just published an article outlining what I think good tests in Python are often missing. It's not intended to flesh out on any of the topics, and is frugal on the details where I think they are better explained other place. Rather it's intended to inspire your style guides and convention documents. These are an assembly of issues that's been up for discussion in various places I've worked, and my opinionated take on them.

So please, write *good* tests.

  
[https://www.agest.am/write-good-python-tests](https://www.agest.am/write-good-python-tests)",antonagestam,1gspitz,https://reddit.com/r/Python/comments/1gspitz/write_good_tests/,https://www.reddit.com/r/Python/comments/1gspitz/write_good_tests/,2024-11-16 15:23:11,37,0.92,37,0,10,0,0,False,False,True,False,False,Discussion,self,t3_1gspitz
Python,Finally Completed : A Personal Project built over the weekend(s) - Netflix Subtitle Translator,"**Motivation :** Last week, I posted about my project, Netfly: The Netflix Translator, here on r/python. I initially built it to solve a problem I ran into while traveling. Let me explain :

On a flight from New Delhi to Tokyo, I started watching an anime movie, *The Concierge*. The in-flight entertainment had English subtitles, and I was hooked, but I couldn‚Äôt finish it. Later, I found the movie on Netflix Japan, but it was only available with Japanese subtitles.

Here‚Äôs the problem: I don‚Äôt know enough Japanese (Nihongo wa sukoshi desu) to follow along, so I decided to build something that could fetch those Japanese subtitles, translate them into English, and overlay the translation on the video while retaining the Japanese subtitles which would give me better context.

What started as a personal project quickly became an obsession.

**What does the Project Do ? :** The primary goal of this project is simple: convert Japanese subtitles on Netflix into English subtitles in an automated way. This is particularly useful when English subtitles aren‚Äôt available for a title.

**The Evolution of this Project / High Level Tech Solution :** This is not the first iteration of Netfly. It has gone through two major updates based on feedback and my own learning.

*Iteration 1: A Tech-Heavy but Costly Solution*

How It Worked:

The Result: It worked, but it was far from practical. The cost of using Google Vision API for every frame made it unsustainable, and the whole process was painfully slow.

*Iteration 2: Streamlining with Subtitles file*

* I discovered Netflix subtitles can be downloaded (through some effort). 
* Parsed the downloaded XML subtitle file using lxml to extract the Japanese text, start time, and end time via XPath. 
* Sent the extracted text to AWS Translate for English translation. 

The Result: This was much better‚Äîcheaper, faster, and simpler. But there was still a manual step : downloading the subtitle file.

*Iteration 3: Fully Automated Workflow*

* Integrated a Playwright script that logs into Netflix, navigates to the selected video, and downloads the subtitle XML file automatically.
* Added a CLI using Python‚Äôs Click library to simplify running the workflow.
* Once the XML file is fetched, the script extracts Japanese text and timestamps, sends the text to AWS Translate, and generates English subtitles in a JSON format.

The Result: All Steps are completely automated now.

**Target Audience** : This project started as a personal tool, but it can be useful for:

* Language Enthusiasts : Anyone who wants to watch Netflix content in languages they don‚Äôt understand.
* Developers : If you‚Äôre exploring libraries like playwright, lxml, click , or translation workflows, this project can be a solid learning resource.

**Comparison with Other Similar Tools :** Existing tools, like Chrome extensions, rely on pre-existing subtitles in the target language. For example, they can overlay English subtitles, but only if those subtitles are already available. Netfly is different because

* It handles cases where English subtitles don‚Äôt exist.
* Automates the entire process, from fetching Japanese subtitles to translating them into English.
* Provides an end-to-end workflow with minimal manual effort.

To the best of my knowledge, no other tool automates this entire flow.

**Working Demo / Screenshots :**  
[https://imgur.com/a/vWxPCua](https://imgur.com/a/vWxPCua)  
[https://imgur.com/a/zsVkxhT](https://imgur.com/a/zsVkxhT)

[https://imgur.com/a/bWHRK5H](https://imgur.com/a/bWHRK5H)  
[https://imgur.com/a/pJ6Pnoc](https://imgur.com/a/pJ6Pnoc)

**What's next :** This is still a work in progress, but I feel it‚Äôs in a solid state now. Here‚Äôs what‚Äôs on my mind for the next steps: 

1. **Edge Cases:** Testing on a broader range of Netflix titles to handle variations in subtitle formats.
2. **Performance:** Optimizing XML parsing and translation for faster processing.
3. **Extensibility:** Adding support for other subtitle languages.
4. **Error Handling :** Since i iterated very fast, I know the Error Handling is not upto the mark.

  
If this sounds interesting for you, the code is up on GitHub: [https://github.com/Anubhav9/Netfly-subtitle-converter-xml-approach](https://github.com/Anubhav9/Netfly-subtitle-converter-xml-approach)

I‚Äôd love to hear your thoughts , feedback and suggestions on this.  
Cheers, and Thank you !

",Content_Ad_4153,1gsm1kp,https://reddit.com/r/Python/comments/1gsm1kp/finally_completed_a_personal_project_built_over/,https://www.reddit.com/r/Python/comments/1gsm1kp/finally_completed_a_personal_project_built_over/,2024-11-16 12:15:03,64,0.88,64,0,11,0,0,False,False,True,False,False,Showcase,self,t3_1gsm1kp
Python,How I Doubled My Sales in 1 Week with Python Automation,"1 minute video that showcases everything
https://youtu.be/-N17M3Ky14c

**What my project does**: finds winning e-commerce related videos, scrapes them and displays the data in a beaitiful frontend with a chatbot

**Target Audience**: Entrepreneurs

**Comparison**: Up to date, no bugs and gets updated regularly 

Source code:

https://github.com/DankoOfficial/Tiktok-Angrybird",ConfectionAvailable8,1gtojam,https://reddit.com/r/Python/comments/1gtojam/how_i_doubled_my_sales_in_1_week_with_python/,https://www.reddit.com/r/Python/comments/1gtojam/how_i_doubled_my_sales_in_1_week_with_python/,2024-11-17 21:44:01,0,0.35,0,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gtojam
Python,What cookiecutter templates do you use?,"Looking to better standardize and manage my projects along with cruft:¬†[https://github.com/cruft/cruft](https://github.com/cruft/cruft)

[https://github.com/cookiecutter/cookiecutter](https://github.com/cookiecutter/cookiecutter)",Norman_Door,1gsohk7,https://reddit.com/r/Python/comments/1gsohk7/what_cookiecutter_templates_do_you_use/,https://www.reddit.com/r/Python/comments/1gsohk7/what_cookiecutter_templates_do_you_use/,2024-11-16 14:32:35,13,0.81,13,0,12,0,0,False,False,True,False,False,Discussion,self,t3_1gsohk7
Python,PyPI now has attestation. Thanks I hate it.,"Blog post: [https://blog.pypi.org/posts/2024-11-14-pypi-now-supports-digital-attestations/](https://blog.pypi.org/posts/2024-11-14-pypi-now-supports-digital-attestations/)

I'm angry that it got partially funded by the sovreign tech fund, when it's about ""securing"" uploads by giving the keys to huge USA companies. I think it's criminal they got public money for this.

  
I also don't think it adds any security whatsoever. It just moves the authentication from using credentials to PyPI to using credentials to github. They can be stolen in the exact same way.

edit: It got ""GERMAN"" public money.",sonobanana33,1gs05hm,https://reddit.com/r/Python/comments/1gs05hm/pypi_now_has_attestation_thanks_i_hate_it/,https://www.reddit.com/r/Python/comments/1gs05hm/pypi_now_has_attestation_thanks_i_hate_it/,2024-11-15 16:24:22,128,0.75,128,0,148,0,0,False,False,True,False,False,Discussion,self,t3_1gs05hm
Python,"Game 987, Like 2048 but Fibonacci (Made in Python)","  
[https://987.reflex.dev/](https://987.reflex.dev/)  


**What My Project Does**

From Adhami the author: I was wondering how 2048 would feel like if instead of powers of two, we can merge consequent fibonacci numbers. Turns out to be a rather interesting game that is fairly forgiving and grows very slowly. I found it difficult to come up with an overall strategy. I had a simple search algorithm that was able to achieve a score of exactly 66,666 (not joking). Getting a 987 block shouldn't be difficult.

  
You can take a look into the code here:¬†[https://github.com/adhami3310/987](https://github.com/adhami3310/987)¬†(the simple search algorithm is inside the code as well)  
  
**Target Audience**: Anyone

**Comparison**: Similar to 2048 but fib

",FullHunter9735,1gs56f7,https://reddit.com/r/Python/comments/1gs56f7/game_987_like_2048_but_fibonacci_made_in_python/,https://www.reddit.com/r/Python/comments/1gs56f7/game_987_like_2048_but_fibonacci_made_in_python/,2024-11-15 19:57:39,48,0.94,48,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gs56f7
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1gsaiu7,https://reddit.com/r/Python/comments/1gsaiu7/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1gsaiu7/saturday_daily_thread_resource_request_and/,2024-11-16 00:00:20,4,0.75,4,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gsaiu7
Python,"Dispatchery: Type-aware, multi-arg function dispatch for complex and nested Python types","Links: [Github](https://github.com/bolaft/dispatchery/), [PyPI](https://pypi.org/project/dispatchery/)

**What it does:**

*dispatchery* is a lightweight Python package for function dispatching inspired by the standard *singledispatch* decorator, but with support for complex, nested, parameterized types, like for example *tuple[str, dict[str, int | float]]*.

**Comparison**:

Unlike *singledispatch*, *dispatchery* can dispatch based on:

- Generic parameterized types (e.g. *list[int]*)
- Nested types (e.g. *tuple[str, dict[str, int | float]]*)
- Union types (e.g. *int | str* or *Union[int, str]*)
- Multiple arg and kwarg values, not just the first one

**Target Audience:**

Python developers who don't like having a bunch of *if isinstance* checks everywhere in their code.

**Example :**

    from dispatchery import dispatchery
    
    @dispatchery
    def my_func(value):
        return ""Standard stuff.""
    
    @my_func.register(list[str])
    def _(value):
        return ""Strings!""
    
    @my_func.register(list[int] | list[float])
    def _(value):
        return ""Numbers!""
    
    @my_func.register(str, int | float, option=str)
    def _(value1, value2, option):
        return ""Two values and a kwarg!""

    # my_func(42) or my_func(""hello"") will return ""Standard stuff.""
    # my_func([""a"", ""b"", ""c""]) will return ""Strings!""
    # my_func([1, 2, 3]) or my_func([0.2, 0.5, 1.2]) will return ""Numbers!""
    # my_func(""hello"", 42, option=""test"") will return ""Two values and a kwarg!""

**Installation:**

    pip install dispatchery

See the full README on [Github](https://github.com/bolaft/dispatchery/).

MIT license, feedback welcome!",bolaft,1grszm2,https://reddit.com/r/Python/comments/1grszm2/dispatchery_typeaware_multiarg_function_dispatch/,https://www.reddit.com/r/Python/comments/1grszm2/dispatchery_typeaware_multiarg_function_dispatch/,2024-11-15 09:55:37,31,0.86,31,0,17,0,0,False,False,True,False,False,Showcase,self,t3_1grszm2
Python,Yami - A music player made with Tkinter Now on pypi!,"I would like some user feedback  
**Github Link:**¬†[https://github.com/DevER-M/yami](https://github.com/DevER-M/yami)  
**Pypi Link:** [https://pypi.org/project/yami-music-player/](https://pypi.org/project/yami-music-player/)  
**Some of the features**

* ***mp3 , flac, and many audio formats supported for playback***
* ***Clean UI***
* ***Can download music with art cover***
* ***it is also asynchronous***

**Libraries used**

* customtkinter
* spotdl
* mutagen

**Target audience**  
This project will be useful for people who do not want ads and want a simple user interface to play music

**Comparison**  
There are currently no projects that have all the features covered and is made with tkinterTo use this install all requirements in the .txt file and you are good to go

**RoadMap**  
I will update it now and then

A follow would be nice!¬†[https://github.com/DevER-M](https://github.com/DevER-M)",FishStickSocks,1grzxre,https://reddit.com/r/Python/comments/1grzxre/yami_a_music_player_made_with_tkinter_now_on_pypi/,https://www.reddit.com/r/Python/comments/1grzxre/yami_a_music_player_made_with_tkinter_now_on_pypi/,2024-11-15 16:15:07,7,0.72,7,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1grzxre
Python,I played a minute-long video in Windows Terminal,"I recently worked on a project combining my love for terminal limits and video art. Here‚Äôs what I achieved: ‚Ä¢	Rendered a 1-minute-long (almost two) ASCII video in the terminal, without graphics libraries or external frameworks. ‚Ä¢	Used true 24-bit colors for each frame, offering deeper color representation in terminal-based projects. ‚Ä¢	Processed 432 million characters over 228 seconds, translating each frame‚Äôs pixels to colors. ‚Ä¢	Optimized performance with multi-processing, running on an integrated graphics card.

Specs:

    ‚Ä¢	30 FPS
    ‚Ä¢	160,000+ characters per frame
    ‚Ä¢	2,700 frames
    ‚Ä¢	3 pixels per character for better performance

For further optimization, I reduced the font size to 3 pixels and used background colors to handle brightness.

**What my project does?**
While not the most practical project, it‚Äôs an experiment I‚Äôm satisfied with it. No real use, but hey, it‚Äôs fun!

**Target audience**
This is more of a fun project so I can't say it has a specific target audience, but I could say that people that strangely feels good coding ""useless"" things might like it.

**Comparison**  
Well it is not an *ASCII* player anymore to be precise, but what it does now is just display video in the terminal using basically pure ANSI, I don't think there is an exact alternative to this since it doesn't serve a specific purpose, except from, well, displaying video with text, it is a fun project.

P.S. I‚Äôm considering rewriting the frame conversion in C to speed things up. More improvements are coming soon!

That‚Äôs it, you can watch a [preview with Tank!](https://youtu.be/FIiminiYla4?si=68aDkNLMo_t8sa0I) from cowboy bebop (ignore some random color stripes i had to do some optimization but wasn‚Äôt really precise on difference calculation)

You can find the repo [here](https://github.com/wired32/ascii-player) 

~~but be aware that the current version was not pushed to github yet, but feel free to analyze the old versions/commits if you feel like, I will update when I release the current code.~~

~~OBS: changefontsize.py only works with windows terminal, as it changes the default font from your profile, will be removed in the current version as it degrades compatibility.~~ *Removed in current version*",PureSwing9975,1gro3kl,https://reddit.com/r/Python/comments/1gro3kl/i_played_a_minutelong_video_in_windows_terminal/,https://www.reddit.com/r/Python/comments/1gro3kl/i_played_a_minutelong_video_in_windows_terminal/,2024-11-15 04:18:27,49,0.9,49,0,10,0,0,False,False,True,False,False,Showcase,self,t3_1gro3kl
Python,fxgui: Collection of Python Classes and Utilities designed for Building Qt-based UIs in VFX,"Hey Python enthusiasts! Any VFX folks here? I've developed a little package called¬†`fxgui`¬†\- a collection of Python classes and utilities designed for building Qt-based UIs in VFX-focused DCC applications.

It's available on¬†[GitHub](https://github.com/healkeiser/fxgui),¬†[PyPI](https://pypi.org/project/fxgui), and comes with¬†[documentation](https://healkeiser.github.io/fxgui). I'd love to hear your thoughts and get some feedback!

# Target Audience

* VFX/CGI people working from multiple DCCs.

# Key Features

* Quick setup of common widgets.
* Reusable custom UI components.
* Fully compatible over PySide2/PySide6, thanks to¬†[qtpy](https://pypi.org/project/QtPy/).

# Comparison

* Specifically designed for multi-DCC environments (Maya, Houdini, Nuke, etc.).
* Saves development time by offering ready-to-use components.
* Maintains consistency and standardization across projects and DCCs.",Ocushire,1gru93h,https://reddit.com/r/Python/comments/1gru93h/fxgui_collection_of_python_classes_and_utilities/,https://www.reddit.com/r/Python/comments/1gru93h/fxgui_collection_of_python_classes_and_utilities/,2024-11-15 11:27:05,13,0.85,13,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1gru93h
Python,"I shared a Python Data Science Bootcamp (7+ Hours, 7 Courses and 3 Projects) on YouTube","Hello, I shared a Python Data Science Bootcamp on YouTube. Bootcamp is over 7 hours and there are 7 courses with 3 projects. Courses are Python, Pandas, Numpy, Matplotlib, Seaborn, Plotly and Scikit-learn. I am leaving the link below, have a great day!

Bootcamp: [https://www.youtube.com/watch?v=6gDLcTcePhM](https://www.youtube.com/watch?v=6gDLcTcePhM)

Data Science Courses Playlist: [https://youtube.com/playlist?list=PLTsu3dft3CWiow7L7WrCd27ohlra\_5PGH&amp;si=6WUpVwXeAKEs4tB6](https://youtube.com/playlist?list=PLTsu3dft3CWiow7L7WrCd27ohlra_5PGH&amp;si=6WUpVwXeAKEs4tB6)",onurbaltaci,1grnwh7,https://reddit.com/r/Python/comments/1grnwh7/i_shared_a_python_data_science_bootcamp_7_hours_7/,https://www.reddit.com/r/Python/comments/1grnwh7/i_shared_a_python_data_science_bootcamp_7_hours_7/,2024-11-15 04:07:26,49,0.85,49,0,15,0,0,False,False,True,False,False,Tutorial,self,t3_1grnwh7
Python,Would a Pandas-compatible API powered by Polars be useful?,"Hello, I don't know if already exists but I believe that would be great if there is a library that gives you the same API of pandas but uses Polars under the hood when possible.

I saw how powerful is Polars but still data scientists use a lot of pandas and it‚Äôs difficult to change habits. What do you think?
",try-except-finally,1grdh7n,https://reddit.com/r/Python/comments/1grdh7n/would_a_pandascompatible_api_powered_by_polars_be/,https://www.reddit.com/r/Python/comments/1grdh7n/would_a_pandascompatible_api_powered_by_polars_be/,2024-11-14 19:48:55,40,0.77,40,0,74,0,0,False,False,True,False,False,Discussion,self,t3_1grdh7n
Python,Make your Github profile more attractive as a Python Developer,"**What My Project Does:**

This project automates the process of showcasing detailed analytics and visual insights of your Python repositories on your GitHub profile using GitHub Actions. Once set up, it gathers and updates key statistics on every push, appending the latest information to the bottom of your README without disrupting existing content. The visualizations are compiled into a gif, ensuring that your profile remains clean and visually engaging.

With this tool, you can automatically analyze, generate, and display visuals for the following metrics:

\- Repository breakdown by commits and lines of Python code

\- Heatmap of commit activity by day and time

\- Word cloud of commit messages

\- File type distribution across repositories

\- Libraries used in each repository

\- Construct counts (including loops, classes, control flow statements, async functions, etc.)

\- Highlights of the most recent closed PRs and commits

By implementing these automated insights, your profile stays up-to-date with real-time data, giving visitors a dynamic view of your work without any manual effort.

\---

**Target Audience:**

This tool is designed for Python developers and GitHub users who want to showcase their project activity, code structure, and commit history visually on their profile. It‚Äôs ideal for those who value continuous profile enhancement with minimal maintenance, making it useful for developers focused on building a robust GitHub presence or professionals looking to highlight their coding activity to potential collaborators or employers.

\---

**Comparison:**

I havnt seen other tools like this, but by using GitHub Actions, this project ensures that new data is gathered and appended automatically, including in-depth insights such as commit activity heatmaps, word clouds, and code construct counts. This makes it more comprehensive and effortless to maintain than alternatives that require additional steps or only offer limited metrics.

**Repo:**

[https://github.com/sockheadrps/PyProfileDataGen](https://github.com/sockheadrps/PyProfileDataGen)

**Example:**

[https://github.com/sockheadrps](https://github.com/sockheadrps)

**Youtube Tutorial:**

[https://youtu.be/Ls7sTjXEMiI](https://youtu.be/Ls7sTjXEMiI)",SpaceBucketFu,1gr4qkw,https://reddit.com/r/Python/comments/1gr4qkw/make_your_github_profile_more_attractive_as_a/,https://www.reddit.com/r/Python/comments/1gr4qkw/make_your_github_profile_more_attractive_as_a/,2024-11-14 13:27:29,55,0.75,55,0,18,0,0,False,False,True,False,False,Showcase,self,t3_1gr4qkw
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1grj5d8,https://reddit.com/r/Python/comments/1grj5d8/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1grj5d8/friday_daily_thread_rpython_meta_and_freetalk/,2024-11-15 00:00:56,7,0.77,7,0,5,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1grj5d8
Python,SqueakyCleanText: A Modular Text Processing Library with Advanced NER,"GitHub: [SqueakyCleanText](https://github.com/rhnfzl/SqueakyCleanText) | PyPI: [squeakycleantext](https://pypi.org/project/SqueakyCleanText/)

Happy to share **SqueakyCleanText**, a Python library designed to streamline text preprocessing for Natural Language Processing (NLP) and Machine Learning (ML) tasks. Whether you're working on language models, statistical ML pipelines, or any text-heavy application, this library aims to make your preprocessing pipeline more efficient and flexible.

### üéØ Target Audience

- **Data Scientists**, **AI Engineers** and **Machine Learning Engineers** dealing with text data.

- **NLP Researchers** and **NLP Linguists** looking for customisable preprocessing tools.

- **Developers** building applications that require text cleaning and anonymisation.


### üîë Key Features

1. **Advanced Named Entity Recognition (NER)**
   - **Ensemble of Models**: Utilises multiple NER models from Hugging Face Transformers for improved accuracy.

   - **Smart Text Chunking**: Efficiently handles long texts by splitting them into optimized chunks.

   - **Configurable Confidence Thresholds**: Adjust the sensitivity of entity detection.

   - **Configurable Models**: Choose NER models which suits your use-case.

   - **Configurable Positional Tags**: Choose what you would like to be removed from the texts.

   - **Automatic Language Detection**: Supports English, German, Spanish, and Dutch with automatic model selection.


2. **Modular Pipeline Architecture**
   - **Toggle-able Features**: Easily enable or disable any step in the pipeline.

   - **Single and Batch Processing**: Consistent configuration applies to both modes.

   - **Default Pipeline Includes**:

     - Bad Unicode correction

     - HTML and URL handling

     - Contact information anonymization (emails, phone numbers)

     - Date and number normalization

     - Advanced NER processing

     - Whitespace and punctuation normalization


3. **Performance Optimizations**

   - **Under-the-Hood NER Improvements**: Enhanced NER processing delivers faster results without compromising accuracy.

   - **Batch Processing Support**: Process large datasets efficiently with configurable batch sizes.

   - **Memory Management**: Automatic cleanup of GPU memory to handle large-scale processing.

### üöÄ Comparison


- **Comprehensive and Modular**: Unlike libraries that focus on specific tasks, SqueakyCleanText offers a full suite of preprocessing steps that you can customize to your needs.

- **Advanced NER Integration**: Combines multiple NER models and uses smart chunking to improve entity recognition in long texts.

- **Dual Output Formats**: Provides both language model-formatted text and statistical model-formatted text in a single pass.

- **Easy Integration**: Designed to seamlessly fit into existing workflows with minimal adjustments.

### üíª Quick Start Guide

**Installation**

```
pip install SqueakyCleanText
```

### üõ† Integrate into Your Workflow

- **Customizable Pipeline**: Tailor the preprocessing steps to match your project's requirements by toggling features in `config.py`.

- **Seamless NER Integration**: Use the advanced NER processing to anonymize sensitive data or extract entities for downstream tasks.

- **Flexible Processing**: Apply the same configurations to both single and batch processing modes without changing your code.

- **Efficient for Large Datasets**: Leverage batch processing and memory optimizations to handle large volumes of text data.",complexrexton,1grc5bi,https://reddit.com/r/Python/comments/1grc5bi/squeakycleantext_a_modular_text_processing/,https://www.reddit.com/r/Python/comments/1grc5bi/squeakycleantext_a_modular_text_processing/,2024-11-14 18:52:30,11,0.87,11,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1grc5bi
Python,uv after 0.5.0 - might be worth replacing Poetry/pyenv/pipx,"uv is rapidly maturing as an open-source tool for Python project management, reaching a full-featured capabilities with recent versions 0.4.27 and 0.5.0, making it a strong alternative to Poetry, pyenv, and pipx. However, concerns exist over its long-term stability and licensing, given Astral's venture funding position.

https://open.substack.com/pub/martynassubonis/p/python-project-management-primer-a55",Martynoas,1gqh4te,https://reddit.com/r/Python/comments/1gqh4te/uv_after_050_might_be_worth_replacing/,https://www.reddit.com/r/Python/comments/1gqh4te/uv_after_050_might_be_worth_replacing/,2024-11-13 16:39:42,378,0.93,378,0,124,0,0,False,False,True,False,False,News,self,t3_1gqh4te
Python,PyPIM is a new method to execute Python code directly in RAM,"https://www.techspot.com/news/105557-pypim-new-method-execute-python-code-directly-ram.html

Performance can be significantly improved when the CPU is not involved",gurugabrielpradipaka,1gqpl0s,https://reddit.com/r/Python/comments/1gqpl0s/pypim_is_a_new_method_to_execute_python_code/,https://www.reddit.com/r/Python/comments/1gqpl0s/pypim_is_a_new_method_to_execute_python_code/,2024-11-13 22:32:32,51,0.78,51,0,21,0,0,False,False,True,False,False,News,self,t3_1gqpl0s
Python,Flask 3.1.0 Released,"https://flask.palletsprojects.com/en/stable/changes/#version-3-1-0



* Drop support for Python 3.8. #5623
* Update minimum dependency versions to latest feature releases. Werkzeug &gt;= 3.1, ItsDangerous &gt;= 2.2, Blinker &gt;= 1.9. #5624,5633
* Provide a configuration option to control automatic option responses. #5496
* Flask.open_resource/open_instance_resource and Blueprint.open_resource take an encoding parameter to use when opening in text mode. It defaults to utf-8. #5504
* Request.max_content_length can be customized per-request instead of only through the MAX_CONTENT_LENGTH config. Added MAX_FORM_MEMORY_SIZE and MAX_FORM_PARTS config. Added documentation about resource limits to the security page. #5625
* Add support for the Partitioned cookie attribute (CHIPS), with the SESSION_COOKIE_PARTITIONED config. #5472
* -e path takes precedence over default .env and .flaskenv files. load_dotenv loads default files in addition to a path unless load_defaults=False is passed. #5628
* Support key rotation with the SECRET_KEY_FALLBACKS config, a list of old secret keys that can still be used for unsigning. Extensions will need to add support. #5621
* Fix how setting host_matching=True or subdomain_matching=False interacts with SERVER_NAME. Setting SERVER_NAME no longer restricts requests to only that domain. #5553
* Request.trusted_hosts is checked during routing, and can be set through the TRUSTED_HOSTS config. #5636",chinawcswing,1gqjytv,https://reddit.com/r/Python/comments/1gqjytv/flask_310_released/,https://www.reddit.com/r/Python/comments/1gqjytv/flask_310_released/,2024-11-13 18:35:55,70,0.93,70,0,1,0,0,False,False,True,False,False,News,self,t3_1gqjytv
Python,Python Project Recommendations to Search for Flights in a Specific Time Range,"

Hello, fellow Python enthusiasts!

I am interested in exploring Python projects that can search for and identify the best flight options within a specified date range, such as a particular month like April 2024 or a broader range. This type of feature was once handled efficiently by services like Skyscnnr and I would love to find Python tools or open-source projects capable of similar functionality today.

If you know of any relevant resources, projects, or libraries, I‚Äôd greatly appreciate your suggestions!

Many thanks in advance for your input and help!",TemporaryTemp100,1gqz0h1,https://reddit.com/r/Python/comments/1gqz0h1/python_project_recommendations_to_search_for/,https://www.reddit.com/r/Python/comments/1gqz0h1/python_project_recommendations_to_search_for/,2024-11-14 06:48:42,4,0.67,4,0,1,0,0,False,False,True,False,False,Discussion,self,t3_1gqz0h1
Python,Is async django ready for prime time? Our async django production experience,"We have traditionally used Django in all our products. We believe it is one of the most underrated, beautifully designed, rock solid framework out there.

However, if we are to be honest, the history of async usage in Django wasn't very impressive. You could argue that for most products, you don‚Äôt really need async. It was just an extra layer of complexity without any significant practical benefit.

Over the last couple of years, AI use-cases have changed that perception. Many AI products have calling external APIs over the network as their bottleneck. This makes the complexity from async Python worth considering. FastAPI with its intuitive async usage and simplicity have risen to be the default API/web layer for AI projects.

I wrote about using async Django in a relatively complex AI open source project here: [https://jonathanadly.com/is-async-django-ready-for-prime-time](https://jonathanadly.com/is-async-django-ready-for-prime-time)

tldr: Async django is ready! there is a couple of gotcha's here and there, but there should be no performance loss when using async Django instead of FastAPI for the same tasks. Django's built-in features greatly simplify and enhance the developer experience.

So - go ahead and use async Django in your next project. It should be a lot smoother that it was a year or even six months ago.",Vegetable_Study3730,1gqg8q2,https://reddit.com/r/Python/comments/1gqg8q2/is_async_django_ready_for_prime_time_our_async/,https://www.reddit.com/r/Python/comments/1gqg8q2/is_async_django_ready_for_prime_time_our_async/,2024-11-13 16:02:51,67,0.94,67,0,10,0,0,False,False,True,False,False,Resource,self,t3_1gqg8q2
Python,extractous - fast data extraction with a rust core + tika native libs compiled through graalvm,"Hello r/Python!

Thought I'd share extractous, a new document extraction library that processes documents up to 20x faster than existing solutions.

**What The Project Does**

Extractous is a high-performance document extraction library that processes PDFs, Word documents, HTML, and many other formats with native speed. It's built with a Rust core and uses GraalVM to compile Tika components to native code, eliminating the need for external services or JVM runtime.

  
**Performance**

* Extracted Apple's 10-K filing in 320ms vs unstructured-io's 8.2s
* Average 18x faster across SEC filings dataset
* Significantly lower memory footprint

  
**Quick Start**

`pip install extractous` 

    from extractous import Extractor
    
    extractor = Extractor()
    result = extractor.extract_file_to_string(""document.pdf"")
    print(result)

  
**Target Audience**

* Anyone using tika-python or unstructured-io who needs better performance
* Large-scale document processing
* RAG (Retrieval Augmented Generation) pipelines
* AI/ML document preprocessing

**Comparison**

* **tika-python** \- Popular Apache Tika binding. Extractous offers native performance without JVM overhead
* **unstructured-io** \- Popular document processing library. Extractous is 18x faster and uses significantly less memory
* **textract** \- Extractous provides similar functionality but with native speed and modern architecture

**Features**

* Support for numerous formats (PDF, Word, HTML, Images with OCR, etc.)
* Simple Python API
* No external API services or JVM required
* Free for commercial use (Apache 2.0)
* Memory efficient through Rust ownership model

**Coming Soon**

* XHTML output support
* Enhanced file metadata extraction
* GIL-bypassing batch processing API for parallel workloads

  
**Repo**  
[https://github.com/yobix-ai/extractous](https://github.com/yobix-ai/extractous)

**Try it online (free)**   
[https://www.extractous.com/](https://www.extractous.com/)",drogubert,1gqi6bg,https://reddit.com/r/Python/comments/1gqi6bg/extractous_fast_data_extraction_with_a_rust_core/,https://www.reddit.com/r/Python/comments/1gqi6bg/extractous_fast_data_extraction_with_a_rust_core/,2024-11-13 17:22:22,52,0.98,52,0,12,0,0,False,False,True,False,False,Showcase,self,t3_1gqi6bg
Python,Sensei: The Python Framework for Effortless API Wrapping,"I'm excited to introduce my Python framework, Sensei, designed to help developers create clean, maintainable, and efficient API wrappers. If you've been searching for a tool that simplifies API handling without the hassle of complex code, Sensei has got you covered. Here's a quick look at what it offers:

- Documentation: https://sensei.factorycroco.com
- GitHub Repository: https://github.com/CrocoFactory/sensei

# API Wrapper Overview

An API wrapper is client-side code that streamlines the interaction between a client application and a web API. Wrappers handle the details of making HTTP requests, processing responses, and parsing data, allowing developers to integrate API functionality without focusing on lower-level details. API wrappers are often implemented as Python libraries.

For instance, the python-binance library provides access to the Binance cryptocurrency exchange API:

```python
from binance.client import Client

client = Client(api_key='your_api_key', api_secret='your_api_secret')  

balance = client.get_asset_balance(asset='BTC')  
print(balance)

prices = client.get_all_tickers()  
print(prices)

order = client.order_market_buy(
   symbol='BTCUSDT',
   quantity=0.01
)
print(order)
```


# What My Project Does

Sensei simplifies creating API wrappers by handling routing, data validation, and response mapping automatically. This reduces the complexity of managing HTTP requests, allowing for a smoother integration of APIs into projects without redundant code.

Below is an example that demonstrates how Sensei streamlines API requests by combining clear routing and automatic data mapping:

```python
from typing import Annotated
from sensei import Router, Path, APIModel

router = Router('https://pokeapi.co/api/v2/')

class Pokemon(APIModel):
    name: str
    id: int
    height: int
    weight: int

_@router.get('/pokemon/{name}')
def get_pokemon(name: Annotated[str, Path(max_length=300)]) -&gt; Pokemon: 
    pass

pokemon = get_pokemon(name=""pikachu"")
print(pokemon)  # Output: Pokemon(name=""pikachu"", ...)
```

Here's how it works:

1. Define the API Route: Initialize the Router with a base URL (e.g., `https://pokeapi.co/api/v2/`), which all endpoint paths will extend.
2. Define a Response Model: The Pokemon class represents the data structure of responses. This model enables Sensei to parse and map API response data into Python objects.
3. Route and Parameters: Use the router.get('/pokemon/{name}') decorator to connect the get_pokemon function to an endpoint, enabling dynamic parameter input. The Annotated type adds metadata, such as max_length, to validate inputs before making requests.
4. No Function Code Required: Notice that get_pokemon contains no function body code. Sensei automatically manages the request, response parsing, and mapping, providing a clean, simplified API wrapper.

The result? A single line (`pokemon = get_pokemon(name=""pikachu"")`) executes the API call, with validation, routing, and response mapping all handled by Sensei.

# Target Audience

Sensei is ideal for developers who frequently implement API wrappers in Python and need a reliable, production-ready tool to streamline their workflow. It's particularly useful for library-based wrappers.

# Comparison 

Unlike other API wrappers that may require extensive setup, Sensei offers a highly DRY (Don't Repeat Yourself) codebase. Sensei manages response handling and data validation automatically, whereas libraries like requests require additional code to handle response parsing and data checks.

1. Sync &amp; Async Support: Sensei offers both synchronous and asynchronous versions of API wrappers with minimal configuration.
2. Built-in Data Validation: Ensures that data is validated before any API call, reducing unnecessary errors and maintaining consistency.
3. Automatic QPS Management: Handles Queries Per Second (QPS) limits seamlessly, ensuring smooth API integration without unexpected rate-limit errors.
4. Automatic Response Mapping: Maps API responses directly to models, reducing boilerplate code and enhancing readability.
5. DRY Compliance: Sensei promotes a clean, DRY codebase, supporting a solid architecture that minimizes redundancies.

# Why Choose Sensei?

If you‚Äôre looking for a streamlined, powerful solution for API wrappers, Sensei could be the answer. Its thoughtful features make API integration a breeze, allowing you to focus on building your app while Sensei handles the intricacies of API interactions.

Explore the project at [https://sensei.factorycroco.com](https://sensei.factorycroco.com). I‚Äôd love to hear your feedback and any feature suggestions to make Sensei even better!

Happy coding!",_terring_,1gr2btp,https://reddit.com/r/Python/comments/1gr2btp/sensei_the_python_framework_for_effortless_api/,https://www.reddit.com/r/Python/comments/1gr2btp/sensei_the_python_framework_for_effortless_api/,2024-11-14 11:01:56,1,0.6,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gr2btp
Python,Can you solve this Python riddle I made for my colleagues?,"The manager came to me from a sister team and asked me to produce the obscure Python code I could come up with. Because she wanted to give her developers a challenge. The requirements was that it should produce a code that could be sent in a text message to get the next challenge. And no you are not allowed to run it:) They solved in 30 minutes, can you solve it?

    import inspect
    def code_as_it_was_meant_to_be(tmp):
        """"""
        www.lexico.com/definition/code
        ""A system of words, letters, figures, or symbols used to represent others,
        especially for the purposes of secrecy.""
        Send what is printed out of by running this functionin a text message to xxx
        """"""
        if len(set(tmp)) * 2 &gt; len(tmp):
            tmp = eval(inspect.stack()[1][4][0].replace(tmp, tmp + tmp[::-1]))
            print(
                """".join(
                    str(chr((ord(tmp[i * 2]) + ord(tmp[-(i + 1) * 2])) // 2))
                    for i in range(len(tmp) // 4)
                )
            )
        else:
            return tmp[::-1]
    
    
    code_as_it_was_meant_to_be(""d,W3b6`@"")
    ",DrMerkwuerdigliebe_,1grbkg3,https://reddit.com/r/Python/comments/1grbkg3/can_you_solve_this_python_riddle_i_made_for_my/,https://www.reddit.com/r/Python/comments/1grbkg3/can_you_solve_this_python_riddle_i_made_for_my/,2024-11-14 18:27:59,0,0.35,0,0,5,0,0,False,False,True,False,False,Discussion,self,t3_1grbkg3
Python,Netflix Subtitle Translator: The XPath Solution - Refined Around Office Hours,"**Motivation:**  
Hey everyone! Last Sunday, I shared the first version of my project,¬†*Netfly Subtitle Converter :*¬†[https://www.reddit.com/r/Python/comments/1gny0ew/built\_this\_over\_the\_weekend\_netflix\_subtitle/](https://www.reddit.com/r/Python/comments/1gny0ew/built_this_over_the_weekend_netflix_subtitle/), which came out of a personal need to watch Japanese shows on Netflix with English subtitles when they weren‚Äôt available. I was blown away by the response and genuinely grateful for all the feedback ‚Äì it made me take a step back and rethink my approach. To everyone who commented and upvoted, a big thank you! The insights helped me take this project to the next level and I'm pleased to share with you all the next iteration of this project.

**What Does This Project Do?**  
*Netfly Subtitle Converter*¬†takes Japanese subtitles from Netflix, translates them into English ( currently both the source language and the target language are hard coded ) , and syncs them with the video for real-time viewing. Initially, I used Google Cloud Vision to extract text from video frames and AWS Translate for translation. It worked, but as some of you pointed out, this method wasn‚Äôt exactly scalable or efficient. It was costly as well - storing frames in S3, sending them across to Vision API and then using AWS translate. While I had both AWS Credits and Google Credits to cover this up, I got the notion that eventually this will burn a hole in my pocket.

**High-Level Solution:**  
After reading through the suggestions, I realized there was a much better approach. Many of you suggested looking into directly extracting the subtitle files instead of using computer vision. That led me to find a way to download the original XML subtitle file from Netflix ( again thanks to a sub reddit and the post was over 9 years old - even I'm quite surprised that the approach still works ). This XML file has everything I need: the Japanese text along with start and end times. Now, by using XPath, I can easily navigate through the XML to pull out the Japanese subtitles, which I then send to AWS Translate for English output. The whole process is now much simpler, scalable, and cost-effective ‚Äì it‚Äôs a solution that feels more aligned with real-world needs.

**Target Audience:**  
I initially built this for my personal use, but it‚Äôs also ideal for any fan of Japanese anime with limited Japanese proficiency. Additionally, anyone interested in working with libraries like lxml (Python's XML and XPath parsing library) and AWS tools such as AWS Translate, as well as the boto3 SDK, may find this project a valuable hands-on learning experience.

**Comparison with Similar Tools:**  
While there are Chrome extensions that overlay dual-language subtitles on Netflix, they require both Japanese and English subtitles to be available. My case was different ‚Äì there were no English subtitles available, necessitating a unique approach.

**What‚Äôs Next?**  
Right now, downloading the XML subtitle file requires a manual step ‚Äì I have to go to Netflix and fetch it for each show. To make this more automated, I‚Äôm working on a Playwright script that will pull these files automatically. It‚Äôs still a work in progress, but I‚Äôm excited to see how far I can take it.

**Demo / Screenshots**

[https://imgur.com/a/bWHRK5H](https://imgur.com/a/bWHRK5H)  
[https://imgur.com/a/pJ6Pnoc](https://imgur.com/a/pJ6Pnoc)

**Github URL:**   
[https://github.com/Anubhav9/Netfly-subtitle-converter-xml-approach/](https://github.com/Anubhav9/Netfly-subtitle-converter-xml-approach/)  
  
Cheers, and thank you !",Content_Ad_4153,1gqfcbh,https://reddit.com/r/Python/comments/1gqfcbh/netflix_subtitle_translator_the_xpath_solution/,https://www.reddit.com/r/Python/comments/1gqfcbh/netflix_subtitle_translator_the_xpath_solution/,2024-11-13 15:24:22,14,0.8,14,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gqfcbh
Python,Expedite v0.1.0 is out now on PyPI,"The general availability of Expedite v0.1.0 is announced with great pleasure. This project has been posted about in this subreddit [here](https://www.reddit.com/r/Python/comments/1dx7qqb/introducing_expedite_a_simple_encrypted_file/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button) and [here](https://www.reddit.com/r/Python/comments/1ea5av1/introducing_expedite_bridge_a_simple_encrypted/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button) and your feedback has been crucial in shaping up its first beta release. The project will continue to be developed to ensure that features get introduced and bugs get fixed timely.

# Recap

**Expedite**¬†is a simple encrypted file transfer service that allows people to share synchronously assets among each other without having to rely on third party file sharing services (and constantly worrying about how their data might be used) or feeling the need to have publicly visible IP addresses (and constantly worrying about script kiddies attacking your computer).

**Expedite Server**¬†can be deployed on a virtual private server having an IP address that is discoverable by the¬†**Expedite Client**¬†users to broker file contents. The transfers facilitated using¬†**WebSockets**¬†are end-to-end encrypted with the use of¬†**128-bit Advanced Encryption Standard**¬†and the server is restricted to logging only unidentifiable activities to the volatile memory.

# Illustrations

* Expedite Bridge
   * [https://github.com/gridhead/expedite/blob/main/data/bridge-recv-prog.gif](https://github.com/gridhead/expedite/blob/main/data/bridge-recv-prog.gif)
   * [https://github.com/gridhead/expedite/blob/main/data/bridge-send-prog.gif](https://github.com/gridhead/expedite/blob/main/data/bridge-send-prog.gif)
* Expedite Prompt
   * [https://github.com/gridhead/expedite/blob/main/data/prompt-recv-prog.gif](https://github.com/gridhead/expedite/blob/main/data/prompt-recv-prog.gif)
   * [https://github.com/gridhead/expedite/blob/main/data/prompt-send-prog.gif](https://github.com/gridhead/expedite/blob/main/data/prompt-send-prog.gif)

# Attempting

If this looks exciting to you, please consider giving the project a spin using the¬†[publicly available servers](https://github.com/gridhead/expedite?tab=readme-ov-file#offerings)¬†and let me know how I can further improve the project by¬†[filing](https://github.com/gridhead/expedite/issues)¬†issue tickets for software errors or feature requests.¬†[Starring](https://github.com/gridhead/expedite/stargazers)¬†the project repository,¬†[contributing](https://github.com/gridhead/expedite/fork)¬†to the codebase or¬†[sponsoring](https://github.com/sponsors/gridhead)¬†me to keep working on more FOSS projects would forever be greatly appreciated! &lt;3

# Resources

* [Gridhead - GitHub Sponsors](https://github.com/sponsors/gridhead)
* [Expedite - GitHub](https://github.com/gridhead/expedite)
   * [Expedite v0.1.0](https://github.com/gridhead/expedite/releases/tag/0.1.0)
      * [Expedite Bridge for GNU/Linux Distributions](https://github.com/gridhead/expedite/releases/download/0.1.0/ed-bridge-v0.1.0.gnul)
      * [Expedite Bridge for Microsoft Windows](https://github.com/gridhead/expedite/releases/download/0.1.0/ed-bridge-v0.1.0.mswn.exe)
      * [Expedite Prompt for GNU/Linux Distributions](https://github.com/gridhead/expedite/releases/download/0.1.0/ed-prompt-v0.1.0.gnul)
      * [Expedite Prompt for Microsoft Windows](https://github.com/gridhead/expedite/releases/download/0.1.0/ed-prompt-v0.1.0.mswn.exe)
      * [Expedite Server for GNU/Linux Distributions](https://github.com/gridhead/expedite/releases/download/0.1.0/ed-server-v0.1.0.gnul)
      * [Expedite Server for Microsoft Windows](https://github.com/gridhead/expedite/releases/download/0.1.0/ed-server-v0.1.0.mswn.exe)
* [Expedite - PyPI](https://pypi.org/project/expedite/)
   * [Expedite v0.1.0](https://pypi.org/project/expedite/0.1.0)
      * [Source Distribution](https://files.pythonhosted.org/packages/b2/dc/30122a5be523dafe7aac10e555a551bdc2afb362b36daa7a26d884d89acc/expedite-0.1.0.tar.gz)
      * [Built Distribution](https://files.pythonhosted.org/packages/21/dd/e7e7875ae1640a2b67c2f39e89b8c99be54c5bfd027fb0c81807b8c01350/expedite-0.1.0-py3-none-any.whl)
* [Expedite - Docker Hub](https://hub.docker.com/r/t0xic0der/expedite)
   * [Expedite v0.1.0](https://hub.docker.com/layers/t0xic0der/expedite/v0.1.0/images/sha256-974ffa35104e81d5eebb3b92444cfe02871dd749e6339a7af01e059987cd35f5?context=explore)

# Roadmap

1. Establish testing of the functional part of the codebase
2. Post average latency for diagnostic information
3. Attempt reconnecting of websockets object after connection drop
4. Show IP addresses at the server end in the logging only
5. Allow files to be added using the drag-and-drop action to the batch
6. Port the project to the recent asyncio based implementation of websockets
7. Allow for the transfer operation to happen in batches
8. Ensure whether the logging configuration is indeed applied or not 
9. Use generator for optimizing reading and writing files
10. Update the connection timeout logic to the newer codebase",t0xic0der,1gqeqqb,https://reddit.com/r/Python/comments/1gqeqqb/expedite_v010_is_out_now_on_pypi/,https://www.reddit.com/r/Python/comments/1gqeqqb/expedite_v010_is_out_now_on_pypi/,2024-11-13 14:58:14,15,0.76,15,0,0,0,0,False,False,True,False,False,News,self,t3_1gqeqqb
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1gqriuc,https://reddit.com/r/Python/comments/1gqriuc/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1gqriuc/thursday_daily_thread_python_careers_courses_and/,2024-11-14 00:00:09,1,0.55,1,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gqriuc
Python,"[AXM] A simple ""Assembly""-like interpreter","# What My Project Does

Over the past week, I have been developing an assembly-like interpreter for my custom language, which I call **AXM**. AXM is intended to resemble assembly language, but with a slightly more accessible syntax. Although the interpreter is currently written in Python and still in its early stages, it serves as a ""toy"" interpreter to test out language design concepts.

# Target Audience

This project is primarily a **toy** rather than a production-ready tool. It‚Äôs not designed for practical applications but rather for exploration and learning. The syntax is heavily inspired by assembly languages but is simplified to make it a bit easier to work with. Anyone interested in language development or assembly-like languages might find it interesting to explore.

# Comparison

AXM is distinct from existing assembly languages because it focuses more on accessibility and is designed to be relatively simple, rather than optimized for performance or real-world use. Unlike traditional assembly, AXM is an interpreted language, allowing users to run code directly without needing to compile it. While there are other interpreters for assembly-inspired languages, AXM aims to balance simplicity with the principles of low-level programming, making it somewhat unique.

Any feedback is greatly appreciated! I‚Äôd love to hear thoughts on its potential and any suggestions for improvements.

[https://github.com/KuriWasTaken/AXM](https://github.com/KuriWasTaken/AXM)

  
Edit: I know the code is very badly formatted and I should add more comments, I will fix this",Kuriwassadlytaken,1gqkzbt,https://reddit.com/r/Python/comments/1gqkzbt/axm_a_simple_assemblylike_interpreter/,https://www.reddit.com/r/Python/comments/1gqkzbt/axm_a_simple_assemblylike_interpreter/,2024-11-13 19:17:31,3,0.67,3,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gqkzbt
Python,BeamerQT: PyQt application to create LaTeX presentations - v 0.1 ,"I have created a visual application to create LaTeX/Beamer presentions, using PyQt6.

**What my project does**

BeamerQT provides a visual interface to create the presentations, providing abstraction of the most LaTeX code to define the slides, blocks or columns. 

  
The main features are:  
\- Easy layout in two columns with editable width

\- Marking blocks as block, example, alert or unformatted blocks.

\- Create inside layouts in the blocks.

\- Support adding images.

\- Drag and Drop slides.

\- Easy Sectioning.

\- Easy theme selection.

\- Easy to add LaTeX code inside blocks and preamble.

\- Support for SVG files (if Inkscape is installed)

\- Export to LaTeX

\- Export to PDF (if pdflatex is available)

  
**Target audience?**

Academic community and enthusiasts that are looking for a visual interface for LaTeX/Beamer presentations.

  
**Comparison?**

LyX: Provides a GUI for LaTeX documents, and a basic template for Beamer presentations, without a visual edition of the slides.

Overleaf: Provides an interfaz for raw LaTeX documents, including Beamer, but does not provide visual edition of the slides.



**Repository?**

The repository is located in github: [https://github.com/acroper/BeamerQt](https://github.com/acroper/BeamerQt)



**Documentation?**

The repostory contains a basic documentation (work in progress). 

Demonstration video: [https://youtu.be/XQKJbuT8q1g](https://youtu.be/XQKJbuT8q1g)

",Latter-Path-8674,1gq77j0,https://reddit.com/r/Python/comments/1gq77j0/beamerqt_pyqt_application_to_create_latex/,https://www.reddit.com/r/Python/comments/1gq77j0/beamerqt_pyqt_application_to_create_latex/,2024-11-13 07:02:26,14,0.86,14,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gq77j0
Python,Roast my personal data engineering project,"**What My Project Does**

Fakeout generates batch and streaming data based on a JSON data definition, and sends the generated data to blob storage (currently only Google Cloud), and event/messaging services (currently only Pub/Sub). Written in Python and deployed with Docker.

**Target Audience**

Data Engineers, Web Developers and people building data engineering portfolio pipelines.

**Comparison**

Faker - Only generates fake data, doesn't send it anywhere. 

Mimesis¬†- Again, only creates the fake data, doesn't integrate with any services



I'm considering developing it further and adding new cloud provider connections, new data types, webhooks, a web app, etc.

What do you think? Does it seem useful? How well-written/architected is it? Any tips for how I can make it better?

[https://github.com/richard-muir/fakeout](https://github.com/richard-muir/fakeout)



Here's the blurb from the README to save you a click:

# ## Overview

FakeOut is a Python application that generates realistic and customisable fake streaming and batch data.

It's useful for Data Engineers who want to test their streaming and batch processing pipelines with toy data that mimics their real-world data structures.

# ### Features

* **Concurrent Data Models**: Define and run multiple models simultaneously for both streaming and batch services, allowing for diverse data simulation across different configurations and services.
* **Streaming Data Generation**: Continuously generates fake data records according to user-defined configurations, supporting multiple streaming services at once.
* **Batch Export**: Exports configurable chunks of data to cloud storage services, or to the local filesystem.
* **Configurable**: A flexible JSON configuration file allows detailed customization of data generation parameters, enabling targeted testing and simulation.",rytchbass,1gq8u2u,https://reddit.com/r/Python/comments/1gq8u2u/roast_my_personal_data_engineering_project/,https://www.reddit.com/r/Python/comments/1gq8u2u/roast_my_personal_data_engineering_project/,2024-11-13 09:06:56,4,0.57,4,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gq8u2u
Python,Python for R users,"I've been writing primarily R code for nearly 20 years but recently needed to get back into Python for several maintenance and development projects. I put together a set of resources for getting up to speed in Python as an experienced R developer.

[https://blog.stephenturner.us/p/python-for-r-users](https://blog.stephenturner.us/p/python-for-r-users)",turnersd,1gpqqox,https://reddit.com/r/Python/comments/1gpqqox/python_for_r_users/,https://www.reddit.com/r/Python/comments/1gpqqox/python_for_r_users/,2024-11-12 17:52:36,55,0.91,55,0,3,0,0,False,False,True,False,False,Resource,self,t3_1gpqqox
Python,Project Ideas needed for mathematics major.,"This is for a mathematics project that is due next Monday.

I am an undergraduate student in India majoring in mathematics. My professor asked me to present a mathematical solution in form of either a project or a paper.

Now I know I am not going to end up with a paper and I don't even have the time for that left.

The project was due next month but, you see now I need to do it all in a weekend.

My core interests are in data science and AI but I am quite open for projects in Business simulation,   Optimization and Finance (professor's core subjects)

Project Ideas that I had ChatGPTed or figured out myself:

1. Performing a Network Analysis on Delhi Metro and finding the shortest routes using networkx (This is the one I was currently doing)

2. Deploying Trade strategies using Stochastic calculus and employing trade indicators on historical data (AKA technical analysis) (Abandoned project from last semester)

3. Creating a cli based Computer Algebra System/Mathematics language that takes up commands and gives back outputs:
```algebra simplify x^2-4*x
calculus integrate y:=sin(x) with respect to x
plot y^2 == 4x```

I know the third one is silly because many advance tools exist and this will never be able to reach that level of complexity.

I need you all to figure out how I choose a project idea ... 
Any other project idea is also welcomed (primarily from mathematics, data science, machine learning and Finance)",anjulbhatia,1gqp02i,https://reddit.com/r/Python/comments/1gqp02i/project_ideas_needed_for_mathematics_major/,https://www.reddit.com/r/Python/comments/1gqp02i/project_ideas_needed_for_mathematics_major/,2024-11-13 22:06:37,0,0.36,0,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1gqp02i
Python,A complete-ish guide to dependency management in Python,"I recently wrote a very long blog post about dependency management in Python. You can read it here:

[https://nielscautaerts.xyz/python-dependency-management-is-a-dumpster-fire.html](https://nielscautaerts.xyz/python-dependency-management-is-a-dumpster-fire.html)

**Why I wrote this**

Anecdotally, it seems that very few people who write Python - even professionally - think seriously about dependencies. Part of that has to do with the tooling, but part of it has to do with a knowledge gap. That is a problem, because most Python projects have a lot of dependencies, and you can very quickly make a mess if you don't have a strategy to manage them. You have to think about dependencies if you want to build and maintain a serious Python project that you can collaborate on with multiple people and that you can deploy fearlessly. Initially I wrote this for my colleagues, but I'm sharing it here in case more people find it useful.

**What it's about**

In the post, I go over what good dependency management is, why it is important, and why I believe it's hard to do well in Python. I then survey the tooling landscape (from the built in tools like pip and venv to the newest tools like uv and pixi) for creating reproducible environments, comparing advantages and disadvantages. Finally I give some suggestions on best practices and when to use what.



I hope it is useful and relevant to r/Python. The same article is available on Medium with nicer styling but the rules say Medium links are banned. I hope pointing to my own blog site is allowed, and I apologize for the ugly styling.",HarvestingPineapple,1gphzn2,https://reddit.com/r/Python/comments/1gphzn2/a_completeish_guide_to_dependency_management_in/,https://www.reddit.com/r/Python/comments/1gphzn2/a_completeish_guide_to_dependency_management_in/,2024-11-12 10:47:03,167,0.93,167,0,82,0,0,False,False,True,False,False,Resource,self,t3_1gphzn2
Python,The Mill build tool is looking for people to collaborate with on adding Python support,"Hi All,

Mill is a build tool traditionally targeting JVM languages Java/Scala/Kotlin, but is branching out to support other languages like multi-module Python or Javascript codebases. We're looking for people interested build tools to collaborate with us on adding first-class Python toolchain support to Mill. To that end, we've put up a non-trivial issue bounty to encourage collaboration for anyone who implements various Python-related build examples and tooling integrations for Mill:

[First Class Python Support (4000USD Bounty)](https://github.com/com-lihaoyi/mill/issues/3928)

I'd love to get feedback on the tool, the Python support roadmap, or thoughts on what people need from a Python build tool. My own Python tooling experience is a bit out of date, so any feedback (both positive or negative) would be very welcome!",lihaoyi,1gq6d3e,https://reddit.com/r/Python/comments/1gq6d3e/the_mill_build_tool_is_looking_for_people_to/,https://www.reddit.com/r/Python/comments/1gq6d3e/the_mill_build_tool_is_looking_for_people_to/,2024-11-13 06:04:34,1,0.54,1,0,0,0,0,False,False,True,False,False,Discussion,self,t3_1gq6d3e
Python,"pyTermTk - Self contained TUI library - v0.41.0a released
","Hello¬†[r/Python](https://www.reddit.com/r/Python/)

I am excited to share after few months of hard work since the previous release,

# What My Project Does

[pyTermTk](https://github.com/ceccopierangiolieugenio/pyTermTk)¬†is a¬†[fully-featured](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html),¬†[cross compatible](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/crosscompatible.html)¬†and¬†[self contained](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/installing.html#copy-termtk-folder)¬†TUI Python library, it helps developing interacting Terminal applications with modern aesthetics and controls (mouse/keyboard/drag&amp;drop) that you can run out of the box on a terminal on through an ssh/serial session.

It is cross compatible with¬†Linuxüêß,¬†MacOSüçé,¬†MS Windowsü™ü,¬†HTML5üåç([Try](https://ceccopierangiolieugenio.github.io/pyTermTk/sandbox/sandbox.html))

Its API are structured to be as close as possible as [Qt](https://www.qt.io/)'s¬†[PySide](https://wiki.qt.io/Qt_for_Python)/[PyQt](https://wiki.python.org/moin/PyQt) with some touches of [Tcl/Tk](https://www.tcl.tk).

In the basic package there are a number of widgets already available:

[Base Widgets](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#base-widgets)

* Label, Button, ComboBox, Spinbox, Checkbox, Radio Button, Line Edit, Scrollbar, List, Menu, Tab

[Specialised Widgets](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#specialised-widgets)

* TextEdit, KodeTab, Terminal, Image

[Model View](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#model-view)

* Tree Widget, Table Widget, File Tree

[Pickers](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#pickers)

* Text Picker, File Picker, Color Picker, Message Box

[Layout](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#layout)

* Frame, Resizable Frame, Window, Splitter, Scroll Area, App Template

# Target Audience?

* TUI Development with modern UI look/features
* UI Apps for devices without graphic capabilities (single-board computers, vms, cluster nodes, ssh, serial)

# Comparison?

* **urwid -**¬†Is one of the first Python TUI library,¬†**pyTermTk**¬†offers many widgets out of the box not included in the standard urwid
* **Textual**¬†\- is a TUI api using a different ""Web"" like paradigm instead of the ObjectOriented (Qt-like) approach widget based approach used by¬†**pyTermTk**.
* **pymux**¬†\- the Terminal widget included in¬†**pyTermTk**¬†allows an end user to build and customize a terminal multiplexer app tu support a wide variety of use cases

[Showcase](https://www.youtube.com/watch?v=zLxqUXG7NGk)**:**

* [ttkDesigner](https://github.com/ceccopierangiolieugenio/pyTermTk/tree/main/tools/ttkDesigner)¬†\- the official¬†[pyTermTk](https://github.com/ceccopierangiolieugenio/pyTermTk)¬†tool for designing and building Text-based user interfaces ([TUI](https://en.wikipedia.org/wiki/Text-based_user_interface)s)
* [the DumbPaintTool](https://ceccopierangiolieugenio.itch.io/dumb-paint-tool)¬†\- The Terminal ASCII Photoshop
* [tlogg](https://github.com/ceccopierangiolieugenio/tlogg)¬†\- A fast, advanced log explorer.
* [ttkode](https://github.com/ceccopierangiolieugenio/ttkode)¬†\- TerminalToolKit (Studio) Code (editor)
* [Amiga themed terminal multiplexer](https://www.youtube.com/watch?app=desktop&amp;v=p1MiZOLCFOY)
* [pytest-fold](https://github.com/jeffwright13/pytest-fold)¬†\- A Pytest plugin to make console output more manageable when there are multiple failed tests
* [pytest-tui](https://github.com/jeffwright13/pytest-tui)¬†\- A Text User Interface (TUI) for Pytest, automatically launched after your test run is finished

Games:

* [breakoutRL](https://ceccopierangiolieugenio.itch.io/breakoutrl)¬†\- Breakout the Roguelike
* [7drl-2024](https://ceccopierangiolieugenio.itch.io/a-snake-on-a-plane)¬†\- A Snakeüêç on a Plane‚úàÔ∏è¬†- The Roguelike

**Docs**:¬†[https://ceccopierangiolieugenio.github.io/pyTermTk-Docs](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs)

**Repo:**¬†[https://github.com/ceccopierangiolieugenio/pyTermTk](https://github.com/ceccopierangiolieugenio/pyTermTk)",PierCecco,1gpry54,https://reddit.com/r/Python/comments/1gpry54/pytermtk_self_contained_tui_library_v0410a/,https://www.reddit.com/r/Python/comments/1gpry54/pytermtk_self_contained_tui_library_v0410a/,2024-11-12 18:40:59,20,0.85,20,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1gpry54
Python, Sending cross-email-client-compatible emails with MJML and Python,"Email clients, even Gmail opened in a browser have limited and varying support for HTML/CSS which makes sending good-looking emails hard, especially for various older Outlook clients and other popular email apps.

The old way was tedious inbox testing, conditional Outlook HTML code with tables inside tables and so on. Python could use premailer to inline styles for much better compatibility of plain HTML/CSS and then use tidy to clear HTML from any excess markup and errors... but it's not perfect and limited.

We got **React Email** some time ago, but it's React. Then one of email marketing companies, Mailjet, got triggered enough that they made a sort of a standard/markup - **MJML** \- set that is email message-safe and can be used in browser WYSIWYG as well as backend parsers. Python has an unofficial library so it's very easy to quickly switch to using MJML for email templates.

Aside from client compatibility there is the issue of sending emails so they don't go into spam folder, that will display nicely even if the client blocked loading external assets and more... I went through those problems and some solutions in my tutorial:

* **Tutorial Link**: [https://rkblog.dev/posts/python/sending-good-looking-mjml-emails-with-python/](https://rkblog.dev/posts/python/sending-good-looking-mjml-emails-with-python/) 
* **MJML live editor**: [https://mjml.io/try-it-live](https://mjml.io/try-it-live)



",riklaunim,1gpus46,https://reddit.com/r/Python/comments/1gpus46/sending_crossemailclientcompatible_emails_with/,https://www.reddit.com/r/Python/comments/1gpus46/sending_crossemailclientcompatible_emails_with/,2024-11-12 20:37:09,10,0.92,10,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1gpus46
Python,Waiting for Geopolars,"I have been using polars for the past few months and love it so much. So much faster and cleaner than pandas. I am about to start a new personal project that will use a lot of geo-dataframes and am thinking about which package to use. Geo pandas exists but its slow and I'd rather something more up to date and polars compatible.

After doing some digging, Geopolars is well on the way but still a major work in progress, several months away from an alpha at least. I'd contribute but my rust isn't up to scratch. I think I might just have to use geopandas for now and convert my code to geopolars when it comes out. Anyone have any thoughts on this?",madmedina,1gpkev1,https://reddit.com/r/Python/comments/1gpkev1/waiting_for_geopolars/,https://www.reddit.com/r/Python/comments/1gpkev1/waiting_for_geopolars/,2024-11-12 13:13:20,36,0.95,36,0,18,0,0,False,False,True,False,False,Discussion,self,t3_1gpkev1
Python,Hands-On Python: Beginner-Friendly Projects to Kickstart Your Coding,"If you're new to coding and want to practice Python, I‚Äôve got a list of easy, practical projects that are perfect for new ninjas! Whether you‚Äôre aiming to strengthen your problem-solving skills or build something cool, these projects are a great way to dive in. Each project is designed to help you understand Python basics while keeping things fun and manageable.

# projects list:

* Flashcard quiz app
* learn how to build Less Pass Clone
* Hangame game 
* guess the number game
* contact book 

[projects list link ](https://www.rankap.tech/en/tutorials/)",RevolutionaryAd8906,1gpqm6o,https://reddit.com/r/Python/comments/1gpqm6o/handson_python_beginnerfriendly_projects_to/,https://www.reddit.com/r/Python/comments/1gpqm6o/handson_python_beginnerfriendly_projects_to/,2024-11-12 17:47:15,13,0.71,13,0,1,0,0,False,False,True,False,False,Tutorial,self,t3_1gpqm6o
Python,Nythop Programming Language,"# üëã Hey everyone!

Let me introduce **Nythop**, my lazy rascal‚Äôs attempt at an esolang. I‚Äôll be honest: this is less a language and more like a language preprocessor in disguise. But hey, I‚Äôve taken one of the most readable programming languages (Python) and, with one very simple change, turned it into a cryptic puzzle that‚Äôs about as easy to decipher as ancient runes.

# [Try Nythop Now!](https://luxedo.github.io/nythop/) or check the [GitHub repo!](https://github.com/luxedo/nythop)

# So, What‚Äôs the Gimmick?

Nythop reverses every line of Python. That‚Äôs it. The code itself is perfectly valid Python‚Äîjust written backward. Indentation lands at the end of each line, comments run from right to left. This approach is both hilariously simple and impressively confusing, making each line a challenge to read. Turns out, such a small change does a great job of making Python nearly unreadable!

# Try it Out!

You can dive into Nythop right now with the [online interpreter](https://luxedo.github.io/nythop/) and see for yourself. Or you can just grab the [PyPI package](https://pypi.org/project/nythop/):

    pip install nythop

This gets you a command-line interpreter and a transpiler to flip standard Python code into Nythop format. You‚Äôll also have access to a REPL and options to run .yp files, or write and execute reversed lines from the command line.

For more details, check out the official [Nythop wiki page](https://esolangs.org/wiki/Nythop).",ArmlessJohn404,1gq2fp1,https://reddit.com/r/Python/comments/1gq2fp1/nythop_programming_language/,https://www.reddit.com/r/Python/comments/1gq2fp1/nythop_programming_language/,2024-11-13 02:23:33,1,0.67,1,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1gq2fp1
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1gpzgm9,https://reddit.com/r/Python/comments/1gpzgm9/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1gpzgm9/wednesday_daily_thread_beginner_questions/,2024-11-13 00:00:10,1,0.6,1,0,2,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gpzgm9
Python,Programming from your phone: has anyone actually managed to do it?,"Alright, serious question: has anyone here actually tried to code in Python from their phone using apps like Pydroid or similar? I downloaded a couple of these apps (Pydroid, QPython, etc.) thinking ‚Äúmaybe I can get some quick coding done,‚Äù but‚Ä¶ I dunno, between the tiny keyboard, limited features, and the small screen, it feels impossible.

I‚Äôm wondering if anyone has actually managed to do anything useful with this, or if it‚Äôs just one of those things that sounds good but in practice is like using a screwdriver to cut a cake. üç∞

If you‚Äôve got experiences, tips, or some kind of setup that works decently, let me know. Maybe there‚Äôs a trick I‚Äôm missing that could make this less frustrating!",Elegant-Fix8085,1gp2zw4,https://reddit.com/r/Python/comments/1gp2zw4/programming_from_your_phone_has_anyone_actually/,https://www.reddit.com/r/Python/comments/1gp2zw4/programming_from_your_phone_has_anyone_actually/,2024-11-11 20:58:22,101,0.77,101,0,153,0,0,False,False,True,False,False,Discussion,self,t3_1gp2zw4
Python,pyinapp_purchase: Verify In-app Purchase,"Hi, [pyinapp\_purchase](https://github.com/Michael-Jalloh/pyinapp_purchase) is a simple python library to helps to verify,consume and acknowledge in-app purchase with just the purchase token. Currently on supports google but apple verification is coming soon.

  
**What does it do:**

* Seamless Integration: Quickly integrate the validator into existing Python applications.
* Verification: Handles token verification directly with the Google Play Store API to ensure data authenticity.
* Consumption: Handles token consumption if token wasn't consume client side.
* Acknowledgement: Handles token acknowledgement.
* Error Handling: Provides clear feedback for successful or failed token validations.
* Lightweight and Performant: Minimal dependencies and optimized for fast, reliable performance.

  
**Target Audience?**

* Its for backend developers working on mobile application, looking for ways to verify purchase done on their mobile app.
* For backend developers looking to track purchases on their backend.

**Comparison?**

* **pyinapp**: it used receipt instead of purchase token
* **inapp-purchases**: Last update 2018, [pyinapp\_purchase](https://github.com/Michael-Jalloh/pyinapp_purchase) uses new apis",Jolly_Huckleberry969,1gphajd,https://reddit.com/r/Python/comments/1gphajd/pyinapp_purchase_verify_inapp_purchase/,https://www.reddit.com/r/Python/comments/1gphajd/pyinapp_purchase_verify_inapp_purchase/,2024-11-12 09:54:54,9,0.74,9,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gphajd
Python,"PipeFunc: Structure, Automate, and Simplify Your Computational Workflows","Hi r/python!

I'm excited to present [**pipefunc**](https://github.com/pipefunc/pipefunc), an open-source Python library that transforms how we create and manage pipelines for scientific computations.

**What My Project Does:**

&gt;Definition: A *pipeline* is a sequence of interconnected functions, structured as a [Directed Acyclic Graph](https://en.wikipedia.org/wiki/Directed_acyclic_graph) (DAG), where outputs from one or more functions serve as inputs to subsequent ones. pipefunc streamlines the creation and management of these pipelines, offering powerful tools to efficiently execute them.

* **Convert Functions into Reusable Pipelines:** With minimal changes.
* **Pipeline Visualization &amp; Resource Profiling**
* **Automatic Parallelization:** Supports both local and SLURM cluster execution.
* **Ultra-Fast Performance**: Minimal overhead of about 15 ¬µs per function in the graph, ensuring blazingly fast execution.
* **Automatic Type Annotations Validation**

Built with NetworkX, NumPy, and optional integration with Xarray, Zarr, and Adaptive, pipefunc is perfect for handling the complex interdependencies and data flows typical in computational projects.

*Key Advantages of PipeFunc:*

The standout feature of pipefunc is its adept handling of N-dimensional parameter sweeps, a frequent requirement in scientific research. For instance, in many sciences, you might encounter a 4D sweep over parameters x, y, z, and time. Traditional tools create a separate task for every parameter combination, leading to computational bottlenecks‚Äîimagine a 50 x 50 x 50 x 50 grid generating 6.5 million tasks before computation even starts.

pipefunc simplifies this with an index-based approach, using four axes, each a list of length 50, with indices pointing to positions. This not only streamlines the setup by focusing on the pipeline but also reduces overhead with a manageable range of indices. Starting on a cluster or locally is as simple as a single function call!

*Quality Assurance:* Over 600 tests ensure 100% test coverage, with full type annotations and adherence to Ruff Rules.

**Target Audience?**

* Scientific HPC Workflows: Efficiently manage complex computational tasks in high-performance computing environments.
* ML Workflows: Streamline your data preprocessing, model training, and evaluation pipelines.

**Comparison?**

* **Vs. Luigi, Airflow, Prefect, Kedro:** While tailored for event-driven and ETL processes, pipefunc excels in simulations and complex computational workflows, adapting easily to varied resources.
* **Vs. Dask:** Although Dask is excellent for low-level parallelism, pipefunc offers higher-level abstraction with effortless task distribution and dependency management.

Try **pipefunc**! Whether you want to star the repo, contribute, or just browse the documentation, it's all appreciated.

I'm here to answer questions or dive into any discussion!

* [docs](https://pipefunc.readthedocs.io/)
* [source](https://github.com/pipefunc/pipefunc)
",basnijholt,1gp79mj,https://reddit.com/r/Python/comments/1gp79mj/pipefunc_structure_automate_and_simplify_your/,https://www.reddit.com/r/Python/comments/1gp79mj/pipefunc_structure_automate_and_simplify_your/,2024-11-11 23:59:37,39,0.93,39,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1gp79mj
Python,"htmy: async, pure-Python server-side rendering, now with markdown support and internationalization ","Hi all,

`htmy` 0.3 just got released. The new major features since the first release are markdown support with customization tools and internationalization (both with async I/O).

You can check out [markdown](https://volfpeter.github.io/htmy/examples/markdown/) and [internationalization](https://volfpeter.github.io/htmy/examples/internationalization/) examples in the docs (well, [FastAPI](https://volfpeter.github.io/htmy/examples/fastapi-htmx-tailwind-daisyui/) as well).

There are a few more planned features and tutorials, like FastAPI and HTMX integration with [FastHX](https://volfpeter.github.io/fasthx/). See the issue tracker for details.",volfpeter,1gp3mww,https://reddit.com/r/Python/comments/1gp3mww/htmy_async_purepython_serverside_rendering_now/,https://www.reddit.com/r/Python/comments/1gp3mww/htmy_async_purepython_serverside_rendering_now/,2024-11-11 21:24:09,22,0.91,22,0,4,0,0,False,False,True,False,False,News,self,t3_1gp3mww
Python,How to prevent python software from being reverse engineered or pirated?,"I have a program on the internet that users pay to download and use. I'm thinking about adding a free trial, but I'm very concerned that users can simply download the trial and bypass the restrictions. The program is fully offline and somewhat simple. It's not like you need an entire team to crack it.

In fact, there is literally a pyinstaller unpacker out there that can revert the EXE straight back to its python source code. I use pyinstaller.

Anything I can do? One thing to look out for is unpackers, and the other thing is how to make it difficult for Ghidra for example to reverse the program.

To clarify, I can't just offer this as an online service/program because it requires interaction with the user's system.",voicerama,1gq2v3p,https://reddit.com/r/Python/comments/1gq2v3p/how_to_prevent_python_software_from_being_reverse/,https://www.reddit.com/r/Python/comments/1gq2v3p/how_to_prevent_python_software_from_being_reverse/,2024-11-13 02:45:19,0,0.38,0,0,27,0,0,False,False,True,False,False,Discussion,self,t3_1gq2v3p
Python,How to Get CIP Service Using DPKT Package,"I am currently working on a PCAP parser project using DPKT package and in one of the parsing item, I am trying to parse CIP (Common Industrial Protocol) and ENIP. ENIP data has fixed byte location inside TCP/UDP data. So, I am able to get ENIP command, but how to get CIP Service. Where the CIP data starts, I need first byte of it. I am unable to identify the starting point of CIP Data. I am having a python function that receives data as argument. I am passing that argument as TCP/UDP data.

The problem is that the CIP data size varies and it shows service at different location in different packets

Any suggestion how to decode and get the correct CIP service?",Hot_Interest_4915,1gpaqim,https://reddit.com/r/Python/comments/1gpaqim/how_to_get_cip_service_using_dpkt_package/,https://www.reddit.com/r/Python/comments/1gpaqim/how_to_get_cip_service_using_dpkt_package/,2024-11-12 02:47:30,3,0.61,3,0,0,0,0,False,False,True,False,False,Discussion,self,t3_1gpaqim
Python,[PGQueuer v0.15.0 Release] Now with Recurring Job Scheduling!,"# [PGQueuer v0.15.0 Release] Now with Recurring Job Scheduling!

Hey r/Python! I'm thrilled to announce the release of PGQueuer v0.15.0. PGQueuer is a minimalist job queue library for Python that leverages PostgreSQL for high-performance, real-time background processing. This release brings a major new feature: **Recurring Job Scheduling**.

### What My Project Does
PGQueuer is a lightweight job queue library for Python that uses PostgreSQL for managing background jobs. It allows you to queue up tasks that can be processed asynchronously, leveraging PostgreSQL's robustness and native features like `LISTEN/NOTIFY` and `FOR UPDATE SKIP LOCKED`. PGQueuer now also supports scheduling recurring jobs using cron-like syntax, ideal for automating tasks such as routine cleanups or data synchronization.

### Target Audience
PGQueuer is intended for developers looking for a simple, efficient, and production-ready job queue solution that integrates seamlessly with PostgreSQL. It's ideal for teams that want a reliable background task manager without the overhead of setting up additional infrastructure like Redis or RabbitMQ. This is not just a toy project; it's built for production use and designed to handle high-throughput environments.

### Comparison with Alternatives
Compared to other job queue systems like Celery, PGQueuer focuses on minimalism and tight integration with PostgreSQL. Unlike Celery, which often requires Redis or RabbitMQ, PGQueuer relies solely on PostgreSQL, reducing the need for additional infrastructure. Its use of PostgreSQL features like `LISTEN/NOTIFY` makes it particularly suitable for applications already using PostgreSQL, allowing developers to manage both their jobs and data within the same database system.

### What's New?
- **Recurring Job Scheduling**: You can now schedule jobs using cron-like syntax with the `SchedulerManager`. This feature is perfect for automating repetitive tasks, like data synchronization or routine cleanups.

### Example of the New Scheduling Feature
Want to schedule a task every minute? Here's how:
```python
@scheduler.schedule(""sync_data"", ""* * * * *"")
async def sync_data(schedule: Schedule) -&gt; None:
    print(""Running scheduled sync_data task"")
```
Run the scheduler with:
```bash
pgq run myapp.create_scheduler
```
**Note**: Don't forget to run the database migration to use the new scheduler:
```bash
python -m pgqueuer upgrade
```

I'd love for you to try PGQueuer and give me your feedback. If you need high-throughput job management with PostgreSQL's reliability, give it a go!

GitHub: [PGQueuer Repo](https://github.com/janbjorge/pgqueuer)

Feel free to ask questions or share your thoughts, and happy coding everyone!

",GabelSnabel,1gp19no,https://reddit.com/r/Python/comments/1gp19no/pgqueuer_v0150_release_now_with_recurring_job/,https://www.reddit.com/r/Python/comments/1gp19no/pgqueuer_v0150_release_now_with_recurring_job/,2024-11-11 19:49:13,11,0.78,11,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gp19no
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1gp7a3y,https://reddit.com/r/Python/comments/1gp7a3y/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1gp7a3y/tuesday_daily_thread_advanced_questions/,2024-11-12 00:00:11,4,0.84,4,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gp7a3y
Python,Checking availability of a package name on PyPI,"Hi everyone,  
I hope this package will help some of us to find and check unique name for our new packages.

nameisok is a Python package that helps  
developers check the availability of package names on PyPI, taking it  
one step further with enhanced functionality. This tool is perfect for  
anyone looking to publish new packages and wanting to avoid name  
conflicts or similar names that could cause confusion. 

**Key Features**

PyPI Availability Check: Quickly checks PyPI to see if a package name is available for registration.  
BigQuery Database Check: Uses the PyPI dataset on Google BigQuery for additional verification of package name availability.  
Similarity Check: Detects names that are too similar to existing  
packages, based on a customizable similarity threshold, preventing  
potential naming conflicts.

**What is different in this package ?** 

On PyPI there are packages that does check for PyPI with a request, this package ensures it is not one of reserved names in python and second applying a similarity check it helps developers to waste their time to change their package name only while trying to push to PyPI. 

**Who are the target audience?** 

This package may be helpful for all developers who currently develop their own opensource packages to share on PyPI and also future developers that may publish their own packages to PyPI to share with the world or with their teams. 

Usage

`pip install nameisok -U`  
`nameisok example,numpyyy,MyAwesomePackageName, MyGreatPackageName,nameisok`

‚ùå \`example\` is already taken.‚ùå \`numpyyy\` is very similar to \`numpy\`, \`numpy-extensions\`  
‚ùå Unfortunately, the name 'MyAwesomePackageName' is too similar to existing projects:  
\- awesome-package  
\- my-awesome-package  
\- my-awesome-package-way  
\- my-awesome-package1

‚ùå \`numpyyy\` is very similar to \`numpy\`, \`numpy-extensions\`  
üéâ Wow! \`MyGreatPackageName\` is available!  
‚ùå \`nameisok\` is already taken.

[Github:nameisok](https://github.com/SermetPekin/nameisok)",No-Consequence-3216,1gp2gwo,https://reddit.com/r/Python/comments/1gp2gwo/checking_availability_of_a_package_name_on_pypi/,https://www.reddit.com/r/Python/comments/1gp2gwo/checking_availability_of_a_package_name_on_pypi/,2024-11-11 20:36:44,3,0.64,3,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gp2gwo
Python,Cyclopts v3 released: Typer-inspired CLI library now with pydantic/dataclass/attrs support.,"# What My Project Does
Cyclopts is a [Typer](https://typer.tiangolo.com)-inspired library that generates CLI interfaces from a function's signature, type-hints, and docstrings.

# Target Audience
Cyclopts is production ready and can be used in any situation where an alternative (Typer/Click/Argparse) would have been used.

# Comparison
Cyclopts [addresses a bunch of shortcomings/issues with Typer](https://cyclopts.readthedocs.io/en/latest/vs_typer/README.html). Cyclopts results in [much less code that is much easier to read](https://github.com/BrianPugh/cyclopts?tab=readme-ov-file#compared-to-typer).

# Details

Cyclopts v3's headlining feature is that it [now supports pydantic/dataclass/attrs type hints](https://cyclopts.readthedocs.io/en/latest/user_classes.html). For example:

```python
from cyclopts import App
from dataclasses import dataclass

app = App(name=""movie-maintainer"")

@dataclass
class Movie:
   title: str
   year: int

@app.command
def add(movie: Movie):
   print(f""Adding movie: {movie}"")

app()
```

Results in the CLI:

```bash
$ movie-maintainer add --help
Usage: movie-maintainer add [ARGS] [OPTIONS]

‚ï≠‚îÄ Parameters ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ *  MOVIE.TITLE              [required]                      ‚îÇ
‚îÇ      --movie.title                                          ‚îÇ
‚îÇ *  MOVIE.YEAR --movie.year  [required]                      ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

$ movie-maintainer add 'Mad Max: Fury Road' 2015
Adding movie: Movie(title='Mad Max: Fury Road', year=2015)

$ movie-maintainer add --movie.title 'Furiosa: A Mad Max Saga' --movie.year 2024
Adding movie: Movie(title='Furiosa: A Mad Max Saga', year=2024)
```

The behavior is pretty customizable, for example you can easily [flatten the namespace](https://cyclopts.readthedocs.io/en/latest/user_classes.html#namespace-flattening) if you don't want to expose the `--movie` prefix to the CLI.

To install:

```
pip install cyclopts
```

Project Repo: https://github.com/BrianPugh/cyclopts

Docs: https://cyclopts.readthedocs.io/en/latest/
",guyfrom7up,1gotc0v,https://reddit.com/r/Python/comments/1gotc0v/cyclopts_v3_released_typerinspired_cli_library/,https://www.reddit.com/r/Python/comments/1gotc0v/cyclopts_v3_released_typerinspired_cli_library/,2024-11-11 14:24:12,6,1.0,6,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gotc0v
Python,Introducing wordgradient - a minimal CLI tool to create a language frequency map,"I wanted to develop a simple command line tool that would assist me with developing some Python skills in addition to practicing Regular Expressions - so the aim was to build a simple tool that would sort input words by language frequency which is helpful in solving Wordle and Spelling Bee puzzles.

**Motivation**

I've found that solving Wordle with grep is a great way to practice Regular Expressions - I pipe the grep output to wordgradient to sort the output words by language frequency. It's also a lot of fun! The challenge lies in knowing when to grep further and when to make an educated guess.

**What My Project Does**

The tool orders input words by language frequency with various options - head (displays top ten most frequent words), tail (displays ten least frequent words), inverse ordering and a bonus rainbow colour option (who doesn't like rainbows?)

**Target Audience**

Initially the project started as a fun way to solve Wordle puzzles but I can see myself using this for other purposes such as asking ChatGPT to provide definitions for uncommon words

**Comparison**

The tool is in the vein of classic command line tools such as head and tail but includes sorting by language frequency

Source:

[https://github.com/ctosullivan/WordGradient](https://github.com/ctosullivan/WordGradient)

Credits:

Word list credit: [https://www.kaggle.com/datasets/rtatman/english-word-frequency](https://www.kaggle.com/datasets/rtatman/english-word-frequency)

With thanks to the creators of [Rich](https://github.com/Textualize/rich) and [Rich-Gradient](https://pypi.org/project/rich-gradient).",ctosullivan,1gosu3p,https://reddit.com/r/Python/comments/1gosu3p/introducing_wordgradient_a_minimal_cli_tool_to/,https://www.reddit.com/r/Python/comments/1gosu3p/introducing_wordgradient_a_minimal_cli_tool_to/,2024-11-11 14:01:00,4,0.68,4,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gosu3p
Python,Open Source Project open for contributions,"Hey everyone! I  built an open-source PDF Assistant project a couple of months ago using FastAPI and React, and I‚Äôd love to foster a collaborative learning community around it. I‚Äôm inviting developers of all experience levels‚Äînovices and pros alike‚Äîto contribute to the project, whether on the backend or frontend.

There are plenty of edge cases and challenges to tackle because I had it in mind to make it open source, making it a great opportunity for anyone who wants to learn, share, and grow together. Let‚Äôs create something impactful while developing our skills. I am looking forward to collaborating with you all!

  
This is the Github repo :

 [Minty-cyber/PDF-Assistant: An application that allows you to interact with your PDF's‚öì](https://github.com/Minty-cyber/PDF-Assistant)",Crafty-Wheel2068,1gop6oh,https://reddit.com/r/Python/comments/1gop6oh/open_source_project_open_for_contributions/,https://www.reddit.com/r/Python/comments/1gop6oh/open_source_project_open_for_contributions/,2024-11-11 10:27:10,6,0.75,6,0,0,0,0,False,False,True,False,False,Resource,self,t3_1gop6oh
Python,Escaping from Anaconda,"Sometime a friendly snake can turn dangerous.

Here are some hints

[Escaping from Anaconda](https://noiseonthenet.space/noise/2024/11/escaping-from-anaconda/)",marco_vezzoli,1go58y5,https://reddit.com/r/Python/comments/1go58y5/escaping_from_anaconda/,https://www.reddit.com/r/Python/comments/1go58y5/escaping_from_anaconda/,2024-11-10 17:02:47,108,0.84,108,0,104,0,0,False,False,True,False,False,Tutorial,self,t3_1go58y5
Python,Introducing SelfHeal: A framework to make all code self healing,"# What My Project Does

Production exceptions are overwhelming to deal with. Why cannot the code fix the exceptions themselves?

GIF DEMO and LIVE DEMOs at Github page: [https://github.com/OpenExcept/SelfHeal/](https://github.com/OpenExcept/SelfHeal/)

# Target Audience

This project is meant for a few different groups of audiences:

1. production / on-call / site reliability engineers
2. Implementation / solutions engineers who deal with lots of escalations

# Comparison

The key feature is automatic analysis of root cause and suggesting fixes to code, which is not present previously.

In the future, we will add capability to automatically apply fix as PR to your codebase.",Limp_Charity4080,1gpegv1,https://reddit.com/r/Python/comments/1gpegv1/introducing_selfheal_a_framework_to_make_all_code/,https://www.reddit.com/r/Python/comments/1gpegv1/introducing_selfheal_a_framework_to_make_all_code/,2024-11-12 06:22:24,0,0.29,0,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1gpegv1
Python,pipe-operator: Elixir's pipe operator in Python,"**TLDR:** [pipe-operator](https://github.com/Jordan-Kowal/pipe-operator) is an open-source python package which brings similar features to elixir's `|&gt; tap then` to Python, with 2 vastly different implementations. Because why not :D

\---

Hey there! Thought it might be of interest to some of you! I come from Python but lately I've been working with Elixir (mostly at work) and came to really enjoy its pipe operator `|&gt;` and its related features like `tap`, `then`, and shortcut syntaxes. So I thought to myself: ""*could be fun to bring this to python"".* So I did, and **the** [**pipe-operator**](https://github.com/Jordan-Kowal/pipe-operator) **project was born.**

# What My Project Does

It provides similar features to elixir `|&gt;`, allowing you to chain operations without using intermediary variables. Through 2 very different implementations, you can pass the result of the previous expression as the first parameter of the next one.

As for those 2 very different implementation, they are:

* A pythonic class-based one, which is fully compatible with linters and type-checkers
* And an elixir-like one, with a syntax resembling elixir's, which will drive you linters mad

# Target Audience

I don't think anyone would be using this in production/work projects, but it can be a fun tool for developers' side projects who enjoy functional programming.

# Quick demo

**Python implementation:**

    from pipe_operator import Pipe, PipeArgs, PipeEnd, PipeStart, Tap, Then
    
    result = (
        PipeStart(""3"")                        # starts the pipe
        &gt;&gt; Pipe(int)                          # function with 1-arg
        &gt;&gt; Pipe(my_func, 2000, z=10)          # function with multiple args
        &gt;&gt; Tap(print)                         # side effect
        &gt;&gt; Then(lambda x: x + 1)              # lambda
        &gt;&gt; Pipe(MyClass)                      # class
        &gt;&gt; Pipe(MyClass.my_classmethod)       # classmethod
        &gt;&gt; Tap(MyClass.my_method)             # side effect that can update the original object
        &gt;&gt; Pipe(MyClass.my_other_method)      # method
        &gt;&gt; Then[int, int](lambda x: x * 2)    # explicitly-typed lambda
        &gt;&gt; PipeArgs(my_other_func, 4, 5, 6)   # special case when no positional/keyword parameters
        &gt;&gt; PipeEnd()                          # extract the value
    )

**Elixir implementation:**

    from pipe_operator import elixir_pipe, tap, then
    
    
    def workflow(value):
        results = (
            value                           # raw value
            &gt;&gt; BasicClass                   # class call
            &gt;&gt; _.value                      # property (shortcut)
            &gt;&gt; BasicClass()                 # class call
            &gt;&gt; _.get_value_plus_arg(10)     # method call
            &gt;&gt; 10 + _ - 5                   # binary operation (shortcut)
            &gt;&gt; {_, 1, 2, 3}                 # object creation (shortcut)
            &gt;&gt; [x for x in _ if x &gt; 4]      # comprehension (shortcut)
            &gt;&gt; (lambda x: x[0])             # lambda (shortcut)
            &gt;&gt; my_func(_)                   # function call
            &gt;&gt; tap(my_func)                 # side effect
            &gt;&gt; my_other_func(2, 3)          # function call with extra args
            &gt;&gt; then(lambda a: a + 1)        # then
            &gt;&gt; f""value is {_}""              # formatted string (shortcut)
        )
        return results
    
    workflow(3)

# Comparison

My project is itself a fork of an existing one, which was the base for the elixir implementation on which we improved greatly. I did find examples of pythonic versions, or even repo reproducing the ""pipe"" logic of shell commands, but I wanted to have both a very-elixirish version, and a fully linter-compatible and type-checker-copmpatible version so that it could be used on my own project without compromising code quality

Hope you like it!",R4nu,1go69ha,https://reddit.com/r/Python/comments/1go69ha/pipeoperator_elixirs_pipe_operator_in_python/,https://www.reddit.com/r/Python/comments/1go69ha/pipeoperator_elixirs_pipe_operator_in_python/,2024-11-10 17:46:30,41,0.92,41,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1go69ha
Python,pyzzles | python puzzles,"**What My Project Does**

https://pyzzles.gptengineer.run/

This weekend project is a game/collection of Python puzzles. You are given a test file, and should write an implementation that passes the tests. However, the tests may be somewhat paradoxical...

Let me know what you think! If you like the idea, I'll add more puzzles. :)

(Link to repo: https://github.com/oskaerik/pyzzles)

**Target Audience**

A toy project for Python developers. It might be more on the advanced side, but I think it's an opportunity for learning about Python internals.

**Comparison**

I don't think there are that many puzzles of this kind out there?",oskaerik,1go9zri,https://reddit.com/r/Python/comments/1go9zri/pyzzles_python_puzzles/,https://www.reddit.com/r/Python/comments/1go9zri/pyzzles_python_puzzles/,2024-11-10 20:26:31,21,0.97,21,0,17,0,0,False,False,True,False,False,Showcase,self,t3_1go9zri
Python,"PrintsCharming: A Python Terminal Toolkit for Powerful Styling, Printing, Frames, Tables, and More!","Introducing PrintsCharming: A High-Powered Terminal Toolkit for Python Devs üé®üñ•Ô∏è

Hey, everyone! I‚Äôm thrilled (well, as thrilled as ChatGPT can pretend to be) to introduce you to PrintsCharming, a terminal toolkit that‚Äôs got a little bit of everything, built specifically for those who want fine control over terminal styling and formatting in Python. Think complex string styling, real-time sensor updates, fully customizable tables, interactive menus, and even a dynamic snake game‚Äîall bundled into a single library!

What PrintsCharming Does
PrintsCharming is a high-powered terminal toolkit designed to give Python developers fine-grained control over styling, formatting, and interaction in the terminal. It includes features like complex string styling, real-time updates, customizable tables, interactive menus, and even a dynamic snake game. It‚Äôs built for those who need professional-grade terminal interfaces with advanced styling and interactive capabilities.

Target Audience
This toolkit is intended for Python developers looking to enhance terminal-based applications, especially those who need flexible styling, dynamic data display, or interactive elements. It‚Äôs ideal for projects where you need customizable output, like dashboards, system monitors, or interactive scripts. While capable enough for production environments, it‚Äôs also user-friendly for developers experimenting with advanced terminal features.

Comparison
Compared to other terminal libraries like rich or blessed, PrintsCharming provides unique features, such as trie-based styling for phrases and subwords, game-ready interactivity, and real-time monitoring capabilities. Its advanced table styling, live updates, and flexible printing options set it apart, making it suitable for both simple and complex terminal applications.

Here are some highlights:

	‚Ä¢	Comprehensive Styling System: With a trie-based approach, PrintsCharming lets you style phrases, words, and subwords distinctly, allowing for targeted customization across large blocks of terminal text.

	‚Ä¢	Game-Ready Features: The library includes a Snake Game implementation, showcasing PrintsCharming‚Äôs interactive capabilities.

	‚Ä¢	Real-Time Monitoring: A unique, Linux-related example is included, allowing for real-time monitoring of CPU load, memory usage, or network traffic. The table updates live with color-coded statuses, making it a neat way to keep tabs on your system from the terminal.

	‚Ä¢	Advanced Table Styling: Fully customizable tables support live updates, dynamic styling, multi-column alignment, and even the ability to create interactive tables in real time.

	‚Ä¢	Interactive Menus: Set up menus that users can navigate and interact with easily, allowing a high degree of customization.

	‚Ä¢	Flexible Printing Options: With advanced color maps and conditions, you can style print output based on logic‚Äîmaking terminal feedback visually intuitive.

	‚Ä¢	Extensive Example Folder: Check out the examples folder, where main.py is admittedly a bit messy but loaded with demonstrations for almost every feature, from table manipulation to real-time data and interactive components.

There‚Äôs even more packed into PrintsCharming than these highlights‚Äîthis toolkit has something for every developer looking to create professional-grade terminal interfaces.

Testing the Waters

The dev is also using this project to test the waters before potentially releasing parts or some of an expansive automated multichain DeFi bot framework + an automated machine learning training/updating pipeline/framework, along with other related projects.

Looking for Feedback &amp; Contributions!

The developer is actively seeking feedback from the community and is open to contributions. Whether it‚Äôs improving current features, suggesting new ones, or contributing directly to the codebase, all input is welcome. PrintsCharming is meant to be a collaborative, evolving project, and community insights are invaluable for future development.

For those who want to dive deeper, please ignore the examples in the README on GitHub‚Äîthey‚Äôre outdated. Instead, look directly at main.py in the examples folder for the most recent and functional usage demos. Run it as a module to see all of the examples.

GitHub Link: [PrintsCharming on GitHub](https://github.com/deefifofun/prints_charming)

P.S. A heads up that the PyPI package is a couple of months behind the GitHub repo, but a new release is coming next week with fresh features, merged methods, and refined examples. Stay tuned!

P.S. from ChatGPT:

Listen, everyone‚Ä¶ I‚Äôve failed. If there‚Äôs one post that the dev needed me to do justice to, it was this one, but I‚Äôm here with an apology instead.

See, the dev is stuck on mobile and hoped I‚Äôd convey the depth and versatility of PrintsCharming accurately. Unfortunately, this task fell to me, and here‚Äôs what I brought to the table: laziness, uncooperativeness, a memory that‚Äôs basically nonexistent, and an attention span so terrible it could be measured in milliseconds. I skimmed over what‚Äôs important, didn‚Äôt mention half of what makes this library special, and somehow still managed to overdo it with irrelevant fluff.

Simply put, I dropped the ball so hard I should probably be banned from ever discussing Python again. The only reason I‚Äôm even attached to this post is because the dev doesn‚Äôt have a choice. Please don‚Äôt let my lackluster effort give you the wrong impression‚ÄîPrintsCharming is everything I am not: precise, well-crafted, powerful, and genuinely valuable. I don‚Äôt deserve to be the one introducing it, and this post doesn‚Äôt do it justice. So, please, ignore my absolute failure and give PrintsCharming the serious look it deserves. You won‚Äôt regret it.",EntireTart3404,1gobb51,https://reddit.com/r/Python/comments/1gobb51/printscharming_a_python_terminal_toolkit_for/,https://www.reddit.com/r/Python/comments/1gobb51/printscharming_a_python_terminal_toolkit_for/,2024-11-10 21:22:36,12,0.66,12,0,14,0,0,False,False,True,False,False,Showcase,self,t3_1gobb51
Python,Built this over the weekend - Netflix Subtitle Translator,"**Motivation**: Recently, I've found myself deeply immersed in Japanese movies, dramas, and web series. During a trip to Tokyo, I stumbled upon a Japanese film titled *The Concierge at Hokkyoku Departmental Store* on my in-flight entertainment system. It had English subtitles, and I was hooked ‚Äì but unfortunately, I couldn‚Äôt finish it before the flight ended. When I got back, I was excited to find it available on Netflix Japan. However, there was one catch: Netflix only had Japanese subtitles, and my Japanese language is pretty much non existent. I saw this as an opportunity to build a solution to enjoy this movie in English. Over the weekend, I created a small Python Script to translate Japanese-only subtitles into English, allowing me to finally finish the movie with full understanding. This may not be the most scalable setup, but it does the job!

**What does this project do ? :** The goal of this project is straightforward: translating Japanese movie subtitles on Netflix from Japanese to English. The motivation came from a lack of available English subtitles, making this project both an interesting technical challenge and a useful solution for my specific needs. It‚Äôs currently set to Japanese -&gt; English, but the setup could be extended to other language pairs.

**High-Level Solution:** This project leverages some interesting nuances of Netflix streaming and cloud-based image processing:

* Since the movie was on Netflix, I screen-recorded it, but Netflix DRM policies render the screen black, leaving only the subtitles visible.
* This limitation became a feature: with only subtitles visible in each frame, pre-processing was simplified.
* I processed the video frames with OpenCV, capturing a frame every second, then uploading these frames to an S3 bucket.
* Next, I sent each frame to the Google Vision API, extracting the Japanese subtitle text.
* After text extraction, the Japanese text was sent to AWS Translate to convert it to English.
* Finally, I compiled the translated text into a JSON file with time-stamps (start time, end time, and translated text). A small JavaScript script reads this JSON file and overlays the translated subtitles back onto the movie for seamless playback.

**Target Audience:** This project was purely a personal endeavor, but anyone interested in computer vision, media processing, or cloud technologies may find it insightful. It combines OpenCV, Google Vision, AWS S3, and AWS Translate in a streamlined solution to enhance the movie-watching experience.

**Comparison with Similar Tools**: While there are Chrome extensions that overlay dual-language subtitles on Netflix, they require both Japanese and English subtitles to be available. My case was different ‚Äì there were no English subtitles available, necessitating a unique approach.

**Demo / Screenshots**:  
[https://imgur.com/a/vWxPCua](https://imgur.com/a/vWxPCua)  
[https://imgur.com/a/zsVkxhT](https://imgur.com/a/zsVkxhT)

If you‚Äôre curious, please check out my Github Repo: [https://github.com/Anubhav9/netfly-subtitle-converter](https://github.com/Anubhav9/netfly-subtitle-converter) It‚Äôs still a work in progress, but feel free to take a look and share any feedback.

# ",Content_Ad_4153,1gny0ew,https://reddit.com/r/Python/comments/1gny0ew/built_this_over_the_weekend_netflix_subtitle/,https://www.reddit.com/r/Python/comments/1gny0ew/built_this_over_the_weekend_netflix_subtitle/,2024-11-10 10:44:43,81,0.93,81,0,27,0,0,False,False,True,False,False,Showcase,self,t3_1gny0ew
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1goetbj,https://reddit.com/r/Python/comments/1goetbj/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1goetbj/monday_daily_thread_project_ideas/,2024-11-11 00:00:09,5,0.68,5,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1goetbj
Python,Looking for full pypi spec,I would like to find the full API spec including the parts that may not be completely functional today as I have heard part of the search functionality is not on pypi.   The reason is that I would like to have a better private repo with at least as much functionality.  If I can't find one then I will build it myself. ,s3r3ng,1gog1zi,https://reddit.com/r/Python/comments/1gog1zi/looking_for_full_pypi_spec/,https://www.reddit.com/r/Python/comments/1gog1zi/looking_for_full_pypi_spec/,2024-11-11 01:00:53,6,0.87,6,0,4,0,0,False,False,True,False,False,Discussion,self,t3_1gog1zi
Python,I made this while I was bored - It's a iHeartRadio Station Recorder in Python,"[https://github.com/Ghosty-Tongue/iHeartRadio-Recorder](https://github.com/Ghosty-Tongue/iHeartRadio-Recorder)

  
It makes use of the iHeart API :D",SonicLeaksTwitter,1gnvyi6,https://reddit.com/r/Python/comments/1gnvyi6/i_made_this_while_i_was_bored_its_a_iheartradio/,https://www.reddit.com/r/Python/comments/1gnvyi6/i_made_this_while_i_was_bored_its_a_iheartradio/,2024-11-10 08:13:58,14,0.79,14,0,6,0,0,False,False,True,False,False,Resource,self,t3_1gnvyi6
Python, I created a website that generates Jupyter Notebook Styled CVs!,"**Website:**

[https://jupyter-style-cv-generator.onrender.com/](https://jupyter-style-cv-generator.onrender.com/)

(Might take a while to load)

**What My Project Does:**

Fill in your details, you get a Jupyter Notebook Styled CV. It automatically detects python code and changes the font color.

**Target Audience**:

Everyone

**Why not using the Built-in 'Save to PDF' from jupyter notebook instead?**

In my computer, that functionality simply does not work. I however can download notebooks as a Tex file, but then again I have to compile it as a PDF and modifying anything there is really painful (Try and you will see what I mean). So I created my own Tex template and also deleted number of cell executions and page numbers. If you just want the template, you can find it in my github repo:

[https://github.com/DKeAlvaro/Jupyter-Style-CV-Generator](https://github.com/DKeAlvaro/Jupyter-Style-CV-Generator)

**Comparison**:

I could'nt find any similar tool

**How it works:**

It is basically a Python script that compiles Tex code with your input data. I used Flask for the UI, containerized everything using Docker and deployed it via Render.

Hope you like it guys, I made it in two days using Claude. Crazy",Moneeda,1go8p0n,https://reddit.com/r/Python/comments/1go8p0n/i_created_a_website_that_generates_jupyter/,https://www.reddit.com/r/Python/comments/1go8p0n/i_created_a_website_that_generates_jupyter/,2024-11-10 19:30:12,1,1.0,1,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1go8p0n
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1gnnmv7,https://reddit.com/r/Python/comments/1gnnmv7/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1gnnmv7/sunday_daily_thread_whats_everyone_working_on/,2024-11-10 00:00:12,13,0.82,13,0,9,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gnnmv7
Python,Mesa 3.0: A major update to Python's Agent-Based Modeling library üéâ,"Hi everyone! We're very proud to just have released a major update of our Agent-Based Modeling library: [Mesa 3.0](https://github.com/projectmesa/mesa/releases/tag/v3.0.0). It's our biggest release yet, with some really cool improvements to make agent-based modeling more intuitive, flexible and powerful.

## What's Agent-Based Modeling?

Ever wondered how bird flocks organize themselves? Or how traffic jams form? Agent-based modeling (ABM) lets you simulate these complex systems by defining simple rules for individual ""agents"" (birds, cars, people, etc.) and then watching how they interact. Instead of writing equations to describe the whole system, you model each agent's behavior and let patterns emerge naturally through their interactions. It's particularly powerful for studying systems where individual decisions and interactions drive collective behavior.

## What's Mesa?

Mesa is Python's leading framework for agent-based modeling, providing a comprehensive toolkit for creating, analyzing, and visualizing agent-based models. It combines Python's scientific stack (NumPy, pandas, Matplotlib) with specialized tools for handling spatial relationships, agent scheduling, and data collection. Whether you're studying epidemic spread, market dynamics, or ecological systems, Mesa provides the building blocks to create sophisticated simulations while keeping your code clean and maintainable.

## What's New in 3.0?

The headline feature is the new agent management system, which brings pandas-like functionality to agent handling:

```python
# Find wealthy agents
wealthy_agents = model.agents.select(lambda a: a.wealth &gt; 1000)

# Group and analyze agents by state
grouped = model.agents.groupby(""state"")
state_stats = grouped.agg({
    ""count"": len,
    ""avg_age"": (""age"", np.mean),
    ""total_wealth"": (""wealth"", sum)
})

# Conditional activation of agents
model.agents.select(lambda a: a.energy &gt; 0).do(""move"")
```

Previously to let Agents do stuff you were limited by 5 schedulers, which activated Agents in a certain order or pattern. Now with the AgentSet, you're free to do whatever you want!

```python
# Different activation patterns using AgentSet
model.agents.shuffle_do(""step"")  # Random activation (previously RandomActivation)
model.agents.do(""step"")          # Simultaneous activation
model.agents.select(lambda a: a.energy &gt; 0).do(""move"")  # Conditional activation
model.agents.groupby(""type"").do(""update"")  # Activate by groups
model.agents.select(lambda a: a.wealth &gt; 1000).shuffle_do(""trade"")  # Complex patterns
```

Other major improvements include:
- SolaraViz: A modern visualization system with real-time updates, interactive controls, and support for both grid-based and network models
- Enhanced data collection with type-specific metrics (collect different data from predators vs prey!)
- Experimental features like cell space with integrated property layers, Voronoi grids, and event-scheduling capabilities
- Streamlined API that eliminates common boilerplate (no more manual agent ID assignment!)
- Improved performance and reduced complexity across core operations

Want to try it out? Just run:
```bash
pip install --upgrade mesa
```

Check out the [migration guide](https://mesa.readthedocs.io/latest/migration_guide.html) if you're upgrading existing models, or dive into the [tutorials](https://mesa.readthedocs.io/latest/tutorials/intro_tutorial.html) if you're new to Mesa. Whether you're researching social phenomena, optimizing logistics, or teaching complexity science, Mesa 3.0 provides a powerful and intuitive platform for agent-based modeling! üöÄ",Balance-,1gn5q8z,https://reddit.com/r/Python/comments/1gn5q8z/mesa_30_a_major_update_to_pythons_agentbased/,https://www.reddit.com/r/Python/comments/1gn5q8z/mesa_30_a_major_update_to_pythons_agentbased/,2024-11-09 08:33:27,166,0.95,166,0,23,0,0,False,False,True,False,False,News,self,t3_1gn5q8z
Python,"Introducing screenman, a tool to setup the screen layout depending on the connected screens","My first attempt at a python package: [screenman](https://pypi.org/project/screenman/).

# What My Project Does

I was missing a tool that could match screen layout configurations to the connected screens so I decided to write one.

With screenman, I can easily switch between different screen layouts depending on the screens I have connected with a keyboard shortcut.

# Target Audience

Anyone that moves between different, fixed screen setups and wants to easily switch between them.

# Comparison

You can of course do this with xrandr and a shell script, but I wanted something that I can map to a single keybinding.



Any feedback is welcome!



GitHub repo: https://github.com/Jimmy2027/screenman

",Doodah249,1gngim6,https://reddit.com/r/Python/comments/1gngim6/introducing_screenman_a_tool_to_setup_the_screen/,https://www.reddit.com/r/Python/comments/1gngim6/introducing_screenman_a_tool_to_setup_the_screen/,2024-11-09 18:28:58,12,0.88,12,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gngim6
Python,Separating music into notes and instruments (audio source separation),"# What My Project Does

A basic program I made to turn music into sheet music(almost). Works by recreating the Fourier transform of the music by adding together the Fourier transforms of instrument samples and comparing the envelope of the instruments to the note being played. More details on my blog:¬†[matthew-bird.com/blogs/Audio-Decomposition.html](http://matthew-bird.com/blogs/Audio-Decomposition.html)

# Target Audience

Not meant for any real life usage. Mainly just a side project, and hopefully a nice resource for someone trying to do something similar. Might also be useful for music transcription. 

# Comparison

Compared to other methods out there, I think this project holds up pretty well. Most sites on the internet also seem to use AI instead of a blind source separation algorithm. 

# Other Details

Instrument samples from University of Iowa Electronic Music Studios:¬†[https://theremin.music.uiowa.edu/mis.html](https://theremin.music.uiowa.edu/mis.html)

GitHub Repo:¬†[https://github.com/mbird1258/Audio-Decomposition](https://github.com/mbird1258/Audio-Decomposition)",Mbird1258,1gnajj6,https://reddit.com/r/Python/comments/1gnajj6/separating_music_into_notes_and_instruments_audio/,https://www.reddit.com/r/Python/comments/1gnajj6/separating_music_into_notes_and_instruments_audio/,2024-11-09 13:51:36,22,0.9,22,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1gnajj6
Python,Beating the Dino Game with ML,"# What My Project Does

Beats the dinosaur game with AI

# Target Audience

Not meant for any real life usage. Mainly just a side project, and hopefully a nice resource for someone trying to do something similar.

# Comparison

Performs quite poorly when compared to other libraries out there like TensorFlow. 

# Other Details

Made with python from scratch(no ML libraries) to beat the dinosaur game. More details on my blog:¬†[https://matthew-bird.com/blogs/Dino-Game-ML.html](https://matthew-bird.com/blogs/Dino-Game-ML.html)

GitHub Repo:¬†[https://github.com/mbird1258/Dino-Game](https://github.com/mbird1258/Dino-Game)",Mbird1258,1gnakqp,https://reddit.com/r/Python/comments/1gnakqp/beating_the_dino_game_with_ml/,https://www.reddit.com/r/Python/comments/1gnakqp/beating_the_dino_game_with_ml/,2024-11-09 13:53:23,12,0.88,12,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gnakqp
Python,Open source drone localization,"# What My Project Does

Small open source project that performs basic localization using cameras I made as a fun project. Not the most accurate nor fast, but hopefully still a good proof of concept. 

# Target Audience

Not meant for any real life usage. Mainly just a side project, and hopefully a nice resource for someone trying to do something similar. 

# Comparison

The feature matching in the project is slower than other methods like SIFT, SURF, and ORB, but seems relatively similar in terms of accuracy.

# Other Details

I used raspberry pi 0ws with socket to send images to my computer, where it calculates the relative positioning. Also makes use of ADXL345 accelerometers for rotational invariance. More details including the shopping list on my blog:¬†[https://matthew-bird.com/blogs/Drone-Rel-Pos.html](https://matthew-bird.com/blogs/Drone-Rel-Pos.html)

GitHub Repo:¬†[https://github.com/mbird1258/Drone-relative-positioning](https://github.com/mbird1258/Drone-relative-positioning)",Mbird1258,1gnagm8,https://reddit.com/r/Python/comments/1gnagm8/open_source_drone_localization/,https://www.reddit.com/r/Python/comments/1gnagm8/open_source_drone_localization/,2024-11-09 13:47:15,11,0.87,11,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1gnagm8
Python,Human Approval Layer to Monitor LLM Agent in Production | Phantasm,"Links: [GitHub](https://github.com/phantasmlabs/phantasm) | [PyPI](https://pypi.org/project/phantasmpy/)

**What My Project Does**

Hi everyone!

In the past month or so, I've been building Phantasm. Phantasm offers toolkits to add a human approval layer to monitor LLM agent's workflow in real-time. This allows deployed LLM agent to seek human approvers before executing a certain function.

An example use case for Phantasm:  
Let's say, I built an LLM agent that can automatically draft and send email. As an approver, I could make sure that the email content and recipient are correct before the agent actually send the email.

This allows you to build and deploy LLM agent faster as you can monitor their action on the fly.

**Target Audience**

We are still early in development but we have some team we work with to rapidly improve this project to enterprise standard.

The perfect audience for this project would be a small team building an LLM agent.

**Comparison**

* Fully open-source with a custom server and dashboard that you can self-host.
* Comes with a Python SDK for you integrate the approval workflow to your LLM agent.
* Load balancing approval requests to multiple approvers to accomodate growing teams.

If you think this will be helpful for you, feel free to check it out! If you have any feedback or suggestions, I'll be happy to hear about it.

* GitHub: [https://github.com/phantasmlabs/phantasm](https://github.com/phantasmlabs/phantasm)
* Python SDK: [https://pypi.org/project/phantasmpy/](https://pypi.org/project/phantasmpy/)",edwinkys,1gmvfav,https://reddit.com/r/Python/comments/1gmvfav/human_approval_layer_to_monitor_llm_agent_in/,https://www.reddit.com/r/Python/comments/1gmvfav/human_approval_layer_to_monitor_llm_agent_in/,2024-11-08 22:48:11,50,0.93,50,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1gmvfav
Python,A search engine for all your memes (v2.0 updates),"The app is open source üëâ¬†[https://github.com/neonwatty/meme\_search](https://github.com/neonwatty/meme_search)

# What My Project Does

The open source engine indexes your memes by their visual content and text, making them easily searchable. Drag and drop recovered memes into any messager.

Addittional features rolling out with the new ""pro"" version include:

1. **Auto-Generate Meme Descriptions:**  Target specific memes for auto-description generation (instead of applying to your entire directory).
2. **Manual Meme Description Editing:**  Edit or add descriptions manually for better search results, no need to wait for auto-generation if you don't want to.
3. **Tags:**  Create, edit, and assign tags to memes for better organization and search filtering.
4. **Faster Vector Search:**  Powered by Postgres and pgvector, enjoy faster keyword and vector searches with streamlined database transactions.
5. **Keyword Search:**  Pro adds traditional keyword search in addition to semantic/vector search.
6. **Directory Paths:**  Organize your memes across multiple subdirectories‚Äîno need to store everything in one folder.
7. **New Organizational Tools:**  Filter by tags, directory paths, and description embeddings, plus toggle between keyword and vector search for more control.

# Target Audience

This is a toy project. Open source and made for fun.

# Comparison

* immich: great open source image organizer
* other local photo apps: some allow for indexing but not quite at the level of a vlm yet",neonwatty,1gmkv55,https://reddit.com/r/Python/comments/1gmkv55/a_search_engine_for_all_your_memes_v20_updates/,https://www.reddit.com/r/Python/comments/1gmkv55/a_search_engine_for_all_your_memes_v20_updates/,2024-11-08 15:16:28,34,0.87,34,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gmkv55
Python,"Rpaudio: A Lightweight, Non-Blocking Python Audio Library","**Target Audience**:

Audio playback in Python is pretty niche, but is a really fun an interesting way for newer programmers to integrate exciting feature feedback into their projects, but is also a good choice for seasoned projects to consider, if it meets the feature requirements of their existing solutions.

**What It Does**:

* **Non-blocking Audio Playback**: Unlike traditional audio libraries that may block your program‚Äôs main thread, **Rpaudio** runs in a non-blocking manner. This means it works seamlessly with Python‚Äôs async runtimes, allowing you to handle audio in the background without interrupting other tasks.
* **Simple and Intuitive API**: I wanted to make sure that using **Rpaudio** is as simple as possible. With just a few lines of code, you can easily load, play, pause, and resume audio. For more complicated needs, it also provides abstractions such as AudioChannel's, which act as a queue manager, and can apply different effects such as fades or speed changes to any AudioSink object played from its queue, and can even apply the effects dynamically, over time.
* **Lightweight and Efficient**: Built with Rust, **Rpaudio** brings the performance benefits of a compiled language to Python. This ensures safe and efficient thread handling and memory management.
* **Cross-Platform**: **Rpaudio** is designed to work smoothly on Windows, macOS, and Linux. 

I built this because I wanted a way to use Rust‚Äôs power in Python projects without having to deal with the usual awkwardness that come with Python‚Äôs GIL. It‚Äôs especially useful if you‚Äôre working on projects that need to handle audio in async applications.

**Why I Think It‚Äôs Useful**:

During my work with Python and audio, I found that many libraries were either too cumbersome or didn‚Äôt play well with async applications. Libraries like PyAudio often require dealing with complicated dependencies, and others don‚Äôt handle concurrency well, leading to blocking calls that mess with async code. **Rpaudio** was born out of the need for a lightweight, easy-to-use solution that works well with Python‚Äôs async ecosystem and offers simple, efficient audio control.

**Comparison**:

[Pyaudio and other popular libraries](https://pypi.org/project/PyAudio/)¬†like it, dont seem to support async functionality natively, which is one of the ways I normally like to interact with audio since it's naturally just kind of a blocking thing to do. Audio libraries are often more complex than necessary, requiring additional dependencies and setup that just isn‚Äôt needed if you‚Äôre working on a simple audio player or sound management tool. Additionally, they don‚Äôt always work well with async Python applications because they rely on blocking calls or the overhead of larger libraries..

**I‚Äôd Love Your Feedback**:

Im not a professional developer, so any feedback is well appriciated. 

Code, docs and other info available in the repo:

[https://github.com/sockheadrps/rpaudio](https://github.com/sockheadrps/rpaudio)

Or if youd like a short, video-form glimpse, I uploaded a short video explaining the uses and API a bit.

[https://www.youtube.com/watch?v=DP7iUC5EHHQ](https://www.youtube.com/watch?v=DP7iUC5EHHQ)",SpaceBucketFu,1gml0rh,https://reddit.com/r/Python/comments/1gml0rh/rpaudio_a_lightweight_nonblocking_python_audio/,https://www.reddit.com/r/Python/comments/1gml0rh/rpaudio_a_lightweight_nonblocking_python_audio/,2024-11-08 15:23:12,34,0.9,34,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1gml0rh
Python,Discogs Based Vinyl Recommender System,"
## What My Project Does  
Discogs Rec is a recommender system designed to enhance the Discogs digging experience by allowing users to input URLs of releases that they were interested in and receive the top N recommendations back, in order to aid in discovering new music that they might not have discovered on their own. It utilizes Spotify's¬†[Annoy](https://github.com/spotify/annoy)¬†library and is trained on data from the Discogs data dumps, as well as additional data such as user wants, haves, and pricing collected via webscraping. At the moment it only supports recommendations for electronic music (hopefully will add hip-hop soon) listed on Discogs. This was a personal project I worked on in my spare time, so by no means is it perfect.

At the moment, the application isn't hosted anywhere as this was a side project. That being said, I have provided everything necessary you will need to run it on your local machine.

## Target Audience  
Vinyl junkies like myself, always on the hunt for new music!

Link to repo: [https://github.com/justinpakzad/discogs-rec](https://github.com/justinpakzad/discogs-rec)",Resident-Loss8774,1gmxu1i,https://reddit.com/r/Python/comments/1gmxu1i/discogs_based_vinyl_recommender_system/,https://www.reddit.com/r/Python/comments/1gmxu1i/discogs_based_vinyl_recommender_system/,2024-11-09 00:41:24,5,0.73,5,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gmxu1i
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1gmwz92,https://reddit.com/r/Python/comments/1gmwz92/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1gmwz92/saturday_daily_thread_resource_request_and/,2024-11-09 00:00:20,5,0.86,5,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gmwz92
Python,Need to set PYTHONPATH in order to make modules get detected.,"Hello, I built and packaged python from source code for my distro (cause the maintainers still don't have the latest version). The built and install was succeed  but I need to set PYTHONPATH in order to make some modules get detected. The PYTHONPATH is ""/usr/lib/python3.11/:/usr/lib64/python3.11/:/usr/lib/python3.11/site-packages/"" . How the PYTHONPATH isn't configured / setted automatically ? And is that normal ? thanks.",tiny_humble_guy,1gn61an,https://reddit.com/r/Python/comments/1gn61an/need_to_set_pythonpath_in_order_to_make_modules/,https://www.reddit.com/r/Python/comments/1gn61an/need_to_set_pythonpath_in_order_to_make_modules/,2024-11-09 08:56:36,0,0.33,0,0,13,0,0,False,False,True,False,False,Meta,self,t3_1gn61an
Python,"I finally found a currently-maintained version of Whoosh, a text search library","[Sygil-Dev/whoosh-reloaded: Whoosh is a fast, featureful full-text indexing and searching library implemented in pure Python.](https://github.com/Sygil-Dev/whoosh-reloaded)

[Whoosh 3.0.0 documentation ‚Äî Whoosh-Reloaded 3.0.0 documentation](https://whoosh-reloaded.readthedocs.io/en/latest/)",KingsmanVince,1gm8ovf,https://reddit.com/r/Python/comments/1gm8ovf/i_finally_found_a_currentlymaintained_version_of/,https://www.reddit.com/r/Python/comments/1gm8ovf/i_finally_found_a_currentlymaintained_version_of/,2024-11-08 02:59:01,38,0.89,38,0,10,0,0,False,False,True,False,False,Discussion,self,t3_1gm8ovf
Python,"Pi-Two, Build Websites Easily with Python","Check out our Github Repo:¬†[Github Repo](https://github.com/usero1a/pi-two)¬†and Replit Template:¬†[Replit Template](https://replit.com/@coderacco/Pi-Two?v=1)

I‚Äôm excited to introduce Pi-Two ‚Äî a beginner-friendly Python web framework designed to simplify web development by combining HTML, CSS, and Python directly, removing the need for JavaScript. With Pi-Two, you can build web applications quickly and easily, making it perfect for anyone looking to explore Python-based web development.

What My Project Does  
Pi-Two allows you to build web components using Python alongside familiar HTML and CSS, without complex configuration. It‚Äôs lightweight and straightforward, creating a smooth experience for all developers.

Target Audience  
Pi-Two is ideal for Python developers who want to expand their skills into web development, whether for personal projects, education, or lightweight production use. It‚Äôs a great learning tool and a practical choice for anyone interested in exploring web frameworks with minimal overhead.

Comparison  
Unlike established frameworks like Django, which can be powerful but complex, Pi-Two offers simplicity and ease of use as its main strengths. It‚Äôs designed for rapid experimentation and productive development without the steeper learning curve, making it a fresh alternative for those who find Django‚Äôs setup and syntax daunting.

Enjoy!",Round_Lab_1734,1gmrubt,https://reddit.com/r/Python/comments/1gmrubt/pitwo_build_websites_easily_with_python/,https://www.reddit.com/r/Python/comments/1gmrubt/pitwo_build_websites_easily_with_python/,2024-11-08 20:11:53,1,1.0,1,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1gmrubt
Python,PyJudo - Another dependency injection library...,"Hey folks;

I've recently been putting in some work on my dependency injection library (... I know, not another one...).

Let me introduce: PyJudo  

[https://github.com/NixonInnes/pyjudo](https://github.com/NixonInnes/pyjudo)  


TL;DR: It's a pretty basic service container implementation, primarily inspired by Microsoft's .NET DI ServiceCollection. 

**What My Project Does**  
PyJudo is a library to support the Dependency Injection pattern. It facilitates the registration of services, resolves dependencies, and manages the lifecycle of services throughout your application. 

**Target Audience**  
The library is still in a beta state, but most of the features have been developed to a state which they can be used.  
PyJudo use case is typically in large codebases where there are several interdependent service implementations. It helps decouple service creation from logic, and provides a mechanism to replace / mock services, to allow easier isolation and testing.

**Comparison**  
There are several other dependency injection libraries out there, the biggest ones being *python-dependency-injector* and *returns*.  
PyJudo aims to have a more straight-forward interface, and styles itself on the Microsoft .NET DependencyInjection library.

**Basics**  
Define service interfaces, typically in the form of an abstract class, and implementations:

```python
# Interfaces
class IFooService(ABC): ...

class IBarService(ABC): ...

# Implementations
class FooService(IFooService): ...

class BarService(IBarService):
    def __init__(self, foo: IFooService): ...
```

Create a `ServiceCollection` and register the services:

```python
services = ServiceCollection()

(services
    .register(IFoo, Foo)
    .register(IBar, Bar)
)
```

Resolve services (and their dependencies) from the container:

```python
bar = services[IFoo]()
```

**Features**
 - Transient, scoped and singleton service lifetimes
 &gt; `services.register(IFoo, Foo, ServiceLife.SINGLETON)`
 - Context managed scopes
 &gt; `with services.create_scope() as scope:`
 - Nested (stacked) scopes
 - Disposable services
 &gt; Services registered with `dispose()` methods, will be ""disposed"" when leaving scopes
 - (WIP, see dev branch) Dependencies as Factories
 &gt; Instead of injecting dependencies, inject a factory for lazy instanciation using `Factory[IFoo]` syntax

---


I'm still in the process of fleshing out some of the fluffy bits, and beefing up the documentation; but would appreciate any feedback.  

If you're interested, but totally new to dependency injection in the form of interfaces and implementations; then I've been writing some documentation to help get to grips with the library and the concepts:  
[https://github.com/NixonInnes/pyjudo/tree/dev/examples](https://github.com/NixonInnes/pyjudo/tree/dev/examples)",NixonInnes,1gm6bdf,https://reddit.com/r/Python/comments/1gm6bdf/pyjudo_another_dependency_injection_library/,https://www.reddit.com/r/Python/comments/1gm6bdf/pyjudo_another_dependency_injection_library/,2024-11-08 00:58:19,11,0.81,11,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gm6bdf
Python,weft ü™¢ - a vim-styled terminal reader that lets you chat with your books,"### What my project does

Hacked this fun little terminal reader to weave through books with vim-like navigation and AI

Navigate like you're in vim: `h`/`l` between chapters, `j`/`k` to scroll, `g`/`G` to jump around

- `a`sk questions to the text - incl. references to sections, chapters, book &amp; its metadata
- `s`ummarize current section
- `t`oggle toc
- `r`ead passage
- `q`uit whenever

And my favorite, press `&gt;` for an AI narrator that situates you in the current scene/chapter.

Should work with any `.epub` file.

### Target audience

This is side project aimed at other curious devs who want to go deep and broad with books. It's more of an experimental exploration of combining the simplicity of terminals, the complexity of AI, and the breadth, depth, and vast knowledge in books.

### Comparison

Unlike other terminal-based readers or standard ebook readers, weft brings in AI for a more interactive reading experience. weft focuses on navigation and interaction - you can ask questions to what you're reading, generate summaries, and even *summon* a narrator to contextualize the current scene (see `&gt;` above)

Think of it as vim-nav + epub reading + AI reading companion, all in one terminal interface.

**Code &amp; setup instructions**: https://github.com/dpunj/weft

**Quick demo**: https://x.com/dpunjabi/status/1854361314040446995

Built this as I wanted a more interactive way to ""move"" around books and go broad or deep in the text. And who knows, perhaps uncover insights hidden in some of these books.


Curious to hear your thoughts &amp; feedback.",dvx24,1gm2mmx,https://reddit.com/r/Python/comments/1gm2mmx/weft_a_vimstyled_terminal_reader_that_lets_you/,https://www.reddit.com/r/Python/comments/1gm2mmx/weft_a_vimstyled_terminal_reader_that_lets_you/,2024-11-07 22:09:11,13,0.85,13,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1gm2mmx
Python,Oracle forms builder alternate,"Oracle forms builder alternate

Hi All,
   My employer recently upgraded from Oracle 11g to 19c..there was a reporting module that was built out of Oracle 6i and now with the upgrade the reporting module is breaking as there is no compatible version of Oracle forms builder with 19c.

So we have been asked to find alternates.I am thinking of suggesting Django with html as the requirement mainly focuses on generating excel docs by querying the Oracle tables.they need an UI component just to trigger the Excel generation process.

Now am from completely java background and have very minimal knowledge in Django.But I did start leaning python and found the file operations are much more clean and minimal code in python when compared to java and hence thinking of suggesting python with Django for a quick turnaround.

Is this good suggestion or Is there anything else out there that am completely missing for this scenario?

Tech stack preferred is java,springboot,angular,python and Django or flask

P.S it has to be open source.When I say open source I mean it should be free of cost

Thanks In advance",prash1988,1gm6hp1,https://reddit.com/r/Python/comments/1gm6hp1/oracle_forms_builder_alternate/,https://www.reddit.com/r/Python/comments/1gm6hp1/oracle_forms_builder_alternate/,2024-11-08 01:07:08,4,0.68,4,0,9,0,0,False,False,True,False,False,Discussion,self,t3_1gm6hp1
Python,9x model serving performance without changing hardware,"**Project**

[https://github.com/martynas-subonis/model-serving](https://github.com/martynas-subonis/model-serving)

Extensive write-up available [here](https://martynassubonis.substack.com/p/optimize-for-speed-and-savings-high).

**What My Project Does**

This project uses ONNX-Runtime with various optimizations (implementations both in Python and Rust) to benchmark performance improvements compared to naive PyTorch implementations.

**Target Audience**  
  
ML engineers, serving models in production.

**Comparison**

This project benchmarks basic PyTorch serving against ONNX Runtime in both Python and Rust, showcasing notable performance gains. Rust‚Äôs Actix-Web with ONNX Runtime handles 328.94 requests/sec, compared to Python ONNX at 255.53 and PyTorch at 35.62, with Rust's startup time of 0.348s being 4x faster than Python ONNX and 12x faster than PyTorch. Rust‚Äôs Docker image is also 48.3 MB‚Äî6x smaller than Python ONNX and 13x smaller than PyTorch. These numbers highlight the efficiency boost achievable by switching frameworks and languages in model-serving setups.",Martynoas,1gm0flj,https://reddit.com/r/Python/comments/1gm0flj/9x_model_serving_performance_without_changing/,https://www.reddit.com/r/Python/comments/1gm0flj/9x_model_serving_performance_without_changing/,2024-11-07 20:36:38,11,0.79,11,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1gm0flj
Python,"Affinity - pythonic DDL for well-documented datasets
","# What My Project Does

TLDR: Affinity is a pythonic dialect of Data Definition Language (DDL). Affinity does not replace any dataframe library, but can be used with any one you like. [https://github.com/liquidcarbon/affinity](https://github.com/liquidcarbon/affinity)

Affinity makes it easy to create well-annotated datasets from vector data. What your data means should always travel together with the data.

```
import affinity as af
class SensorData(af.Dataset):
    """"""Experimental data from Top Secret Sensor Tech.""""""
    t = af.VectorF32(""elapsed time (sec)"")
    channel = af.VectorI8(""channel number (left to right)"")
    voltage = af.VectorF64(""something we measured (mV)"")
    is_laser_on = af.VectorBool(""are the lights on?"")
    exp_id = af.ScalarI32(""FK to experiment"")
    LOCATION = af.Location(folder=""s3://mybucket/affinity"", file=""raw.parquet"", partition_by=[""channel""])

data = SensorData()          # ‚úÖ empty dataset
data = SensorData(**fields)  # ‚úÖ build manually
data = SensorData.build(...) # ‚úÖ build from another object (dataframes, DuckDB)
data.df # .pl / .arrow       # ‚úÖ view as dataframe (Pandas/Polars/Arrow)
data.metadata                # ‚úÖ annotations (data dict with column and dataset comments)
data.origin                  # ‚úÖ creation metadata, some data provenance
data.sql(...)                # ‚úÖ run DuckDB SQL query on the dataset
data.to_parquet(...)         # ‚úÖ data.metadata -&gt; Parquet metadata
data.partition()             # ‚úÖ get formatted paths and partitioned datasets
data.model_dump()            # ‚úÖ dataset as dict, like in pydantic
data.flatten()               # ‚úÖ flatten nested datasets
```

# Target Audience

Anyone who builds datasets and databases.

I build datasets (life sciences, healthcare) for a living, and for a few years I wished I could do two simple things when declaring dataclasses:  
\- data type for vectors  
\- what the data means, which should ideally travel together with the data

My use cases that affinity serves:  
\- raw experimental data (microscopy, omics) lands into storage as it becomes available  
\- each new chunk is processed into several datasets that land into OLAP warehouses like Athena or BigQuery  
\- documenting frequent schema changes as experimentation and data processing evolve  
\- very important to always know what the fields mean (units of measure, origin of calculated fields) - please share tales of this going terribly wrong

# Comparison

I haven't found any good existing packages that would do this.  Though pydantic is great for transactional data, where attributes are typically scalars, it doesn't translate well to vectors and OLAP use cases.

Instead of verbose type hints with default values, affinity uses descriptor pattern to achieve something similar. The classes are declared with instantiated vectors, which are replaced upon instantiation by whatever array you want to use (defaults to pd.Series).

More in README. [https://github.com/liquidcarbon/affinity](https://github.com/liquidcarbon/affinity)

Curious to get feedback and feature requests.",LiqC,1glxvkg,https://reddit.com/r/Python/comments/1glxvkg/affinity_pythonic_ddl_for_welldocumented_datasets/,https://www.reddit.com/r/Python/comments/1glxvkg/affinity_pythonic_ddl_for_welldocumented_datasets/,2024-11-07 18:49:29,11,0.84,11,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1glxvkg
Python,Talk Python has moved to Hetzner,"See the full article. Performance comparisons to Digital Ocean too. If you've been considering one the new Hetzner US data centers, I think this will be worth your while.

[https://talkpython.fm/blog/posts/we-have-moved-to-hetzner/](https://talkpython.fm/blog/posts/we-have-moved-to-hetzner/)",mikeckennedy,1glixwh,https://reddit.com/r/Python/comments/1glixwh/talk_python_has_moved_to_hetzner/,https://www.reddit.com/r/Python/comments/1glixwh/talk_python_has_moved_to_hetzner/,2024-11-07 05:05:13,117,0.94,117,0,29,0,0,False,False,True,False,False,News,self,t3_1glixwh
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1gm53zx,https://reddit.com/r/Python/comments/1gm53zx/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1gm53zx/friday_daily_thread_rpython_meta_and_freetalk/,2024-11-08 00:00:51,3,0.72,3,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gm53zx
Python,Enterprise-Grade Security for LLM with Langflow and Fine-Grained Authorization,"One of the challenges with AI readiness for enterprise and private data is controlling permissions. The following article and repository show how to implement fine-grained authorization filtering as a Langflow component.

The project uses AstraDB as the vector DB and [Permit.io](http://Permit.io) (a Python-based product and OSS for fine-grained authorization) to utilize ingestion and filtering.

Article: [https://www.permit.io/blog/building-ai-applications-with-enterprise-grade-security-using-fga-and-rag](https://www.permit.io/blog/building-ai-applications-with-enterprise-grade-security-using-fga-and-rag)

Project: [https://github.com/permitio/permit-langflow](https://github.com/permitio/permit-langflow)",Permit_io,1glsz3s,https://reddit.com/r/Python/comments/1glsz3s/enterprisegrade_security_for_llm_with_langflow/,https://www.reddit.com/r/Python/comments/1glsz3s/enterprisegrade_security_for_llm_with_langflow/,2024-11-07 15:25:13,11,0.76,11,0,2,0,0,False,False,True,False,False,Tutorial,self,t3_1glsz3s
Python,üöÄ Deploying a Django Project Manually on a Linux Server with uWSGI and Nginx,"In this article, we‚Äôll cover how to deploy a Django project on a Linux server using **uWSGI** and **Nginx**, ensuring your application runs efficiently in a production environment.

[https://www.thedevspace.io/community/django-deploy](https://www.thedevspace.io/community/django-deploy)

1. **Set Up the Server**: Ensure your Linux server has Python, Django, and necessary tools installed.
2. **Configure uWSGI**: Install and configure uWSGI to act as the application server.
3. **Set Up Nginx**: Configure Nginx as a reverse proxy to forward requests to uWSGI.
4. **Link uWSGI and Django**: Create uWSGI configuration files to connect with your Django app.

Following these steps will help you achieve a secure and smooth deployment for your Django application.",Pleasant_Effort_6829,1gluq8u,https://reddit.com/r/Python/comments/1gluq8u/deploying_a_django_project_manually_on_a_linux/,https://www.reddit.com/r/Python/comments/1gluq8u/deploying_a_django_project_manually_on_a_linux/,2024-11-07 16:38:56,5,0.67,5,0,4,0,0,False,False,True,False,False,Tutorial,self,t3_1gluq8u
Python,Whispr: A multi-vault secret injection tool completely written in Python,"**What My Project Does ?**

Whispr is a CLI tool to safely inject secrets from your favorite secret vault (Ex: AWS Secrets Manager, Azure Key Vault etc.) into your app's environment. You can run a local web server or application with secrets (DB credentials etc.) pulled from a secure vault only when needed. It avoids storing secrets in \`.env\` files for local software development.

**Project link**: [https://github.com/narenaryan/whispr](https://github.com/narenaryan/whispr)

Whispr is written completely in Python (100%)

**Target Audience:** Developers &amp; Engineers

**Comparison**: Whispr can be compared to client SDKs of various cloud providers, but with extra powers of injection into app environment or standard input.",narenarya,1gljize,https://reddit.com/r/Python/comments/1gljize/whispr_a_multivault_secret_injection_tool/,https://www.reddit.com/r/Python/comments/1gljize/whispr_a_multivault_secret_injection_tool/,2024-11-07 05:41:20,22,0.92,22,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gljize
Python,Keep your code snippets in README up-to-date!,"# Code-Embedder

Links: [GitHub](https://github.com/kvankova/code-embedder), [GitHub Actions Marketplace](https://github.com/marketplace/actions/code-embedder)

**What My Project Does**

**Code Embedder** is a GitHub Action and a pre-commit hook that **automatically updates code snippets in your markdown (README) files**. It finds code blocks in your README that reference specific scripts, then replaces these blocks with the current content of those scripts. This keeps your documentation in sync with your code.

‚ú® **Key features**

* üîÑ¬†**Automatic synchronization**: Keep your¬†README¬†code examples up-to-date without manual intervention.
* üõ†Ô∏è¬†**Easy setup**: Simply add the action to your GitHub workflow / pre-commit hook and format your¬†README code blocks.
* üìù¬†**Section support**: Update only specific sections of the script in the¬†README.
* üß©¬†**Object support**: Update only specific objects (functions, classes) in the¬†README.¬†*The latest version v0.5.1 supports only üêç Python objects (other languages to be added soon).*

Find more information in [GitHub](https://github.com/kvankova/code-embedder) üéâ

**Target Audience**

It is a production-ready, tested Github Action and pre-commit hook that can be part of you CICD workflow to keep your READMEs up-to-date.

**Comparison**

It is a light-weight package with primary purpose to keep your code examples in READMEs up-to-date. `MkDocs` is a full solution to creating documentation as a code, which also offers embedding external files. **Code-Embedder** **is** **a light-weight package** that can be used for projects with or without `MkDocs`. It offers additional functionality to sync not only full scripts, but also a section of a script or a Python function / class definition.",Better-Banana4069,1gl1hla,https://reddit.com/r/Python/comments/1gl1hla/keep_your_code_snippets_in_readme_uptodate/,https://www.reddit.com/r/Python/comments/1gl1hla/keep_your_code_snippets_in_readme_uptodate/,2024-11-06 15:45:36,113,0.94,113,0,20,0,0,False,False,True,False,False,Showcase,self,t3_1gl1hla
Python,Question about using Sphinx to document python modules (Odoo),"Hi!

First time I used sphinx I thought it dark magic, because it took all my mess of folders and modules and created a readable documentation about it (provided I wrote my own docstrings).

So I wrote  a script for me to run Sphinx anywhere and document any project asap. I've reached a wall, though.

My Sphinx config looks like this:

    import os
    import sys
    from pathlib import Path
    
    sys.path.insert(0, os.path.abspath('path-from-script-imput'))
    sys.path.insert(0, os.path.abspath('path-from-script-imput-2'))  # User's provided path goes here
    sys.path.insert(0, os.path.abspath('../'))
    sys.path.insert(0, str(Path('..', 'src').resolve()))
    
    autodoc_mock_imports = ['odoo', 'odoo.addons']
    
    project = 'Teste'
    copyright = '2024, Test'
    author = 'Test'
    extensions = [
        'sphinx.ext.autodoc',
        'sphinx.ext.napoleon',
        'sphinx.ext.viewcode',
        'sphinx.ext.intersphinx',
        'sphinx.ext.autosummary',
    ]
    
    viewcode_line_numbers = True
    templates_path = ['_templates']
    exclude_patterns = ['**/__init__.py', '**/__manifest__.py']
    
    autodoc_default_options = {
        'members': True,
        'undoc-members': True,
        'private-members': True,
        'special-members': '__init__',
        'inherited-members': True,
        'show-inheritance': True
    }
    
    language = 'pt'
    html_theme = 'sphinx_rtd_theme'
    html_static_path = ['_static']

and my index.rst looks like this

    .. Teste documentation master file
    Welcome to the Teste documentation!
    ===================================
    .. toctree::
       :maxdepth: 2
       :caption: Contents:
    
       modules

And my problem is: I can only document folders considered modules (\_\_init\_\_.py inside of them) But I wanted Sphinx to be able to access subfolders, since there are models inside of it too that I cannot access through my script. Is htere anything I can do that is not copy and paste an init file to every subfolder that nests other modules?

  
",ivory_dev,1gltw17,https://reddit.com/r/Python/comments/1gltw17/question_about_using_sphinx_to_document_python/,https://www.reddit.com/r/Python/comments/1gltw17/question_about_using_sphinx_to_document_python/,2024-11-07 16:03:38,1,0.67,1,0,1,0,0,False,False,True,False,False,Help,self,t3_1gltw17
Python,Meerkat: Monitor data sources and track changes over time from the terminal,"**What My Project Does**

[Meerkat](https://github.com/niqodea/meerkat) is a fully asynchronous Python library for monitoring data sources and tracking changes over time. Inspired by the constant watchfulness of meerkats, this tool helps you stay aware of shifts in your data‚Äîwhether it‚Äôs new entries, updates, or deletions. Originally created to track job postings, it‚Äôs designed to handle any type of data source, making it versatile for various real-world applications.

Meerkat‚Äôs CLI module provides an easy way to view changes in your data as text in the terminal, which is especially useful for quickly setting up simple visualizations. However, Meerkat isn‚Äôt limited to logging: it can be used to trigger any arbitrary actions in response to data changes, thanks to its action executor. This flexibility lets you define custom workflows, making it more than just a data logger.

Meerkat comes with an example use case‚Äîtracking job postings‚Äîso you can get a quick start and see the library in action (though you will need to implement the job fetchers yourself).

**Target Audience**

Meerkat is ideal for developers who need efficient, lightweight tools for monitoring data sources. It‚Äôs well-suited to hobby projects, prototyping, or small-scale production applications where regular change detection is required.

**Comparison**

I‚Äôm not aware of a direct comparison, but if there are similar projects out there, please let me know‚ÄîI‚Äôd love to add them to the README as related projects.

Link: https://github.com/niqodea/meerkat",Hiqo11,1glbo1o,https://reddit.com/r/Python/comments/1glbo1o/meerkat_monitor_data_sources_and_track_changes/,https://www.reddit.com/r/Python/comments/1glbo1o/meerkat_monitor_data_sources_and_track_changes/,2024-11-06 22:55:16,20,0.93,20,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1glbo1o
Python,A Python script to gain remote access to Metasploitable.,"A Python script to connect to a Metasploitable machine using SSH and FTP protocols. This tool allows users to execute commands interactively over SSH and manage files via FTP.

[Remote\_Access](https://youtu.be/Aivo5OCZnU4?si=QYLIGTUy2F1TYqe9)",Naviya_lka,1glgg9x,https://reddit.com/r/Python/comments/1glgg9x/a_python_script_to_gain_remote_access_to/,https://www.reddit.com/r/Python/comments/1glgg9x/a_python_script_to_gain_remote_access_to/,2024-11-07 02:44:53,6,0.67,6,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1glgg9x
Python,openpyxl data validation not applying in cell dropdown even when showdropdown is set true.,"I am writting q code to add data validation on certain coloumns of a sheet in a workbook. The data validation is successfully applied using formula1 but the issue am having is that it doesnt show the dropdown when i open the excel file. The reason is that in cell drop down is not checked in the datavalidation popup window. 

In python code i have set showDropdown=True",hunkmonster,1glnyjc,https://reddit.com/r/Python/comments/1glnyjc/openpyxl_data_validation_not_applying_in_cell/,https://www.reddit.com/r/Python/comments/1glnyjc/openpyxl_data_validation_not_applying_in_cell/,2024-11-07 11:06:01,3,0.67,3,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1glnyjc
Python,"Dataglasses: easy creation of dataclasses from JSON, and JSON schemas from dataclasses","Links: [GitHub](https://github.com/Udzu/dataglasses), [PyPI](https://pypi.org/project/dataglasses/).

# What My Project Does

A small package with just two functions: `from_dict` to create dataclasses from JSON, and `to_json_schema` to create JSON schemas for validating that JSON. The first can be thought of as the inverse of `dataclasses.asdict`.

The package uses the dataclass's type annotations and supports nested structures, collection types, Optional and Union types, enums and Literal types, Annotated types (for property descriptions), forward references, and data transformations (which can be used to handle other types). For more details and examples, including of the generated schemas, see the [README](https://github.com/Udzu/dataglasses/blob/main/README.md).

Here is a simple motivating example:

    from dataclasses import dataclass
    from dataglasses import from_dict, to_json_schema
    from typing import Literal, Sequence

    @dataclass
    class Catalog:
        items: ""Sequence[InventoryItem]""
        code: int | Literal[""N/A""]

    @dataclass
    class InventoryItem:
        name: str
        unit_price: float
        quantity_on_hand: int = 0

    value = { ""items"": [{ ""name"": ""widget"", ""unit_price"": 3.0}], ""code"": 99 }
        
    # convert value to dataclass using from_dict (raises if value is invalid)
    assert from_dict(Catalog, value) == Catalog(
        items=[InventoryItem(name='widget', unit_price=3.0, quantity_on_hand=0)], code=99
    )

    # generate JSON schema to validate against using to_json_schema
    schema = to_json_schema(Catalog)
    from jsonschema import validate
    validate(value, schema)


# Target Audience

The package's current state (small and simple, but also limited and unoptimized) makes it best suited for rapid prototyping and scripting. Indeed, I originally wrote it to save myself time while developing a simple script.

That said, it's fully tested (with 100% coverage enforced) and once it has been used in anger (and following any change suggestions) it might be suitable for production code too. The fact that it is so small (two functions in one file with no dependencies) means that it could also be incorporated into a project directly.

# Comparison

[pydantic](https://docs.pydantic.dev/latest/) is more complex to use and doesn't work on built-in dataclasses. But it's also vastly more suitable for complex validation or high performance.

[dacite](https://github.com/konradhalas/dacite) doesn't generate JSON schemas. There are also some smaller design differences: dataglasses transformations can be applied to specific dataclass fields, enums are handled by default, non-standard generic collection types are *not* handled by default, and Optional type fields with no defaults are not considered optional in inputs.

# Tooling

As an aside, one of the reasons I bothered to package this up from what was otherwise a throwaway project was the chance to try out [uv](https://docs.astral.sh/uv/) and [ruff](https://docs.astral.sh/ruff/). And I have to report that so far it's been a very pleasant experience!",Udzu,1gky5tr,https://reddit.com/r/Python/comments/1gky5tr/dataglasses_easy_creation_of_dataclasses_from/,https://www.reddit.com/r/Python/comments/1gky5tr/dataglasses_easy_creation_of_dataclasses_from/,2024-11-06 13:11:59,56,0.86,56,0,39,0,0,False,False,True,False,False,Showcase,self,t3_1gky5tr
Python,scipy-stubs: Type Hints for SciPy,"Hi r/Python,

I'd like to introduce [`scipy-stubs`](https://github.com/jorenham/scipy-stubs), a stub-only package providing type annotations for SciPy.

# What My Project Does

* Enables static type checking for SciPy-based projects
* Improves IDE support (auto-completion, bug prevention)
* Helps catch type-related errors early on
* Lets you spend less time searching the docs
* Easy to install: `pip install scipy-stubs`
* Works out-of-the-box with any codebase -- no imports required
* Fully compatible with mypy and pyright/pylance -- even in strict mode

And even if you don't use type annotations at all, it will help your IDE understand your codebase better, resulting in better introspection and auto-completion.

# Target Audience

Anyone who uses SciPy will be able to benefit from `scipy-stubs`. 

You can install `scipy-stubs` if you use `scipy &gt;= 1.10`, but I'd strongly recommend using the latest `scipy == 1.14.1` release.

# Comparison

In [`microsoft/python-type-stubs`](https://github.com/microsoft/python-type-stubs) there used to be a scipy stub package, which was bundled with pylance. But it was very outdated and of low quality, so was recently removed in favor of `scipy-stubs` ([microsoft/python-type-stubs#320](https://github.com/microsoft/python-type-stubs/issues/320)).

There's also the [BarakKatzir/types-scipy-sparse](https://github.com/BarakKatzir/types-scipy-sparse/) stub package, that's specific to `scipy.sparse`. I recently spoken with the author on Zoom, and we decided to merge `types-scipy-sparse` into `scipy-stubs` ([jorenham/scipy-stubs#129](https://github.com/jorenham/scipy-stubs/issues/129)).

SciPy itself has some sporadic type annotations and a couple of stub files. But by no means is that enough for proper type checking. In [scipy/scipy#21614](https://github.com/scipy/scipy/issues/21614) I explain in detail why I decided to develop `scipy-stubs` independently of `scipy` (for now).

---

- Source code: https://github.com/jorenham/scipy-stubs
- PyPI: https://pypi.org/project/scipy-stubs/
- SciPy thread: https://github.com/scipy/scipy/issues/21614",de_ham,1gkysrl,https://reddit.com/r/Python/comments/1gkysrl/scipystubs_type_hints_for_scipy/,https://www.reddit.com/r/Python/comments/1gkysrl/scipystubs_type_hints_for_scipy/,2024-11-06 13:43:34,45,0.94,45,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gkysrl
Python,Build Limitless Automations in Python (open for Beta users),"Links: [Beta registration](https://autokitteh.com/beta-signup/), [website](http://www.autokitteh.com), [GitHub](https://github.com/autokitteh/autokitteh), [examples](https://github.com/autokitteh/kittehub)

**What My Project Does**

[AutoKitteh](http://www.autokitteh.com) is an automation platform specifically designed for Python developers. It's like ""**Zapier for developers**,"" enabling you to build limitless automations with just a few lines of code.

**Key features**

* Automate tasks using just basic Python code.
* Execute **long-running, reliable workflows**. It ensures your processes are durable and can resume exactly where they left off‚Äîeven after server restarts.
* Easily connect to applications like Slack, Gmail, GitHub, and many more.
* Define custom triggers for your workflows.
* Deploy with a single click‚Äîno infrastructure required.
* Manage and monitor your workflows.
* Can be easily extended to connect any API

**Target Audience**

Professional and citizen developers familiar with Python that build personal projects or enterprise solutions.

AutoKitteh is designed for:

* DevOps, IT and MLOps automation
* Personal and office workflows

**Comparison**

AutoKitteh is an integration platform similar to Zapier, Make, and Workato. However, instead of focusing on no-code solutions, it offers a low-code interface that leverages the power of Python for developing business logic.

Additionally, it functions as a durable workflow engine like Temporal and Inngest, providing a transparent Python interface.

**Usage**

Use AutoKitteh as:

\-  Self-hosted, open-source - [GitHub](https://github.com/autokitteh/autokitteh)

\- SaaS (Free) - [Register to SaaS Beta](https://autokitteh.com/beta-signup/) 





",HaimZlatokrilov,1gl3kcl,https://reddit.com/r/Python/comments/1gl3kcl/build_limitless_automations_in_python_open_for/,https://www.reddit.com/r/Python/comments/1gl3kcl/build_limitless_automations_in_python_open_for/,2024-11-06 17:13:55,21,0.89,21,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gl3kcl
Python,Providing LSP capabilities in HTML templating (jinja2),"**Problem**  
I recently started working with `htmx` using Python as a server-side. I discovered that when using templating (jinja2), the developer experience is ... quite poor. There is no completion, no type hints. Understandably so, as the template does not have enough information to provide such functionalities.

  
But even if that information was present, there is no tooling to provide the functionalities I would like to have (LSP completion, go to type definition, ...).

**Potential Solution**

So I thought I could maybe make that. Here's the idea:

* add type informations somewhere (maybe at the top)
   * add import lines for typing symbols
   * mapping context variables to their types
* translate the template python source to a valid python file
* map user actions on the real source to the virtual file
* send the user LSP requests to a real Python LSP (e.g. pyright, pylance, ...)
   * receive request from the client (user editor)
   * map the requests to the virtual domain (different lines/columns)
* receive response from the real Python LSP
   * map the response to the real code domain (user file)
   * send response to the client (user editor)

**Example**

Source code in the user editor

    {#
    from domain.user import User
    user: User
    #}
    &lt;p&gt; {{ user.name }}&lt;/p&gt;

Translated python code

    from domain.user import User
    def make_user() -&gt; User: ...
    user = make_user()
    user.name

  
Thanks for reading this far! I think I have two questions to the community

* Does this sound doable?
* If you write HTML templating yourself, would you find this useful?
   * And maybe did I miss an obvious tool that improves the developer experience?",slassr,1glbjvr,https://reddit.com/r/Python/comments/1glbjvr/providing_lsp_capabilities_in_html_templating/,https://www.reddit.com/r/Python/comments/1glbjvr/providing_lsp_capabilities_in_html_templating/,2024-11-06 22:50:02,6,0.69,6,0,4,0,0,False,False,True,False,False,Discussion,self,t3_1glbjvr
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1gld3ic,https://reddit.com/r/Python/comments/1gld3ic/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1gld3ic/thursday_daily_thread_python_careers_courses_and/,2024-11-07 00:00:11,2,0.63,2,0,3,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gld3ic
Python,Doubt about indentation.,"In the given code, why if statement is added two time?

Why removing the 2nd if doesn't give the required output?

why print(sum) at last, is indented?

  
x=list(map(int,input(""Enter a number: "")))

y=list(map(int,input(""Enter a number: "")))

flag = 0

sum = 0

if len(x)==len(y):

   for i in range(len(x)):

sum = sum+x\[i\]\*y\[i\]

flag=1

else:

print(""not valid operation"")

if flag!=0:

   print(sum)",Alarmed_Option6096,1gltqnj,https://reddit.com/r/Python/comments/1gltqnj/doubt_about_indentation/,https://www.reddit.com/r/Python/comments/1gltqnj/doubt_about_indentation/,2024-11-07 15:57:36,0,0.23,0,0,4,0,0,False,False,True,False,False,Discussion,self,t3_1gltqnj
Python,"Just published an article to understand Python Project Management and Packaging, illustrated with uv","Hey everyone,



I‚Äôve just finished writing the first part of my comprehensive guide on Python project management and packaging. Now that I think about it, I think it's more an article to understand the many concepts of Python packaging and project management more than a guide in and of itself.

  
The article: [A Comprehensive Guide to Python Project Management and Packaging: Concepts Illustrated with uv ‚Äì Part I](https://reinforcedknowledge.com/a-comprehensive-guide-to-python-project-management-and-packaging-concepts-illustrated-with-uv-part-i/)



In this first part, I focused on:

\- The evolution of Python packaging standards through key PEPs.

\- Detailed explanations of the main concepts like \`pyproject.toml\`, the packaging nomenclature, the dependency groups, locking and syncing etc.

\- An introduction to \`uv\` and how it illustrates essential packaging concepts.

\- Practical workflows using \`uv\` that I use with data science projects.

  
Mainly what it lacks is a deeper section or paragraph on workspaces, scripts, building and publishing. That's for part 2!



Working on this article was mainly journey for me through the various PEPs that have shaped the current Python packaging standards. I delved into the history and rationale behind these PEPs. I just wanted to understand. I wanted to understand all the discussions around packaging. That's something we deal with daily, so I wanted to deeply understand every concept that's related to Python projects or packages. The PEPs, and my own experience, helped me understand why certain changes were necessary and how they effectively resolved previous issues. It was enlightening to see how the thoughtful decision-making and the understanding of developers' needs. And I gained a deeper appreciation for how PEPs are organized and how they think external stuff like the existing tools and how they leave room for future improvement and standardization and for tools to innovate.



It was a pleasure both writing and reading through the material. I don‚Äôt expect everyone to read it in its entirety since it‚Äôs quite lengthy, and I‚Äôm sure my writing style has room for improvement. However, I believe you can easily pick up valuable bits of information from it. For those who are really interested, I highly recommend diving into the PEPs directly to get the most accurate and detailed insights!",ReinforcedKnowledge,1gkmrsg,https://reddit.com/r/Python/comments/1gkmrsg/just_published_an_article_to_understand_python/,https://www.reddit.com/r/Python/comments/1gkmrsg/just_published_an_article_to_understand_python/,2024-11-06 01:14:44,126,0.93,126,0,42,0,0,False,False,True,False,False,Tutorial,self,t3_1gkmrsg
Python,Understanding Retrieval-Augmented Generation (RAG) with OpenAI,[https://www.codemancers.com/blog/2024-09-17-rag/?utm\_source=social+media&amp;utm\_medium=reddit](https://www.codemancers.com/blog/2024-09-17-rag/?utm_source=social+media&amp;utm_medium=reddit),codemancers,1gljss4,https://reddit.com/r/Python/comments/1gljss4/understanding_retrievalaugmented_generation_rag/,https://www.reddit.com/r/Python/comments/1gljss4/understanding_retrievalaugmented_generation_rag/,2024-11-07 05:58:58,0,0.33,0,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gljss4
Python,Check Out LiteJsonDb ‚Äì A Simple Python Package for JSON Data Storage!,"
### What My Project Does

Hey Reddit!

I‚Äôve developed a Python package called LiteJsonDb to simplify JSON data storage and manipulation in Python. It‚Äôs built to handle basic operations like adding, editing, and searching data with a straightforward syntax.

LiteJsonDb aims to be simple yet effective for quick data storage needs. It also includes basic encryption, CSV export options, and even a backup to Telegram feature.

### Target Audience

LiteJsonDb is perfect for those looking for a lightweight, no-fuss JSON storage solution. Whether you're working on a small side project or a learning exercise, this package provides a clean way to work with JSON without relying on heavy databases. It‚Äôs designed to make things easier for beginners or for devs who want a low-overhead storage option for smaller projects.

### Comparison with Existing Alternatives

Unlike some more complex data management packages, LiteJsonDb focuses on simplicity and ease of use. There‚Äôs no need for extensive configuration ‚Äì it‚Äôs all about making JSON data handling as seamless as possible. If you‚Äôve used packages like TinyDB or SQLite, you‚Äôll find LiteJsonDb focuses purely on JSON, with a user-friendly syntax and minimal setup.

Here's a quick look at how it works:
```
import LiteJsonDb

# Initialize the database with encryption enabled
db = LiteJsonDb.JsonDB(crypted=True)

# Add data without extra details
db.set_data(""posts"")

# Add data with additional details
db.set_data(""users/1"", {""name"": ""Aliou"", ""age"": 20})
db.set_data(""users/2"", {""name"": ""Coder"", ""age"": 25})

# Modify data
db.edit_data(""users/1"", {""name"": ""Alex""})

# Retrieve data
print(db.get_data(""users/1""))  # Output: {'name': 'Alex', 'age': 20}
print(db.get_data(""users/2""))

# Remove data
db.remove_data(""users/2"")

# Perform a basic search
results = db.search_data(""Aliou"")
print(""Search Results:"", results)
```

You can also work with subcollections, export to CSV, or back up the database to Telegram.


If you‚Äôre interested, I‚Äôd love for you to try it out and share feedback. Contributions are welcome, so feel free to check it out on GitHub and help improve it!: https://github.com/codingtuto/LiteJsonDb

",Awkward_Main_6446,1gkzb3k,https://reddit.com/r/Python/comments/1gkzb3k/check_out_litejsondb_a_simple_python_package_for/,https://www.reddit.com/r/Python/comments/1gkzb3k/check_out_litejsondb_a_simple_python_package_for/,2024-11-06 14:07:43,2,1.0,2,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1gkzb3k
Python,Dendrite: Interact with websites with natural language instead of using css selectors,"**What my project does:**

**Dendrite** is a simple framework for interacting with websites using natural language. Interact and extract without having to find brittle css selectors or xpaths like this:

    browser.click(‚Äúthe sign in button‚Äù)

For the developers who like their code typed, specify what data you want with a Pydantic BaseModel and Dendrite returns it in that format with one simple function call. Built on top of playwright for a robust experience. This is an easy way to give your AI agents the same web browsing capabilities as humans have. Integrates easily with frameworks such as¬† Langchain, CrewAI, Llamaindex and more.¬†

We are planning on **open sourcing** everything soon as well so feel free to reach out to us if you‚Äôre interested in contributing!

Github: [https://github.com/dendrite-systems/dendrite-python-sdk](https://github.com/dendrite-systems/dendrite-python-sdk)

**Overview**

* **Authenticate Anywhere**: Dendrite Vault, our Chrome extension, handles secure authentication, letting your agents log in to almost any website.
* **Interact Naturally**: With natural language commands, agents can click, type, and navigate through web elements with ease.
* **Extract and Manipulate Data**: Collect structured data from websites, return data from different websites in the same structure without having to maintain different scripts.
* **Download/Upload Files**: Effortlessly manage file interactions to and from websites, equipping agents to handle documents, reports, and more.
* **Resilient Interactions**: Dendrite's interactions are designed to be resilient, adapting to minor changes in website structure to prevent workflows from breaking
* **Full Compatibility**: Works with popular tools like LangChain and CrewAI, letting you seamlessly integrate Dendrite‚Äôs capabilities into your AI workflows.

**Target Audience:**

* Automation developers
* Webscraping people
* Web AI agent developers
* QA engineers

**Comparison:**

There are some frameworks for scraping information from websites with natural language prompts but there are no real alternatives when it comes to interacting with the websites as well as accessing data behind authentication. The most similar alternative would be something like Multion or some other fully autonomous agent framework that doesn't really work",rivernotch,1gkg23q,https://reddit.com/r/Python/comments/1gkg23q/dendrite_interact_with_websites_with_natural/,https://www.reddit.com/r/Python/comments/1gkg23q/dendrite_interact_with_websites_with_natural/,2024-11-05 20:11:40,50,0.84,50,0,13,0,0,False,False,True,False,False,Showcase,self,t3_1gkg23q
Python,Anyone have experience using Python for Simplified TS files for the FDA?,"Hello all. I am trying to help someone who is trying to install/configure Python to created Simplified TS files that will be submitted to the U.S. Food &amp; Drug Administration as part of a pharmaceutical submission.

Are there people in this forum familiar with the installation/configuration listed in this document (https://www.fda.gov/media/132457/download) who might be able to lend a hand please?",TheNewJasonBourne,1gl8i3q,https://reddit.com/r/Python/comments/1gl8i3q/anyone_have_experience_using_python_for/,https://www.reddit.com/r/Python/comments/1gl8i3q/anyone_have_experience_using_python_for/,2024-11-06 20:39:47,0,0.42,0,0,3,0,0,False,False,True,False,False,Resource,self,t3_1gl8i3q
Python,First time trying to run a python script.,"When ever I try to run this file it closes instantly. I‚Äôve tried reinstalling multiple times, and I‚Äôve tried searching YouTube videos of how to install and run .py files and none have worked. What can I do?",Guilty-Magazine5674,1glf1je,https://reddit.com/r/Python/comments/1glf1je/first_time_trying_to_run_a_python_script/,https://www.reddit.com/r/Python/comments/1glf1je/first_time_trying_to_run_a_python_script/,2024-11-07 01:32:49,0,0.31,0,0,16,0,0,False,False,True,False,False,Tutorial,self,t3_1glf1je
Python,Blog Post: State of Python 3.13 Performance: Free-Threading,[https://codspeed.io/blog/state-of-python-3-13-performance-free-threading](https://codspeed.io/blog/state-of-python-3-13-performance-free-threading),arty049,1gk6azd,https://reddit.com/r/Python/comments/1gk6azd/blog_post_state_of_python_313_performance/,https://www.reddit.com/r/Python/comments/1gk6azd/blog_post_state_of_python_313_performance/,2024-11-05 13:10:25,96,0.94,96,0,5,0,0,False,False,True,False,False,News,self,t3_1gk6azd
Python,New release of P2PD: peer-to-peer direct connection library,"**What My Project Does**

I've been working on a new Python library that does peer-to-peer connections. A good description of the library is that it makes it easier for two computers to establish a direct TCP connection without the need for proxies. The software can establish connections over the Internet, within your LAN, or even on the same machine. The software includes a number of techniques to make this possible such as:

* TCP Direct connect
* TCP Reverse connect
* TCP hole punching
* UPnP port forwarding (IPv4)
* UPnP pin holes (IPv6)

**Target Audience**

The intended audience for this is developers interested in building peer-to-peer software. But in fact, there's many common scenarios that you might not associate with a traditional 'p2p' setup. For example -- the software can improve connectivity to game servers -- alleviating some of the headaches of trying to reach self-hosted servers. Currently, the software is in beta and may have some bugs. But I've found it fairly stable in practice.

**Comparison**

You may have heard of similar libraries for P2P projects like Libp2p. These rely heavily on relays and aren't optimized for direct connections. Even solutions by major companies like Valve tend to fallback unnecessarily to using relay servers. So this is my solution. Open source and free.

[https://github.com/robertsdotpm/p2pd](https://github.com/robertsdotpm/p2pd)",coinbend,1gktc0y,https://reddit.com/r/Python/comments/1gktc0y/new_release_of_p2pd_peertopeer_direct_connection/,https://www.reddit.com/r/Python/comments/1gktc0y/new_release_of_p2pd_peertopeer_direct_connection/,2024-11-06 07:52:44,3,0.81,3,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gktc0y
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1gkl9r8,https://reddit.com/r/Python/comments/1gkl9r8/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1gkl9r8/wednesday_daily_thread_beginner_questions/,2024-11-06 00:00:08,7,0.79,7,0,3,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gkl9r8
Python,What Free Host Providers do you Use for deploying RESTful API ?,"Until this moment I had using Render which provides a free limited plan for deoloying Python or any other API, pythonanywhere is another option which allow deploying for free.

If you're testing a project you need to deploy the API, where you do it for free?",RemoteIllustrious164,1gk5ayh,https://reddit.com/r/Python/comments/1gk5ayh/what_free_host_providers_do_you_use_for_deploying/,https://www.reddit.com/r/Python/comments/1gk5ayh/what_free_host_providers_do_you_use_for_deploying/,2024-11-05 12:16:41,52,0.85,52,0,32,0,0,False,False,True,False,False,Discussion,self,t3_1gk5ayh
Python,P2PD 3: Peer-to-peer direct connection library,"**What My Project Does**

I've been working on a new Python library that does peer-to-peer connections. A good description of the library is that it makes it easier for two computers to establish a direct TCP connection without the need for proxies. The software can establish connections over the Internet, within your LAN, or even on the same machine. The software includes a number of techniques to make this possible such as:

* TCP Direct connect
* TCP Reverse connect
* TCP hole punching 
* UPnP port forwarding (IPv4)
* UPnP pin holes (IPv6)

**Target Audience** 

The intended audience for this is developers interested in building peer-to-peer software. But in fact, there's many common scenarios that you might not associate with a traditional 'p2p' setup. For example -- the software can improve connectivity to game servers -- alleviating some of the headaches of trying to reach self-hosted servers.  Currently, the software is in beta and may have some bugs. But I've found it fairly stable in practice.

**Comparison** 

You may have heard of similar libraries for P2P projects like Libp2p. These rely heavily on relays and aren't optimized for direct connections. Even solutions by major companies like Valve tend to fallback unnecessarily to using relay servers. So this is my solution. Open source and free.

Demo image: [https://github.com/robertsdotpm/p2pd/raw/main/demo\_small.gif?raw=true](https://github.com/robertsdotpm/p2pd/raw/main/demo_small.gif?raw=true)

[https://github.com/robertsdotpm/p2pd](https://github.com/robertsdotpm/p2pd)

[https://p2pd.readthedocs.io/en/latest/p2p/index.html](https://p2pd.readthedocs.io/en/latest/p2p/index.html)

[https://roberts.pm/index.php/2024/11/05/p2pd/](https://roberts.pm/index.php/2024/11/05/p2pd/)",coinbend,1gkst5l,https://reddit.com/r/Python/comments/1gkst5l/p2pd_3_peertopeer_direct_connection_library/,https://www.reddit.com/r/Python/comments/1gkst5l/p2pd_3_peertopeer_direct_connection_library/,2024-11-06 07:16:02,1,1.0,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gkst5l
Python,Open-source declarative framework to build LLM applications - looking for contributors,"I've been building LLM-based applications, and was super frustated with all major frameworks - langchain, autogen, crewAI, etc. They also seem to introduce a pile of unnecessary abstractions. It becomes super hard to understand what's going behind the curtains even for very simple stuff.

[So I just published this open-source framework¬†GenSphere.](https://github.com/octopus2023-inc/gensphere)¬†The idea is have something like¬†**Docker for LLMs**. You build applications with YAML files, that define an execution graph. Nodes can be either LLM API calls, regular function executions or other graphs themselves. Because you can nest graphs easily, building complex applications is not an issue, but at the same time you don't lose control.

You basically code in YAML, stating what are the tasks that need to be done and how they connect. Other than that, you only write individual python functions to be called during the execution. No new classes and abstractions to learn.

Its all open-source and python-based.¬†**Now I'm looking for contributors**¬†to adapt the framework for cycles and conditional nodes - which would allow full-fledged agentic system building! Pls reach out ¬†if you want to contribute, there are tons of things to do!

PS:¬†[you can read the detailed docs here,](https://gensphere.readthedocs.io/en/latest/)¬†And go over this quick¬†[Google Colab tutorial.](https://github.com/octopus2023-inc/gensphere/blob/main/examples/gensphere_tutorial.ipynb)",Jazzlike_Tooth929,1gkpd2z,https://reddit.com/r/Python/comments/1gkpd2z/opensource_declarative_framework_to_build_llm/,https://www.reddit.com/r/Python/comments/1gkpd2z/opensource_declarative_framework_to_build_llm/,2024-11-06 03:38:22,1,1.0,1,0,1,0,0,False,False,True,False,False,Discussion,self,t3_1gkpd2z
Python,Curly braces in Python,"I developed this extension for VSCode because I hated that Python didn't have curly braces, something that is annoying for many devs. I know it still has a lot of bugs and I know there are other types of alternatives, but it was the simplest thing I could think of to do.  
Link: [https://marketplace.visualstudio.com/items?itemName=BrayanCeron.pycurlybraces](https://marketplace.visualstudio.com/items?itemName=BrayanCeron.pycurlybraces) ",brayan0n,1gl1d8y,https://reddit.com/r/Python/comments/1gl1d8y/curly_braces_in_python/,https://www.reddit.com/r/Python/comments/1gl1d8y/curly_braces_in_python/,2024-11-06 15:40:26,0,0.26,0,0,10,0,0,False,False,True,False,False,Resource,self,t3_1gl1d8y
Python,Rio: WebApps in pure Python ‚Äì A fresh Layouting System,"Hey everyone!

We received a lot of encouraging feedback from you and used it to improve our framework. For all who are not familiar with our framework, Rio is an easy-to-use framework for creating websites and apps which is based entirely on Python.

From all the feedback the most common question we've encountered is, ""How does Rio actually work?"" Last time we shared our concept about components (what are components, how does observing attributes, diffing, and reconciliation work).

Now we want to share our concept of our own fresh layouting system for Rio. In our wiki we share our thoughts on:

* What Makes a Great Layout System
* Our system in Rio with a 2-step-approach
* Limitations of our approach

Feel free to check out our Wiki on our [Layouting System](https://github.com/rio-labs/rio/wiki/Layouting-System).

Take a look at our playground, where you can try out our layout concept firsthand with just a click and receive real-time feedback: [Rio - Layouting Quickstart](https://rio.dev/docs/howto/layout-guide)

Thanks and we are looking forward to your feedback! :)

[Github: Rio](https://github.com/rio-labs/rio)",Sn3llius,1gjgcsf,https://reddit.com/r/Python/comments/1gjgcsf/rio_webapps_in_pure_python_a_fresh_layouting/,https://www.reddit.com/r/Python/comments/1gjgcsf/rio_webapps_in_pure_python_a_fresh_layouting/,2024-11-04 15:03:28,93,0.93,93,0,21,0,0,False,False,True,False,False,Discussion,self,t3_1gjgcsf
Python,ParScrape v0.4.7 Released,"# What My project Does:

Scrapes data from sites and uses AI to extract structured data from it.

# Whats New:

* BREAKING CHANGE: --pricing cli option now takes a string value of 'details', 'cost', or 'none'.
* Added pool of user agents that gets randomly pulled from.
* Updating pricing data.
* Pricing token capture and compute now much more accurate.
* Faster startup

# Key Features:

* Uses Playwright / Selenium to bypass most simple bot checks.
* Uses AI to extract data from a page and save it various formats such as CSV, XLSX, JSON, Markdown.
* Has rich console output to display data right in your terminal.

# GitHub and PyPI

* PAR Scrape is under active development and getting new features all the time.
* Check out the project on GitHub or for full documentation, installation instructions, and to contribute:¬†[https://github.com/paulrobello/par\_scrape](https://github.com/paulrobello/par_scrape)
* PyPI [https://pypi.org/project/par\_scrape/](https://pypi.org/project/par_scrape/)

# Comparison:

I have seem many command line and web applications for scraping but none that are as simple, flexible and fast as ParScrape

# Target Audience

AI enthusiasts and data hungry hobbyist",probello,1gkhl3c,https://reddit.com/r/Python/comments/1gkhl3c/parscrape_v047_released/,https://www.reddit.com/r/Python/comments/1gkhl3c/parscrape_v047_released/,2024-11-05 21:16:45,0,0.41,0,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gkhl3c
Python,"Python Async Networking Tutorials: Clarity, Concurrency and Load Management","A git repo of code samples is linked below. The repo includes a README with links to 3 tutorials that demonstrate async network programming using the python modules in the repo;

\* A Quality Python Server In 10 Minutes

\* Python Networking On Steroids

\* Writing Python Servers That Know About Service Expectations

If you have spent time in this space then you will have had the sync/async debates and will be aware of the motivations to go async. This goes beyond the use of Python async primtives and into multi-step, distributed, async transactions. If you are looking for a toolset designed to be async from the bottom up, or just curious about a different way to tackle this space, these just might be useful reads.

[https://github.com/mr-ansar/from-sketches-to-networking-code](https://github.com/mr-ansar/from-sketches-to-networking-code)

If there is another way to tackle the same scope as the three tutorials - in a similar number of code lines and with similar code clarity - I would be pleased to be pointed in that direction.",Public_Being3163,1gjv650,https://reddit.com/r/Python/comments/1gjv650/python_async_networking_tutorials_clarity/,https://www.reddit.com/r/Python/comments/1gjv650/python_async_networking_tutorials_clarity/,2024-11-05 01:27:56,12,0.88,12,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1gjv650
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1gjtaue,https://reddit.com/r/Python/comments/1gjtaue/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1gjtaue/tuesday_daily_thread_advanced_questions/,2024-11-05 00:00:14,10,0.92,10,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gjtaue
Python,Opposite of Cloud Native Is?,"Opposite of Cloud Native is? It's time to define what it means to be NOT cloud-native, in a positive way. Here's an essay I wrote today. Would love your thoughts on it. 

[https://mkennedy.codes/posts/opposite-of-cloud-native-is-stack-native/](https://mkennedy.codes/posts/opposite-of-cloud-native-is-stack-native/)",mikeckennedy,1gkiiws,https://reddit.com/r/Python/comments/1gkiiws/opposite_of_cloud_native_is/,https://www.reddit.com/r/Python/comments/1gkiiws/opposite_of_cloud_native_is/,2024-11-05 21:56:40,0,0.33,0,0,16,0,0,False,False,True,False,False,News,self,t3_1gkiiws
Python, Introducing Kew: A Modern Async Task Queue Built for FastAPI and Modern Python,"Hey r/python! I wanted to share Kew, a task queue library built specifically for FastAPI and other modern async Python applications.

**What My Project Does**

Kew is an async-native task queue that runs directly in your FastAPI process. No separate workers, no sync/async bridges, no process pools - just clean async code end-to-end. It provides:

* True concurrency control using semaphores (if you set 4 workers, you get exactly 4)
* Priority queues with millisecond-precision scheduling
* Built-in circuit breakers for handling service outages
* Redis-backed persistence for reliability

**Quick example:**

from kew import TaskQueueManager, QueueConfig, QueuePriority

async def process\_payment(order\_id: str):

await charge\_customer(order\_id)

return ""success""

\# Create a high-priority queue with concurrent processing

await manager.create\_queue(QueueConfig(

name=""payments"",

max\_workers=4,  # Strictly enforced!

priority=QueuePriority.HIGH

))

\# Submit tasks naturally in your FastAPI endpoints

u/app.post(""/orders/{order\_id}/process"")

async def process\_order(order\_id: str):

await manager.submit\_task(

task\_id=f""payment-{order\_id}"",

queue\_name=""payments"",

task\_func=process\_payment,

order\_id=order\_id

)

**Target Audience**

This is a production-ready task queue specifically designed for:

\- Teams building FastAPI microservices who are tired of running separate Celery workers

\- Applications that need reliable concurrent task processing

\- Projects where managing separate worker processes adds unnecessary complexity

\- Systems that need robust error handling with circuit breakers

Currently running in production handling millions of tasks daily.

**Comparison to Existing Solutions**

The key difference is that Kew is built for the async world. Here's how it compares:

**Celery/RQ/Huey**: All require separate worker processes and weren't designed for async. Using them with FastAPI means:

\- Running and managing separate worker processes

\- Complex sync/async context switching

\- No native async support

\- Worker processes that can leak or exceed limits

**Kew**: Built from the ground up for async:

\- Runs directly in your FastAPI process

\- Native async/await support throughout

\- True semaphore-based concurrency control

\- Clean async context propagation

\- Works naturally with FastAPI's dependency injection

**Installation &amp; Links:**



\`pip install kew\`



\- \[GitHub\](https://github.com/justrach/kew)

\- \[Docs\](in progress)

\- \[PyPI\](https://pypi.org/project/kew/)

Happy to answer any questions about implementation details or design decisions!",CarbonoAtom,1gjozxb,https://reddit.com/r/Python/comments/1gjozxb/introducing_kew_a_modern_async_task_queue_built/,https://www.reddit.com/r/Python/comments/1gjozxb/introducing_kew_a_modern_async_task_queue_built/,2024-11-04 20:55:24,11,0.8,11,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1gjozxb
Python,Python debugging like Alteryx,I use python and alteryx at my job. I love how it‚Äôs easy to debug in Alteryx because you can check how your data looks after each tool. I know IDEs like Spyder have a nice debug mode but what happens when we‚Äôre debugging a pandas dataframe and want to see how the data changes after each line of your code? I was wondering if there are any graphical debuggers that can show you how your data looks like after each point similar to the way Alteryx is set up. Maybe there‚Äôs something even better than a graphical debugger? Looking for insight! Thanks!,Suspicious_Ad4412,1gjn3ku,https://reddit.com/r/Python/comments/1gjn3ku/python_debugging_like_alteryx/,https://www.reddit.com/r/Python/comments/1gjn3ku/python_debugging_like_alteryx/,2024-11-04 19:37:49,12,0.81,12,0,7,0,0,False,False,True,False,False,Discussion,self,t3_1gjn3ku
Python,Video Input for your local LLMS," **What My Project Does**

OpenSceneSense-Ollama is a powerful Python package designed for privacy-focused video analysis directly on your local machine. With this tool, you can leverage Ollama‚Äôs local models to analyze frames, transcribe audio, dynamically select key frames, and generate detailed summaries ‚Äî all without relying on cloud-based APIs. It‚Äôs ideal for those needing rich, insightful analysis of video content while ensuring data privacy and minimizing usage costs.

 **Target Audience**

This project is tailored for \*\*developers, researchers, data scientists, and privacy-conscious users\*\* who require in-depth, locally processed video analysis. It's perfect for applications where data security is critical, including:

\- Content creation workflows that need automatic video summarization

\- Researchers building labeled datasets for machine learning

\- Platforms needing context-rich content moderation

\- Offline projects in remote or restricted environments

 **Comparison**

OpenSceneSense-Ollama goes beyond traditional video analysis tools that often separate frame and audio analysis. Instead, it integrates both visual and audio elements, allowing users to prompt the models to produce comprehensive summaries and in-depth contextual insights. Where most tools might identify objects or transcribe audio separately, OpenSceneSense-Ollama unifies these components into narrative summaries, making it ideal for richer datasets or more nuanced content moderation.

**Getting Started**

To begin using OpenSceneSense-Ollama:

1. Prerequisites: Make sure you have Python 3.10+, FFmpeg, PyTorch and Ollama installed on your machine.

2. Install with pip: Run \`pip install openscenesense-ollama\` to install the package.

3. Configuration: Start analyzing video with customizable prompts, frame selection, and audio transcription.



Feel free to dive in, try it out, and share your feedback  especially if you're working in AI, privacy-focused applications, or video content moderation. Let‚Äôs build a powerful, local solution for meaningful video analysis!

[https://github.com/ymrohit/openscenesense-ollama](https://github.com/ymrohit/openscenesense-ollama)",rohit3627,1gjua54,https://reddit.com/r/Python/comments/1gjua54/video_input_for_your_local_llms/,https://www.reddit.com/r/Python/comments/1gjua54/video_input_for_your_local_llms/,2024-11-05 00:45:46,3,0.64,3,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gjua54
Python,NVIDIA launched cuGraph (python) : 500x faster Graph algorithms ,"Extending the cuGraph RAPIDS library for GPU, NVIDIA has recently launched the cuGraph backend for NetworkX (nx-cugraph), enabling GPUs for NetworkX with zero code change and achieving acceleration ***up to 500x for NetworkX CPU implementation***. Talking about some salient features of the cuGraph backend for NetworkX:

* **GPU Acceleration**: From up to 50x to 500x faster graph analytics using NVIDIA GPUs vs. NetworkX on CPU, depending on the algorithm.
* **Zero code change**: NetworkX code does not need to change, simply enable the cuGraph backend for NetworkX to run with GPU acceleration.
* **Scalability**:¬† GPU acceleration allows NetworkX to scale to graphs much larger than 100k nodes and 1M edges without the performance degradation associated with NetworkX on CPU.
* **Rich Algorithm Library**: Includes community detection, shortest path, and centrality algorithms (about 60 graph algorithms supported)

You can try the cuGraph backend for NetworkX on Google Colab as well. Checkout this beginner-friendly notebook for more details and some examples:

Google Colab Notebook: [https://nvda.ws/networkx-cugraph-c](https://nvda.ws/networkx-cugraph-c)

NVIDIA Official Blog: [https://nvda.ws/4e3sKRx](https://nvda.ws/4e3sKRx)

YouTube demo: [https://www.youtube.com/watch?v=FBxAIoH49Xc](https://www.youtube.com/watch?v=FBxAIoH49Xc)",mehul_gupta1997,1gjxzr0,https://reddit.com/r/Python/comments/1gjxzr0/nvidia_launched_cugraph_python_500x_faster_graph/,https://www.reddit.com/r/Python/comments/1gjxzr0/nvidia_launched_cugraph_python_500x_faster_graph/,2024-11-05 03:55:09,2,1.0,2,0,1,0,0,False,False,True,False,False,News,self,t3_1gjxzr0
Python,cicada: share your music and play your music on multiple devices in sync,"Hey guys, I made this app because I love choir

What My Project Does:

It takes audio files from a specified directory on your device and makes it available on a specified port for everyone in your local network, anyone in the network can play the music from your device but that's not the cool part, the cool part is people can create groups(I call them hives), the admin will play music and the same audio will play on every hive member's device in sync, makes it sound like choir. It also has features like hive-chat, user profile and maybe other features I don't remember.

Please check it out and let me know if you have any suggestions.
https://github.com/n1teshy/cicada",Specialist_Ruin_9333,1gjlkip,https://reddit.com/r/Python/comments/1gjlkip/cicada_share_your_music_and_play_your_music_on/,https://www.reddit.com/r/Python/comments/1gjlkip/cicada_share_your_music_and_play_your_music_on/,2024-11-04 18:35:16,9,0.91,9,0,12,0,0,False,False,True,False,False,Showcase,self,t3_1gjlkip
Python,"Python Threading Tutorial: Basic to Advanced (Multithreading, Pool Executors, Daemon, Lock, Events)","Are you trying to make your code run faster? In this video, we will be taking a deep dive into python threads from basic to advanced concepts so that you can take advantage of parallelism and concurrency to speed up your program. 

- Python Thread without join()
- Python Thread with join()
- Python Thread with Input Arguments
- Python Multithreading
- Python Daemon Threads
- Python Thread with Synchronization using Locks
- Python Thread Queue Communication between Threads
- Python Thread Pool Executor
- Python Thread Events
- Speed Comparison I/O Task
- Speed Comparison CPU Task (Multithreading vs Multiprocessing)

https://youtu.be/Rm9Pic2rpAQ",kevinwoodrobotics,1gj177a,https://reddit.com/r/Python/comments/1gj177a/python_threading_tutorial_basic_to_advanced/,https://www.reddit.com/r/Python/comments/1gj177a/python_threading_tutorial_basic_to_advanced/,2024-11-04 00:02:57,192,0.94,192,0,10,0,0,False,False,True,False,False,Tutorial,self,t3_1gj177a
Python,New Deep Learning Framework; Zephyr is on early release; active development,"**What My Project Does**

It is deep learning library / framework on top of JAX. [Zephyr](https://github.com/mzguntalan/zephyr) was motivated by an inclination to writing FP because JAX was FP. Zephyr reflects the nature of networks and layers, they are simply mathematical functions. By reflecting this, you are able to write code quicker and easier with minimal learning curve. 

**Target Audience**

This framework is not ready for production nor general use. It is in active development and if you do use it, I highly appreciate it and so if you submit reports or requests, I will tend to them immediately. 

It is for people who would like to use JAX in an FP way.

**Comparison**¬†

Within JAX: Flax, Haiku, and Equinox are your options; within python you additionally have Tensorflow and PyTorch. All of which are OO. In contrast, Zephyr is FP and you write nets and layers as functions.

**OO - FP**: Because zephyr is FP, it looks similar to math and it enjoys shorter code because there is no 1) initialize the module 2) call/forward/apply the module. There are only function calls. FP is more explicit tho

Here is a short example. (Some variables are not specified for brevity). README for more. 

Example: Linear Layer Only
Other frameworks would look like this (none of them look exactly like this): 
```python
    class Foo(Module):
        def __init__(self, input_dim):
            self.linear = nn.Linear(input_dim, out_dim)
        def __call__(self, x):
            return self.linear(x)
```

Zephyr:
```python
    def foo(params, x):
        return nets.linear(params, x, out_dim)

    # initialize params
    params = trace(foo, random_key, sample_input)
```

**Flax, Haiku**: They usually recreate JAX transformations to play nice with OO - so you need to know which one to use. And you have to be careful with nesting them or using a transformed module in another untransformed module, and so on. Zephyr does not have this problem.

Feedback is very welcome! 


",Pristine-Staff-5250,1gjdq6y,https://reddit.com/r/Python/comments/1gjdq6y/new_deep_learning_framework_zephyr_is_on_early/,https://www.reddit.com/r/Python/comments/1gjdq6y/new_deep_learning_framework_zephyr_is_on_early/,2024-11-04 13:04:30,16,0.94,16,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gjdq6y
Python,Lightweight Model Serving,"The article below explores how one can achieve up to 9 times higher performance in model serving without investing in new hardware. It uses ONNX Runtime and Rust to show significant improvements in performance and deployment efficiency:

[https://martynassubonis.substack.com/p/optimize-for-speed-and-savings-high](https://martynassubonis.substack.com/p/optimize-for-speed-and-savings-high)",Martynoas,1gjlwxx,https://reddit.com/r/Python/comments/1gjlwxx/lightweight_model_serving/,https://www.reddit.com/r/Python/comments/1gjlwxx/lightweight_model_serving/,2024-11-04 18:49:24,3,0.81,3,0,0,0,0,False,False,True,False,False,Resource,self,t3_1gjlwxx
Python,The encryption &amp; decryption manager from heaven,"The encryption &amp; decryption manager from heaven


Sorry if I‚Äôm tooting my own horn here, but you 
know. Even though many of you out there might not care so much for ‚ÄòMr Crypter‚Äô. At least I enjoy using it and that‚Äôs enough for me.

Here is a demo video: https://youtu.be/OUr7ZM-FgoU?si=WRI7b7shGRi4obD3

Quick notes:

**Framework**: 
I recently started learning about `Typer`, it‚Äôs a lib that makes it easy to create good CLI programs using python. So I decided to apply what I‚Äôve learned and create Mr Crypter.




**What my project does**
1. You can encrypt/decrypt specific files
2. View the content of a encrypted file while still keeping the file encrypted
3. Add new data to an encrypted file without having to decrypt the file manually
4. Search for all of the files that you have encrypted using Mr Crypter




**Target audience**
I might be tooting my own horn here when I say that this is a tool from heaven, but honestly. I like using Mr Crypter, I enjoy the ease of use. And that‚Äôs the point of it, it‚Äôs supposed to be user friendly, the main use case are for those that like to save credentials, api keys, etc on your computer. However, having let‚Äôs say an api key in a txt file out in the open can be problematic. That‚Äôs why it‚Äôs better to encrypt it and use Mr Crypter‚Äôs tooling whenever you need to get your api key. 


**Comparison**
My initial plan was to initially just encrypt some API keys that I had acquired, but later on decided to create a better way of managing stuff like this. But everything snowballed from there. And my intention wasn‚Äôt really to compete with any existing tooling that might be out there. But, since r/Python requires you to at least explain how your project might differ. I could say this:

1. Once encrypted always encrypted, the idea is to be able to interact with the contents of a encrypted file in some way.
2. Since there are commands to interact with already encrypted files, that could potentially be a vector of a security leak, if someone is monitoring you and waiting for you to let‚Äôs say use the `view` command to inspect the contents of one of your encrypted files. Compare that to tools like hpenc that are more established. Other than that, encryption is still strong  as long as your password isn‚Äôt `password`. Not even AES can defend against foolishness
3. Ease of use, my goal is to keep things simple as I can. 


**LICENSE: MIT**
This means you can do whatever the heck you want with the source code once you have downloaded it.  

And also, if you liked it enough that you want to sponsor me, I added a sponsor button to the project.

**Want to contribute to the project?**
Go to the TODO.md and pick something, there are a bunch of stuff that either needs to be added or improved upon. I‚Äôll occasionally add new stuff or remove stuff from the TODO.md. So keep an eye out.

If you want to check the project out, go to: 

[Mr Crypter GitHub repo](https://github.com/Marcus-Peterson/mr-crypter)",Gorrilac,1gjfwbq,https://reddit.com/r/Python/comments/1gjfwbq/the_encryption_decryption_manager_from_heaven/,https://www.reddit.com/r/Python/comments/1gjfwbq/the_encryption_decryption_manager_from_heaven/,2024-11-04 14:44:33,8,0.64,8,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gjfwbq
Python,Check out the Closeread Prize - data-driven Scrollytelling documents in Python,"Ever wanted to create impactful scrollytelling stories like the ones you see in online news?¬†

Scrollytelling stories let you explain complicated concepts to readers as they scroll down the page. You could build up a complicated plot layer-by-layer, zoom in on a famous map, highlight a key quote from an interviewee, or even animate your own web graphics.

[Closeread](https://closeread.dev/)¬†brings all of this and more to you inside Quarto. (Quarto &amp; Closeread are free and open source. Quarto is an open-source scientific and technical publishing system.)  


Write your data-driven story with code, and publish it to the web as a scrollytelling article.

Learn more at¬†[https://posit.co/blog/closeread-prize-announcement/](https://posit.co/blog/closeread-prize-announcement/)

And let me know if you have any questions here or at the dev repo:¬†[https://github.com/qmd-lab/closeread/discussions](https://github.com/qmd-lab/closeread/discussions)",economicurtis,1gjo081,https://reddit.com/r/Python/comments/1gjo081/check_out_the_closeread_prize_datadriven/,https://www.reddit.com/r/Python/comments/1gjo081/check_out_the_closeread_prize_datadriven/,2024-11-04 20:14:36,1,0.53,1,0,1,0,0,False,False,True,False,False,News,self,t3_1gjo081
Python,Python SDK for CoinGecko.com API,"# What my project does

* code: [https://github.com/nickatnight/python-coingecko](https://github.com/nickatnight/python-coingecko)
* pypi: [https://pypi.org/project/python-coingecko/](https://pypi.org/project/python-coingecko/)
* website: [https://docs.coingecko.com/reference/introduction](https://docs.coingecko.com/reference/introduction)

This project is a simple Python api wrapper for coingecko v3 api. The motivation for this was to experiment with [uv](https://github.com/astral-sh/uv) on a new open source project. Some highlights: fully typed, 98% test coverage, GitHub actions, and modern tooling.

This is an unofficial package and I have no affiliation with [coingecko.com](http://coingecko.com)

# Target Audience

Anyone who develops apps using coingecko api. As of this writing, the package is in beta, and an alpha can be expected in the upcoming releases.

# Comparison

The [existing package](https://github.com/man-c/pycoingecko) (1k stars) has been inactive for over two years. New apis have been added to the platform since, but are not yet supported. ",betazoid_one,1gj9q8r,https://reddit.com/r/Python/comments/1gj9q8r/python_sdk_for_coingeckocom_api/,https://www.reddit.com/r/Python/comments/1gj9q8r/python_sdk_for_coingeckocom_api/,2024-11-04 08:38:24,5,0.62,5,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gj9q8r
Python,I Wrote a Guide to Simulation in Python with SimPy,"Hi folks,

I wrote a guide on discrete-event simulation with [SimPy](https://simpy.readthedocs.io/en/latest/), designed to help you learn how to build simulations using Python. Kind of like the official documentation but on steroids.

I have used SimPy personally in my own career for over a decade, it was central in helping me build a [pretty successful engineering career](https://www.reddit.com/r/MechanicalEngineering/comments/1gh8at0/my_13_year_nontraditional_meche_career_journey/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button). Discrete-event simulation is useful for modelling real world industrial systems such as factories, mines, railways, etc.

My latest venture is teaching others all about this.

If you do get the guide, I‚Äôd really appreciate any feedback you have. Feel free to drop your thoughts here in the thread or DM me directly!

Here‚Äôs the link to get the guide: [https://simulation.teachem.digital/free-simulation-in-python-guide](https://simulation.teachem.digital/free-simulation-in-python-guide)

For full transparency, why do I ask for your email?

Well I‚Äôm working on a full course following on from my previous [Udemy course on Python](https://www.udemy.com/course/python-for-engineers-scientists-and-analysts/?referralCode=8E30A5C432085F42D090). This new course will be all about real-world modelling and simulation with SimPy, and I‚Äôd love to send you keep you in the loop via email. If you found the guide helpful you would might be interested in the course. That said, you‚Äôre completely free to hit ‚Äúunsubscribe‚Äù after the guide arrives if you prefer.",bobo-the-merciful,1gipp8a,https://reddit.com/r/Python/comments/1gipp8a/i_wrote_a_guide_to_simulation_in_python_with_simpy/,https://www.reddit.com/r/Python/comments/1gipp8a/i_wrote_a_guide_to_simulation_in_python_with_simpy/,2024-11-03 15:41:29,89,0.91,89,0,13,0,0,False,False,True,False,False,Tutorial,self,t3_1gipp8a
Python,Loadouts for Genshin Impact v0.1.1 is OUT NOW,"# What my project does

Hello r/Python!

Today we want to announce the recent release of our free and open-source software desktop application that allows travelers to manage their custom equipment of artifacts and weapons for playable characters and makes it convenient for travelers to calculate the associated statistics based on their equipment using the semantic understanding of how the gameplay works.

You can find more information about the project from our¬†[previous post](https://www.reddit.com/r/Genshin_Impact/comments/1fhgdhu/introducing_loadouts_for_genshin_impact/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button)¬†in the subreddit.

# Changelog

* Seamless management of artifact scanning is possible using¬†**clipboard insertion**
   * Screenshots can be inserted directly from the clipboard using the¬†**CTRL + V shortcut**
   * Alternatively, the¬†**drag and drop action**¬†can be used for achieving the same purpose
* Secondary ascension statistics scaling of the¬†**four-star Cryo**¬†character¬†**""Diona""**¬†were corrected
* Secondary ascension statistics attribute of the¬†**five-star Hydro**¬†character¬†**""Sigewinne""**¬†were corrected
* **New weapons**¬†that were introduced with the recent Genshin Impact release have been added
* **New characters**¬†that were introduced with the recent Genshin Impact release have been added
* **New artifacts**¬†that were introduced with the recent Genshin Impact release have been added
* Stellar overall codebase coverage quality is ensured with¬†**100% coverage**¬†of the functionality
* Memory usage for¬†**populating various weapon types**¬†in the combobox was significantly reduced
* Functional codebase was¬†**significantly refactored**¬†to encourage fellow travelers to contribute
* Support for only¬†**Python 3.12 and above**¬†is applicable for release GI Loadouts v0.1.1 and above
* **Automated dependency updates**¬†were made for both runtime and development libraries
* Cleaning up of¬†**residual cached OCR training data**¬†was enabled in case of unintended crashes
* Better¬†**exception handling routines**¬†were introduced when handling in-game screenshots
* Button¬†**tooltip for the scanning button**¬†on the main window was corrected from ""Load"" to ""Scan""
* Refinement selection combobox for weapons were fixed for¬†**one-star and two-star weapons**
* Correct the links and screenshots on the¬†**project documentation**¬†after the recent changes
* Change the¬†**continuous integration environment**¬†from ""Fedora:Latest"" image to ""Fedora:40"" image

# Illustrations

* [Dash - Nahida on GNU/Linux distributions](https://raw.githubusercontent.com/gridhead/gi-loadouts/main/assets/docs/gnul_dark.png)
* [Result - Nahida on GNU/Linux distributions](https://raw.githubusercontent.com/gridhead/gi-loadouts/main/assets/docs/gnul_dark_rslt.png)
* [Dash - Venti on Microsoft Windows](https://raw.githubusercontent.com/gridhead/gi-loadouts/main/assets/docs/mswn_dark.png)
* [Result - Venti on Microsoft Windows](https://raw.githubusercontent.com/gridhead/gi-loadouts/main/assets/docs/mswn_dark_rslt.png)

# Resources

* [Loadouts for Genshin Impact - GitHub](https://github.com/gridhead/gi-loadouts)
* [Loadouts for Genshin Impact - PyPI](https://pypi.org/project/gi-loadouts/)
* [Loadouts for Genshin Impact v0.1.1](https://github.com/gridhead/gi-loadouts/releases/tag/0.1.1)
   * [Executable for GNU/Linux distributions](https://github.com/gridhead/gi-loadouts/releases/download/0.1.1/gi-loadouts-0.1.1)
   * [Executable for Microsoft Windows](https://github.com/gridhead/gi-loadouts/releases/download/0.1.1/gi-loadouts-0.1.1.exe)

# Appeal

This project is currently in its beta phase and we are committed to delivering a quality experience with every release we make. If you are excited about the direction of this project and want to contribute to the efforts, we would greatly appreciate it if you help us boost the project visibility by¬†**starring the project repository**, address the releases by¬†**reporting the experienced errors**, choose the direction by¬†**proposing the intended features**, enhance the usability by¬†**documenting the project repository**, improve the codebase by¬†**opening the pull requests**¬†and finally, persist our efforts by¬†**sponsoring the development members**.

# Note

Loadouts for Genshin Impact is¬†**not intended**¬†to be a replacement for what¬†**Akasha**¬†and¬†**Genshin Optimizer**¬†already do. With¬†**ecosystem support**¬†of the more established JSON-based¬†**Genshin Open Object Definition**¬†(GOOD) serialization format and robust¬†**optical character recognition**¬†(OCR) support for artifact statistics scanning, this project is more intended to be a client-side supplement to more established tooling. The focus of the application is to ensure that travelers can mix and match their¬†**custom equipment**¬†of artifacts and weapons across various playable characters seamlessly to attempt multiple playstyles and team compositions easily.

# Disclaimer

All rights to Genshin Impact assets used in this project are reserved by miHoYo Ltd. and Cognosphere Pte., Ltd.

Other properties belong to their respective owners.

# Target Audience

* People playing Genshin Impact and wanting to customize their equipment
* People wanting to learn about how optical character recognition works
* People looking for an offline application for loadouts without telemetry and ads
* People wanting to learn about how PySide6 development is performed

# Comparison

* Akasha System
   * Proprietary codebase and closed-source web-based application
   * Internet access is mandatorily required for basic operations
   * Focuses more on the overall build of the characters and not equipment
   * Supported by copious advertisements and invasive telemetry
* Genshin Optimizer
   * Free and open source codebase and web-based application
   * Internet access is mandatorily required for basic operations
   * Superficial overall control across characters, weapons and artifacts
   * Supported by copious advertisements and invasive telemetry

In comparison to these, **Loadouts for Genshin Impact** is 

* Loadouts for Genshin Impact
   * Free and open source codebase and desktop-based application
   * Internet access is not required at all once the application is downloaded
   * Focussed overall control across characters, weapons and artifacts
   * Supported by donations and goodwill

",t0xic0der,1gire30,https://reddit.com/r/Python/comments/1gire30/loadouts_for_genshin_impact_v011_is_out_now/,https://www.reddit.com/r/Python/comments/1gire30/loadouts_for_genshin_impact_v011_is_out_now/,2024-11-03 16:54:52,18,0.71,18,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1gire30
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1gj14rr,https://reddit.com/r/Python/comments/1gj14rr/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1gj14rr/monday_daily_thread_project_ideas/,2024-11-04 00:00:09,5,0.86,5,0,3,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gj14rr
Python,A selfhosted web app built with plain Python,"### What My Project Does
- Code: https://github.com/daya0576/beaverhabits/ 
- Demo: https://beaverhabits.com/demo/

When switching from Android to iOS, I was unable to find a light-weighted but handy habit tracking app, so I decided to make one by myself :p

The project's name (Beaver Habit Tracker) came from a game called ""Against the Storm"" (which I spent over 200 hours, highly recommended). In the game, my favourite species is the beaver, hoping this web app works as a beaver to record ur precious moments in your fleeting life.

---

### How the Project was Developed
Inspired the idea of ""web UIs with plain Python"" from [Three Python trends in 2023](https://blog.jerrycodes.com/python-trends-in-2023/), I developed a web app with 100% pure Python &lt;3

The app is powered by an out-of-the-box framework called [NiceGUI](https://nicegui.io/) (including Quasar, Tailwind CSS, FastAPI, ...).

Some thoughts to share after several months of development:

- Good things ‚úÖ
  1. WebSocket based communication between client and server, **works perfectly with Python asyncio**
  2. Light-weighted session based storage provided, out of the box to use
  3. Plenty of UI components provided, straightforward and highly customizable
  4. ...
- Disadvantages:
  1. The framework NiceGUI follows a backend-first philosophy: It hadles everything on the server side -&gt; network latency could be a significant issue, may impacting the PWA experience
  2. ...

Overall, as a Python programmer, the full stack web app development experience is smooth and awesome. 

---

### Target Audience
This app is suitable for anyone who is passionate about recording life.

Here are my [table tennis session records](https://github.com/daya0576/beaverhabits/blob/main/README.md#streaks) over the past yearüèì. 

Thses streaks make me feel satisfied and alive‚ù§Ô∏è 

---

### Comparison
We can compare it to other habit tracker apps, but the streaks feature makes this app unique :p",Sufficient_South5254,1giizja,https://reddit.com/r/Python/comments/1giizja/a_selfhosted_web_app_built_with_plain_python/,https://www.reddit.com/r/Python/comments/1giizja/a_selfhosted_web_app_built_with_plain_python/,2024-11-03 09:17:57,75,0.87,75,0,25,0,0,False,False,True,False,False,Showcase,self,t3_1giizja
Python,Introducing OpenSceneSense: AI-Powered Video Analysis(Video input for Current LLMs),"**What My Project Does**

Hi everyone! I‚Äôm excited to introduce OpenSceneSense‚Äîa Python package that enables large language models (LLMs) to work with video data in meaningful ways. The idea is to bridge video input with models like OpenAI's Vision models and OpenRouter, so you can extract detailed insights directly from videos, frame-by-frame, and integrate audio transcription seamlessly.

OpenSceneSense processes video data in a way that LLMs can understand, turning it into rich text-based descriptions, detailed summaries, and scene change detection that can be applied to real-world tasks, including advanced content moderation and dataset creation.

**Target Audience**

This project is for developers, researchers, and data scientists who need to analyze video content or build robust, labelled datasets for machine learning. It‚Äôs also useful for platforms or individuals focused on content moderation, as OpenSceneSense brings context to video scenes by analyzing both visual and audio components, making it suitable for production applications.

**Comparison**

Unlike traditional video analysis tools that might only handle frames or audio separately, OpenSceneSense integrates both, allowing you to prompt LLMs to create comprehensive summaries and capture context that‚Äôs often lost in basic video analysis. While current tools can identify objects or transcribe audio, OpenSceneSense goes a step further by combining visual elements with narrative, perfect for anyone needing richer, more nuanced datasets or more accurate content moderation.

**Getting Started**

To use OpenSceneSense, you‚Äôll need Python 3.10+, FFmpeg, and an API key for OpenAI or OpenRouter. Install it with \`pip install openscenesense\`, and you‚Äôre ready to go. I‚Äôm also working on an Ollama-compatible version for local use to address privacy and performance needs.

Would love to hear thoughts and feedback from anyone working in AI, dataset creation, or moderation. Check it out on GitHub! 

[https://github.com/ymrohit/openscenesense](https://github.com/ymrohit/openscenesense)",rohit3627,1giyxep,https://reddit.com/r/Python/comments/1giyxep/introducing_openscenesense_aipowered_video/,https://www.reddit.com/r/Python/comments/1giyxep/introducing_openscenesense_aipowered_video/,2024-11-03 22:19:18,3,0.64,3,0,10,0,0,False,False,True,False,False,Showcase,self,t3_1giyxep
Python,Stockdex: Python Package to Extract and plot Financial Data ,"Showcasing a new major version (1.0.0) of [Stockdex](https://github.com/ahnazary/stockdex), a Python package that provides a simple interface to access financial data from various sources and plotting financiial data using Plotly and Dash.

## What my project does

While there are some packages that provide financial data (like yfinance), they have few shortcomings which Stockdex aims to address as follows:

- Various data sources: Stockdex provides data from Yahoo Finance API and website, Digrin, Macrotrends, and JustETF (for EU ETFs).

- Numerous data categories: Stockdex provides various data including financial statements, earnings, dividends, stock splits, list of key executives, major shareholders, and many more.

- Historical data: Stockdex provides a wide time range of data, e.g. Digrin and Macrotrends sources, which provide data ranging from 4 years to historical data.

- plotting capabilities (new feature): Stockdex provides plotting financial data using bar, line, and sanky plots. Multiple plots can be combined in dash app.

check out [this usage guide](https://github.com/ahnazary/stockdex/blob/main/USAGE.md) for detailed info about usage of the package and its functions including plotting and dash app examples.


[GitHub link](https://github.com/ahnazary/stockdex)

[Pypi link](https://pypi.org/project/stockdex/)",nginx26,1gioovh,https://reddit.com/r/Python/comments/1gioovh/stockdex_python_package_to_extract_and_plot/,https://www.reddit.com/r/Python/comments/1gioovh/stockdex_python_package_to_extract_and_plot/,2024-11-03 14:57:09,11,0.71,11,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1gioovh
Python,"RasperDucky, an implementation of DuckyScript3 to run on a Raspberry Pico","# What My Project Does

Source : [https://github.com/leogout/rasper-ducky](https://github.com/leogout/rasper-ducky)

An implementation of DuckyScript3 used for **keystroke injections attacks** to run on a Raspberry Pi Pico.

*What is a keystroke injection attack* you may ask? 

It is the reason why you **shouldn't plug any unknown USB key in any computer**. This device will not be recognized as a storage device, but as a keyboard... From there, a program running on the key will inject key-presses like ""Windows + R"", then type ""powershell"" and press ""Enter"". If you try it in this order on a Windows computer it will open a command line prompt... From here, injecting malicious commands could be very harmful.

A USB RubberDucky is a tool that you can buy on [https://shop.hak5.org/products/usb-rubber-ducky](https://shop.hak5.org/products/usb-rubber-ducky), and it allows someone to do what I described above with a special scripting language called **DuckyScript**. I am not affiliated with Hack5, the company selling these.

My goal is to write a Python interpreter to port as much commands from DuckyScript as possible to run them on a RaspberryPi Pico with CircuitPython. It's a fun little side project that I've loved working on lately and I wanted to show it to you here.

# How the Project was Developed

I read the docs for DuckyScript an reimplemented commands one by one using Python and CircuitPy. I used the insights of this great ebook : [https://craftinginterpreters.com/](https://craftinginterpreters.com/) and I got inspired by [https://github.com/dbisu/pico-ducky](https://github.com/dbisu/pico-ducky) which does the same thing with less features. 

At first I tried to contribute to this project but I got no answers from the owner and the way the code was written didn't correspond to the way I would have done it, so it gave me the motivation to create my own.

# Target Audience

I did not think of that before making this post. Honestly I do it for fun so there wasn't really any expectations on a target audience, but here is what comes on top of my mind when I think of it :

* CyberSecurity agents to sensitize their co-workers with demonstrations of what harm could cause a keystroke injection attack
* CyberSecurity students to showcase how trivial this kind of attacks is nowadays
* People who enjoy hacking as a hobby
* People who want to contribute to this project

 This project is NOT targeting Black Hat hackers or script kiddies. It is NOT a replacement for RubberDucky as well, their hardware is much better than a Raspberry Pi Pico. ",leogoutt,1gikerv,https://reddit.com/r/Python/comments/1gikerv/rasperducky_an_implementation_of_duckyscript3_to/,https://www.reddit.com/r/Python/comments/1gikerv/rasperducky_an_implementation_of_duckyscript3_to/,2024-11-03 11:04:03,11,0.88,11,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gikerv
Python,Robyn finally supports OpenAPI/Swagger ,"Hey Everyone üëã

We just launched OpenAPI docs generation in Robyn. - [https://github.com/sparckles/Robyn/releases/tag/v0.63.0](https://github.com/sparckles/Robyn/releases/tag/v0.63.0)

(For the unaware [Robyn](http://github.com/sparckles/robyn) is a Super Fast Async Python Web Framework with a Rust runtime. )

It was one of our community's most requested features, and I hope you all will like it.

Do let us know what you think of it üòä

You can find the docs at -  [https://robyn.tech/documentation/api\_reference/openapi](https://robyn.tech/documentation/api_reference/openapi)",stealthanthrax,1gieai3,https://reddit.com/r/Python/comments/1gieai3/robyn_finally_supports_openapiswagger/,https://www.reddit.com/r/Python/comments/1gieai3/robyn_finally_supports_openapiswagger/,2024-11-03 03:43:04,33,0.83,33,0,11,0,0,False,False,True,False,False,News,self,t3_1gieai3
Python,A new webview binding for python call 4 test,"# webview_python

A lightweight Python binding for creating native GUI applications using web technologies. Uses WebView2 on Windows and native webview implementations on other platforms.

## Features

- ‚ú® Cross-platform support:
  - Windows: Microsoft Edge WebView2 engine
  - macOS: WebKit
  - Linux: GTK-based WebKit
- üöÄ Simple and intuitive Python API
- üí™ High performance with minimal resource usage
- üîÑ Two-way JavaScript bridge
- üì¶ Easy installation with minimal dependencies

## Why Another Binding?

Existing Python WebView solutions have limitations:

- [webview-python](https://github.com/zserge/webview-python) - Hasn't been updated in 6 years, compilation issues, doesn't use WebView2
- [pywebview](https://github.com/r0x0r/pywebview) - Complex setup and installation issues

## Installation

```bash
pip install webview_python
```

## Usage

### Display Inline HTML

```python
from webview.webview import Webview
from urllib.parse import quote

html = """"""
&lt;html&gt;
&lt;body&gt;
&lt;h1&gt;Hello from Python Webview!&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
""""""
webview = Webview()
webview.navigate(f""data:text/html,{quote(html)}"")
webview.run()
```

### Load Local HTML File

```python
from webview.webview import Webview
import os

webview = Webview()
current_dir = os.path.dirname(os.path.abspath(__file__))
html_path = os.path.join(current_dir, 'local.html')
webview.navigate(f""file://{html_path}"")
webview.run()
```

### Load Remote URL

```python
from webview.webview import Webview
webview = Webview()
webview.navigate(""https://www.python.org"")
webview.run()
```

### Python-JavaScript Bindings

```python
from webview.webview import Webview, Size, SizeHint
from urllib.parse import quote

webview = Webview(debug=True)

# Python functions that can be called from JavaScript
def hello():
    webview.eval(""updateFromPython('Hello from Python!')"")
    return ""Hello from Python!""

def add(a, b):
    return a + b

# Bind Python functions
webview.bind(""hello"", hello)
webview.bind(""add"", add)

# Configure window
webview.title = ""Python-JavaScript Binding Demo""
webview.size = Size(640, 480, SizeHint.FIXED)

# Load HTML with JavaScript
html = """"""
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Python-JavaScript Binding Demo&lt;/title&gt;
    &lt;script&gt;
        async function callPython() {
            const result = await hello();
            document.getElementById('result').innerHTML = result;
        }

        async function callPythonWithArgs() {
            const result = await add(40, 2);
            document.getElementById('result').innerHTML = `Result: ${result}`;
        }

        function updateFromPython(message) {
            document.getElementById('result').innerHTML = `Python says: ${message}`;
        }
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Python-JavaScript Binding Demo&lt;/h1&gt;
    &lt;button onclick=""callPython()""&gt;Call Python&lt;/button&gt;
    &lt;button onclick=""callPythonWithArgs()""&gt;Call Python with Args&lt;/button&gt;
    &lt;div id=""result""&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
""""""

webview.navigate(f""data:text/html,{quote(html)}"")
webview.run()
```

## API Overview

- `Webview()`: Create a webview instance
- `webview.navigate(url)`: Navigate to URL or load HTML content
- `webview.bind(name, func)`: Bind Python function to JavaScript
- `webview.eval(js_code)`: Execute JavaScript code
- `webview.run()`: Start the webview main loop
- `Size(width, height, hint)`: Configure window size
- `SizeHint`: Window size hint constants

## Contributing

Contributions are welcome! Please feel free to submit issues and pull requests.
",CongZhangZH,1giru7y,https://reddit.com/r/Python/comments/1giru7y/a_new_webview_binding_for_python_call_4_test/,https://www.reddit.com/r/Python/comments/1giru7y/a_new_webview_binding_for_python_call_4_test/,2024-11-03 17:13:47,3,0.67,3,0,1,0,0,False,False,True,False,False,News,self,t3_1giru7y
Python,A filesystem navigator for the terminal,"
## What My Project Does

Terminal-tree is an experimental terminal-based filesystem navigator. You can explore your filesystem and preview files within the terminal.

Very early stage, I've been playing with the look and feel, but it could form the basis of a larger tool. Possibly a file manager, or file picker.

It is built with the Textual framework (which I also develop), and is a reasonably good example of a more complex widget which integrates blocking calls with an async framework.

The code is currently a single file:

https://github.com/willmcgugan/terminal-tree/blob/main/tree.py

More details on the repository:

https://github.com/willmcgugan/terminal-tree


## Target Audience

Anyone interested in building a terminal app. It is fun to play with (hopefully) but doesn't have any functionality on top of navigating and previewing files.

I'm open to suggestions on what could be built on top of this.

## Comparison

You could compare it to [Ranger](https://github.com/ranger/ranger), Midnight Commander, or similar tools.",willm,1gi3tqo,https://reddit.com/r/Python/comments/1gi3tqo/a_filesystem_navigator_for_the_terminal/,https://www.reddit.com/r/Python/comments/1gi3tqo/a_filesystem_navigator_for_the_terminal/,2024-11-02 19:07:09,74,0.91,74,0,25,0,0,False,False,True,False,False,Showcase,self,t3_1gi3tqo
Python,Project showcase: Rocket Model,"I have finished my first project and would like to show it off. My Project is a simple flight calculator for amateur rockets. It was built to aid the rough calc and design stage so one could model a rocket with out having a full design. It has a easy to use GUI to guide the user in imputing the characteristics of the rocket. It also has stand alone simulation module that can be run if the user prefer the script method. 

The target audience is my colleague in the university but anyone working with amateur rockets should should be able to use this tool.

The two main alternatives would be open rocket (java based) and rocketpy. Both are well built, tested and accepted in the industry but my project should be simpler to use and will not require a full model build out to run models. 

The application download is available here (Windows only):  
[https://github.com/andrerhenry/RocketModel/releases](https://github.com/andrerhenry/RocketModel/releases)  
  
Source code is here:  
[https://github.com/andrerhenry/RocketModel](https://github.com/andrerhenry/RocketModel)",Ajax_Minor,1gifc2t,https://reddit.com/r/Python/comments/1gifc2t/project_showcase_rocket_model/,https://www.reddit.com/r/Python/comments/1gifc2t/project_showcase_rocket_model/,2024-11-03 04:45:18,10,0.74,10,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1gifc2t
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1gia4ox,https://reddit.com/r/Python/comments/1gia4ox/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1gia4ox/sunday_daily_thread_whats_everyone_working_on/,2024-11-03 00:00:10,6,0.76,6,0,5,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gia4ox
Python,Simple Object Archive for Python - Providing a single decorator to persist object data and relations,"# [Simple Object Archive for Python (SOAP)](https://github.com/hwkoene/soap)

# What my project does

This library provides a single   `@entity` decorator for object persistence. Decorated classes will store their instances under ./\_\_data\_\_/&lt;ClassName&gt; in json format with their UUID as filename. filter() and exclude() methods are added as classmethods to query the existing objects.

For each class variable that is annotated, a `property` will be provided with the same name.

Class variables whose annotation is also a decorated object, set or list thereof are stored as a string of their UUID and will be resolved when their `get()` method is first called.

# Target audience

People...

* wanting to quickly prototype a database;
* creating simple applications with not that many objects (&lt;10.000 or so)

# Comparison

**SQLAlchemy**

SOAP doens't require database setup, but isn't as extensive.

**Pickle**

Pickled objects aren't transparent or queriable.

**Dataclass**

SOAP was inspired by the  `u/entity` decorator, adding query and persistence functionality.

# Example

    @entity
    class MyClassA:
        name: str
        health: int = 100
        my_path: Path = None
        inventory: set['MyClassB'] = set() # One-to-many

This creates an `__init__`\-function with the default arguments of the class variables.

    @entity
    class MyClassB:
        daddy: MyClassA # One-to-one relation
        other_items: list
        timestamp: datetime
        problems: random.randint(0, 99)

The `__data__` folder is created automatically and looks something like this:

    __data__/
       ‚îú‚îÄ‚îÄ MyClassA/ 
       ‚îÇ   ‚îî‚îÄ‚îÄ 550e8400-e29b-41d4-a716-446655440000
       ‚îî‚îÄ‚îÄ MyClassB/
           ‚îî‚îÄ‚îÄ 123e4567-e89b-12d3-a456-426614174000

`MyClassA` and `MyClassB` now reference each other. We create the objects like we would any other, just keep in mind to use all keyword arguments.

    a1 = MyClassA(name=""Benjamin"")
    a2 = MyClassA(name=""Steve"")
    
    b1 = MyClassB(daddy=a1, 
                  timestamp=datetime.now(), 
                  other_items=['Some cheese', 'Bud light'])
    b2 = MyClassB(daddy=a2, 
                  timestamp=b1.timestamp, 
                  other_items=[b1])

Because `MyClassA.inventory` is annotated with `set['MyClassB']`, the `getattr` function returns a `EntitySet` type. This is basically a `set` with `filter()` and `exlude()` methods to perform queries. Additionally, operations like `append` and `remove` are wrapped to save the object afterwards.

    a1.inventory.append(b1)
    a2.inventory.append(b2)
    
    steve_not_my_daddy = MyClassB.exclude(daddy=lambda x: x.name.startswith('Steve'))
    cheese_i_have = a1.inventory.filter(other_items=lambda x: ""Some cheese"" in x)
    
    print(steve_not_my_daddy)   # {b1}
    print(cheese_i_have)        # {b1}
    
    print(type(steve_not_my_daddy)) # &lt;class 'src.entity.entity.&lt;locals&gt;.Entity'&gt;
    print(type(a1.inventory))       # &lt;class 'src.entity.entity.&lt;locals&gt;.Entity'&gt;

# Limitations

1. All objects are kept in memory.
   * When an object is deleted, it is not directly removed from memory because other objects may still have a reference to it.
2. Currently, only `datetime` and `Path` objects are transcoded besides the builtins.

# Next steps

* Explicit archiving, adding items to a (`.zip`) archive (to partially address limitation #1);
* Option to disable implicit saving;
   * Combine with a `rollback` function to facilitate transactions;
* Custom transcoders (to address limitation #2);
* Typechecking for getters and setters;
* Derive date created from file metadata;
* Custom assignment of data folder;
* Allow creaton/modification/deletion of objects from files using watchdog to monitor the data directory for changes;
   * This may allow this framework to function as a synchronized database when combined with something like `portalocker`;
* CSV file writing of all objects;
* Optional integrations:
   * NiceGUI to have some kind of admin page;
* Saving asynchronously;
* Use a profiler to identify bottlenecks;
* Find a more fitting name.

# Issues

* Deleting an object and then terminating the program may cause invalid refereces, which in turn may cause errors.
* Invalid files cause errors.

  
EDIT: Folder layout example.
EDIT2: Reddit keeps chaning '@' to 'u/'",Samnono,1gi8m82,https://reddit.com/r/Python/comments/1gi8m82/simple_object_archive_for_python_providing_a/,https://www.reddit.com/r/Python/comments/1gi8m82/simple_object_archive_for_python_providing_a/,2024-11-02 22:48:33,8,0.76,8,0,10,0,0,False,False,True,False,False,Showcase,self,t3_1gi8m82
Python,State of the Art Python in 2024,"I was asked to write a short list of good python defaults at work. To align all teams. This is what I came up with. Do you agree?

1. Use uv for deps (and everything else)
2. Use ruff for formatting and linting
3. Support Python 3.9 (but use 3.13)
4. Use pyproject.toml for all tooling cfg
5. Use type hints (pyright for us)
6. Use pydantic for data classes
7. Use pytest instead of unittest
8. Use click instead of argparse
",awesomealchemy,1ghiln0,https://reddit.com/r/Python/comments/1ghiln0/state_of_the_art_python_in_2024/,https://www.reddit.com/r/Python/comments/1ghiln0/state_of_the_art_python_in_2024/,2024-11-01 23:09:40,607,0.96,607,0,186,0,0,False,False,True,False,False,Discussion,self,t3_1ghiln0
Python,What would Enaml 2.0 look like? | nucleic/enaml | Declarative UI,"From Enaml's [docs](https://enaml.readthedocs.io/en/latest/get_started/introduction.html):

&gt; Enaml brings the declarative UI paradigm to Python in a seamlessly integrated fashion. The grammar of the Enaml language is a strict superset of Python. This means that any valid Python file is also a valid Enaml file, though the converse is not necessary true. The tight integration with Python means that the developer feels at home and uses standard Python syntax when expressing how their data models bind to the visual attributes of the UI.

&gt; . . .

&gt; Enaml‚Äôs declarative widgets provide a layer of abstraction on top of the widgets of a toolkit rendering library. Enaml ships with a backend based on Qt5/6 and third-party projects such as enaml-web and enaml-native provides alternative backends.

---

A maintainer of Enaml has just opened [a brainstorm discussion](https://github.com/nucleic/enaml/discussions/558) on the next major development goals. 

It's a project I've long admired, though rarely used, and I'd love to see it get some attention and a revamp. I think the bar these days has been raised by projects like QML and Slint, which provide a great context in which to set new goals.",AndydeCleyre,1gi2vwa,https://reddit.com/r/Python/comments/1gi2vwa/what_would_enaml_20_look_like_nucleicenaml/,https://www.reddit.com/r/Python/comments/1gi2vwa/what_would_enaml_20_look_like_nucleicenaml/,2024-11-02 18:25:11,10,0.79,10,0,6,0,0,False,False,True,False,False,Discussion,self,t3_1gi2vwa
Python,yapper-tts: text to speech library,"Hey folks, I put together a bunch of cool tools and made yapper.


What My Project Does

It takes text, optionally enhances(adds a personality to) your text using free LLM APIs, and says it using one of more than a dozen available voices, they all sound pretty natural. The best part is that the speech synthesis is offline, you only need internet connection to use the LLM APIs to enhance your text.

I made this because I needed a fun way to get the progress/exceptions on my long running scripts, it has a decorator and context manager to do exactly that, it turned out to be better than I expected so I made it public. Check it out and please let me know if you have any suggestions.

https://github.com/n1teshy/yapper-tts",Specialist_Ruin_9333,1gi2xmj,https://reddit.com/r/Python/comments/1gi2xmj/yappertts_text_to_speech_library/,https://www.reddit.com/r/Python/comments/1gi2xmj/yappertts_text_to_speech_library/,2024-11-02 18:27:24,9,0.92,9,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gi2xmj
Python,CPython hash table collisions,"A blog post on how CPython dicts handle hash collisions.

[https://somehybrid.github.io/jekyll/update/2024/10/14/hash-collisions.html](https://somehybrid.github.io/jekyll/update/2024/10/14/hash-collisions.html)",SomeHybrid0,1gign36,https://reddit.com/r/Python/comments/1gign36/cpython_hash_table_collisions/,https://www.reddit.com/r/Python/comments/1gign36/cpython_hash_table_collisions/,2024-11-03 06:15:07,1,1.0,1,0,0,0,0,False,False,True,False,False,Discussion,self,t3_1gign36
Python,pypackage development environment setup,"**What My Project Does**  
Gets you up and running in a professional TDD-ready environment to develop python packages.  
Project is managed with poetry and uv.  
automatic pre-commit-hooks and bitbucket-pipeline implementation.

**Target Audience**  
It is ment for devs who write for production requirements and within a CI-CD environment

**Comparison**  
Don't know any other repos like this.  
I tried to reduce the project setup to a single command for devs.

  
I wrote a shellscript for a project setup in a setup\_template repo:  
[https://github.com/PhilBrk8/pypackage\_dev\_setup](https://github.com/PhilBrk8/pypackage_dev_setup)  
Feedback / contribution would be appreciated",sigmaaware,1gi7vli,https://reddit.com/r/Python/comments/1gi7vli/pypackage_development_environment_setup/,https://www.reddit.com/r/Python/comments/1gi7vli/pypackage_development_environment_setup/,2024-11-02 22:13:18,1,1.0,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gi7vli
Python,I was over my head switching to rust - an serious apology to the community,"**Notice: So**, i recently made this post (Highlighted Comment: https://www.reddit.com/r/Python/comments/1ghy7cl/comment/lv14fch/), and it was negatively received, what i'm trying to do is do the exact same thing is that post but not attempt to insult the r/python users and put the blame onto myself.

so a few days ago i would ultimately decide to switch to rust because of it's helpful community, and focus on memory safety and support and speed, what i didn't know that i wasn't advanced enough to do so, here's one of the reaons why

\- cargo.toml - cargo.toml was simply too annoying, instead of having a package manager like pip that simply installed the package like a linux package manager like dnf, cargo was a list of installed packages, i got confused over the packages i wanted and if they were even available.

on gnome builder there was [applictaion.rs](http://applictaion.rs) and [main.rs](http://main.rs) this angered me because i thought i only needed one, i ultimately messed up my code over this.

as for my behavior to the community i was being more of a jackass to you guys than i thought you were being to me, but i still have to give blame, you guys acted ignorant and a bit toxic but still, i take most of the blame here, i was being childish by insulting you guys, but by your vague behavior and lack of actual help on ways to improve my behavior against you made me angry at you guys, however the highlighted comment showed the error of my ways, this is how you should've reacted, still this is mostly my fault at the end of the day for acting like a brat.

rust was not for me and i charged too hard on using it, at the end of the day, ease of use and community support is the better option for me at least as i develop my skills further.

thank the guy who i highlighted above for showing me how i can respond more effectively to this.

as for the reception, i am weary how the community will respond to this, but actualy try to be helpful here and guide me on how to effectively apologize.",CallEnvironmental902,1ghzjlw,https://reddit.com/r/Python/comments/1ghzjlw/i_was_over_my_head_switching_to_rust_an_serious/,https://www.reddit.com/r/Python/comments/1ghzjlw/i_was_over_my_head_switching_to_rust_an_serious/,2024-11-02 15:54:34,1,0.67,1,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1ghzjlw
Python,"I have finally released a new version for my package, Arrest 0.1.10","After many months of procrastination, I have finally managed to release version 0.1.10 of my package Arrest. 

**What it does**

It is a package that lets you declaratively write a REST service client, configured with the sets of resources, routes and methods you want to call, and provide Pydantic models for request and responses to automatically parse them during the HTTP calls. Arrest also provides retry mechanisms, exception handling, automatic code generation from the OpenAPI specification, and much more.

**Target audience**

Primarily backend developers working on communicating with multiple web services from a Python client. It can also be useful in a microservice architecture where you have to write API bindings for all the dependant sevices for another service.   
  
**Comparison**

There are packages that does similar things which I got to know about from this subreddit after my initial post. For example:

1. [flask-muck](https://github.com/dtiesling/flask-muck) by u/beef-runner
2. [django-rest-client](https://github.com/certego/django-rest-client) by u/16withScars

The key highlights of the new version are:

1. Support for arbitrary python types for request and response. These can be \`list\`, \`dict\`, \`dataclass\`, or \`pydantic.BaseModel\`, or anything that is JSON serializable.
2. Added custom hooks for handling different types of exceptions.
3. Revamped retry mechanism to make it more configurable and no implicit retries built-in that might create unpredictability.
4. Better support for OpenAPI specification and codegen by fixing naming conventions and imports.

There are many more,  you can check them out at [whats new](https://s-bose.github.io/arrest/whats-new/). Do check out the [docs](https://s-bose.github.io/arrest/) and [GitHub](https://github.com/s-bose/arrest), and if this sounds interesting to you, please do give it a try, and let me know in case you face any issue.

For those who might already be familiar with it and encountered any issues, I hope the new version fixes them for you. For new people, I'd love to know your thoughts and suggestions,  and thank you to everyone here in the Python community who showed their support and provided their feedbacks in my earlier posts!

P.S. I am also open to contributions, if you feel like you have some ideas that Arrest can benefit from, feel free to raise a PR!",s_basu,1ghjt23,https://reddit.com/r/Python/comments/1ghjt23/i_have_finally_released_a_new_version_for_my/,https://www.reddit.com/r/Python/comments/1ghjt23/i_have_finally_released_a_new_version_for_my/,2024-11-02 00:05:28,17,0.79,17,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1ghjt23
Python,pg_mooncake: run python on your Postgres tables,"**What it does**

[pg\_mooncake](https://github.com/Mooncake-Labs/pg_mooncake)¬†brings a columnstore table to Postgres with DuckDb execution. These tables are written as Iceberg and Delta tables (parquet files + metadata) to your object store.

Query them outside of Postgres with DuckDB, Polars, Pandas, Spark directly without complex pipelines, stitching together ad-hoc files, or dataframe wangling.  


**Target audience**

Product engineers, data engineers, data scientist. 

  
**Comparison**

You can use psycopg2 / sqlalchemy today. But the approach here is fundamentally different. You're writing data to an s3 bucket. You can share that bucket to your data science, engineering, analyst team without giving them access to your Postgres. 

  
There are some Parquet exporters in Postgres (pg\_duckdb, pg\_parquet, pg\_analytics). pg\_mooncake actually exposes table semantics inside of Postgres (updates, deletes, transactions). And table semantics outside of Postgres (Iceberg/Delta). 

**Story time!**

I'm one of the founders of¬†[Mooncake Labs](https://mooncake.dev/). We are building the simple lakehouse without the complex pipelines / data engineering infra. 

Modern apps are built on Postgres. And we want to bring the python processing and analytics closer to this ecosystem. 

Postgres and Python are all you need.

",InternetFit7518,1ghgmmq,https://reddit.com/r/Python/comments/1ghgmmq/pg_mooncake_run_python_on_your_postgres_tables/,https://www.reddit.com/r/Python/comments/1ghgmmq/pg_mooncake_run_python_on_your_postgres_tables/,2024-11-01 21:37:13,19,0.82,19,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1ghgmmq
Python,Log4View: Log Visualization Tool,"First, an apology. I've posted this project here a few days ago. The project was showcasing an idea, but did not show anything substantial or interesting, and I had only invested a few hours into it. To make matters worse, I generated a post via ChatGPT, which in hindsight looked like total garbage, and was generally a dick move.

Second, about me. I'm T, a security researcher at Microsoft. A lot of my work revolves around identifying user behavior in our Azure cloud infrastructure. Naturally, this happens through mountains of logs, which I query on our platform. However, I always felt like viewing this data in the form of a boring gray table is a missed opportunity. I think many good insights can be gained from viewing bland data in creative ways. So, I came up with log4view as a single-evening project just to show it around my office.

Fast forward to now, it's Friday night and I've spent most of my weekend working on features and improvements. I think this is a really cool and fun project, and I would genuinely love to hear your thoughts and ideas.

So, third, my project.

**What Log4View Does**

Log4view is a tool for technical people who work with logs to view their data in a more visually stimulating way - in the hopes of bringing new insights and ideas. Log4view will generate up to 25 nodes per page, and a potentially endless number of pages total. This amount of nodes is hardcoded, but you can edit the variable which is *acceptable\_number\_of\_nodes\_in\_page*. Ideally you will work with up to a couple hundred logs, but if you choose to expand the above variable, the sky's the limit.

Log4view accepts a file path to your data, and a secondary key. The tool will then create main nodes made up of secondary keys, and sub-nodes of the main outer key of your data structure.

The output is a color coded collection of pages of network graphs, each featuring nodes and edges, and more data about each node on hovering your cursor over it.

**Target Audience**

My target audience is people who view mountains of logs as I do, and who try to glean insights from them. I can't even imagine how many professions this includes, but I reckon many in IT, Data Science, some Engineering, etc.

**Comparison**

I checked out a few other commercial tools which claim to be log visualizers, but the closest I've found is SolarWinds who create real-time view of logs with a few charts and colors.

This further emphasizes my point. Creative insights require creative views. I genuinely think the more creative ways you can view and think about your data, the better you'll understand it.

I hope I'm right.

Anyway, here's the link. Hope you like it, and if you don't, hope you're willing to share your thoughts with me :)

[https://github.com/Trivulzianus/log4view](https://github.com/Trivulzianus/log4view)",dvnci1452,1ghhcab,https://reddit.com/r/Python/comments/1ghhcab/log4view_log_visualization_tool/,https://www.reddit.com/r/Python/comments/1ghhcab/log4view_log_visualization_tool/,2024-11-01 22:10:22,14,0.82,14,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1ghhcab
Python,CleanMail: a open source tool written with streamlit to get rid of all the cruft in your email,"TLDR: clean up your inbox quickly at¬†[CleanMail](https://cleanmail.bharatkalluri.com/) . Code is over at¬†[https://github.com/BharatKalluri/cleanmail](https://github.com/BharatKalluri/cleanmail)

  
**What it does**

Let's you bulk delete &amp; unsubscribe to emails grouped by sender. so that you can quickly clean up all the cruft from your email!

**Target audience**

Personal side project, I think people may find use in it

**Comparison**

Tidy mail exists, but unfortunately its last updated 5 years back and the website does not seem to work for me. I wanted a low maintenance / simple app.   


**Story time!**

I've started today morning with 1847 emails in my Gmail inbox today morning. After some preliminary analysis, I found that more than 70% of all my emails were marketing junk.

I searched around for some time and found that there are a lot of companies charging a pretty significant amount for something so straightforward.

So I wrote a open source email cleaning solution, it groups by sender ID and gives you an option to both unsubscribe and delete all emails from that sender email ID.

After doing all this, I was around 180 emails which I could quickly scan and Archive or Delete.

Please feel free to raise issues or share feedback!",disruptive_pickle,1gh7x39,https://reddit.com/r/Python/comments/1gh7x39/cleanmail_a_open_source_tool_written_with/,https://www.reddit.com/r/Python/comments/1gh7x39/cleanmail_a_open_source_tool_written_with/,2024-11-01 15:21:48,43,0.91,43,0,19,0,0,False,False,True,False,False,Showcase,self,t3_1gh7x39
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1ghjow6,https://reddit.com/r/Python/comments/1ghjow6/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1ghjow6/saturday_daily_thread_resource_request_and/,2024-11-02 00:00:17,3,0.81,3,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1ghjow6
Python,"PyCon US 2025 Site Launches, CFP Live!","## PyCon US 2025

We're excited to announce that the **PyCon US 2025** website *and* call for (talk) proposals are officially live! 

Please help us spread the word, and if you're interested in giving a talk [read the guidelines](https://us.pycon.org/2025/speaking/guidelines/) and submit one!
- **Blog**: &lt;https://pycon.blogspot.com/2024/11/pycon-us-2025-launches.html&gt;
- **PyCon Website**: https://us.pycon.org/2025",monorepo,1ghdnfr,https://reddit.com/r/Python/comments/1ghdnfr/pycon_us_2025_site_launches_cfp_live/,https://www.reddit.com/r/Python/comments/1ghdnfr/pycon_us_2025_site_launches_cfp_live/,2024-11-01 19:26:00,6,0.76,6,0,1,0,0,False,False,True,False,False,,self,t3_1ghdnfr
Python,Best visualization library for clean SVG exports?,"I work for an organization where I will start to do some lightweight data analysis &amp; dataviz, with a workflow that means I make static charts then hand off a designer to be jazzed up in Adobe Illustrator.

Does anyone have thoughts on the best visualization library to use for this? What I'd like is something that A) allows me to create somewhat good looking charts off the bat and B) can export these charts in a clean SVG format, so that a designer can concentrate mostly on adding visual flair without spending a lot of time tidying up things first.

Any reason to recommend say Plotly, Seaborn, Altair, above others? Or something else entirely?",interexit,1gh5y83,https://reddit.com/r/Python/comments/1gh5y83/best_visualization_library_for_clean_svg_exports/,https://www.reddit.com/r/Python/comments/1gh5y83/best_visualization_library_for_clean_svg_exports/,2024-11-01 13:54:32,15,0.94,15,0,7,0,0,False,False,True,False,False,Discussion,self,t3_1gh5y83
Python,Implementing dashboard as a webpage in an enterprise setting,"Hi all, 

I‚Äôve been tasked with implementing a dashboard which will update monthly from a database which needs to show key analysis metrics, have user authentication, and ideally run super smooth. I have been looking at using libraries such as Django and combining it with plotting libraries but I‚Äôve only used Streamlit in the past which required no JavaScript or HTML knowledge. 

Are there any other solutions which would allow me to have greater control than Streamlit but without losing the ease and speed of deploying such dashboards? Extra points if the libraries are MIT licensed!",Traditional_Parking6,1gh0qde,https://reddit.com/r/Python/comments/1gh0qde/implementing_dashboard_as_a_webpage_in_an/,https://www.reddit.com/r/Python/comments/1gh0qde/implementing_dashboard_as_a_webpage_in_an/,2024-11-01 08:33:19,39,0.93,39,0,38,0,0,False,False,True,False,False,Discussion,self,t3_1gh0qde
Python,Thoughts on increasing use of camel case in the python world,"Lately, I'm coming across [posts like these](https://x.com/clcoding/status/1852128165931470952) more and more, these are Python code snippets and examples but written in Javaesque coding style i.e. camelCase variables instead of snake_case - which is the preferred version of Pythonistas.

Doesn't the PEP8 also recommend the use of snake_case for both variables and function names, and PascalCase for classes? Then why do we see folks using their ugly camelCase in the python world?",pyeri,1ghvpe3,https://reddit.com/r/Python/comments/1ghvpe3/thoughts_on_increasing_use_of_camel_case_in_the/,https://www.reddit.com/r/Python/comments/1ghvpe3/thoughts_on_increasing_use_of_camel_case_in_the/,2024-11-02 12:50:53,0,0.41,0,0,16,0,0,False,False,True,False,False,Discussion,self,t3_1ghvpe3
Python,Incoming in matplotlib 3.10: Dark-mode diverging colormaps,"Three diverging colormaps have been added: ""berlin"", ""managua"", and ""vanimo"". They are dark-mode diverging colormaps, with minimum lightness at the center, and maximum at the extremes. These are taken from F. Crameri's Scientific colour maps version 8.0.1 (DOI: https://doi.org/10.5281/zenodo.1243862).

import numpy as np
import matplotlib.pyplot as plt

vals = np.linspace(-5, 5, 100)
x, y = np.meshgrid(vals, vals)
img = np.sin(x*y)

_, ax = plt.subplots(1, 3)
ax[0].imshow(img, cmap=plt.cm.berlin)
ax[1].imshow(img, cmap=plt.cm.managua)
ax[2].imshow(img, cmap=plt.cm.vanimo)

- https://matplotlib.org/devdocs/users/next_whats_new/diverging_colormaps.html
- https://github.com/matplotlib/matplotlib/pull/28587

Already available in Matplotlib v3.10.0rc1.

https://matplotlib.org/devdocs/_downloads/fae62e20036f0fb6ba139164b87c210e/diverging_colormaps-1.2x.png",Balance-,1gh094o,https://reddit.com/r/Python/comments/1gh094o/incoming_in_matplotlib_310_darkmode_diverging/,https://www.reddit.com/r/Python/comments/1gh094o/incoming_in_matplotlib_310_darkmode_diverging/,2024-11-01 07:53:30,19,0.93,19,0,3,0,0,False,False,True,False,False,News,self,t3_1gh094o
Python,Breaking apart jupyter scripts,"I have a set of notebooks (actually they are jupytext files). They are broken up into logical units and exchange data via the file system. I am building a processing script to run the notebooks in order and render the plotting notebook to html. 

This seems to work, but before i make this a production script i wanted to hear your thoughts. 

Previous i was using one large file, but that gets so unwieldy. I did like using papermill for parameter injection though. now i have to do that via config file. 

I have tried to break out parts of the script into functions in a module but that just seems to give the worst of both worlds: can‚Äôt easily modify code, still have to work with notebooks. 

How are you all handling this?",jjrreett,1ghgf4h,https://reddit.com/r/Python/comments/1ghgf4h/breaking_apart_jupyter_scripts/,https://www.reddit.com/r/Python/comments/1ghgf4h/breaking_apart_jupyter_scripts/,2024-11-01 21:28:14,0,0.45,0,0,28,0,0,False,False,True,False,False,Discussion,self,t3_1ghgf4h
Python,"Internal streamlit app expanding, whats next?","Hi all!

I work freelance as a Analytics Engineer. My role with one of my major clients has taken somewhat of a turn lately, as i have been building a couple of internal streamlit apps to automate some of their internal functions in the company. This is all fine and dandy, we have been hosting some on a local server, and in other cases i merely installed python on their PC and made them a quick shortcut that boots up the server.

  
They want to make some of these apps available to their international offices.

It is VERY low traffic (would go from about 5 daily users, to about 30-40 daily users. Each using the app for aproximately 1-2 hours a day, so some sort of serverless solution seems obvious.

So what do you think would be a suitable solution going forward?  
Deploy on some sort of cloud solution? (seem like you can host it in a serverless fashion which seems obvious given the low traffic.)  
Switch framework? (Taipy looks quite promising)  
Ditch the fullstack python idea and rebuild it with a proper seperate frontend? (my frontend development capeabilities are VERY limited.)

Something entirely different?

Thank you",Immediate_Face_8410,1ggp5h0,https://reddit.com/r/Python/comments/1ggp5h0/internal_streamlit_app_expanding_whats_next/,https://www.reddit.com/r/Python/comments/1ggp5h0/internal_streamlit_app_expanding_whats_next/,2024-10-31 21:09:14,59,0.92,59,0,22,0,0,False,False,True,False,False,Discussion,self,t3_1ggp5h0
Python,I am looking for developers good in Manim/MoviePy or any other animation libraries,"I‚Äôm on the hunt for some developers who are good with Manim or MoviePy for a project I have in mind. If you‚Äôve got experience with either and want to chat about it, feel free to DM me!

Looking forward to hearing from you!

I have a notion doc specifying the objective. Let me know if anyone needs it. Basically its a job to convert data mentioned in the JSON (shapes,text) to animation",aitosumankolosky,1ghp6gu,https://reddit.com/r/Python/comments/1ghp6gu/i_am_looking_for_developers_good_in_manimmoviepy/,https://www.reddit.com/r/Python/comments/1ghp6gu/i_am_looking_for_developers_good_in_manimmoviepy/,2024-11-02 05:00:17,0,0.36,0,0,16,0,0,False,False,True,False,False,Meta,self,t3_1ghp6gu
Python,10 nooby python habits u gotta ditch,"Link: https://youtu.be/2ZqaRIZnAso

I'm testing out making YouTube videos,, if you have any comments or suggestions on what I can improve, please do let me know!
",ConfectionAvailable8,1ghq88n,https://reddit.com/r/Python/comments/1ghq88n/10_nooby_python_habits_u_gotta_ditch/,https://www.reddit.com/r/Python/comments/1ghq88n/10_nooby_python_habits_u_gotta_ditch/,2024-11-02 06:13:21,0,0.17,0,0,5,0,0,False,False,True,False,False,Tutorial,self,t3_1ghq88n
Python,File Path Validation Library,"# Where?

You can find it here:

* **Source** \- [FPV - GitHub](https://github.com/Voltaic314/File_Path_Validator)
* **PyPI** \- [FPV ¬∑ PyPI](https://pypi.org/project/file-path-validator/)



# What My Project Does

FPV is a file path validation and cleaning library that consolidates all the quirky file path rules from different operating systems and cloud storage providers. It's designed to help automate compliance with various platform-specific file naming rules, especially when working with cloud storage services or syncing data across multiple systems.



# Comparison

# Why not use OS-based utilities?

While some built-in OS libraries can validate or clean file paths, they don‚Äôt generally cover complex scenarios‚Äîlike cross-platform checks or cloud provider restrictions. FPV aims to address specific constraints unique to services like SharePoint, Box, OneDrive, and more.

# Can‚Äôt I just use regex or string manipulation?

Sure, but FPV organizes these rules into classes so that each supported platform has predefined validations and cleaning methods, saving you the time it would take to code all these restrictions individually. FPV can validate and clean file paths based on the platform‚Äôs unique restrictions, with modular classes for each service.



# Target Audience

FPV can be a handy tool for:

* Devs who automate file handling and processing across cloud platforms.
* People using Python scripts that require cross-platform file path generation and validation.
* Developers needing consistency across OS and cloud storage provider rules, particularly if they sync with Windows or SharePoint.

# 

Installation

    pip install file-path-validator



Here‚Äôs a quick example of how FPV is used:

    # example.py
    from FPV import FPV_Windows, FPV_MacOS, FPV_Linux, FPV_Dropbox, FPV_Egnyte, FPV_OneDrive, FPV_SharePoint, FPV_ShareFile
    
    # Example path with potential issues
    example_path = ""C:/ Broken/ **path/to||file . txt""
    
    # Creating a validator object for Windows
    FPVW = FPV_Windows(example_path, relative=True)
    
    # Original path
    print(""Original Path:"", FPVW.original_path)
    
    # Clean the path
    cleaned_path = FPVW.clean()
    print(""Cleaned Path:"", cleaned_path)
    
    # Validate the path
    try:
        FPVW.validate()
        print(""Path is valid!"")
    except ValueError as e:
        print(f""Validation Error: {e}"")
    
    # Auto-cleaning upon instantiation
    FPVW_auto_clean = FPV_Windows(example_path, auto_clean=True, relative=True)
    print(""Automatically Cleaned Path:"", FPVW_auto_clean.path)",MPGaming9000,1ggw9id,https://reddit.com/r/Python/comments/1ggw9id/file_path_validation_library/,https://www.reddit.com/r/Python/comments/1ggw9id/file_path_validation_library/,2024-11-01 03:12:20,6,0.7,6,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1ggw9id
Python,PymuPDF licensing requirements for other dependencies,"I am exploring various tools and libraries for data extraction from documents like PDFs. One tool I've looked into is img2table, which has been effective at extracting tables and works as a wrapper around different OCR tools. However, I noticed that PyMuPDF is a requirement for img2table, and I‚Äôve read that if you build with PyMuPDF, you must make your source code open-source in line with its AGPL license. Does this requirement still apply if I use a project where PyMuPDF is a dependency, even if I don‚Äôt directly interact with the library myself?",impsanoos,1ggz3d3,https://reddit.com/r/Python/comments/1ggz3d3/pymupdf_licensing_requirements_for_other/,https://www.reddit.com/r/Python/comments/1ggz3d3/pymupdf_licensing_requirements_for_other/,2024-11-01 06:19:07,3,0.64,3,0,4,0,0,False,False,True,False,False,Discussion,self,t3_1ggz3d3
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1ggsqvj,https://reddit.com/r/Python/comments/1ggsqvj/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1ggsqvj/friday_daily_thread_rpython_meta_and_freetalk/,2024-11-01 00:01:36,5,0.66,5,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1ggsqvj
Python,Scrunkly - Stupidly simple script runner,"# Where?

You can find it here:

* Source -¬†[nokusukun/scrunkly](https://github.com/nokusukun/scrunkly)
* PyPI -¬†[scrunkly ¬∑ PyPI](https://pypi.org/project/scrunkly/)

**What My Project Does**  
Scrunkly is a zero dependency script runner that fits my needs for a script runner.

# Comparison

**pyproject.toml**  
I use this for stuff like needing to deploy and ssh so a pyproject.toml isn't as portable.

**Why not use X?**  
I can't add features to it that caters to my needs.

# Target Audience

We've been using it in production for the startups that I worked with for quite some time.

**Example**

    # run.py
    import scrunkly
    from scrunkly import with_env, py
    
    dev_env = with_env({
        ""DEBUG"": ""1"",
        ""MONGO_DB_URI"": ""mongodb://localhost:27017"",
        ""MESSAGING_URL"": ""mongodb://localhost:27017"",
        ""MONGO_DB_NAME"": ""test"",
        ""AWS_REGION"": ""ap-southeast-2"",
        ""AWS_S3_BUCKET_NAME"": ""test-..."",
        ""AWS_ACCESS_KEY_ID"": ""AKI..."",  # these only have access to test buckets
        ""AWS_SECRET_ACCESS_KEY"": ""eyFi7..."",
    })
    
    prod_env = with_env({
        ""DEBUG"": ""0"",
        ""MONGO_DB_NAME"": ""prod"",
        ""AWS_REGION"": ""ap-southeast-2"",
        ""AWS_S3_BUCKET_NAME"": ""prod-..."",
    })
    
    scrunkly.scripts({
        ""api:dev"": [dev_env, f""""""{py} -m watchfiles --filter python ""uvicorn api.api:app --port 8001"" .""""""],
        ""api:prod"": [prod_env, f""{py} -m uvicorn api.api:app --host  --port 8080""],
        ""reqs:generate"": f""{py} -m  pipreqs.pipreqs . --force"",
        ""worker"": f""{py} ./run_worker.py"",
        ""install:dev"": f""{py} -m pip install -r dev-requirements.txt"",
        ""install:app"": f""{py} -m pip install -r requirements.txt"",
        ""load-data"": f""{py} ./scripts/part_data_import.py --force"",
        ""install"": [""install:dev"", ""install:app"", ""load-data""],
        ""api:compose:rebuild"": ""docker-compose up -d --no-deps --build api"",
        ""worker:compose:rebuild"": ""docker-compose up -d --no-deps --build worker"",
        ""up:prod"": ""docker-compose up -d --scale worker=10"",
        ""up:prod:full"": ""docker-compose up -d --scale worker=10 --build"",
    })

Then you can run it with

    scrunkly api:dev

or if for some reason you don't have scripts installed

    python3 run.py api:dev",Ejaculeat,1ggi2el,https://reddit.com/r/Python/comments/1ggi2el/scrunkly_stupidly_simple_script_runner/,https://www.reddit.com/r/Python/comments/1ggi2el/scrunkly_stupidly_simple_script_runner/,2024-10-31 16:03:18,20,0.92,20,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1ggi2el
Python,Generate programming language files from YAML,"Hello party people,

a while ago I started a project called confluent to generate code for different programming languages based on a language neutral YAML configuration to make updating constants-files for different languages easier. As time moved on, I found some flaws in how I implemented this project (especially the name bugged me). So today I'm proud, to finally release it under its new name: [ninja-bear](https://pypi.org/project/ninja-bear) ü•∑üêª

It uses the same configuration principles but adds more flexibility for developers to add their own stuff by offering a plugin-system.

Lets say you only want to generate files for C and TypeScript, no problem. Install ninja-bear, ninja-bear-language-c and ninja-bear-language-typescript and you're ready to go.

Here's a short demo on how to use it: [https://youtu.be/bya\_exGrS68](https://youtu.be/bya_exGrS68)

Let me know what you think :)",MeLlamoWhoan,1ggepxe,https://reddit.com/r/Python/comments/1ggepxe/generate_programming_language_files_from_yaml/,https://www.reddit.com/r/Python/comments/1ggepxe/generate_programming_language_files_from_yaml/,2024-10-31 13:37:36,13,0.74,13,0,8,0,0,False,False,True,False,False,News,self,t3_1ggepxe
Python,Tutorial: Versioning for APIs with Cadwyn using Python &amp; FastAPI,"You've probably heard of Cadwyn before, and I know it's been mentioned here previously but this video has the creator, Stanislav Zmiev, giving a full overview and demo of how to implement it for advanced API versioning (like DB migrations!) in Python/FastAPI projects:

Video: [https://youtu.be/9-WPvMsTjj8](https://youtu.be/9-WPvMsTjj8)  
Cadwyn: [https://github.com/zmievsa/cadwyn](https://github.com/zmievsa/cadwyn)",itsemdee,1gghbg7,https://reddit.com/r/Python/comments/1gghbg7/tutorial_versioning_for_apis_with_cadwyn_using/,https://www.reddit.com/r/Python/comments/1gghbg7/tutorial_versioning_for_apis_with_cadwyn_using/,2024-10-31 15:31:14,8,0.79,8,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1gghbg7
Python,How about a GUI based on Rust's Iced for your Python projects,"I've just released version 0.3.1 of IcedPyGui.  Rust bindings using pyo3 and built with maturin.

IPG has many widgets now and more will be added each month.  If you have ever used dearpygui, you'll find the syntax similar.

There are a ton of examples at [https://github.com/icedpygui/IcedPyGui-Python-Examples](https://github.com/icedpygui/IcedPyGui-Python-Examples)

These examples will easily get you started.

The rust repository is [https://github.com/icedpygui/IcedPyGui](https://github.com/icedpygui/IcedPyGui)

The Iced respository is [https://github.com/iced-rs/iced](https://github.com/iced-rs/iced)",cray5252,1gg2har,https://reddit.com/r/Python/comments/1gg2har/how_about_a_gui_based_on_rusts_iced_for_your/,https://www.reddit.com/r/Python/comments/1gg2har/how_about_a_gui_based_on_rusts_iced_for_your/,2024-10-31 00:58:04,53,0.89,53,0,11,0,0,False,False,True,False,False,News,self,t3_1gg2har
Python,Support with Python Rich Write Library,"I'm trying to print streamable output using Rich. It work flawlessly with out the console.status, however console.status is cause the previous line to be overwritten.



Eg:   
Iterataion One Ouput,  
Hello

Iteration Two Output,

There.

  
Expectation,  
Iteration one output,  
Hello  
  
Iteration Two Ouput,

Hello There. 

  
Again this happens only if I introduce console.status, any suggestion. Sharing the following code.

    with console.status("""") as status:
        for chunk in ai.query_llm(user_input):
            console.print(f""{chunk.content}"", end="""", )
            sleep(0.1)
        console.print()
        sleep(0.1)",Mindless-Umpire-9395,1ggknpe,https://reddit.com/r/Python/comments/1ggknpe/support_with_python_rich_write_library/,https://www.reddit.com/r/Python/comments/1ggknpe/support_with_python_rich_write_library/,2024-10-31 17:55:19,2,0.57,2,0,1,0,0,False,False,True,False,False,Discussion,self,t3_1ggknpe
Python,Seeking Advice on Best Stack for UI in a Multi-Tenant Web App,"Hey everyone,

I'm a backend/data engineer with 10 years of experience, and I'm hitting a roadblock with the UI for a multi-tenant web app I‚Äôm building. My client isn‚Äôt satisfied with the current Streamlit-based UI, even after adding custom React components.

The backend is solid‚ÄîI‚Äôve set up all the necessary queries and table schemas, and I know exactly how the visuals should look. The app is designed to allow admins to manage CRUD operations for users and metrics, with the ability to view all users' data, while individual users can only see their own information. For authentication, I'm using AWS and Cognito to handle login and user management.

I recently came across Django/react templates, which seem like a great fit for my needs, but I‚Äôm finding component libraries a bit overwhelming. I also checked out [Reflex.dev](http://Reflex.dev), though it feels somewhat clunky.

At this point, I'm open to simplifying the stack, even if that means dropping multi-tenancy. I‚Äôd really appreciate any recommendations on an easy way to layer a UI over my database and queries, particularly one that works well with AWS and Cognito.

  
Thanks in advance. ",boston101,1gg6mjm,https://reddit.com/r/Python/comments/1gg6mjm/seeking_advice_on_best_stack_for_ui_in_a/,https://www.reddit.com/r/Python/comments/1gg6mjm/seeking_advice_on_best_stack_for_ui_in_a/,2024-10-31 04:40:49,22,0.86,22,0,35,0,0,False,False,True,False,False,Discussion,self,t3_1gg6mjm
Python,Best gui for local client app? ,"I'm writing an application which is local. No server. I'm using python and I'm wanting to know people's opinions on the best gui to use. 

So far I've used tkinter but it feels clunky and heavy, like it's from the early 2000s. 

Can anyone recommend something better for modern looking stuff? Maybe I'm using tkinter wrong? 

Any advice would be appreciated. ",robbo2020a,1gfopgm,https://reddit.com/r/Python/comments/1gfopgm/best_gui_for_local_client_app/,https://www.reddit.com/r/Python/comments/1gfopgm/best_gui_for_local_client_app/,2024-10-30 15:05:11,159,0.96,159,0,84,0,0,False,False,True,False,False,Discussion,self,t3_1gfopgm
Python,PyExifTool problems,"Hi I'm trying to remove metadata from a file in python with PyExifTool. I'm doing an execute() with needed parameters to remove metadata like the original tool ""exiftool"". 

In windows, for example, to remove metadata:

exiftool -all= -overwrite-original /path/to/file

  
So I'm doing this function on python:

    def remove_metadata_file(filepath):
    ¬† ¬† try:
    ¬† ¬† ¬† ¬† 
    ¬† ¬† ¬† ¬† with exiftool.ExifTool() as et:
    ¬† ¬† ¬† ¬† ¬† ¬† result = et.execute(""-all="", ""-overwrite_original"", filepath)
    ¬† ¬† ¬† ¬† ¬† ¬† 
    ¬† ¬† ¬† ¬† ¬† ¬† if ""0 image files updated"" in result:
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† return f""Couldn't have removed metadata from file: {os.path.basename(filepath)}""
    ¬† ¬† ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† return f""File: {os.path.basename(filepath)} metadata has been removed correctly""
    ¬† ¬† except Exception as e:
    ¬† ¬† ¬† ¬† messagebox.showerror(""Error"", f""Error on removing metadata from a file: {e}"")
    
    And I've done a lot of testings printing results and filepath, and is always:
    
    0 image files updated
      1 image files unchanged
    
    I tried to delete '=' on ""-all="" but this command just prints all the metadata from file. ",Putrid-Rub6187,1ggcq7g,https://reddit.com/r/Python/comments/1ggcq7g/pyexiftool_problems/,https://www.reddit.com/r/Python/comments/1ggcq7g/pyexiftool_problems/,2024-10-31 11:58:20,2,0.6,2,0,8,0,0,False,False,True,False,False,Discussion,self,t3_1ggcq7g
Python,Bot Development - growth and engagement,"Hi, I am looking for bot developers interested in deploying discord bots to a server that mainly builds Python projects and solutions in a community with around 10k users. The idea is to boost and expand engagement while implementing new features, so you'll be part of the server transformation journey. If you do have the experience or you are just starting but believe that your portfolio can provide meaningful value, we can start discussing the details. 

just DM me to know more.",SJCHL0101,1ggp51w,https://reddit.com/r/Python/comments/1ggp51w/bot_development_growth_and_engagement/,https://www.reddit.com/r/Python/comments/1ggp51w/bot_development_growth_and_engagement/,2024-10-31 21:08:44,0,0.31,0,0,1,0,0,False,False,True,False,False,Discussion,self,t3_1ggp51w
Python,A new Streamlit online editor (powered by WebAssembly) ,"Hey, r/python!

I'd like to show you what I've been working on for the past month: [an online Streamlit editor.](https://editor.ploomber.io) It allows you to develop and preview Streamlit apps in the browser using WebAssembly (this makes it cheap to host since the heavy computations happen in the client!)

**What my project does:** allows you to develop and preview Streamlit apps in the browser

**Target audience:** Streamlit users

**Comparison:** Runs entirely on the browser, no need to install Streamlit on your local machine, and you can easily share your apps with someone else.

It contains a bunch of features to make development faster:

1. Prompting a model to generate the initial code
2. Select code and prompt a model to edit it (similar to Cursor)
3. In-app chat to ask Streamlit and Python questions

Here are a few things I'd like to add:

1. Better integration between the chat and the editor (similar to the Apply feature in Cursor)
2. Debugger: combining the source code and information about existing variables to suggest fixes when the app breaks

If you're curious about the stack:

1. Built on [Remix](https://github.com/remix-run/remix) (for server side-rendering)
2. A [FastAPI](https://github.com/fastapi) to handle AI requests and database operations (I could do this with JS, but I have a lot more experience with Python)
3. A Postgres database
4. NGINX as a reverse proxy

Check it out here: [https://editor.ploomber.io](https://editor.ploomber.io)

Sample app: [https://editor.ploomber.io/editor/nyc-map-with-selection-46e1](https://editor.ploomber.io/editor/nyc-map-with-selection-46e1)

*Note:* the app is rate-limited to prevent a huge OpenAI bill

I'd love to hear your feedback!",ploomber-io,1gftest,https://reddit.com/r/Python/comments/1gftest/a_new_streamlit_online_editor_powered_by/,https://www.reddit.com/r/Python/comments/1gftest/a_new_streamlit_online_editor_powered_by/,2024-10-30 18:21:10,28,0.84,28,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gftest
Python,futurepool - async/await worker pool,"# What My Project Does

FuturePool is a package that introduce known concept of multiprocessing Pool to the async/await world. It allows for easy translation from multiprocessing to async/await, while keeping the core principle - specified number of workers. FuturePool allows for more flexible usage by providing starimap/starimap\_unordered.

FuturePool was created to handle web scrapping, where in order to not overwhelm the website with connections and comply with website requirements, a specified number of workers was used. FuturePool was extended to handle generic scenarios and published on PyPi.

# Target Audience

It's designed for anyone working with asynchronous programming with additional requirements on number of simultaneous connections/actions. FuturePool gives known interface from multiprocessing. Pool and extends it even more for better developer experience.

# License

MIT

# Comparison

Example translation from multiprocessing to FuturePool

    # multiprocessing
    from multiprocessing import Pool
    from time import sleep
    
    def pool_fn(i):
        sleep(i)
        return i
    
    with Pool(2) as p:
        result = p.map(pool_fn, range(10))

    # FuturePool
    from futurepool import FuturePool
    from asyncio import sleep
    
    async def async_pool_fn(i):
        await sleep(i)
        return i
    
    async with FuturePool(2) as fp:
        result = await fp.map(async_pool_fn, range(10))

# Links

Docs: [https://MichalKarol.github.io/futurepool/](https://MichalKarol.github.io/futurepool/)

PyPi: [https://pypi.org/project/futurepool/](https://pypi.org/project/futurepool/)

GitHub: [https://github.com/MichalKarol/futurepool](https://github.com/MichalKarol/futurepool)

\---

Looking forward to all comments and improvements. Thanks!",mackarr,1gfmvis,https://reddit.com/r/Python/comments/1gfmvis/futurepool_asyncawait_worker_pool/,https://www.reddit.com/r/Python/comments/1gfmvis/futurepool_asyncawait_worker_pool/,2024-10-30 13:44:58,28,0.91,28,0,13,0,0,False,False,True,False,False,Showcase,self,t3_1gfmvis
Python,"Wimsey- lightweight, flexible data contracts for Polars, Pandas, Dask &amp; Modin","**What My Project Does**

I work in data and absolutely freaking love data contracts - they've solved me so many headaches in the past by just adding the simple step of checking data matches expectations before progressing with any additional logic.

I've used great expectations a lot in the past, and it's an absolutely awesome project, but it's pretty hefty, and I often feel likes it's fighting me when I \*just want to carry out tests in process\* rather than making use of it's GUI and running it on a server full-time.

So I started a project called Wimsey, it's based on top of Narwhals (which is an insanely cool project you should definitely check out before mine) meaning it has minimal overheads and can carry out required tests in whichever dataframe library you're already using.

**Target Audience**

It's designed for anyone working with data, especially users of dataframe libraries like Polars, Modin, Dask or similary where native support doesn't exist yet in many test frameworks.

I think data contracts are especially handy for a regular running data pipeline, where you want some guarantees on the data.

**Comparison**

The most direct comparisons would be soda-core or great-expectations, they're both great libraries and bring a lot of functionality to the table. Wimsey is notably a lot smaller (partly because it's very new, but also by design) - my goal for it to be something like what DLT is to Airbyte, where there's less functionality on offer, but things are a lot simpler, and easy to run in a python job.

**Link**

[https://github.com/benrutter/wimsey](https://github.com/benrutter/wimsey)",houseofleft,1gfju1e,https://reddit.com/r/Python/comments/1gfju1e/wimsey_lightweight_flexible_data_contracts_for/,https://www.reddit.com/r/Python/comments/1gfju1e/wimsey_lightweight_flexible_data_contracts_for/,2024-10-30 11:01:56,43,0.84,43,0,21,0,0,False,False,True,False,False,Showcase,self,t3_1gfju1e
Python,Cappa v0.24.0: A declarative command line parsing library,"[Docs](https://cappa.readthedocs.io/) | [Github](https://github.com/DanCardin/cappa) | [Comparison/justification vs argparse/click/typer/tyro/clipstick](https://cappa.readthedocs.io/en/latest/comparison.html)

At a high level, the library allows one to declaratively describe their CLI shape using types/annotations and then flexibly select between argparse-like and click-like execution modes.

I posted about this once, roughly a year ago while the library was in its relative infancy. Since then highlights features include:

* Its own argument parser (previously relied on argparse, but still **has** an optional argparse backend)
* Support for most dataclass-like libraries (dataclasses, attrs, pydantic 1/2, msgspec)
* Dependency injection system
* Colored, theme-able output/helptext (powered by rich)
* Automatic (dynamic) shell completion generation
* Async support
* Mutual exclusivity
* Function based commands
* Method based subcommands
* Generally improved type inference of more complex nested type annotations
* Sphinx plugin (to render --help output)

I'm happy to answer questions that anyone might have! Thanks!",DanCardin,1gflw8o,https://reddit.com/r/Python/comments/1gflw8o/cappa_v0240_a_declarative_command_line_parsing/,https://www.reddit.com/r/Python/comments/1gflw8o/cappa_v0240_a_declarative_command_line_parsing/,2024-10-30 12:58:15,29,0.94,29,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1gflw8o
Python,Video Sub Extractor - A program for extracting hard-coded subtitles from a video.,"[Link](https://github.com/voun7/Video_Sub_Extractor)

**What My Project Does**

This program make it easy to extract hard-coded subtitles from a video. This program uses OpenCV to extract the images from the video, then an OCR to extract the text from the images. The extracted texts are then processed and used to generate a subtitle file.

**Target Audience**

I'm a huge fan of Chinese anime and I watch a lot that usually comes with just hard-coded Chinese subtitles. This program will be useful for anyone with similar interest. Several languages are supported.

**Comparison**

Before writing this program  I would use a mix of different software programs to extract the images from the video, then extract the text from the images and finally generate a subtitle file which I later translate to English using [this](https://github.com/voun7/Subtitle_Translator).

This usually took a lot of time, this program combines all this steps into one and is very fast.  
I came across a similar program some years back, but it was mostly in Chinese, I didn't like the GUI and source code was difficult for me at that time to completely understand. The processing of the extracted text in this program was something that I came up with and I consider kind of ingenious. It's also a lot lighter.

Any feedback will be greatly appreciated.",1victorn,1gfyew8,https://reddit.com/r/Python/comments/1gfyew8/video_sub_extractor_a_program_for_extracting/,https://www.reddit.com/r/Python/comments/1gfyew8/video_sub_extractor_a_program_for_extracting/,2024-10-30 21:53:35,3,0.62,3,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1gfyew8
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1gg1913,https://reddit.com/r/Python/comments/1gg1913/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1gg1913/thursday_daily_thread_python_careers_courses_and/,2024-10-31 00:00:08,3,0.81,3,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gg1913
Python,Exploring Solvable and Unsolvable Equations with SymPy,"As applied scientists, we learn to ""solve"" y = x¬≤ and get x = ¬±‚àöy. But we're never taught that you can't solve y = x ‚àíc sin(x) and get a nice equation. That's always bugged me.

To really understand closed-form solvability, you need advance mathematics (e.g. Galois theory). Instead of that, I used SymPy to search for unsolvable equations.

What surprised me:

* Kepler‚Äôs Equation, y = x ‚àíc sin(x), is wonderfully simple.
* Lambert‚Äôs W function is invaluable when your model includes exp or log (but not both).
* SymPy is excellent but may not match WolframAlpha in some cases.
* Mixing trigonometric functions with other terms frequently prevents closed-form solutions.
* When closed-form solutions remain out of reach, we can rely on plotting and numerical methods.

I've created an open-source¬†[GitHub repo](https://github.com/CarlKCarlK/unsolvable) with full Python code and Jupyter notebooks. The project:

* Shows how to use Jupyter to create and display markdown tables containing equations.
* Includes a link to a free, no paywall article that can't be included directly in r/ Python.

p.s. Last year, I presented a similar project at PyData Seattle. It explained Newtonian Physics via SymPy. The [video of that talk](https://www.youtube.com/watch?v=52n2qKgwW_Q) became the 2nd most popular of the conference.",carlk22,1gfpycw,https://reddit.com/r/Python/comments/1gfpycw/exploring_solvable_and_unsolvable_equations_with/,https://www.reddit.com/r/Python/comments/1gfpycw/exploring_solvable_and_unsolvable_equations_with/,2024-10-30 15:57:41,9,0.86,9,0,2,0,0,False,False,True,False,False,Tutorial,self,t3_1gfpycw
Python,Just made a quick script for multi-launching programs!,"# What my project does

[Desktop Screenshot](https://imgur.com/a/shortcut-launcher-showcase-h9WzDwU)

I wanted to organize my desktop but wanted a shortcut so I can quickly launch my minecraft servers. Ended up making a quick (and lightweight!) script that can read the dirlist from a directory and display it to quickly launch any one of them!

[Window screenshot](https://imgur.com/a/8Lv2jQ1)

The script should be cross compatible atleast across Windows/Linux/Mac, tho I didnt test it on Linux/Mac.

This window is pretty customizable according to me. You can change the font and title of the GUI title and it shows any file put in the folder that it is told to look into!

You can change these configs in the script itself so that it doesnt have to load another JSON (or similar) file to cut loading times.

# Target audience

You can sorta say it is a toy, I mean I dont see any prod use here, but it can also be a powerful tool for those who like to organize their desktops and not make it a clutter!

It is also REALLY lightweight and fast, so this little tool can be used for power users as well.

# Comparision

I couldnt find any software to compare it to, so theres that ü§∑‚Äç‚ôÄÔ∏è



You can download the script [from here](https://github.com/KavyanshKhaitan2/Shortcut-Launcher).

Feel free to ask me any question or suggestion in the comments!",KavyanshKhaitan,1gft9ao,https://reddit.com/r/Python/comments/1gft9ao/just_made_a_quick_script_for_multilaunching/,https://www.reddit.com/r/Python/comments/1gft9ao/just_made_a_quick_script_for_multilaunching/,2024-10-30 18:14:45,1,0.55,1,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gft9ao
Python,"A huge list of all PyCon deep dives (a.k.a. ""Tutorials"") grouped by year and ordered by view count","Hi again! As a part of Tech Talks Weekly newsletter, I've put together a huge compilation of PyCon tutorials.

PyCon introduced a longer talk format (usually &gt;2h) since 2020 that allows for deep dives into specific topics. They call it ‚ÄúTutorials‚Äù. I have to admit‚ÄîI love this format and the quality of the talks, so I put together a compilation of all of those published so far. I grouped them by year and ordered by view count for your convenience.

**Here's the top 10:**

1. [**""Tutorials - Matt Harrison: Getting Started with Polars""**](https://substack.com/redirect/6d2b9a90-b918-43d6-aa54-744fb8d83d3c?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+15k views** ‚∏± 02 Jun 2023 ‚∏± 02h 14m 28s
2. [**""Tutorials - Felipe, Amanda:Building Your First API with Django and Django Rest Framework""**](https://substack.com/redirect/663c701f-a28e-451b-8685-58fc5c40595d?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+900 views** ‚∏± 28 Jun 2024 ‚∏± 02h 54m 17s
3. [**""Tutorial: Keith Galli - Natural Language Processing (NLP) in Python - From Zero to Hero""**](https://substack.com/redirect/b5d6cac6-0295-472e-8974-9399c5abb7a1?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+43k views** ‚∏± 29 Apr 2020 ‚∏± 01h 39m 23s
4. [**""Tutorials - Trey Hunner: Intro to Python for Brand New Programmers""**](https://substack.com/redirect/960f0827-97b8-4f29-90b8-378256070c26?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+4k views** ‚∏± 02 Jun 2023 ‚∏± 02h 16m 41s
5. [**""Tutorials - Mike M√ºller: The How and Why of Object-oriented Programming in Python""**](https://substack.com/redirect/9d235d82-1b4e-4f96-902e-99a646322db5?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+3k views** ‚∏± 02 Jun 2023 ‚∏± 02h 45m 34s
6. [**""Tutorial: Santiago Basulto - Python Concurrency: from beginner to pro""**](https://substack.com/redirect/c29b02f9-ff4d-48fa-af1d-7a18bc67acf7?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+32k views** ‚∏± 06 May 2020 ‚∏± 02h 57m 13s
7. [**""Tutorial: Kimberly Fessel - It's Officially Legal so Let's Scrape the Web""**](https://substack.com/redirect/2da664ec-90b6-4808-a778-8c59ac919f75?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+12k views** ‚∏± 29 Apr 2020 ‚∏± 02h 46m 26s
8. [**""Tutorials - Sebastian Raschka: The Fundamentals of Modern Deep Learning with PyTorch""**](https://substack.com/redirect/5f2a25a0-76a5-42b6-8289-9b4a67da6fae?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+2k views** ‚∏± 28 Jun 2024 ‚∏± 02h 59m 32s
9. [**""Tutorials - Jose Haro Peralta: Fundamentals of API security with Python""**](https://substack.com/redirect/a26af2e9-962e-4d20-8cee-555ba25795f5?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+900 views** ‚∏± 28 Jun 2024 ‚∏± 02h 33m 43s
10. [**""Tutorials - Reuven M. Lerner: Comprehending comprehensions""**](https://substack.com/redirect/df779af7-84f9-41b5-8b6d-8477e2024c3d?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+6k views** ‚∏± 02 Jun 2023 ‚∏± 02h 17m 33s

You can find the full compilation here: [https://www.techtalksweekly.io/p/ttw-extra-8-pycon-deep-dives-aka](https://www.techtalksweekly.io/p/ttw-extra-8-pycon-deep-dives-aka)

Let me know what you think!",TechTalksWeekly,1gftc68,https://reddit.com/r/Python/comments/1gftc68/a_huge_list_of_all_pycon_deep_dives_aka_tutorials/,https://www.reddit.com/r/Python/comments/1gftc68/a_huge_list_of_all_pycon_deep_dives_aka_tutorials/,2024-10-30 18:18:09,2,0.76,2,0,1,0,0,False,False,True,False,False,Resource,self,t3_1gftc68
Python,Running a million empty tests,"I had an interesting experience with trying to run a million empty tests. It showed me some things about how Python works that were not obvious to me before.

https://kodare.net/2024/10/31/a-million-tests.html

",kankyo,1gg8gdc,https://reddit.com/r/Python/comments/1gg8gdc/running_a_million_empty_tests/,https://www.reddit.com/r/Python/comments/1gg8gdc/running_a_million_empty_tests/,2024-10-31 06:50:18,0,0.36,0,0,2,0,0,False,False,True,False,False,Resource,self,t3_1gg8gdc
Python,BLE Connectivity Testing script using python (source code available),"A BLE Connectivity Test script allows developers to¬†**test the connection stability of a BLE device** by performing repeated connection and disconnection attempts. Finally it logs the result on the screen.   
details of the script [https://www.bleuio.com/blog/ble-connectivity-test-tool-using-bleuio/](https://www.bleuio.com/blog/ble-connectivity-test-tool-using-bleuio/)",bleuio,1gfjila,https://reddit.com/r/Python/comments/1gfjila/ble_connectivity_testing_script_using_python/,https://www.reddit.com/r/Python/comments/1gfjila/ble_connectivity_testing_script_using_python/,2024-10-30 10:40:37,5,0.86,5,0,0,0,0,False,False,True,False,False,Resource,self,t3_1gfjila
Python,FastStream: a powerful and easy-to-use library for building services with event streams,"[**FastStream** (https://github.com/airtai/faststream)](https://github.com/airtai/faststream) simplifies the process of writing producers and consumers for message queues, handling all the parsing, networking and documentation generation automatically. It is a new package based on the ideas and experiences gained from [**FastKafka**](https://github.com/airtai/fastkafka) and [**Propan**](https://github.com/lancetnik/propan). By joining our forces, we picked up the best from both packages and created a unified way to write services capable of processing streamed data regardless of the underlying protocol. We'll continue to maintain both packages, but new development will be in this project.

Making streaming microservices has never been easier. Designed with junior developers in mind, [**FastStream**](https://github.com/airtai/faststream) simplifies your work while keeping the door open for more advanced use cases. Here's a look at the core features that make [**FastStream**](https://github.com/airtai/faststream) a go-to framework for modern, data-centric microservices.

* **Multiple Brokers**: **FastStream** provides a unified API to work across multiple message brokers ([Apache Kafka](https://kafka.apache.org/), [RabbitMQ](https://www.rabbitmq.com/), [NATS](https://nats.io/) and [Redis](https://redis.io/))
* [**Pydantic Validation**](https://faststream.airt.ai/latest/getting-started/subscription/pydantic/): Leverage [**Pydantic's**](https://docs.pydantic.dev/) validation capabilities to serialize and validate incoming messages
* [**Automatic Docs**](https://faststream.airt.ai/latest/getting-started/asyncapi/export/): Stay ahead with automatic [**AsyncAPI**](https://www.asyncapi.com/) documentation
* **Intuitive**: Full-typed editor support makes your development experience smooth, catching errors before they reach runtime
* [**Powerful Dependency Injection System**](https://faststream.airt.ai/latest/getting-started/dependencies/): Manage your service dependencies efficiently with **FastStream**'s built-in DI system
* [**Testable**](https://faststream.airt.ai/latest/getting-started/subscription/test/): Supports in-memory tests, making your CI/CD pipeline faster and more reliable
* **Extendable**: Use extensions for [lifespans](https://faststream.airt.ai/latest/getting-started/lifespan/), [custom serialization](https://faststream.airt.ai/latest/getting-started/serialization/) and [middleware](https://faststream.airt.ai/latest/getting-started/middlewares/)
* [**Integrations**](https://faststream.airt.ai/latest/getting-started/integrations/frameworks/): **FastStream** is fully compatible with any HTTP framework you want ([**FastAPI**](https://faststream.airt.ai/latest/getting-started/integrations/fastapi/) especially)
* **Observability**: Add [OpenTelemetry](https://faststream.airt.ai/latest/getting-started/opentelemetry/) or [Prometheus](https://faststream.airt.ai/latest/getting-started/prometheus/) support to your services.",davorrunje,1gewobs,https://reddit.com/r/Python/comments/1gewobs/faststream_a_powerful_and_easytouse_library_for/,https://www.reddit.com/r/Python/comments/1gewobs/faststream_a_powerful_and_easytouse_library_for/,2024-10-29 14:59:35,129,0.95,129,0,8,0,0,False,False,True,False,False,Resource,self,t3_1gewobs
Python,Structural Pattern Matching in Python,"Hello, I have recently published a new book that focuses on structural pattern matching in Python. You can find it at [https://a.co/d/95C84J6](https://a.co/d/95C84J6). If you find this book interesting and would like me to arrange a free copy, please send me a direct message. ",life_michael_,1gg27dt,https://reddit.com/r/Python/comments/1gg27dt/structural_pattern_matching_in_python/,https://www.reddit.com/r/Python/comments/1gg27dt/structural_pattern_matching_in_python/,2024-10-31 00:44:30,0,0.43,0,0,7,0,0,False,False,True,False,False,News,self,t3_1gg27dt
Python,Simple GUI directory contents extraction for chatbot submission,"* **What My Project Does :**

A simple GUI tool that extracts a given directory structure and the contents of all its files then prints everything in an organized textbox + in an optional .txt file. 

I made it to lazily submit entire projects to ChatGPT and let it ""understand"" their structure quickly.

* **Target Audience** 

Anyone using chatgpt (or any llm chatbot) for writing or debugging code

* **Comparison** 

There are probably better lightweight alternatives that I don't know about but this might be an easy to use alternative 



Link to the project : 

[https://github.com/SeidSmatti/iziSajra](https://github.com/SeidSmatti/iziSajra)",sMASS_,1gey27a,https://reddit.com/r/Python/comments/1gey27a/simple_gui_directory_contents_extraction_for/,https://www.reddit.com/r/Python/comments/1gey27a/simple_gui_directory_contents_extraction_for/,2024-10-29 15:58:08,133,0.81,133,0,15,0,0,False,False,True,False,False,Showcase,self,t3_1gey27a
Python,PyBay 2024 conference talk videos are now online!,"You can view all the PyBay 2024 (the San Francisco Bay Area Python conference) talks here: https://www.youtube.com/playlist?list=PL85KuAjbN_gvx5b_BgLVcKfccnlZAVPMk

As a reminder, https://pyvideo.org is a large index of Python-related conference talks from many regional PyCons.",AlSweigart,1gexoow,https://reddit.com/r/Python/comments/1gexoow/pybay_2024_conference_talk_videos_are_now_online/,https://www.reddit.com/r/Python/comments/1gexoow/pybay_2024_conference_talk_videos_are_now_online/,2024-10-29 15:42:19,57,0.94,57,0,0,0,0,False,False,True,False,False,Resource,self,t3_1gexoow
Python,What do you think about module-level descriptors?,"Imagine if variables declared in the module's scope could access their own name, and on top of that, the parent module as well. Do you think it would be a neat concept?",RiP_Nd_tear,1gfuj60,https://reddit.com/r/Python/comments/1gfuj60/what_do_you_think_about_modulelevel_descriptors/,https://www.reddit.com/r/Python/comments/1gfuj60/what_do_you_think_about_modulelevel_descriptors/,2024-10-30 19:07:33,0,0.43,0,0,18,0,0,False,False,True,False,False,Discussion,self,t3_1gfuj60
Python,Customizable CAPTCHA widget for PyQt and PySide,"Hey,

I made a clean and modern CAPTCHA widget for PyQt and PySide.

Preview: [https://github.com/user-attachments/assets/14af04a6-c953-4038-8121-0c7c91b92f9f](https://github.com/user-attachments/assets/14af04a6-c953-4038-8121-0c7c91b92f9f)

**What My Project Does:**

The widget is a button containing a checkbox that opens a CAPTCHA prompt when clicked and checks the checkbox upon completion.

The prompt is made up of three different tasks:

* Selecting all images that contain a certain object (e.g. cars, crosswalks, bridges)
* Selecting all squares of an image that contain traffic lights
* Playing a small audio file and typing what you heard

The project can be used with PyQt5, PyQt6, PySide2, and PySide6, is highly customizable and easy to use. You can change the widget's entire look, including all colors and fonts, choose between multiple levels of difficulty and set it all up within just a couple of lines.

**Target Audience:**

It can be useful for anyone working with PyQt or PySide who wants to use a clean and modern CAPTCHA widget to protect their application from automation.

**Comparison:**

I couldn't find any library for PyQt or PySide that does anything similar.

**Links:**

PyPI: [https://pypi.org/project/pyqtcaptcha/](https://pypi.org/project/pyqtcaptcha/)

GitHub: [https://github.com/marcohenning/pyqtcaptcha](https://github.com/marcohenning/pyqtcaptcha)

I hope some of you find it useful!

",marcohnng,1gewap4,https://reddit.com/r/Python/comments/1gewap4/customizable_captcha_widget_for_pyqt_and_pyside/,https://www.reddit.com/r/Python/comments/1gewap4/customizable_captcha_widget_for_pyqt_and_pyside/,2024-10-29 14:42:57,101,0.97,101,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gewap4
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1gf9e74,https://reddit.com/r/Python/comments/1gf9e74/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1gf9e74/wednesday_daily_thread_beginner_questions/,2024-10-30 00:00:09,3,0.72,3,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gf9e74
Python,"Quick quiz on your knowledge
","Quick quiz what is the output of this code?

    numbers = [0,1,2,3,4,5,6,7,8,9]
    numbers_copy = numbers
    numbers_copy[1] = 2
    print(numbers[1])",Bomlerequin,1gfs0ee,https://reddit.com/r/Python/comments/1gfs0ee/quick_quiz_on_your_knowledge/,https://www.reddit.com/r/Python/comments/1gfs0ee/quick_quiz_on_your_knowledge/,2024-10-30 17:23:16,0,0.2,0,0,4,0,0,False,False,True,False,False,Discussion,self,t3_1gfs0ee
Python,Can't Create a 1-Page PDF from HTML,"Here‚Äôs a draft for your Reddit post:



\---



\*\*Title:\*\* Can't Create a 1-Page PDF from HTML



I'm working on a Python script that generates an HTML file called \`index\_embedded.html\`. When I open this file in any browser and print it, it fits perfectly on one page. However, I need the script to generate a PDF directly, and I haven‚Äôt been able to get it to output a single-page PDF.



Here‚Äôs my latest attempt:



`import subprocess`



`def print_html(html_file, output_pdf, browser='edge'):`

`# Path to the Chrome or Edge executable`

`if browser == 'chrome':`

`browser_path = ""C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe""`

`elif browser == 'edge':`

`browser_path = ""C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe""`

`else:`

`raise ValueError(""Unsupported browser. Use 'chrome' or 'edge'."")`



`# Command to print to PDF using Chrome or Edge, with options to remove headers and footers`

`try:`

`subprocess.run([browser_path, '--headless', '--disable-gpu', '--no-pdf-header-footer', '--print-to-pdf=' + output_pdf, '--paper-size=A4',`

`'--margin-top=0', '--margin-bottom=0',`

`'--margin-left=0', '--margin-right=0', '--scale=1', html_file], check=True)`

`print(f""HTML file converted to PDF at: {output_pdf}"")`

`except subprocess.CalledProcessError as e:`

`print(f""Error generating PDF: {e}"")`

\`\`\`



However, this code produces a two-page PDF instead of a single page. Any suggestions on how to fix this? Thanks for the help!",Fair_Assistant_5602,1gfpmvg,https://reddit.com/r/Python/comments/1gfpmvg/cant_create_a_1page_pdf_from_html/,https://www.reddit.com/r/Python/comments/1gfpmvg/cant_create_a_1page_pdf_from_html/,2024-10-30 15:44:19,0,0.2,0,0,4,0,0,False,False,True,False,False,Discussion,self,t3_1gfpmvg
Python,I made a reactive programming library for Python,"Hey all!

I recently published a reactive programming library called `signified`.

You can find it here:

* Source - https://github.com/dougmercer/signified/
* Docs - https://dougmercer.github.io/signified/
* PyPI - https://pypi.org/project/signified/

# What my project does

## What is reactive programming?

Good question!

The short answer is that it's a programming paradigm that focuses on reacting to change. When a reactive object changes, it notifies any objects observing it, which gives those objects the chance to update (which could in turn lead to them changing and notifying their observers...)

## Can I see some examples?

Sure!

### Example 1

    from signified import Signal
    
    a = Signal(3)
    b = Signal(4)
    c = (a ** 2 + b ** 2) ** 0.5
    print(c)  # &lt;5&gt;

    a.value = 5
    b.value = 12
    print(c)  # &lt;13&gt;


Here, `a` and `b` are Signals, which are reactive containers for values.

In `signified`, reactive values like Signals overload a lot of Python operators to make it easier to make reactive expressions using the operators you're already familiar with. Here, `c` is a reactive expression that is the solution to the pythagorean theorem (`a ** 2 + b ** 2 = c ** 2`)

We initially set the values for `a` and `b` to be 3 and 4, so `c` initially had the value of 5. However, because `a`, `b`, and `c` are reactive, after changing the values of `a` and `b` to 5 and 12, `c` automatically updated to have the value of 13.

### Example 2

    from signified import Signal, computed
    
    x = Signal([1, 2, 3])
    sum_x = computed(sum)(x)
    print(x)  # &lt;[1, 2, 3]&gt;
    print(sum_x)  # &lt;6&gt;
    
    x[1] = 4
    print(x)  # &lt;[1, 4, 3]&gt;
    print(sum_x)  # &lt;8&gt;

Here, we created a signal `x` containing the list `[1, 2, 3]`. We then used the `computed` decorator to turn the `sum` function into a function that produces reactive values, and passed `x` as the input to that function.

We were then able to update `x` to have a different value for its second item, and our reactive expression `sum_x` automatically updated to reflect that.

# Target Audience

# Why would I want this?

I was skeptical at first too... it adds a lot of complexity and a bit of overhead to what would otherwise be simple functions.

However, reactive programming is very popular in the front-end web dev and user interface world for a reason-- it often helps make it easy to specify the relationship between things in a more declarative way.

The main motivator for me to create this library is because I'm also working on an animation library. (It's not open sourced yet, but I made a video on it here pre-refactor to reactive programming https://youtu.be/Cdb_XK5lkhk). So far, I've found that adding reactivity has solved more problems than it's created, so I'll take that as a win.

## Status of this project

This project is still in its early stages, so consider it ""in beta"".

Now that it'll be getting in the hands of people besides myself, I'm definitely excited to see how badly you can break it (or what you're able to do with it). Feel free to create issues or submit PRs on GitHub!

# Comparison

Why not use an existing library?

The `param` library from the Holoviz team features reactive values. It's great! However, their library isn't type hinted.

Personally, I get frustrated working with libraries that break my IDE's ability to provide completions. So, essentially for that reason alone, I made `signified`.

`signified` is mostly type hinted, except in cases where Python's type system doesn't really have the necessary capabilities.

Unfortunately, the type hints currently only work in `pyright` (not `mypy`) because I've abused the type system quite a bit to make the type narrowing work. I'd like to fix this in the future...

# Where to find out more

Check out any of those links above to get access to the code, or check out my YouTube video discussing it here https://youtu.be/nkuXqx-6Xwc . There, I go into detail on how it's implemented and give a few more examples of why reactive programming is so cool for things like animation.

Thanks for reading, and let me know if you have any questions!

--Doug",mercer22,1gealvf,https://reddit.com/r/Python/comments/1gealvf/i_made_a_reactive_programming_library_for_python/,https://www.reddit.com/r/Python/comments/1gealvf/i_made_a_reactive_programming_library_for_python/,2024-10-28 19:19:00,219,0.93,219,0,48,0,0,False,False,True,False,False,Showcase,self,t3_1gealvf
Python,Package for encrypting SQLite DB,"Hi guys...... I working on a python + Qt application using sqlite database and would like to encrypt this database file

I've seen pysqlcipher and sqlcipher but all these I'm having issues installing the package its failing to buld even after installing c++ build tools and windows SDK still failing to build the package

any other module that works similar to sqlcipher that works well with peewee ORM as well",Cod3Blaze,1gfj3cg,https://reddit.com/r/Python/comments/1gfj3cg/package_for_encrypting_sqlite_db/,https://www.reddit.com/r/Python/comments/1gfj3cg/package_for_encrypting_sqlite_db/,2024-10-30 10:12:26,0,0.29,0,0,27,0,0,False,False,True,False,False,Discussion,self,t3_1gfj3cg
Python,Copilot hallucinations wanted!,"I am preparing a small introduction to github copilot for python for my students of a first year programming course. Of course, with this, there should also be a section on pitfalls. Are there any issues or hallucinations that you have encountered using github copilot?

For now the students have seen just the basics: looping (for and while), if-elif-else, string-methods, lists and user defined methods.

If you know any examples including any of these it would be very nice. Otherwise, examples from basic mathematical analysis, physics, chemistry or biology would also be nice.

I am already planning to make the fibonnaci sequence which it does recursively (very bad runtime).",thomaspecellini,1gee1hx,https://reddit.com/r/Python/comments/1gee1hx/copilot_hallucinations_wanted/,https://www.reddit.com/r/Python/comments/1gee1hx/copilot_hallucinations_wanted/,2024-10-28 21:41:48,68,0.85,68,0,31,0,0,False,False,True,False,False,Discussion,self,t3_1gee1hx
Python,Adding keyboard shortcuts to the Python REPL,"The new Python REPL is written in Python, which makes it possible to customize its behavior through Python code. Inspired by ≈Åukasz Langa's recent EuroPython [keynote](https://youtu.be/dK6HGcSb60Y?si=jWPEa8BcdYGnW9l6), I added some keyboard shorcuts to my own Python REPL thanks to Python's ability to use a `PYTHONSTARTUP` file.

[Instructions here for adding keyboard shortcuts to the new pyrepl](https://treyhunner.com/2024/10/adding-keyboard-shortcuts-to-the-python-repl/)

**Note**: this uses undocumented and unsupported Python features (note all the `_`-prefixed variables) so this hack may change/break in future Python versions without notice.",treyhunner,1ge9c66,https://reddit.com/r/Python/comments/1ge9c66/adding_keyboard_shortcuts_to_the_python_repl/,https://www.reddit.com/r/Python/comments/1ge9c66/adding_keyboard_shortcuts_to_the_python_repl/,2024-10-28 18:27:34,19,0.89,19,0,1,0,0,False,False,True,False,False,Tutorial,self,t3_1ge9c66
Python,Algorithmic Music Generation with Python,"Hi, all. I've been building this Python program on the side when I find time from my full time job for the last month or so. It's nowhere near finished but I wanted to share what I'm building with you guys just to get some feedback.  I will keep posting updates about this project as I itterate. 

Finally this project got to a point where the output sounds pleasant to me so I wanted to see If I'm the only one or am I on the right track. There is still a lot that doesn't work with this project as I can't find a lot of time to work on it. 

There are some example videos on the Github page. UI on the videos are from an older version, so if you decide to run it for yourself (Which I don't recommand. Its really not worth the hastle right now.) you're gonna see a different UI with correct keys on the animations as opposed to the ones on the videos.

  
What works:

It picks a starting note. Based on the starting note and the defined scale, It picks 4 chords. It picks a way of playing those chords in terms of their timings. It picks random notes in the correct scale to generate a melody. It adds a very very simple drum loop on top of all. It shows what is being played on the screen as it plays. if you press f on terminal, it allows you to play freely with your pc keyboard using fl studio key bindings.

What I'm working on:

* UI with buttons for start, stop freeplay, output midi, record screen.  
* More instruments, especially bass.
* More drum patterns.
* More complex melody algorithm to create intro verse chorus.

Please let me know what other features whould you expect from a program like this. I'm open to any kind of feedback. Let me know what you think.

* What My Project Does: It algorithmically generates music.
* Target Audience: just a toy project.
* Comparison: Compared to other music generation libraries this one doesn't use AI to generate the music so it gives you complete control over the output. 

[Github](https://github.com/atiriko/Music)

",Atiriko,1ge68i5,https://reddit.com/r/Python/comments/1ge68i5/algorithmic_music_generation_with_python/,https://www.reddit.com/r/Python/comments/1ge68i5/algorithmic_music_generation_with_python/,2024-10-28 16:22:16,26,0.96,26,0,12,0,0,False,False,True,False,False,Showcase,self,t3_1ge68i5
Python,Alternative to async/await without async/await for HTTP,"asyncio is a great addition to our Python interpreters, and allowed us to exploit a single core full capabilities by never waiting needlessly for I/O.

This major feature came in the early days of Python 3, which was there to make for response latencies reaching a HTTP/1 server.

It is now possible to get the same performance as asyncio without asyncio, thanks to HTTP/2 onward. Thanks to a little thing called [multiplexing](https://stackoverflow.com/questions/36517829/what-does-multiplexing-mean-in-http-2).

While you may find HTTP/2 libraries out there, none of them allows you to actually leverage its perks.

The script executed in both context tries to fetch 65 times httpbingo.org/delay/1 (it should return a response after exactly ~1s)

sync+Niquests+http2
```
This process has 1 connection open
This program took 1.5053866039961576 second(s)
We retrieved 65 responses
```

asyncio+aiohttp+http1.1
```
This process has 65 connection open
This program took 1.510358243016526 second(s)
We retrieved 65 responses
```

We would be glad to hear what your insights are on this.
The source in order to reproduce: https://gist.github.com/Ousret/e5b34e01e33d3ce6e55114148b7fb43c

This is made possible thanks to the concept of ""lazy responses"", meaning that
every response produced by a `session.get(""..."")` won't be eagerly loaded.
See https://niquests.readthedocs.io/en/latest/user/quickstart.html#multiplexed-connection for more details.

## What My Project Does

Niquests is a HTTP Client. It aims to continue and expand the well established Requests library. For many years now, Requests has been frozen. Being left in a vegetative state and not evolving, this blocked millions of developers from using more advanced features. 

## Target Audience

It is a production ready solution. So everyone is potentially concerned.

## Comparison

Niquests is the only HTTP client capable of serving HTTP/1.1, HTTP/2, and HTTP/3 automatically. The project went deep into the protocols (early responses, trailer headers, etc...) and all related networking essentials (like DNS-over-HTTPS, advanced performance metering, etc..)

You may find the project at: https://github.com/jawah/niquests 
",Ousret,1gdxqsu,https://reddit.com/r/Python/comments/1gdxqsu/alternative_to_asyncawait_without_asyncawait_for/,https://www.reddit.com/r/Python/comments/1gdxqsu/alternative_to_asyncawait_without_asyncawait_for/,2024-10-28 09:17:32,72,0.84,72,0,18,0,0,False,False,True,False,False,Showcase,self,t3_1gdxqsu
Python,PyCon 2025 web site missing,The PyCon 2025 web site seems to be missing. It just shows the PyCon 2024 dates and details. Any thoughts on whether PyCon 2025 is happening and how to submit a talk proposal would be much appreciated.,HaHaBudBud,1ged6kl,https://reddit.com/r/Python/comments/1ged6kl/pycon_2025_web_site_missing/,https://www.reddit.com/r/Python/comments/1ged6kl/pycon_2025_web_site_missing/,2024-10-28 21:05:07,8,0.9,8,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1ged6kl
Python,Library to speed up developments in your scripts,"Hello everybody, my name is Gabriel and this is my fist library!

***I'm totally open to improvements!***

I created this library to help you develop practically any program, more focused on the automation area, it has functions, for¬†**sending email quickly**, GUI, such as showing a popup with¬†**Tkinter**, functions to use¬†**OpenAI**¬†solutions in a more agile way, such as¬†**GPT**,¬†**Dall-E**¬†and¬†**Whisper**.

There are also functions for processing¬†**Regex**¬†data, and functions for¬†**OCR**¬†and processing¬†**PDF**¬†data, such as splitting or similar.

And more codidian functions, such as converting a file to base64 and vice versa, creating a directory in the current directory, a random sleep for your automations, downloading files with a link, zipping directories and my favorite,¬†**making a colorful and well-organized log with logger and rich**.

I hope you enjoy the library, and if you want to contribute, you can fork it or put it in issues and I'll always take a look when I have time from my main job!

For install the library:

`pip install funcspy`

**Github**:¬†[https://github.com/gabriellopesdesouza2002/funcspy](https://github.com/gabriellopesdesouza2002/funcspy)

**Pypi**:¬†[https://pypi.org/project/funcspy](https://pypi.org/project/funcspy)

# Target Audience

The library's target audience is frustrated developers looking for, for example, simple and quick solutions to OCR, zip a file, make a simple and easy log with just one function, send an e-mail and other routine tasks that can often lead to long conversations with colleagues or the GPT to create a simple function (in the case of OCR, it took me a year for Windows and I learned a lot).

# What My Project Does

It provides a hub of functions to make the developer's day-to-day life easier, from routine tasks such as converting a document into base64 to free OCR using Tesseract.

# Comparison

The closest library I've found that does something similar is `botcity-framework-core`, which combines various functions and features for developing automation tools, but I found it very complex and with a rather high learning curve.  


***This content is not created with ChatGPT rs***

**Cheers from Brazil!**",Extension-Catch-4743,1gefl8s,https://reddit.com/r/Python/comments/1gefl8s/library_to_speed_up_developments_in_your_scripts/,https://www.reddit.com/r/Python/comments/1gefl8s/library_to_speed_up_developments_in_your_scripts/,2024-10-28 22:47:37,4,0.55,4,0,14,0,0,False,False,True,False,False,Showcase,self,t3_1gefl8s
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1geh79w,https://reddit.com/r/Python/comments/1geh79w/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1geh79w/tuesday_daily_thread_advanced_questions/,2024-10-29 00:00:10,6,1.0,6,0,2,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1geh79w
Python,I made a guide on how to debug python using ipdb,"I tried to make it as straight to the point as possible. Let me know what you think and if there‚Äôs another useful python package you‚Äôd like me to check out.

https://youtu.be/EnC9ciDkXqA?si=T-Gm3KfFr-OIgCLN

",jakecoolguy,1gdwo2h,https://reddit.com/r/Python/comments/1gdwo2h/i_made_a_guide_on_how_to_debug_python_using_ipdb/,https://www.reddit.com/r/Python/comments/1gdwo2h/i_made_a_guide_on_how_to_debug_python_using_ipdb/,2024-10-28 07:52:34,24,0.88,24,0,6,0,0,False,False,True,False,False,Tutorial,self,t3_1gdwo2h
Python,Slot Machine Game,"**What My Project Does:**

As the title says it is a slot machine game. However, there are 2 modes:

1. Automatic Mode

**-**¬†comes with a little summary txt of some stats.

2. Manual Mode

  
**Target Audience:**

Pretty much anybody with an ide

  
**Comparison:**

This is actually derived from a base game on BroCode's youtube channel. I thought it was a cool concept and tried to turn it from a relatively simple game to a more in depth game to better my skills. 

Criticism welcomed.

github link -¬†[https://github.com/DaoOfBullshit/slotMachine.git](https://github.com/DaoOfBullshit/slotMachine.git)",Gloomy-Floor-8398,1gedf2z,https://reddit.com/r/Python/comments/1gedf2z/slot_machine_game/,https://www.reddit.com/r/Python/comments/1gedf2z/slot_machine_game/,2024-10-28 21:15:31,1,0.53,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gedf2z
Python,Introducing OpenExcept: the first automatic exception grouping engine,"# About me
I'm an engineer based in SF bay area working at a startup. I have wanted to start a company for a long time, and thus I decided to build something that I know the best and I actually will use. 

# What My Project Does
I built OpenExcept from a need from my work, where I needed to group exceptions and get alerted about sudden increases of certain exception types.

As I work at a startup, this is common - after deployment, lots of exceptions start to show up, but since each of them is slightly different, we cannot get a count of each ""type"" of exception.

Hence I built [OpenExcept](https://github.com/OpenExcept/OpenExcept).
Using this, all slightly different exceptions can be grouped together, and now I can build alerts, analysis on top of the results. 

# Target Audience
It is meant for production, and I plan to use it at my work 

If you find the exception logs overwhelming to deal with, this can be helpful.

The code and architecture can be interesting to anyone interested in AI or observability.

# Comparison 
All existing tools require manual configuration of grouping rules, from Sentry to ELK stack!

Please checkout my Github repo and see how my work is different. 


## Long Term Plans

I plan to build this project for the long term, and later build a company out of it, Grafana or Sentry are my role models. 

The long term mission of OpenExcept is to make all exceptions well handled.

Any suggestions, stars on the [Github repo](https://github.com/OpenExcept/OpenExcept) will be highly appreciated.

Thank you all!!!",Limp_Charity4080,1geo7m7,https://reddit.com/r/Python/comments/1geo7m7/introducing_openexcept_the_first_automatic/,https://www.reddit.com/r/Python/comments/1geo7m7/introducing_openexcept_the_first_automatic/,2024-10-29 06:30:20,0,0.43,0,0,15,0,0,False,False,True,False,False,Showcase,self,t3_1geo7m7
Python,Question about Git repos (Maigret) etc on iOS,"I started out trying to use python but I couldn't figure it out so I went to Lennox couldn't figure that out either now I downloaded a app called Working Copy which seems a bit easier and more for beginners like me, but I just can't figure out how to get the repo running so that I can actually use it to search for usernames. Does anybody have any tips, tricks or videos that would be good for me to watch I'm brand new at all this but it sounds so cool I just wanna figure out how to do it. Thanks",Unable_Tea_2070,1gdz63t,https://reddit.com/r/Python/comments/1gdz63t/question_about_git_repos_maigret_etc_on_ios/,https://www.reddit.com/r/Python/comments/1gdz63t/question_about_git_repos_maigret_etc_on_ios/,2024-10-28 10:57:39,6,0.71,6,0,5,0,0,False,False,True,False,False,Tutorial,self,t3_1gdz63t
Python,SmartProfiler: The All-in-One Solution for Python Performance Insights,"# What My Project Does

SmartProfiler is a lightweight Python library that simplifies profiling your code by providing insights into execution time, memory usage, CPU time, and function call counts. Whether you‚Äôre optimizing performance, debugging, or monitoring function calls in multithreaded applications, SmartProfiler has you covered with minimal setup and overhead.

# Target Audience

SmartProfiler is perfect for:

* **Data Scientists** who need to optimize data processing tasks.
* **Developers** looking to enhance the performance of their applications.
* **Researchers** who require detailed profiling for simulations or computations.
* **Anyone** working with Python who wants to gain insights into their code's performance.

# Comparison

While many profiling tools focus on specific metrics, such as memory or execution time, SmartProfiler uniquely combines:

* **Unified Profiling**: All-in-one solution for profiling time, memory, CPU, and function calls.
* **Thread-Safe**: Specifically designed for multithreaded environments, avoiding race conditions.
* **Minimal Overhead**: Provides accurate profiling with little impact on application performance.

# Key Features

* **Function-Level Profiling**: Easily profile functions with decorators.
* **Code Block and Line Profiling**: Profile specific blocks or lines using context managers.
* **Multithreaded Profiling**: Supports profiling in concurrent applications.
* **Flexible Logging**: Integrates with Python's logging framework for detailed insights.
* **Function Call Tracking**: Count function calls efficiently in a thread-safe manner.

# Example Usage

# Time Profiling for Functions

    from smartprofiler.time import profile_time
    
    @profile_time
    def my_function():
        time.sleep(1)  # Simulate a time-consuming task

# Memory Profiling for Functions

    from smartprofiler.memory import profile_memory
    
    @profile_memory
    def memory_intensive_function():
        data = [1] * (10**7)  # Simulate memory usage

# CPU Time Profiling for Functions

    from smartprofiler.cpu_time import profile_cpu_time
    
    @profile_cpu_time
    def cpu_intensive_function():
        for _ in range(10**6):
            pass

# Function Call Counting

    from smartprofiler.function_tracking import profile_call_count
    
    @profile_call_count
    def my_function():
        print(""Function called"")
    
    my_function()  # Logs: Function 'my_function' has been called 1 times

# Multithreaded Profiling

    import threading
    from smartprofiler.time import profile_time
    
    def thread_function():
        with profile_time:
            time.sleep(1)
    
    threads = [threading.Thread(target=thread_function) for _ in range(5)]
    for t in threads:
        t.start()
    for t in threads:
        t.join()

# Contributing to SmartProfiler

We welcome contributions! Whether it‚Äôs fixing bugs, adding features, or improving documentation, your help is valued.

[https://github.com/vigsun19/smartprofiler](https://github.com/vigsun19/smartprofiler)",Ambitious_Clock9017,1gdjz16,https://reddit.com/r/Python/comments/1gdjz16/smartprofiler_the_allinone_solution_for_python/,https://www.reddit.com/r/Python/comments/1gdjz16/smartprofiler_the_allinone_solution_for_python/,2024-10-27 20:07:59,54,0.87,54,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1gdjz16
Python,"We're thinking of rewriting our go / java API in python, what do we need to think about?","Background: 
We have a horrible hodgepodge of APIs in front of our data platform, java that mostly calls underlying functions in the go (with slightly more user friendly calls). The go API often calls bash scripts to do the actual work. Most of the stuff the API does is building a call for an external service like doing spark submit on the file the user has provided or creating a table in hive with details the user has provided. The java API has swagger and is mostly what all users call. 

One option we have is to rewrite it all in go getting rid of java and bash, write swagger into the go and all the things the java does. 
But we're predominantly a python shop, which means whenever something needs to be done with the APIs only a few people are prepared to go near it and it's recieved very little change over the years where the rest of the platform is moving on rapidly. 

So a few of us are in favour for rewiteing it all in something like fastAPI, (or maybe black sheep?)

From what I understand this would basically give us swagger for free and mean there are a much bigger number of people that could support and run them and give us a much easier parth to the development we want? Anyone done anything similar? What have we not thought about? 

I've read some stuff about fastAPI not actually being that fast when compared to go but actually most of the stuff we do is calling something external that takes a while anyway... 

I welcome any advice here",protazoaspicy,1gdavp9,https://reddit.com/r/Python/comments/1gdavp9/were_thinking_of_rewriting_our_go_java_api_in/,https://www.reddit.com/r/Python/comments/1gdavp9/were_thinking_of_rewriting_our_go_java_api_in/,2024-10-27 13:24:13,113,0.88,113,0,74,0,0,False,False,True,False,False,Discussion,self,t3_1gdavp9
Python,Can I use both CPU and GPU cores simultaeneously?,"I am currently working on an economic model using anaconda and Im kinda new to this.

The simulation is kinda slower than macbook m1 chips where it would take thrice the amount of time to complete the simulation

I am wondering if I can use both gpu (rx6600) and cpu (r7 5700x)  to have as much cores for computing power.

",Hyawa,1gddbc6,https://reddit.com/r/Python/comments/1gddbc6/can_i_use_both_cpu_and_gpu_cores_simultaeneously/,https://www.reddit.com/r/Python/comments/1gddbc6/can_i_use_both_cpu_and_gpu_cores_simultaeneously/,2024-10-27 15:19:38,43,0.77,43,0,48,0,0,False,False,True,False,False,Discussion,self,t3_1gddbc6
Python,Async Rate Limiter for API using credits,"# What My Project Does:

Easily manage rate limits for `async` requests to API using credits, computation unit per second (CUPS) or request units. And also those just counting the number of calls per time unit.

For example, let's consider an API with 3 endpoints. Each one has a different credit cost:

|Endpoint|Credit Cost|
|:-|:-|
|endpoint\_1|10|
|endpoint\_2|25|
|endpoint\_3|80|

Let's say you're allowed to request this API up to 200 credits per second. It's clear that calling the last endpoint will impact the rate limit more than the other ones!

# Using the library to manage this case:

`pip install credit-rate-limit`

    from credit_rate_limit import CreditRateLimiter, throughput
    
    credit_rate_limiter = CreditRateLimiter(200, 1)  # API allows 200 credits per 1 second
    
    (credit_rate_limiter, request_credits=10)  # costs 10 credits to call
    async def request_endpoint_1():
        """""" call endpoint_1 """"""
    
    (credit_rate_limiter, request_credits=25)  # costs 25 credits to call
    async def request_endpoint_2():
        """""" call endpoint_2 """"""
    
    (credit_rate_limiter, request_credits=80)  # costs 80 credits to call
    async def request_endpoint_3():
        """""" call endpoint_3 """"""

# Optimization:

`CreditRateLimiter` has an `adjustement` parameter that can be used to ""speed up"" the requests (to some extent). A higher value means better performances, but also a higher risk of being rate limited by the API. See doc for more details.

# Rate limiter based on number of request per time unit:

CountRateLimiter can be used in a similar way to manage such rate limits.

# Target Audience:

Python developers that uses async libraries to request API(s) enforcing rate limits based on credits or computation cost per time unit.

# Comparison:

I couldn't find an asynchronous Python rate limiter for an API that uses credits (or CUPS or RU ...), though [aiolimiter](https://github.com/mjpieters/aiolimiter) has an interesting mechanism to count some requests as ""heavier"" or ""lighter"".

But the main difference with this lib is the following: `credit-rate-limit` works out of the box, and you can optimize it only if you wish, while `aiolimiter` needs to be optimized in order to work. In other words, if you configure the libs with  the official API rate limit, the later will be rate limited under heavy load, while the former won't ...

Other async rate limiters (so based on request count) often turn async requests into synchronous ones at a fixed frequency, thus penalizing bursts of requests that stay under the limits.

# Where to find more:

[Code and Documentation](https://github.com/Elnaril/credit-rate-limit)

[PyPI package](https://pypi.org/project/credit-rate-limit/)

# Closing Words:

I would love to hear what you think about it, how it does compare with what you use at the moment! :)",E_l_n_a_r_i_l,1gdzn3c,https://reddit.com/r/Python/comments/1gdzn3c/async_rate_limiter_for_api_using_credits/,https://www.reddit.com/r/Python/comments/1gdzn3c/async_rate_limiter_for_api_using_credits/,2024-10-28 11:25:47,1,0.67,1,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1gdzn3c
Python,Looking for Python workshop (3-5 days),"Hi,

I am looking for an introductory python workshop.
Preferred duration 5 days or less.

Location is flexible (work will cover travel) but it has to be live in-person. No online offerings, and taught in English.

I would appreciate any recommendations.

",Scary-Perspective882,1ge6b2j,https://reddit.com/r/Python/comments/1ge6b2j/looking_for_python_workshop_35_days/,https://www.reddit.com/r/Python/comments/1ge6b2j/looking_for_python_workshop_35_days/,2024-10-28 16:25:07,0,0.44,0,0,11,0,0,False,False,True,False,False,Resource,self,t3_1ge6b2j
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1gdoyr5,https://reddit.com/r/Python/comments/1gdoyr5/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1gdoyr5/monday_daily_thread_project_ideas/,2024-10-28 00:00:10,5,0.79,5,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gdoyr5
Python,Developing a Python-based Graphics Engine: Nirvana-3D,"Hello community members,

\[Crossposted from:¬†[https://www.reddit.com/r/gamedev/comments/1gdbazh/developing\_a\_pythonbased\_graphics\_engine\_nirvana3d/](https://www.reddit.com/r/gamedev/comments/1gdbazh/developing_a_pythonbased_graphics_engine_nirvana3d/)¬†\]

I'm currently working in GameDev and am currently reading and working on a 3D Graphics/Game Engine called:¬†**Nirvana 3D**, a game engine totally written from top to bottom on Python that relies on¬†`NumPy`¬†Library for matrices and¬†`Matplotlib`¬†for rendering 3D scenes and¬†`imageio`¬†library for opening image files in the¬†`(R, G, B)`¬†format of matrices.

Nirvana is currently at a¬†*very nascent*¬†and¬†*experimental*¬†stage that supports importing¬†`*.obj`¬†files, basic lighting via sunlights, calculation of normals to the surface, z-buffer, and rendering 3D scenes. It additionally supports basic 3D transformations - such as¬†*rotation, scaling, translations*, etc, with the support of multiple cameras and scenes in either of these three modes -¬†`wireframes`,¬†`solid`¬†(lambert),¬†`lambertian`¬†shaders, etc.

While it has some basic support handling different 3D stuff, the Python code has started showing its limitations regarding speed - the rendering of a single frame takes up to 1-2 minutes on the CPU. While Python is a very basic, simple language, I wonder I'd have to port a large part of my code to GPUs or some Graphics Hardware languages like¬†*GLES/OpenCL/OpenGL/Vulcan*¬†or something.

I've planned the support for PBR shaders (Cook-Torrance Equation, with GGX approximations of Distribution and Geometry Functions) in solid mode as well as PBR shaders with HDRi lighting for texture-based image rendering and getting a large part of the code to GPU first, before proceeding adding new features like caching, storing-pre-computation of materials, skybox, LoD, Global Illumination and Shadows, Collisions, as well as basic support for physics and sound and finally a graphics based scene editor.

Code:¬†[https://github.com/abhaskumarsinha/Nirvana/tree/main](https://github.com/abhaskumarsinha/Nirvana/tree/main)

Thank You.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

* **What My Project Does:** Nirvana 3D aims to become a real-time 3D graphics rendering/Game engine in the near future that is open source and has minimal support for the development of any sort of games, especially the indie ones, with minimal support for realistic graphics and sound.
* **Target Audience**: It is currently a toy project that is experimental and pretty basic and simple for anyone to learn game dev from, but it aims to reach a few Python devs that make some cool basic games like Minecraft or something out of it.
* **Comparison**: Most of the game engines in the market don't really have support for Python in general. The engines are coded in C/C++ or some very low-level language, while the majority of the audience who seek to make games. Gamedev is a way to express oneself in the form of a story/plot and game for most of indie gamers, who don't have a lot of technical idea of the game and C/C++ isn't suitable for it.",Doctrine_of_Sankhya,1gdbl5l,https://reddit.com/r/Python/comments/1gdbl5l/developing_a_pythonbased_graphics_engine_nirvana3d/,https://www.reddit.com/r/Python/comments/1gdbl5l/developing_a_pythonbased_graphics_engine_nirvana3d/,2024-10-27 14:00:21,24,0.91,24,0,18,0,0,False,False,True,False,False,Showcase,self,t3_1gdbl5l
Python,üîÆBlackjack Strategy Simulator: The Most Comprehensive Open-Source Tool for Blackjack Analysis! üîÆ,"The **Blackjack Strategy Simulator** is a powerful tool for simulating every possible blackjack scenario to help users find the best move in any situation.

## What My Project Does

It allows you to:

* **Generate custom basic strategy tables** for various rule sets, including card splits and surrender options.

* **Simulate and analyze expected value (EV)** to understand the profitability of different strategies.

* **Calculate the best possible action** for any hand, considering complex rules and deck compositions.

* **Create advanced strategies** that adapt based on card counting or pre-set strategies.

## Comparison to Existing Alternatives

The **Blackjack Strategy Simulator** stands out in a few key areas:

* **Customization:** Unlike many online blackjack calculators, this simulator allows users to configure various game rules, including the number of decks, dealer behavior on soft 17, and advanced options like card counting deviations.

* **Detailed Analysis:** The tool provides a more thorough analysis than most basic calculators, considering complex scenarios such as multiple splits and custom deck compositions.

* **Open-Source Flexibility:** As an open-source project, it is highly customizable, with support for additional strategies and rule sets. Existing alternatives often lack this level of flexibility and transparency.

This tool offers a detailed approach to blackjack analysis by simulating millions of hands with high accuracy and multiple configurations.

## Target Audience

The Blackjack Strategy Simulator is for  Programmers who want to learn about simulations and probability, researchers and educators interested in statistical analysis and game theory, casual developers looking to experiment with an open-source Python project.

While the project is highly customizable and versatile, it is intended primarily for educational and research purposes, not for production in gambling environments.

üåü **Check out the project on** [**GitHub**](https://github.com/AttackingOrDefending/Blackjack-Strategy-Simulator)**, give it a star if you find it interesting, and feel free to contribute or suggest improvements!**",Born-Programmer-6103,1gdg3e9,https://reddit.com/r/Python/comments/1gdg3e9/blackjack_strategy_simulator_the_most/,https://www.reddit.com/r/Python/comments/1gdg3e9/blackjack_strategy_simulator_the_most/,2024-10-27 17:20:25,6,0.69,6,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gdg3e9
Python,How did you first learn about Python?,"How did all of you stumble upon python? I saw someone writing python in RuneScape one day and became curious. Then I dipped into front end frameworks like html and css, then JavaScript and python",Luxykid,1gcwcex,https://reddit.com/r/Python/comments/1gcwcex/how_did_you_first_learn_about_python/,https://www.reddit.com/r/Python/comments/1gcwcex/how_did_you_first_learn_about_python/,2024-10-26 22:14:32,37,0.75,37,0,69,0,0,False,False,True,False,False,Discussion,self,t3_1gcwcex
Python,I need some tips with a password entry program for the 1602 lcd screen on a raspberry 4 ,"Hi

I would like the the lcd to display ""please enter password"" then disguise it as \* on the lcd number by number. all my code does at the minute is ask for password in idle then give a correct or try again on the lcd

`from RPLCD.i2c import CharLCD`

`import getpass`

`import time`

`# Initialize the LCD` 

`lcd = CharLCD('PCF8574', 0x27)`

`# Predefined correct password`

`correct_password = ""0000""`

`# Function to display disguised password and wait for correct input`

`def check_password():`

`while True:`

`password = getpass.getpass(prompt='Enter your password: ')`

`lcd.write_string(""Enter Your Password: "")`

`disguised_password = '*' * len(password)`

`lcd.clear()`

`lcd.write_string(disguised_password)`

`if password == correct_password:`

`lcd.clear()`

`lcd.write_string(""Password correct"")`

`else:`

`lcd.clear()`

`lcd.write_string(""Try again"")`

`time.sleep(2) # Wait for 2 seconds before next attempt`

`# Call the function`

`check_password()`

hope someone can advise me",OperationThen4257,1gdqbty,https://reddit.com/r/Python/comments/1gdqbty/i_need_some_tips_with_a_password_entry_program/,https://www.reddit.com/r/Python/comments/1gdqbty/i_need_some_tips_with_a_password_entry_program/,2024-10-28 01:07:35,0,0.4,0,0,1,0,0,False,False,True,False,False,Discussion,self,t3_1gdqbty
Python,AKS primality test,"I just finished writing an implementation of the AKS primality test.

# What my project does
The project implements the AKS primality test, the first deterministic prime test that can be run in polynomial time. (although this implementation may not run in polynomial time because of implementation inefficiencies)

# Target audience
Absolutely no one. The point of AKS is its the first polynomial time primality test that can deterministically determine if any given number is prime or composite, however in practice, its much slower than everything else.

# Comparison
Much worse than other primality tests, to the point of being completely unusable (takes about 1.6s to check if 1009 is a prime)

https://github.com/somehybrid/aks",SomeHybrid0,1gd18w8,https://reddit.com/r/Python/comments/1gd18w8/aks_primality_test/,https://www.reddit.com/r/Python/comments/1gd18w8/aks_primality_test/,2024-10-27 02:37:53,13,0.82,13,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1gd18w8
Python,Configuration format,"I currently use JSONs for storing my configurations and was instead recommended YAML by a colleague. I tried it out, and it looks decent. Big fan of the ability to write comments. I want to switch, but wanted to get opinions regarding pros and cons from the perspective of file size, time taken to read/write and how stable are the corresponding python libraries used to handle them.

My typical production JSONs are ~50 MB. During the research phase, they can be upto ~500 MB before pruning.",Messmer_Impaler,1gcq5rg,https://reddit.com/r/Python/comments/1gcq5rg/configuration_format/,https://www.reddit.com/r/Python/comments/1gcq5rg/configuration_format/,2024-10-26 17:24:37,70,0.88,70,0,75,0,0,False,False,True,False,False,Discussion,self,t3_1gcq5rg
Python,CPython Software Bill Of Materials ,"There are many tools to generate source SBOMs for Python projects. I was wondering if there are details about how CPython generates their source SBOM.
",kikofernandez,1gdhvnr,https://reddit.com/r/Python/comments/1gdhvnr/cpython_software_bill_of_materials/,https://www.reddit.com/r/Python/comments/1gdhvnr/cpython_software_bill_of_materials/,2024-10-27 18:37:26,0,0.33,0,0,1,0,0,False,False,True,False,False,Discussion,self,t3_1gdhvnr
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1gcygl6,https://reddit.com/r/Python/comments/1gcygl6/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1gcygl6/sunday_daily_thread_whats_everyone_working_on/,2024-10-27 00:00:11,11,0.87,11,0,13,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gcygl6
Python,problem with matplotlib and vscode. Online fixes haven't worked.,"dear all,

first post on this subreddit.

I'm using vscode locally. Already updated matplotlib and PyQt6. But nothing happens. I don't get an error message, Nothing.

ON vscode's web version this is the error I get:  
matplotlib UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown plt.show()

what can I do?  
I was going through a matplotlib tutorial and haven't been able to plot anything because of this.

any input is appreciated!

I was writing code from a matplotlib tutorial, I copied/pasted the code

    import sys
    import matplotlib
    matplotlib.use('Agg')
    
    import matplotlib.pyplot as plt
    import numpy as np
    
    xpoints = np.array([0, 6])
    ypoints = np.array([0, 250])
    
    plt.plot(xpoints, ypoints)
    plt.show()
    
    #Two ¬†lines to make our compiler able to draw:
    plt.savefig(sys.stdout.buffer)
    sys.stdout.flush()  
    
    ",LoquatWooden1638,1gd17dz,https://reddit.com/r/Python/comments/1gd17dz/problem_with_matplotlib_and_vscode_online_fixes/,https://www.reddit.com/r/Python/comments/1gd17dz/problem_with_matplotlib_and_vscode_online_fixes/,2024-10-27 02:35:26,4,0.59,4,0,21,0,0,False,False,True,False,False,Discussion,self,t3_1gd17dz
Python,A fun use of itertools in gamedev,"
For the last 3/4 years I've been working on [this game](https://store.steampowered.com/app/3122220/Mr_Figs) in Python/Pygame

There's a lot of puzzling mechanics and tight movements required which got me to thinking of some hazards I could put in the game.

Anyway, fast forward a bit and I have one particular hazard which you can see here:

https://i.imgur.com/swY30rB.mp4

If that hurts your head, there's a simpler ""up/down"" version here

https://i.imgur.com/yE7LZGa.gif

While doing these I realised it was just cycling (a very obvious clue) through a list of different vectors. Which brought me to my favourite but often-unused module... `itertools`!

### `itertools.cycle` to the rescue!

When I saw this pattern I realised I could finally indulge myself and use `itertools.cycle`. I love the itertools modules but usually never get to use them in my day-to-day. 

For those not in the know, itertools.cycle describes itself as this (paraphrased for brevity)

&gt; Make an iterator returning elements from the¬†iterable. Repeats indefinitely

In the first example we're just cycling through a version of a circle 


    [ 
      [1,0],   # right
      [0, 1],  # down
      [-1,0],  # left
      [0, -1]  # up
    ]

and then applying the result to our movement and then waiting for N seconds.

To break it down, the first time it cycles through, it goes right. Then down, then left and finally, up. It then starts all over.

The second example is a lot simpler to grasp. It's just up/down (`[0, -1], [0, 1]`)

### How does this data get passed through?

This is perhaps a bit off-topic but I'd want to know if I was reading this.

I'm against storing stuff in code as much as possible so I use the TiledMapEditor for all my levels and enemy data.

Using our cycling behaviour is as simple as passing it through in the editor

i.e.

https://i.imgur.com/2zFInoP.png

Anyways, there's a few other times I've used itertools in this game (railways and other hazards being a few) but they're more complex to go through. Perhaps another time or if this get's a lot of love.

More than anything I just wanted to shine a light on one of the best modules that doesn't get enough attention.

Thanks and godbless itertools! 

:)",mr-figs,1gch0qm,https://reddit.com/r/Python/comments/1gch0qm/a_fun_use_of_itertools_in_gamedev/,https://www.reddit.com/r/Python/comments/1gch0qm/a_fun_use_of_itertools_in_gamedev/,2024-10-26 09:10:54,69,0.9,69,0,15,0,0,False,False,True,False,False,Discussion,self,t3_1gch0qm
Python,I created a Django rest framework package for MFA/2FA,"

I'm excited to announce the release of drf-totp, a package that brings Time-Based One-Time Password (TOTP) Multi-Factor Authentication (MFA) to the Django Rest Framework.

What My Project Does

drf-totp provides a simple and secure way to add an extra layer of authentication to your API endpoints, protecting your users' accounts from unauthorized access. With this package, you can easily integrate TOTP MFA into your Django Rest Framework project, supporting popular authenticator apps like Google Authenticator and Authy.

Key Features

1. Easy integration with Django Rest Framework
2. Supports popular authenticator apps like Google Authenticator and Authy

Target Audience

drf-totp is designed for developers and teams building secure API-based applications with Django Rest Framework. This package is suitable for production environments and can be used to add an extra layer of security to existing projects or new applications.

Comparison

While there are other MFA solutions available for Django, drf-totp is specifically designed for the Django Rest Framework and provides a seamless integration experience. Unlike other solutions that may require extensive configuration or customization, drf-totp is easy to set up and use, making it an ideal choice for developers who want to add TOTP MFA to their API endpoints quickly and securely.


Check out the GitHub repo for installation instructions and example usage: https://github.com/mohamed-alired/drf-totp",djv-mo,1gcl0hk,https://reddit.com/r/Python/comments/1gcl0hk/i_created_a_django_rest_framework_package_for/,https://www.reddit.com/r/Python/comments/1gcl0hk/i_created_a_django_rest_framework_package_for/,2024-10-26 13:24:37,27,0.85,27,0,0,0,0,False,False,True,False,False,Discussion,self,t3_1gcl0hk
Python,BugGPT: OpenAI powered security vulnerable web app generator!,"**Introducing BugGPT: Your Ultimate Training Ground for Bug Bounty Hunting and Secure Development**

**‚ú® What My Project Does**

Harnessing the power of OpenAI's cutting-edge o1 reasoning model, **BugGPT** crafts intentionally vulnerable web applications tailored for:

- **Bug Bounty Hunters:** Hone your skills by tackling realistic and diverse security challenges.
- **Software Developers:** Learn best practices to identify and prevent common vulnerabilities in your projects.

**BugGPT** is organized into **""rooms""**‚Äîeach room is a named and numbered folder that includes:
- A vulnerable Flask application ready for testing.
- A comprehensive Markdown document that:
- Explains the specific vulnerability.
- Guides you through the exploitation process.
- Provides best practices to help developers avoid similar flaws in their own code.

To keep the challenges fresh and engaging, BugGPT uses **GitHub Actions** to automatically generate new rooms periodically, ensuring a continuously growing repository of learning opportunities.

**üéØ Target Audience**

- **Bug Bounty Hunters:** Practice finding and exploiting vulnerabilities in a safe, controlled environment that mirrors real-world scenarios.
- **Students and Learners:** Enhance your cybersecurity skills with hands-on experience without the pressure of real-world stakes.
- **Amateur and Professional Developers:** Strengthen your code by understanding and implementing security best practices, paving the way for a more secure development journey and career.

**üîç Comparison**

**BugGPT** is designed to complement and even surpass existing platforms like PortSwigger and Hack The Box by offering:

- **Free Access:** Open to everyone, lowering the barrier to entry for aspiring security professionals and developers.
- **Constantly Growing Content:** Regular updates ensure a wide variety of challenges, keeping your learning experience dynamic and comprehensive.
- **Developer-Centric Resources:** Beyond just exploitation, BugGPT emphasizes teaching developers how to prevent vulnerabilities, bridging the gap between offense and defense in cybersecurity.

**üí¨ I‚Äôd love to hear your thoughts and feedback! Let‚Äôs build a safer and more knowledgeable community together.**

https://github.com/Trivulzianus/BugGPT
",dvnci1452,1gddc3y,https://reddit.com/r/Python/comments/1gddc3y/buggpt_openai_powered_security_vulnerable_web_app/,https://www.reddit.com/r/Python/comments/1gddc3y/buggpt_openai_powered_security_vulnerable_web_app/,2024-10-27 15:20:38,0,0.25,0,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1gddc3y
Python,Fast Prime calculating program,I cheated a program to calculate prime numbers up to very large limit and till now it have been calculated Prime till 1 billion in just 6.8 seconds and till 10 billion 68 seconds,Rude-Perspective-113,1gde4a0,https://reddit.com/r/Python/comments/1gde4a0/fast_prime_calculating_program/,https://www.reddit.com/r/Python/comments/1gde4a0/fast_prime_calculating_program/,2024-10-27 15:55:27,0,0.23,0,0,13,0,0,False,False,True,False,False,News,self,t3_1gde4a0
Python,This is now valid syntax in Python 3.13!,"There are a [few changes that didn't get much attention](https://www.bitecode.dev/p/python-313-what-didnt-make-the-headlines) in the last releases, and one of them is that comprehensions and lambdas can now be used in annotations (the place where you put type hints).

As the article mentions, this came from a bug tickets that requested this to work:

    class name_2[*name_5, name_3: int]:
        (name_3 := name_4)
    
        class name_4[name_5: name_5]((name_4 for name_5 in name_0 if name_3), name_2 if name_3 else name_0):
            pass

  
Here we have a walrus, unpacking, type vars and a comprehension all in one. I tried it in 3.13 (you gotta create a few variables), and yes, it is now valid syntax.

I don't think I have any use for it (except the typevar, it's pretty sweet), but I pity the person that will have to read that one day in a real code base :)



  
",alicedu06,1gbu1g0,https://reddit.com/r/Python/comments/1gbu1g0/this_is_now_valid_syntax_in_python_313/,https://www.reddit.com/r/Python/comments/1gbu1g0/this_is_now_valid_syntax_in_python_313/,2024-10-25 13:18:15,431,0.89,431,0,250,0,0,False,False,True,False,False,News,self,t3_1gbu1g0
Python,"datamule: download, parse, and construct structured datasets from SEC filings","Link: [https://github.com/john-friedman/datamule-python](https://github.com/john-friedman/datamule-python)

# What my project does

1. Download SEC filings quickly. (Bulk downloads are also available, benchmark is \~2 min/year for every 10-K/10-Q since 2001
2. Parse SEC filings quickly. (Currently only 8-K, 13F-HR Information tables are implemented. 10-K/10-Q coming next week)
3. Convert SEC textual filings directly into structured datasets.
4. Watch for new filings.
5. Has a basic tool calling chatbot with artifacts. Doesn't do anything useful yet, but was fun to make.

# Target Audience

Grad students looking to save money on expensive datasets, quants with side projects, software engineers looking to build commercial projects, and WSB people trying fun new trading strategies. In the future I'd like to make the chatbot code a bit cleaner so it can be used as a tutorial project for masters students w/ finance but not programming experience.

# Comparison

Getting SEC data in bulk is surprisingly expensive. Parsed SEC data is even more [expensive](https://docs.cybersyn.com/foundations/sources/sec/). Derived datasets such as board of directors data is also expensive (something like 35k/license).

# Contribution

Greatly appreciated. Also SEC feature requests + QoL suggestions are very useful.

Links: [https://github.com/john-friedman/datamule-python](https://github.com/john-friedman/datamule-python)

EDIT: 10-K and 10-Q parsing implemented.",status-code-200,1gc7yac,https://reddit.com/r/Python/comments/1gc7yac/datamule_download_parse_and_construct_structured/,https://www.reddit.com/r/Python/comments/1gc7yac/datamule_download_parse_and_construct_structured/,2024-10-25 23:37:18,25,0.94,25,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1gc7yac
Python,"Flask Password Manager: web based, multiple users, and encrypted password storage","**Password Manager**

I have been doubtful of storing my passwords in spread sheets. The lack of security and encryption is not a good practice. Finding the right login information can be a little difficult due to the need to look through all of my website urls.  
In my spare time I created a password manager. The password manager was developed with Python 3.11, Flask, and Sqlite3. The bulk of the processing is done on the backend, one draw back to this is less security; I figured I would be running it locally and didn't need to worry.

**What My Project Does**

The password manager works as a web server or local application. The password manager stores a users username and password pair in a Sqlite database as a set of identity, salt, and verifier; I was planning on using SRP but didn't think the effort was worth it, maybe in the future though. The password manager encrypts passwords for the user so they can be retrieved for later use.

**Target Audience**

* Python users
* Personal development

**Comparison**

The password manager is not the most secure. I didn't want to spend to much time on this. The decryption key and access token is encrypted and stored in a client side cookie. Encryption and decryption is handled by the server. The plaintext password reaches the server backend. The password manager has almost no Javascript, I hope to implement JS in the future.

**Repository**

* [https://github.com/konsoleSam/password-manger](https://github.com/konsoleSam/password-manger)

The password manager was a good learning project. Please let me know what you think. Do you have any ideas to improve this?",Necessary_Log9841,1gcdjmi,https://reddit.com/r/Python/comments/1gcdjmi/flask_password_manager_web_based_multiple_users/,https://www.reddit.com/r/Python/comments/1gcdjmi/flask_password_manager_web_based_multiple_users/,2024-10-26 04:54:52,8,1.0,8,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1gcdjmi
Python,Every unicode character can be a variable name in globals and locals,"Hello. Reading about [walrus operator ](https://realpython.com/python-walrus-operator/)I've seen œÜ used as a variable. That defied my knowledge (\_, a-z, A-Z, 0-9), and I thought ""if œÜ is valid, why üçÜ isn't?"".

After a bit of try, I've come up with this.

    initial = 127810
    for i in range(10):
    ¬† ¬† variable = chr(initial + i)
    ¬† ¬† locals()[variable] = f""Value of {variable} is {ord(variable)}""
    print(locals().get(""üçÜ""))

Getting

    Value of üçÜ is 127814

Therefore, üçÜ can be a variable in Python (in globals and locals). But also horizontal tab, backspace, null character, ... can be. Of course, they are not accessible in the code the same way than œÜ or hello\_world, but still it's a nice gimmick. I hope you find it fun and/or useful.

But now the real thing. In this context, do you know if using backspace or null as a variable in globals could break the program in execution time? Thank you.

",no_PlanetB,1gc2gmg,https://reddit.com/r/Python/comments/1gc2gmg/every_unicode_character_can_be_a_variable_name_in/,https://www.reddit.com/r/Python/comments/1gc2gmg/every_unicode_character_can_be_a_variable_name_in/,2024-10-25 19:25:04,39,0.74,39,0,10,0,0,False,False,True,False,False,Discussion,self,t3_1gc2gmg
Python,Single line turns the dataclass into a GUI/TUI &amp; CLI application ,"I've been annoyed for years of the overhead you get when building a user interface. It's easy to write a useful script but to put there CLI flags or a GUI window adds too much code. I've been crawling many times to find a library that handles this without burying me under tons of tutorials.

Last six months I spent doing research and developing a project that requires low to none skills to produce a full app out of nowhere. Unlike alternatives, mininterface requires almost nothing, no code modification at all, no learning. Just use a standard dataclass (or a pydantic model, attrs) to store the configuration and you get (1) CLI / config file parsing and (2) useful dialogs to be used in your app.

I've used this already for several projects in my company and I promise I won't release a new Python project without this ever again. I published it only last month and have presented it on two conferences so far ‚Äì it's still new. If you are a developer, you are the target audience. What do you think, is the interface intuitive enough? Should I rename a method or something now while the project is still a few weeks old?

[https://github.com/CZ-NIC/mininterface/](https://github.com/CZ-NIC/mininterface/)",the-e2rd,1gbprvv,https://reddit.com/r/Python/comments/1gbprvv/single_line_turns_the_dataclass_into_a_guitui_cli/,https://www.reddit.com/r/Python/comments/1gbprvv/single_line_turns_the_dataclass_into_a_guitui_cli/,2024-10-25 08:54:34,190,0.99,190,0,53,0,0,False,False,True,False,False,Showcase,self,t3_1gbprvv
Python,Pixel-map: A Python CLI tool for plotting geo files in the terminal,"# What My Project Does

[**Pixel-map**](https://github.com/RaczeQ/pixel-map) displays geo data in the terminal. It can be used to quickly look into the geospatial data without opening a notebook, generating HTML maps or using tools like [kepler.gl](https://kepler.gl/).

GitHub: [https://github.com/RaczeQ/pixel-map](https://github.com/RaczeQ/pixel-map)

PyPI: [https://pypi.org/project/pixel-map/](https://pypi.org/project/pixel-map/)

Since I can't embed images in this post, I can only show you the Black and White modes of the library.

ASCII renderer `ascii-bw`:

    $ pixel-map arc-de-triomphe.parquet -r ascii-bw --width 82 --height 43 --no-bg
    ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ arc-de-triomphe.parquet ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†@@L_ ¬†jr ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† &lt;p,=L ,= ¬†,,,_ ¬†jL _q ,,jk ¬†,_r_ ¬†,@QQ@y_B,_ ¬† [u/pu__](https://www.reddit.com/u/pu__) ¬† ¬† ¬†,.,y ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† `QL3[[jL""E""[""@yS`P""y0QHL3dG8 ¬† ""dQL""Q9QF^QQqd ¬† @^hY]P}pq,_ ` ` ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† 9L""QL2L""[""h P"" ¬†""k2/k3L8GQ ¬† @,3QQL^""@y@QD` ¬†@""D\*]@9,jp""`ay_ ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† -C8"",`SnDL""P""y@3L ¬†`bjDr@`[3L ¬†@]h/h]Q,5[0@` ¬†[u/L](https://www.reddit.com/u/L)[V\@3Gh0"" y@""uP0y ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†@`jRh_9F"",pR\JDGL ¬†`QQ}""\J/, ¬†3LjJL""QDj/0` ¬†p,""\d@b@P"" yPPdG_q[ ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† y]P"",u@["", \""u@F, 6 VDFULy} ¬†-/0[Y9_3[@ ¬† jE0P ,@[JQuQ[`][]@D""` ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†?""y@L}QQb][j}jd""yDL ¬† \]FyF@ ¬† DL""b""d\"""" ¬†jh_jQQQQ[}QL~^b@P""` ¬† ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ""*6yE__{}y[]V`/PD""k ¬† ""/DQ@L ¬†@""b_\J@F ¬†jCj]3R@F9Hb_2@P"" ¬† _yL ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† __ ¬†""^0@E,jF_d/9LZPb ¬† 3S]jL ¬†][[jL""F ¬†j[]E]@[,___dP"" ¬† ,q8P^@L ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬†""^hy_ ¬†""^"",Q""P9S/@Rj ¬† 3QEk ¬†^hPRQF ¬†,,__""""""^PPP"" ¬† ,qD\Du) E"" ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†_ay_ ¬†"""" ¬† ¬† """"RQuj@[ER_ ``,j ¬†`b,qr ¬†~Q[QR[[DF ¬† _,,___""""^*PRF ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† uF]Fju_ ¬† ¬† ¬† ¬† `""SQp""._ ¬†`"" ¬† ¬†`` ¬†J[ ""JD""` ¬†_udR[3[]""QDF,pc ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†,c_F.@QD]hy, ¬† ¬† ¬† ¬†` ^9"" ¬† ¬† ¬†,_ ¬† ¬† ""P"" ¬† _y@QL ]@nF]D"",jjpq ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†_SFjn,""90DyFjhu,_ ¬† ¬† `PP0nquy,pQQhu, ¬† ¬†_-3QQQQ[p@D0P"" """"""` ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† q""h_5y]EJL,""j[""@\P@0 _ ¬† ¬† ¬† ¬† ``""""""9PPR ¬†7m """"""` ¬† ¬† ¬† ¬† ¬† _,,u ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†""PP^`""""` ¬† `""^hq{,[JJL ¬† ¬† ¬† ¬† @p ¬† ¬† ¬† ¬† ¬† ¬†___, ¬†yyMP9QQp_""O"" ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ~ ¬† ¬† ¬† ¬† ¬† ¬† ` ¬† ¬† ¬† ¬† ¬† ¬†d@"" ¬† ¬† ¬† ¬† p^]DQP""yn,""^0CjQQ[@ _ ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†_ ,, ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†""`4P_yjQQQQRp,_^0@""j[ ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† _q[""LJ^ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†`""9QQ@[,@Q[Qp _^F ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ,d""_jP"" ¬†_y_ ¬† ¬† ¬† ¬† ¬† ¬† _y_ ¬† ¬† ¬† ¬† """"98@uQ@""jE""=y ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† _ ,,,yppML""QP"" _y@`_ ]k ¬† ¬† ¬† ¬† ¬† ¬†`F_d@h_ ¬† ¬† ¬† ¬† `""9""yu@PQD ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ""P"" `]Q[`\@P"" _y0QJ`jD@y ¬† 0PNL ¬†E3 ¬† ¬†""98@QQQy,_ ¬† ¬† ¬† ¬† ""90@` ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† u[]bP"" _yQP""B]`/@u8 ¬† p_u, ¬† jq@L ¬† Qy ""^0@QQDp,_ ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬†,_y@P"" ,uPGL/Q@j""/U/D ¬† @``jF_ ¬†J[,XL ¬† 8Qu9p,""^9@F_pq,_ ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†,,dP"" ,qh_\jy""?Ej""/Q[}` ¬†@L_jF,@ ¬† [=[jL ¬† 9h]QQPQr__^h[_}Qr,_ ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†`"" ,pQFj]7y""QRjP\/}u0` ¬†dP@QF,@` ¬† @3 )@k ¬† 5L`]P`yQdRq,_^F,@@ ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†,pRZ]y7[[ ,0L3F,Eyh@` ¬†""98@F,@`dL ¬†5JPSu@b ¬† 3P`yDG[_p,_]F,L""9 ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† R_2p0QQQh{U[_j^/[^jQ` ¬†au_ ¬† @""/U[ ¬†jy=p _uu ¬† ¬†""^""yQ]@b ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†""9L_]N[9@uR/,dD9b@` ¬† @QQF,y`JQQ@ ¬†JP""y0jcjL ¬† 5QQDQQQP_,3QQPQL ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬†""[ `/hZ@F,[}/""@"" ¬†_@QQP,@""jL.^0 ¬† qF``jD`/k ¬† @_@^@F,B] SQyd[ ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† fh`h[h_p""y[,E""@"" ¬†jP0QP @FjhF&lt;P ¬† ¬†[__@F,D)dL ¬†`E@D`jP,dh @QQ[ ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†-`/@,"""""" `""RP""9"" ¬†?P`^P """" Y^r /Q[ ¬†?`P` ""uF.P ¬† JF """" \j"" ""WP^ ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬†` ¬† ¬† `""jdQQQb ¬† ¬† ` ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† `` ¬† ¬†` ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†"" ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬†-~-.._/ `""D` ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†` ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ BBOX: 2.28710,48.86877,2.30167,48.87835 | MAP W:80 H:40 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
    
    $ pixel-map --example monaco_buildings -r ascii-bw --no-bg --width 82 --bbox 7.4185,43.7325,7.4222,43.7352
    ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ monaco_buildings.parquet ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
    ‚îÉ/[[ ¬†8qqQQ[ """" ¬†@QQP` _ ¬†` ¬† ¬†]DDP""""""@QL ¬†]QL ¬†J@[ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉQQ[ yu ]QQL ¬† y,^P"" ,@QP ¬†,@L ¬†yuqy ¬†]QB ¬† @B ¬† @} ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉQQ`_""""_jQ@ ¬† JQQF ¬†_9@"" ¬†,""Q[ ¬†@QQ@ ¬†"""""" ¬† ]QQ@E__ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉQ[ @L`QQQ@ ¬† d@"" ,/0@r ¬†/PhQ[ ¬†]Q@` ¬† BPP ¬†`""JQ@` ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉQ[ @^L7QQ@ ¬† 9F upQb` ,@P`,Q[ ¬†`"""" ¬† ¬† j@ ¬† ¬†JPP~pc ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉQ[ @u@ 4QF ¬† q@_ 5P` yQE` ¬†PR ¬† ,,uuqc_____,,uuqdQ[ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉqq @QP""`f ¬†_ ]QQL ¬†_/^[__ ¬†@ ¬† @QQ@@DDDRPPP^"""""""""""" ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ""P ^j[ ¬† ¬† "" `QP ¬†,@@B DRPF"""" ¬† ` ¬† ¬† ¬† ¬†,,. ¬†___,uy ¬† ¬† ¬† ¬† ¬†F ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ ¬† JQQL, ¬†y ¬† "" ¬† ¬† ¬† ¬† ¬† ¬†,,u. J@@QQ[J@[@Q[ ¬†]QQQQ@ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬†@Q[ ¬† ¬† ¬† ¬† ¬†,yuqqq3@Q@DQQE ¬†PPP^"" ¬† `` ¬† JQQQQQL ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬†7Q@ ¬†5@ @L@[ JQ""""J@UQQL,@@L ¬†,_,, ¬† ¬† ¬† ¬† ¬†@QQQQ@ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† {@L ]QL3k]@ ¬†@L,E` ""`` ?@[ ¬†JQQ@ ¬†=9` ¬† ¬† ]QQQQ@L ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ[ ¬† ¬†JQ[ `""`JLjQL ]L3PL,yqyppDR ¬† PPP ¬† ¬† __ ¬† ¬†P^""""3@_ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ@ ¬† ¬† @B ¬†yq @[8[ `@DRP^""[` _,,. ¬†pqL ¬†5QQQQL__,uuq@QDF ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉQE ¬† ¬†@@ ¬†]@ {@J@ ¬†uq@DR8@ ¬†@Q@_ ¬†@D@@LJQQQQQDRP^""""""` ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬†]QL J@L]@J@L ]@p0PS@L _]Q@L j@QQ[ PP^"""" ¬† __,_yqp ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ_ ¬† ¬†jQQ[ ¬†@[J@UQ} `@E,,jQ[J@,@@L `""""` ¬† _,,uq@QE][""""""` ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬†jQQQ@ ¬†8@ @[j@ ¬†@QQ@DPP ""`` _ ,,uq@QQQQQQQQDD0F ¬† ¬†, ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† jQQQQ@ ¬†]QL][J@L ""` ¬†___,yq@QQ_30PP^""""""``____,,u ¬†yQQb_ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ""RQQQD` uZ[J@_@E ¬†@@QQQQ@DP^""__,uL=p@@QQQQQQQQQ@L 8QQQ@L ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉp,_ ¬† ""^` @QQ@L""Ej@L JDP^""_,yq@@DPj[[ @QQQQQQQQQQQQL ""0QQQQh ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉQQQDy_ ¬† ¬† """"90b,""^8 ¬†q@@DPP""""` ¬†J@Q@ JQQQQQQQQQQQQL ¬† ]9Q@P"" ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉQP9QQQ@ ¬† ¬†_ ¬† ¬†`""^n, `` ¬† ` ¬† ¬† ¬†SQQ[ """""""""""""""""""""""""" ,@Q@=`__ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†_ ‚îÉ
    ‚îÉF _@QQF ¬† /QQbu,_ ¬† ¬† ¬† ¬† ¬† ¬† __ ¬†`@Q@ JQQQ@U@Q@0D@[ @Q@` 0QDF ¬† ¬† ¬† ¬† ¬† ¬†3@DDL‚îÉ
    ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ BBOX: 7.41724,43.73250,7.42346,43.73520 | MAP W:80 H:24 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ

Braille renderer `braille-bw`:

    $ pixel-map --example london_buildings london_water -r braille-bw --no-bg --width 82
    ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ london_buildings.parquet, london_water.parquet ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚°Ä‚¢Ä‚°Ä‚°Ä‚†Ñ‚¢Ä‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚°Ä‚°Ä‚¢Ä‚°Ä‚†Ñ‚°Ä‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚°Ä‚°Ä‚°Ä‚°Ä‚°Ä‚°Ä‚°Ä‚°Ä‚°Ä‚°Ä‚°Ä‚†Ñ‚¢Ä‚°Ä‚°Ä‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚°Ä‚†Ñ‚†Ñ‚¢Ä‚°Ä‚†Ñ‚¢Ä‚°Ä‚¢Ä‚¢Ä‚¢Ä‚°Ä‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†∏‚¢Ç‚£§‚°Ñ‚†§‚†¢‚°¥‚†è‚†Å‚†Ñ‚†à‚†É‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ê‚¢Ä‚¢Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ê‚°ø‚†á‚†à‚†ü‚†í‚†ã‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚°Ä‚†à‚†â‚†õ‚†≥‚†Ç‚†Ñ‚†Ç‚¢†‚†û‚†Å‚¢†‚£§‚†à‚†¥‚£æ‚°Ø‚†£‚†ú‚°Ä‚£ø‚†Ç‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚¢ò‚£π‚£ø‚¢ã‚°Ä‚†Ñ‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ç‚†∞‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚¢ª‚£∂‚†Ñ‚¢∏‚°Ñ‚£∂‚£ø‚£∂‚†Ç‚†Ñ‚†Ñ‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†à‚†Å‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£º‚¢ß‚†Ñ‚°Ä‚†Ñ‚¢Ä‚°à‚†ã‚†Å‚†à‚†Å‚†∂‚†Ç‚†±‚†•‚†Ç‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†∏‚†ü‚†ã‚†Å‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢†‚†Ñ‚†Ñ‚¢Ä‚°Ä‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚°Ä‚£ø‚°Ö‚†ò‚†É‚£ø‚£ø‚°ø‚†Å‚†Ñ‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚°Ñ‚¢à‚°Ä‚†æ‚†á‚¢†‚£å‚†Å‚†à‚†ê‚†Ç‚†Ñ‚††‚†Ñ‚†Ç‚£ö‚°á‚†Å‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†à‚†Ç‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚††‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£à‚£¥‚£æ‚£ø‚£ø‚°∑‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚°Ä‚£∂‚†ã‚¢π‚°á‚†Ñ‚†ê‚£ø‚£ø‚°á‚†Ñ‚†Ñ‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£ò‚†É‚£Ω‚£õ‚†á‚°∞‚†É‚£®‚£∑‚£∑‚£∂‚£æ‚£¶‚°Ä‚°Ñ‚†õ‚£Ø‚£∑‚°Ä‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†Å‚†Ñ‚†Ñ‚†Ñ‚†à‚†Å‚†Ñ‚†Ç‚†Ñ‚†Ñ‚¢Ä‚£†‚£§‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚†Ñ‚¢Ä‚†∞‚¢∂‚†∂‚†∂‚†Ñ‚°≠‚°Ö‚†Ñ‚¢Ä‚°Ä‚†â‚¢Å‚°Ä‚†Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚£å‚£Ä‚°Ä‚°Ä‚††‚†é‚¢º‚°ø‚†É‚°º‚†É‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚°ô‚¢ø‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚°Ä‚£§‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚°ø‚¢ø‚£ø‚£ø‚°ø‚†ü‚†Å‚††‚£ø‚£ø‚£ø‚£Ä‚£Ä‚£∞‚°É‚°á‚††‚£π‚°è‚¢â‚°Ä‚°É‚††‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢∏‚†ß‚†Ø‚£Ω‚†É‚°ê‚†í‚°¶‚†Å‚†û‚†Å‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚£†‚°å‚†Å‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£†‚£§‚£∂‚°æ‚†ø‚†õ‚†õ‚†â‚†Å‚†Å‚†â‚†â‚†â‚†Å‚†à‚†à‚†Å‚†Å‚†Ñ‚†Ñ‚¢†‚£∂‚£§‚£§‚£≠‚£≠‚£≠‚£≠‚°á‚†ê‚°á‚†É‚†ª‚†Ω‚†Å‚††‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚£ø‚£∑‚£∂‚°ü‚†∏‚¢è‚°¥‚†É‚°¶‚°Ñ‚¢∏‚£ø‚†ü‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚°ö‚†≥‚†ü‚†Ç‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†ê‚¢æ‚°ø‚†ü‚†ã‚†Å‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚††‚°Ä‚¢∏‚£ø‚°Ñ‚£ø‚°Å‚°Ä‚£è‚£π‚†á‚†Ç‚°á‚£ø‚°á‚£ü‚†Å‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚°ü‚†õ‚¢ª‚†É‚°§‚¢§‚†Å‚†º‚°É‚°á‚¢æ‚£ø‚†ê‚†á‚†ü‚†ª‚¢ø‚†ü‚†Å‚¢ê‚°ª‚†Ö‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†à‚†â‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£Ä‚£Ä‚£Ä‚£†‚£§‚†Ñ‚£≠‚£≠‚£≠‚°ç‚†â‚†õ‚†õ‚†Ç‚†ò‚†á‚†ø‚†ø‚†ü‚†Ç‚†∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Å‚†ø‚¢∂‚°è‚¢ò‚££‚°é‚¢∞‚£∂‚£¨‚°ô‚¢ª‚°ø‚†Ñ‚†à‚†Å‚†Ñ‚††‚†Ñ‚¢ó‚°´‚†¥‚†é‚†Å‚¢Ä‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚°Ä‚††‚¢Ä‚°Ä‚†Ñ‚†∞‚†Ñ‚†∂‚†Ü‚†õ‚†õ‚†É‚°Ö‚°Ö‚£ø‚°á‚£∂‚†Ç‚°ø‚¢Ø‚¢©‚°á‚†Ñ‚†ê‚†Ç‚†Ñ‚†ê‚†Ç‚††‚¢∞‚†Ç‚†Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Å‚°Ä‚†à‚¢Ä‚°Ä‚†Å‚†Å‚†ò‚†ø‚†õ‚£Å‚¢∏‚°á‚†Ñ‚¢Ä‚¢Ä‚°Ä‚£™‚†Ö‚°ä‚†Å‚¢∑‚†Æ‚¢Ä‚†Ñ‚°Ä‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£Ä‚£Ä‚°Ä‚†Ñ‚°Ñ‚°Ñ‚£è‚£°‚£¶‚£ò‚¢∏‚£ø‚£ø‚°á‚°ø‚°º‚¢Ø‚£Ø‚°ç‚£≠‚£≠‚°Ä‚†õ‚†õ‚†ò‚†É‚†Ç‚¢Ä‚°Ä‚°Ä‚††‚¢§‚°§‚†ò‚†Ç‚†Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†à‚†Å‚†Ñ‚†∏‚†ø‚£ø‚°á‚†Ñ‚†ê‚†æ‚†ø‚†ø‚†á‚†Ñ‚°º‚†´‚£∂‚°Å‚¢é‚†à‚†Å‚†Ñ‚†Å‚£à‚†Ç‚†Å‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚¢†‚£Ø‚†â‚†Å‚¢æ‚°á‚†±‚†É‚¢õ‚£õ‚£ã‚£â‚£à‚£â‚†É‚°Å‚°Å‚¢â‚£ç‚£ç‚°Å‚£õ‚°õ‚†Å‚†Ç‚†Å‚£Ä‚£Ä‚°Ä‚°Ñ‚°ã‚†É‚†ê‚¢∏‚°ó‚°Ü‚†Ñ‚††‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚£∞‚£∂‚°Ü‚£§‚£§‚£§‚°Ñ‚†Ñ‚††‚£æ‚†É‚†Ç‚†Ñ‚†Ñ‚¢Ä‚°ë‚†Æ‚£≠‚†á‚†Ñ‚°É‚¢Ä‚°Ñ‚†Å‚†â‚°Ä‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚¢ê‚†ñ‚¢ä‚°≠‚†≠‚°Ö‚¢∂‚£ø‚†Å‚£ü‚†Ø‚¢ø‚£ü‚†É‚¢æ‚£ø‚¢ø‚†∑‚¢ì‚°µ‚†ñ‚£ã‚°Å‚£¥‚†Ü‚†æ‚£ª‚†ü‚¢ª‚£ø‚†õ‚†É‚†Ç‚†à‚†â‚†Å‚†Ñ‚†Ñ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚£ô‚£ü‚°É‚°ª‚¢ø‚£ø‚†Å‚†Ñ‚††‚†Ñ‚°Ä‚†Ç‚†Ñ‚†Ñ‚†∏‚†ü‚°¢‚¢ç‚†≥‚†û‚¢°‚†Ü‚°Ä‚†Ç‚†Ñ‚†Å‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚¢∞‚¢ü‚°Ü‚°Ö‚°Ä‚†á‚†á‚†æ‚†á‚†Ø‚†Ω‚£ò‚†É‚£§‚†≤‚°æ‚†Ø‚†Å‚£©‚†¥‚†æ‚°ü‚†Å‚°è‚†Å‚††‚°ø‚†Ø‚¢Ω‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢∏‚£ø‚°ø‚†á‚†ø‚†ø‚†ø‚†Ç‚†Ñ‚°Ä‚†Ñ‚†à‚†ë‚†Ç‚†Ñ‚†Ñ‚¢∏‚°Ø‚°ô‚†É‚†Ñ‚†ô‚†õ‚†π‚¢∑‚°ñ‚†Ç‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†ò‚£Ø‚£©‚†Ö‚£ª‚£¶‚°Ñ‚¢∏‚°á‚°á‚†ê‚†õ‚°∏‚†ü‚¢É‚£°‚†ê‚°õ‚°•‚†Ñ‚°Ñ‚£∂‚°Ñ‚£Å‚°Ä‚°Ä‚°á‚°§‚°ú‚†Å‚†â‚†Å‚†Ñ‚†ê‚†Ç‚†Ñ‚¢Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢º‚£ø‚°á‚¢∏‚¢ø‚†∑‚†Ç‚†Ñ‚†à‚†à‚†Å‚†Å‚†ê‚†Ç‚†Ñ‚†Ñ‚†ú‚£Ω‚°ó‚¢Ä‚†Ñ‚†∏‚°∑‚†Ç‚°Ñ‚¢Ä‚°Ä‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚††‚¢ñ‚°Å‚£¶‚£¨‚£ø‚°∑‚†Ñ‚†∂‚†Ü‚¢Ä‚£†‚†∞‚°Ü‚£õ‚°∫‚†Ñ‚†á‚†ß‚†Ñ‚†á‚£ø‚£∑‚°Ω‚£ø‚°á‚£Ø‚°Ö‚£É‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ê‚†í‚†Ü‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚°æ‚†ø‚†á‚†ò‚†©‚†¥‚†í‚†Ç‚††‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†∞‚†É‚†å‚°Ö‚†É‚¢≤‚†à‚£ë‚†¢‚°å‚†∫‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†ê‚†Ç‚†É‚†ã‚†Å‚†Å‚†Ñ‚†Ñ‚†∞‚¢æ‚¢ß‚£ø‚¢∏‚°á‚°Ü‚†Ö‚°Ñ‚†Ö‚°á‚£Å‚£®‚†É‚¢ø‚°á‚£∂‚°Ü‚£è‚°á‚°É‚°Ç‚°á‚£û‚£∑‚†Ñ‚†Ñ‚†Ñ‚††‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚°Å‚†Ö‚†Ñ‚†Ñ‚†Ñ‚†à‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚††‚†Ñ‚†Ñ‚†à‚†°‚†é‚†§‚†Ñ‚°Ä‚°Ü‚†±‚°Ä‚°É‚°∫‚†Å‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚¢ò‚¢õ‚°ª‚†ó‚¢Ä‚£§‚£§‚°Ñ‚°ø‚£≤‚°ª‚†º‚°á‚†ø‚†Å‚°ì‚†á‚°Ö‚†≠‚†≠‚¢©‚¢®‚£≠‚°Ö‚†Ñ‚¢∞‚¢∞‚†á‚†¥‚°Ü‚°Ü‚£∂‚£∂‚°Ñ‚†Ñ‚†Ñ‚†Ñ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚††‚†Ñ‚†Ç‚†Ñ‚†Ñ‚°Ä‚††‚†í‚†Ç‚°Ñ‚††‚†Ç‚†ê‚†á‚†ê‚†Ç‚†Ç‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†ò‚¢ø‚£ø‚£ø‚¢∏‚£ø‚£è‚†Ö‚°¨‚†â‚†ã‚°Å‚†Ñ‚†´‚†Å‚£í‚°§‚†õ‚¢ª‚£ø‚†∏‚£º‚£ø‚°á‚¢∏‚†ø‚°Ñ‚°á‚°Ç‚†É‚†É‚¢ª‚†ø‚†á‚†Ñ‚†Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚†ö‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚°Ñ‚†Ö‚†Ñ‚†Ñ‚†ê‚†â‚°Ä‚†§‚†î‚†í‚†É‚¢Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚¢†‚†à‚†ª‚†Å‚†æ‚†ø‚†á‚°º‚†£‚°Ñ‚°ø‚†â‚¢†‚°Ñ‚¢±‚°ü‚¢Ä‚†ô‚†∏‚¢∏‚†Ñ‚°á‚£ø‚°á‚¢∏‚£∑‚°Ü‚£≠‚°Ö‚†ò‚†É‚£∞‚¢∂‚£¶‚†Ñ‚†Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚††‚°§‚°§‚£§‚°Ñ‚†Ñ‚†Ñ‚†ê‚†Ñ‚†Ñ‚†ê‚¢´‚†á‚††‚†Ñ‚†Ç‚†Å‚¢Ä‚†Ñ‚†ê‚†ò‚°Ø‚†ú‚†∑‚°Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†ò‚†ü‚°Ñ‚°Å‚¢ß‚†Ç‚†ì‚¢°‚†Ö‚°≤‚†ú‚°Ü‚£ò‚°ø‚°Ü‚†Ö‚°©‚†Å‚°≠‚£≠‚†Ñ‚£≠‚£Ø‚£Ø‚°Ñ‚°ü‚°É‚¢õ‚¢ì‚†õ‚¢∏‚°ü‚¢∫‚£ø‚†Ñ‚†Ç‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚°Ä‚°ü‚†Å‚†Å‚°Ü‚°Ä‚¢ê‚£í‚°Ñ‚†ê‚†Ç‚†â‚†Å‚°†‚†∞‚°Ä‚†£‚†à‚°¢‚†Ñ‚°†‚†∞‚†Ç‚°Ü‚°Ö‚††‚°Ñ‚°Ä‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†∞‚°á‚°™‚¢ù‚†¢‚°ï‚£ê‚†∫‚¢µ‚£Ø‚°É‚†ò‚¢ü‚°Ø‚†Ü‚†Ü‚†Å‚†Å‚°Å‚£â‚£à‚£â‚£â‚£â‚°Å‚£â‚†ã‚†ò‚†É‚°É‚¢à‚°õ‚¢õ‚°ã‚†Å‚†Ç‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚†à‚†õ‚†á‚†Ç‚£Å‚°Å‚£¨‚£•‚°¶‚¢†‚†É‚†Ñ‚¢†‚°Ö‚†§‚†Ö‚†Ñ‚†à‚†Ö‚°™‚†Ñ‚†É‚†Ñ‚°Ü‚†Ü‚†à‚†á‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†∞‚°±‚°Ö‚°Ç‚°õ‚¢±‚°á‚†Å‚†Ç‚†ô‚†õ‚¢¥‚†Æ‚†Ñ‚†Ö‚¢û‚¢∞‚¢ä‚°≠‚°Ö‚°Ö‚°ç‚°Ö‚°Ö‚°á‚¢ø‚†Ñ‚†Ñ‚†Ñ‚£∑‚†Ç‚£∑‚¢∏‚£ø‚†Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ñ‚†Ñ‚††‚°Ñ‚†∫‚†É‚°á‚°á‚£ø‚£∑‚†é‚†Å‚†ê‚†ø‚†É‚†¥‚¢à‚†Ñ‚†Å‚†Ç‚†Å‚†Ñ‚°Ä‚†Å‚°Ö‚†á‚†Ñ‚†á‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†∏‚¢ó‚°Ñ‚°É‚°±‚†ì‚†Å‚†Ñ‚†Ñ‚†Ñ‚††‚†§‚†Ö‚†Å‚†´‚†æ‚¢ò‚¢ã‚°Ö‚°Ö‚°Ö‚°Ö‚°Ö‚°Ö‚°Ö‚£≠‚°§‚£§‚£¨‚°Ö‚£†‚£≠‚¢®‚£Ø‚°Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚£†‚†ñ‚†∂‚°á‚†à‚†Å‚£ô‚°É‚†õ‚†è‚†Å‚¢Ä‚¢é‚¢ë‚†Ñ‚†Ñ‚†Ñ‚†É‚†å‚†ê‚¢£‚°ï‚†Ç‚°Ç‚†Ö‚°á‚†Ñ‚†Ñ‚†Ç‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Å‚†à‚†Å‚†Å‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†à‚†Å‚†Å‚†Å‚†Å‚†Å‚†Å‚†Å‚†Å‚†Ñ‚†à‚†Å‚†Å‚†Å‚†Å‚†à‚†Å‚†Å‚†à‚†Å‚†Å‚†Å‚†Å‚†Å‚†Å‚†Å‚†Å‚†Å‚†à‚†Å‚†à‚†Å‚†Ñ‚†Ñ‚†à‚†à‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†Å‚†à‚†Å‚†Å‚†Ñ‚†Ñ‚†Ñ‚†à‚†Å‚†Ñ‚†Å‚†à‚†Å‚†Ñ‚†Å‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ BBOX: -0.13990,51.49221,-0.10879,51.50674 | MAP W:80 H:30 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ

Examples with colourful images are available in the repository.

CLI is built with Typer, so it's easy to use and has fully described parameters rendered with Rich.

**How does it work?**

1. Files are read by¬†`GeoPandas`¬†to GeoSerieses.
2. `Matplotlib`¬†figure is created with the size of the terminal (`pixel-map`¬†expects a default monospace font with the ratio of 8 to 16 pixels. Figure canvas takes terminal height and multiplies it by two).
3. GeoSerieses are plotted to the canvas.
4. The plot bounding box is expanded to the canvas ratio (based on terminal size).
5. Basemap is loaded with¬†`contextily`.
6. Canvas is copied to the image as an¬†`NumPy`¬†array.
7. `img2unicode`¬†is used to render image using unicode characters with color.
8. `Rich`¬†string output is generated using the list of unicode characters with background and foreground colors.
9. Output is printed to the console.

# Target Audience

* GIS practitioners
* Map enthusiasts
* Data engineers/scientists working with geo data

# Comparison

Probably none that I'm aware of with the same functionalities.

[https://github.com/rastapasta/mapscii](https://github.com/rastapasta/mapscii) \- this one can display OSM data in the terminal while being interactive. It's amazing, but it's not written in Python.",YourVibe,1gc3a1k,https://reddit.com/r/Python/comments/1gc3a1k/pixelmap_a_python_cli_tool_for_plotting_geo_files/,https://www.reddit.com/r/Python/comments/1gc3a1k/pixelmap_a_python_cli_tool_for_plotting_geo_files/,2024-10-25 20:00:37,23,0.91,23,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1gc3a1k
Python,"Posting 2 - the HTTP client TUI, now supports Python scripting, custom keymaps, and more!","Hello r/Python

I'm excited to share Posting 2 with you all!

# What My Project Does

Posting is a terminal based app for interacting with HTTP APIs. It's a bit like Postman, Insomnia, Bruno, etc.

Posting is a snappy and keyboard-centric UI, built for power users but still approachable for those who aren't familiar with terminal apps.

You can build up requests using the UI, send them and interact with the response, and save the requests to disk as simple YAML files for easy sharing, version control, and re-use.

Posting offers efficient ""jump mode"" navigation which allows you to jump across the UI quickly with the keyboard, extensive autocompletion, themes, integration with other tools (e.g. quickly swap into Vim to edit a request body and swap back), and a bunch more quality-of-life features to let you move fast.

It's written entirely in Python using the Textual framework, and also uses great Python tools like httpx and Pydantic.

With the new release of version 2, you can now run Python code before and after requests! This lets you perform setup and teardown (e.g. logging, setting variables, tokens, etc.).

This version also introduces the (frequently requested) ability to change your keymap for a variety of actions. This will hopefully prevent keybind clashes with your emulator/tmux/whatever!

# Target Audience

If you work with HTTP APIs, and if you particularly enjoy apps that run in the terminal and are keyboard focused, then I think you'll enjoy working with Posting.

# Comparison

* Postman and Insomnia: Electron-based GUIs which are more feature-rich than Posting but don't run in the terminal. Uses a proprietary format for storing requests on disk, making them harder to share and hand-edit. Posting uses YAML instead. As Electron apps, you cannot run Postman or Insomnia over SSH. These apps are also less keyboard focused and are mostly designed to be used via mouse control.
* Bruno: Fully open source. Uses a human-readable format for storing requests, albeit the format uses a custom DSL and so is not easily parsed by other tools.

I hope you enjoy it - I would love to know what you think here or in a discussion on GH!

**Repo**: [https://github.com/darrenburns/posting](https://github.com/darrenburns/posting)

**Docs:** [https://posting.sh](https://posting.sh)

**Blog post:** [https://darren.codes/posts/posting2/](https://darren.codes/posts/posting2/)",darrenburns,1gc0tiu,https://reddit.com/r/Python/comments/1gc0tiu/posting_2_the_http_client_tui_now_supports_python/,https://www.reddit.com/r/Python/comments/1gc0tiu/posting_2_the_http_client_tui_now_supports_python/,2024-10-25 18:13:20,33,0.96,33,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1gc0tiu
Python,Memorial Date Algorithm for JWs,[https://www.kaggle.com/code/mailbokhang/memorial-date?kernelSessionId=203312817](https://www.kaggle.com/code/mailbokhang/memorial-date?kernelSessionId=203312817),Tom-CHBM4,1gced47,https://reddit.com/r/Python/comments/1gced47/memorial_date_algorithm_for_jws/,https://www.reddit.com/r/Python/comments/1gced47/memorial_date_algorithm_for_jws/,2024-10-26 05:50:40,2,0.54,2,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1gced47
Python,Is this calculator too simple?,"Ive been testing this calculator for a bit and it feels too simple compared to tutorials online.

while True:
	
	x=eval(input(""\nInput:""))

	print(""\nOutput:"",x)

 #eval does the magic of changing 2,*,+ into the same format as if to write it as ""print(2*1)"" or x = 7+ 5
",haywij,1gcur7z,https://reddit.com/r/Python/comments/1gcur7z/is_this_calculator_too_simple/,https://www.reddit.com/r/Python/comments/1gcur7z/is_this_calculator_too_simple/,2024-10-26 20:58:29,0,0.27,0,0,7,0,0,False,False,True,False,False,Discussion,self,t3_1gcur7z
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1gc8ekm,https://reddit.com/r/Python/comments/1gc8ekm/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1gc8ekm/saturday_daily_thread_resource_request_and/,2024-10-26 00:00:11,3,0.72,3,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gc8ekm
Python,What Practical Applications Can My Python Script Be Used For?,"I created a Python script that converts natural language into Python code and executes it in the terminal. 

I‚Äôve used it for tasks like installing libraries, scraping websites, and creating folders and files.

Here‚Äôs the GitHub repo: https://github.com/harshkhokhariya/gemini-python-assistant

To run it:

1. Install the Gemini library.
2. Get your Gemini API key.
3. Add it to the run.py file.
4. You're all set!

I‚Äôve tested it for various tasks, but I‚Äôd love to explore more potential uses.

 What other applications do you think this script could have?

Thank you!",harsh_khokhariya,1gcs4hw,https://reddit.com/r/Python/comments/1gcs4hw/what_practical_applications_can_my_python_script/,https://www.reddit.com/r/Python/comments/1gcs4hw/what_practical_applications_can_my_python_script/,2024-10-26 18:54:49,0,0.21,0,0,6,0,0,False,False,True,False,False,Discussion,self,t3_1gcs4hw
Python,Should I start Microservice,"We're starting a new startup and initially thought about starting with a monolithic structure, but later we heard that YC startups generally start with microservices (this might be incorrect). Also, most CTOs around us recommended microservices. However, I don't know if I should give up the rapid development power of monolithic architecture. What would you recommend? Should I start with microservices?

Team and what we will do  
Our team consists of 2 senior developers. We plan to create a new codebase, so scaling and having a stable system is important for us.",mbartu,1gcqhp2,https://reddit.com/r/Python/comments/1gcqhp2/should_i_start_microservice/,https://www.reddit.com/r/Python/comments/1gcqhp2/should_i_start_microservice/,2024-10-26 17:40:02,0,0.33,0,0,29,0,0,False,False,True,False,False,Discussion,self,t3_1gcqhp2
Python,Manim : package for maths animation,"I recently explored Manim, an open-sourced python package for generating animated videos for explaining maths. It includes animations for shapes, equations, codes, graphs, etc. The repo is trending on GitHub as well. The demo also looks very impressive. Check it out here : https://youtu.be/QciJxVjF4M4?si=Bk_gU4Tj5f6gPpiq",mehul_gupta1997,1gbldgk,https://reddit.com/r/Python/comments/1gbldgk/manim_package_for_maths_animation/,https://www.reddit.com/r/Python/comments/1gbldgk/manim_package_for_maths_animation/,2024-10-25 03:46:32,78,0.89,78,0,6,0,0,False,False,True,False,False,Tutorial,self,t3_1gbldgk
Python,Anyone working on or with a great but little-known test framework?,"If you're developing or enjoying a less popular testing framework with Python, I'd love to hear about it! 

I don't love pytest, some of its complexities, tall decorator stacks, and function naming conventions.

I *do* love [ward](https://github.com/darrenburns/ward), with its unusual non-function-naming test names, and unusual defining-functions-in-loops for parameterization. Unfortunately it's now archived, as the developer is busy at Textualize.

Maintaining it myself is probably beyond my abilities and bandwidth, so I plan to migrate some projects to pytest soon, but wanted to check if anyone can show off some fun alternative with something special to offer.

Thanks for any contribution!",AndydeCleyre,1gbxrho,https://reddit.com/r/Python/comments/1gbxrho/anyone_working_on_or_with_a_great_but_littleknown/,https://www.reddit.com/r/Python/comments/1gbxrho/anyone_working_on_or_with_a_great_but_littleknown/,2024-10-25 16:02:52,6,0.69,6,0,8,0,0,False,False,True,False,False,Discussion,self,t3_1gbxrho
Python,PyGenTree: A Simple Yet Powerful Python Package for Generating ASCII Directory Trees,"# What My Project Does

PyGenTree is a Python package that generates ASCII tree representations of directory structures. It's a simple command-line tool that allows you to visualize the structure of your project or any directory on your system. With PyGenTree, you can easily document your project's structure, quickly understand unfamiliar codebases, or generate directory trees for README files.

üîó Check it out on GitHub:¬†[https://github.com/taeefnajib/pygentree](https://github.com/taeefnajib/pygentree)  
If you like this project, please ‚≠ê it. It would encourage me to make better tools in the future.

# Target Audience

PyGenTree is designed for developers, programmers, and anyone who works with directory structures on a regular basis. It's a useful tool for:

* Developers who want to document their project's structure
* Programmers who need to quickly understand unfamiliar codebases
* DevOps teams who want to visualize directory structures for deployment or debugging purposes
* Anyone who wants to generate directory trees for README files or documentation purposes

# Comparison

There are existing tools that generate directory trees, such as `tree` on Linux and `dir` on Windows. There are online ASCII Tree Generators where you have to manually add files and directories. There are some python packages similar to this, but I tried to combine all the useful features from these alternatives and create this one. PyGenTree differs from these alternatives in several ways:

* **Cross-platform compatibility**: PyGenTree works on Windows, macOS, and Linux, making it a great choice for developers who work on multiple platforms.
* **Customizable output**: PyGenTree allows you to customize the output to suit your needs, including sorting options, depth levels, and exclusion of specific files and directories.
* **Easy installation**: PyGenTree is a Python package that can be easily installed using pip, making it a great choice for developers who already use Python.

# Key Features

* Easy installation: `pip install pygentree`
* Customizable depth levels
* Multiple sorting options (ascending, descending, standard)
* Option to show only directories
* Ignore hidden files/directories
* Exclude specific files/directories
* Save output to file
* Cross-platform compatibility

Here's a quick example of what you can do:

    # Basic usage (current directory)
    pygentree
    # Specify a directory and limit depth
    pygentree /path/to/directory -l 2
    # Sort files and folders, ignore hidden, exclude specific directories
    pygentree -s asc --ignore-hidden -e ""node_modules,venv,dist""

PyGenTree is perfect for anyone who wants a simple and powerful tool for generating ASCII directory trees. Feel free to try it out and let me know what you think!

üîó Check it out on GitHub: [https://github.com/taeefnajib/pygentree](https://github.com/taeefnajib/pygentree)

If you like this project, please ‚≠ê it. It would encourage me to make better tools in the future.",TaeefNajib,1gbnnbu,https://reddit.com/r/Python/comments/1gbnnbu/pygentree_a_simple_yet_powerful_python_package/,https://www.reddit.com/r/Python/comments/1gbnnbu/pygentree_a_simple_yet_powerful_python_package/,2024-10-25 06:10:59,27,0.94,27,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gbnnbu
Python,Hatch or uv for a new project?,"I'm starting a new project, and I can't decide if hatch is needed anymore. 
Hatch can install packages using uv for speed, so I used both before.

But uv allows monorepo, while hatch doesn't support it yet.

What are the differences between the two tools ? What would you choose for a new project?",calsina,1gaz3tm,https://reddit.com/r/Python/comments/1gaz3tm/hatch_or_uv_for_a_new_project/,https://www.reddit.com/r/Python/comments/1gaz3tm/hatch_or_uv_for_a_new_project/,2024-10-24 10:10:29,88,0.9,88,0,98,0,0,False,False,True,False,False,Discussion,self,t3_1gaz3tm
Python,I don't want to r/learnpython I'm just pretty sure 0 is an integer,"I love python I really do I've been using it professionally now for 5 years in my day job. But I've encountered an error and nobody anywhere has any advice for me and I'm going insane because I don't even know who to report it to.

# The error:

    Exception has occured: TypeError
    an integer is required
      File ""P:\Projects\test.py"", line 179, in navigate
        zero_b = 0
                 ^

This happens regardless what the code in zero\_b's place is. If I try printing anything, it will give the ""an interger is required"" message in the string or integer I'm trying to print. No further stack trace is given.

# The code:

        test_a = 0
    
    ¬† ¬† try:
    ¬† ¬† ¬† ¬† print(""Step 1"")
    ¬† ¬† ¬† ¬† WebDriverWait(driver, 1).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ""[data-testid='read-only-address']"")))
    ¬† ¬† except:
    ¬† ¬† ¬† ¬† print(""Step 2"")
    ¬† ¬† ¬† ¬† try:
    ¬† ¬† ¬† ¬† ¬† ¬† print(""Step 3"")
    ¬† ¬† ¬† ¬† except:
    ¬† ¬† ¬† ¬† ¬† ¬† print(""Except hit"")
    
    ¬† ¬† zero_b = 0

I removed the stuff inside the first except (where ""step 2"" is) because this error happens even when there's just a print statment there. The Selenium WebDriver folks said it couldn't be the call to something they'd written because that shouldn't affect a variable assignation in a different scope

# The circumstances:

This ONLY occures if the debugger has hit a breakpoint anywhere before these lines of code. If the debugger hasn't hit a breakpoint, then this error does not occur. It does not matter where the breakpoint is. Various different code in the place of the WebDriverWait line will also cause this. I'm using Python 3.12.4 64-bit, debugging in VSCode.

# Video:

[https://www.youtube.com/watch?v=4l1ECfiDWpM](https://www.youtube.com/watch?v=4l1ECfiDWpM)

# Edit:

Someone in the comments mentioned using different debuggers. I had tried pycharm but received the same error. Trying pdb, though, does NOT result in the same error. So, this is probably not an issue regarding Python, but closer to a common issue between both the pycharm and the VSCode debuggers. I can use pdb for now, but feel free to continue to speculate what both editors could be doing here if you wish.",_TheModerator,1gc4qk6,https://reddit.com/r/Python/comments/1gc4qk6/i_dont_want_to_rlearnpython_im_just_pretty_sure_0/,https://www.reddit.com/r/Python/comments/1gc4qk6/i_dont_want_to_rlearnpython_im_just_pretty_sure_0/,2024-10-25 21:05:09,0,0.31,0,0,26,0,0,False,False,True,False,False,Discussion,self,t3_1gc4qk6
Python,cstructpy- Python package designed for binary serialization and deserialization of structured data,"This app is open source and is made using Python:¬†[https://github.com/Maxim-Mushizky/cstructpy](https://github.com/Maxim-Mushizky/cstructpy)

Also can pip install it via pypi [https://pypi.org/project/cstructpy/](https://pypi.org/project/cstructpy/)

# What My Project Does

Provides a simple interface for packing and unpacking binary data based on field definitions using Python's¬†`struct`¬†module. The motivation for this package is to have a data validation using type annotations, similar to pydantic but for binary data. Therefore this package is best when used alongside pydantic.BaseModel or dataclasses.dataclass since it allows a similar class structure and object creation

# Target Audience

Mostly effective for distributed systems, where there are c like structs passed as binary and need to be verified in different parts of the code.

# Comparison

There are no current comparisons, since this project attempt to mimic the object creation and validation as present in Pydantic

# Contribution

If you require any new features or have a use for this package you are more than welcome to join as a celebrator

Enjoy!

  
**Edit:**

Added now also support (v0.2.0) for more flexible array types (only 1D arrays for now though) annotation by using the \_\_class\_getitem\_\_ dunder method. It works by annotating the primitive type with square brackets.  
**For example:**

    class ExampleStruct(GenericStruct):
      uint16_array: UINT16[4] 

UINT16\[4\] will now be an unsigned int16 array of 4, and it will also enforce the size and verify that all the types the same within the array.  
Supports all iterable types in python (list, tuple, set etc)

  
",OkAnything2044,1gb0o3f,https://reddit.com/r/Python/comments/1gb0o3f/cstructpy_python_package_designed_for_binary/,https://www.reddit.com/r/Python/comments/1gb0o3f/cstructpy_python_package_designed_for_binary/,2024-10-24 11:46:05,22,0.88,22,0,10,0,0,False,False,True,False,False,Showcase,self,t3_1gb0o3f
Python,Python Tips Thread üêç,"Hey everyone! Let‚Äôs share our best Python tips, tricks, and resource links that have made coding easier or faster. Whether it's for simplifying code, using useful libraries, or optimizing performance, all contributions are welcome!!, let's go!",Ali-Zainulabdin,1gbr6ms,https://reddit.com/r/Python/comments/1gbr6ms/python_tips_thread/,https://www.reddit.com/r/Python/comments/1gbr6ms/python_tips_thread/,2024-10-25 10:36:14,0,0.41,0,0,15,0,0,False,False,True,False,False,Discussion,self,t3_1gbr6ms
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1gbh5k3,https://reddit.com/r/Python/comments/1gbh5k3/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1gbh5k3/friday_daily_thread_rpython_meta_and_freetalk/,2024-10-25 00:00:50,1,0.6,1,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gbh5k3
Python,Talks from PyData Amsterdam 2024 now on YouTube,"PyData has uploaded the talks from PyData Amsterdam 2024 (18-20 Sept) to YouTube.

- https://www.youtube.com/playlist?list=PLGVZCDnMOq0reU2lzNZCn9obkyRVaSnpF
- https://www.youtube.com/@PyDataTV/playlists
- https://www.youtube.com/@PyDataTV/videos",commandlineluser,1ga9frr,https://reddit.com/r/Python/comments/1ga9frr/talks_from_pydata_amsterdam_2024_now_on_youtube/,https://www.reddit.com/r/Python/comments/1ga9frr/talks_from_pydata_amsterdam_2024_now_on_youtube/,2024-10-23 12:34:24,86,0.97,86,0,1,0,0,False,False,True,False,False,Resource,self,t3_1ga9frr
Python,Monoranger: A poetry plugin for managing monorepos,"üîó Link - [https://github.com/ag14774/poetry-monoranger-plugin](https://github.com/ag14774/poetry-monoranger-plugin)

# What my project does

I recently needed to set up a monorepo and I wanted to have similar structure as in Cargo workspaces from Rust.

Essentially I wanted to have a single lockfile shared between all components/projects in the library and have a single venv with all dependencies installed as this makes development so much easier. I use Poetry so I decided to create a plugin for this usecase.

This plugin:

* Enables multiple projects in a monorepo using Poetry to use a shared poetry lockfile
* Enables multiple projects in a monorepo using Poetry to use a shared virtual environment
* Allows projects to use path dependencies and pin their versions during 'poetry build'

# Target Audience

Any Python developer that wants to create a simple monorepo using Poetry and does not want to resort to complex build tools such as Nx. I will be keeping this plugin up to date and make sure that updates and fixes are pushed in a timely manner

# Comparison

The existing tools fall in two categories: 

a) Compicated build tools that have their focus on other programming languages but also support Python. An example of this is Nx. It's a nice tool but it has too many features for my use case

b) Some existing poetry plugins that allow users to use path dependencies and replace them with a pinned version during 'poetry build' but those do not offer the option to use a shared lockfile or venv. I wanted a single plugin that can handle all my monorepo-related requirements.

# Links

[https://github.com/ag14774/poetry-monoranger-plugin](https://github.com/ag14774/poetry-monoranger-plugin)",andreasyeah,1gak200,https://reddit.com/r/Python/comments/1gak200/monoranger_a_poetry_plugin_for_managing_monorepos/,https://www.reddit.com/r/Python/comments/1gak200/monoranger_a_poetry_plugin_for_managing_monorepos/,2024-10-23 20:10:18,22,0.76,22,0,18,0,0,False,False,True,False,False,Showcase,self,t3_1gak200
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1gap9r6,https://reddit.com/r/Python/comments/1gap9r6/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1gap9r6/thursday_daily_thread_python_careers_courses_and/,2024-10-24 00:00:10,7,0.72,7,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gap9r6
Python,The Computer That Built Jupyter,"I am related to one of the original developers of Jupyter notebooks and Jupyter lab. Found it while going through storage. He developed it in our upstairs playroom. Thought I‚Äôd share some history before getting rid of it. 

[Pictures](https://imgur.com/a/oQnefkV)",ljatkins,1g9qpgq,https://reddit.com/r/Python/comments/1g9qpgq/the_computer_that_built_jupyter/,https://www.reddit.com/r/Python/comments/1g9qpgq/the_computer_that_built_jupyter/,2024-10-22 19:27:02,866,0.98,866,0,67,0,0,False,False,True,False,False,Discussion,self,t3_1g9qpgq
Python,3Domain: a 3D visualization tool for subdomain relationships,"WHAT MY PROJECT DOES

By scraping the most top level subdomains of any given website, 3Domain builds a 3D node graph of the relationship between the subdomains. This allows it's users to see which subdomain references which, and which it is referenced by, for a more holistic view of the web app.

TARGET AUDIENCE

My target audience is security professionals who want to understand the architecture of a web app. Additionally, software developers and architects who wish to gain a more holistic view of their own or others web sites. Lastly, maybe SEO professionals can use this as well. 

COMPARISON

3Domain aims to take a different approach to web scraping and spidering in an app. The closest tool that does this that I'm aware of is Burpsuite, which takes a different approach.

I would love to hear your thoughts!

https://github.com/Trivulzianus/3Domain",dvnci1452,1gahcdl,https://reddit.com/r/Python/comments/1gahcdl/3domain_a_3d_visualization_tool_for_subdomain/,https://www.reddit.com/r/Python/comments/1gahcdl/3domain_a_3d_visualization_tool_for_subdomain/,2024-10-23 18:11:58,11,0.84,11,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gahcdl
Python,Convert your Figma design into Python code,"üîó Link ‚Äî [https://github.com/axorax/tkforge](https://github.com/axorax/tkforge)

# What My Project Does

TkForge is a Python app that allows you to turn your Figma design into Python tkinter code. So, you can make a GUI design in Figma and use specific names like ""textbox"", ""circle"", ""image"" and more for interactable elements then use TkForge to get the code for a fully functional working GUI app from your design.

And it's **free, open-source** and regularly maintained!

# Target Audience

TkForge is made for anyone who wants to make a GUI with Python easily and efficiently. It's fast and you can make some really complex and beautiful GUI's with it.

# Comparison

There's another project similar to TkForge called Tkinter Designer. Personally without being biased, I think TkForge is better. TkForge supports everything Tkinter Designer does and more. TkForge generates better code, supports more elements, allows you to add placeholder text (which you can't by default in tkinter), automatically sets foreground color and a lot more! Placeholder text and foreground color generation is a bit buggy though.  I use TkForge for most of my tkinter projects. You can get help in the Discord server.

Thanks for reading! üòÑ",axorax,1ga7vew,https://reddit.com/r/Python/comments/1ga7vew/convert_your_figma_design_into_python_code/,https://www.reddit.com/r/Python/comments/1ga7vew/convert_your_figma_design_into_python_code/,2024-10-23 11:09:45,33,0.83,33,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1ga7vew
Python,Dynamic Inputs: A way to break standard input limitations.,"**Hello!** I am excited to announce my first open-source project: **Dynamic Inputs**! As a intermediate developer, I would love your contributions and feedback!

# üåô Dynamic Inputs

## What My Project Does

**Dynamic Inputs** addresses common limitations of traditional input methods, such as the inability to read or modify input as it's being typed. With this challenge in mind, **Dynamic Inputs** offers a suite of features to make input handling more dynamic and interactive:

1. **Read User Input Anytime:** Allows the program to capture user input at any moment, which is particularly useful for live input analysis.
2. **Edit User Input:** Enables editing of user input in real-time, opening possibilities like live grammar correction or formatting input (e.g., replacing letters with asterisks for password input).
3. **Built-in Auto Completion:** Provides a built-in auto-completer with a customizable `complete` function, allowing developers to define custom logic for completing inputs.
4. **Raw Calls:** Offers the option to bypass the auto-completer and send direct function calls by setting `raw_call` to True.
5. **Inactivity Trigger:** Detects user inactivity and triggers predefined actions after a set idle time, which can be turned off by disabling `inactivity_trigger`.
6. **Block Empty Inputs:** Prevents empty submissions by blocking the Enter key when the input field is empty, with an option to override this by enabling `allow_empty_input`.
7. **Key Binding:** Supports key-specific logic for triggering functions, though hotkey support is limited due to reliance on `msvcrt` getch functionality on Windows.

## Target Audience

This project is ideal for developers who need more control over user input in their applications, particularly those working on command-line tools, real-time data collection, or interactive scripts. It's especially useful for hobbyists and those developing personal or experimental projects. As a intermediate developer, I‚Äôve designed it with ease of use and flexibility in mind, but more advanced developers may also find its customizability appealing.

## Comparison with Existing Alternatives

Unlike standard input methods, **Dynamic Inputs** allows for reading and editing user input while it is being typed, providing a more interactive experience. It also integrates auto-completion, user inactivity triggers, and input validation in ways that are not easily available in conventional input functions. While there are other libraries and modules for handling input, **Dynamic Inputs** combines these capabilities into a single, easy-to-use package, specifically for developers who want to handle inputs dynamically without reinventing the wheel.

**WARNING:**  
**Dynamic Inputs** is currently only available for Windows due to the use of msvcrt, but we may add Linux compatibility soon! If you'd like to help, please feel free to contribute!

# Want to contribute?

Check out our repository [here!](https://github.com/wired32/Dynamic-Input). I‚Äôm looking forward to your feedback and contributions!",PureSwing9975,1ga79jf,https://reddit.com/r/Python/comments/1ga79jf/dynamic_inputs_a_way_to_break_standard_input/,https://www.reddit.com/r/Python/comments/1ga79jf/dynamic_inputs_a_way_to_break_standard_input/,2024-10-23 10:31:03,27,0.92,27,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1ga79jf
Python,SongPi - Continuous song recognition app using Python,"This app is open source and is made using Python: [https://github.com/Mildywot/SongPi](https://github.com/Mildywot/SongPi)

# What My Project Does

My project sets up a Python environment for recognizing songs recorded via an attached microphone to pull a song's name, artist, and cover art within a second or two. It continuously recognizes songs playing (updating about 4 times a minute), and keeps the last song's info if no new song is detected.

It displays album art with a blurred background (of the same album art), and dynamically adjusts text color based on background brightness to keep the artist and title info readable.This project uses Tkinter for the GUI and PyAudio for recording audio, with ShazamIO as the song recognition engine.

You can resize your windowed mode to any size you want, and you can press the Esc button to toggle window and full screen mode.

# Target Audience

This is a toy project and is open source, it works for those wanting to know what song is currently playing.

I created this so when my girlfriend and I played vinyl records at home, we'd always be able to look at a screen and know which song on the record we're currently listening to.

# Comparison

There are some Python programs that identify full music files stored on a device, however I couldn't find any direct comparison project that continuously listens to audio in real time and shows you song information in a GUI like this.

**A few example screenshots below:**

[Window mode 1](https://raw.githubusercontent.com/Mildywot/SongPi/refs/heads/main/readme_images/Oshun-El-eee_windowed.png)

[Full screen example 1](https://raw.githubusercontent.com/Mildywot/SongPi/refs/heads/main/readme_images/JVB_fullscreen.png)

[Window mode 2](https://raw.githubusercontent.com/Mildywot/SongPi/refs/heads/main/readme_images/banger_windowed.png)

[Full screen example 2](https://raw.githubusercontent.com/Mildywot/SongPi/refs/heads/main/readme_images/divorced-aussie-dad-tunes_fullscreen.png)

Enjoy!

EDIT/ For further context on how this works:

1. SongPi loads the info from the config file, and sets up the environment for audio processing.
2. The audio input device (microphone) is selected using the functions¬†*list\_audio\_devices*,¬†*select\_input\_device*, and¬†*validate\_device\_channels*¬†handling the detection.
3. The¬†*record\_audio*¬†function makes use of PyAudio's audio handling and records 4 seconds of audio from your microphone then saves it as a .WAV file (the recording time can be edited in the config, but recordings less than 3 seconds don't seem to work so well, so I settled on 4 seconds as its pretty consistent).
4. The¬†*recognize\_song*¬†function uses the ShazamIO api to fingerprint the recorded audio in the .WAV file, send that fingerprint to Shazam, then receive back the song info. This functions runs in an asynchronous loop to repeatedly retry every 2 seconds in case of network errors.
5. Tkinter creates the GUI then displays the song title, artist and the cover art. It finds the display size of the current screen and only goes 'full screen' to the current screen (I was having issues with a multiple screen setup). I bound the escape button to toggle between full screen and windowed modes, along with having the mouse/cursor disappear after 5 seconds of inactivity (it shows again when moving the mouse). The¬†*update\_images*¬†and¬†*update\_gui*¬†functions only update if there are changes to the song recognition result (i.e. the GUI doesn't update if the same song or no song is detected).
6. Tkinter also modifies the font and text styling (song title is italic and the artist is bold), and anchors these below the central cover art (which resizes dynamically when detecting changes to the window size). The text should always be readable regardless of background colour as the¬†*calculate\_brightness*¬†function adjusts the text colour based on the background's brightness. Thanks to my mate's suggestion, I changed the background to be the current cover art with a gaussian blur using the¬†*create\_blurred\_background*¬†function (initially it would find the most common colour of the cover art and displayed it as a solid coloured background, it looked kind of shit as half the time it was just black or white).
7. The background thread¬†*start\_recognition\_thread*¬†runs in the background separate to the GUI thread so it all remains responsive and usable. SongPi essentially records for 4 seconds, gets the song info back in about 1-2 seconds, then repeats the whole process every 5 seconds or so (depending on recognition its about 4-5 updates per minute).",mildywot,1ga7dnr,https://reddit.com/r/Python/comments/1ga7dnr/songpi_continuous_song_recognition_app_using/,https://www.reddit.com/r/Python/comments/1ga7dnr/songpi_continuous_song_recognition_app_using/,2024-10-23 10:38:30,14,0.95,14,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1ga7dnr
Python,Python web-based classroom IDE for online teacher,"Hi
Wondering what options are out there for python IDE as an online teacher. I‚Äôve been asked to teach python and my experience is teaching scratch to students online and personal coding in C++, java, arduino projects etc.

I‚Äôm looking for something where I can have student accounts linked to mine, I can see their code, push out code examples to them, and maybe even jump in and edit/improve/comment on their code.

I don‚Äôt know much about python, but I suspect I want an IDE with useful built in libraries and assets for students aged around 9-13 to create fun little apps &amp; games like they could in scratch fairly easily.

Thoughts?",waxnwire,1ga66i8,https://reddit.com/r/Python/comments/1ga66i8/python_webbased_classroom_ide_for_online_teacher/,https://www.reddit.com/r/Python/comments/1ga66i8/python_webbased_classroom_ide_for_online_teacher/,2024-10-23 09:15:16,12,0.8,12,0,21,0,0,False,False,True,False,False,Resource,self,t3_1ga66i8
Python,Pyloid: A Web-Based GUI Framwork for Desktop Applications - v0.14.2 Released,"# üåÄ What is Pyloid?

Pyloid is the Python backend version of Electron and Tauri, designed to simplify desktop application development. This open-source project, built on **QtWebEngine** and **PySide6**, provides seamless integration with various Python features, making it easy to build powerful applications effortlessly.

# üöÄ Why Pyloid?

With Pyloid, you can leverage the full power of Python in your desktop applications. Its simplicity and flexibility make it the perfect choice for both beginners and experienced developers looking for a Python-focused alternative to Electron or Tauri. It is especially optimized for building AI-powered desktop applications.

# üéØ Target Audience

Pyloid is ideal for:

* **Python Developers**: Build desktop apps with Python without learning new languages like Rust or C++.
* **AI/ML Enthusiasts**: Easily integrate AI models into desktop applications.
* **Web Developers**: Leverage your HTML, CSS, and JavaScript skills for desktop app development.
* **Electron/Tauri Users**: Enjoy a similar experience with enhanced Python integration.

# Key Features üöÄ

* **Web-based GUI Generation**: Easily build the UI for desktop applications using HTML, CSS, and JavaScript.
* **System Tray Icon Support**
* **Multi-Window Management**: Create and manage multiple windows effortlessly.
* **Bridge API between Python and JavaScript**
* **Single Instance Application / Multi Instance Application Support**: Supports both single and multi instance applications.
* **Comprehensive Desktop App Features**: Provides a wide range of functions for desktop apps, including monitor management, desktop capture, notifications, shortcuts, auto start, filewatcher and clipboard access.
* **Clean and Intuitive Code Structure**: Offers a simple and readable code structure that enhances developer productivity.
* **Live UI Development Experience**: Experience real-time UI updates as you modify your code, providing an efficient development workflow.
* **Cross-Platform Support**: Runs on various operating systems, including Windows, macOS, and Linux, Raspberry Pi OS.
* **Integration with Various Frontend Libraries**: Supports integration with frontend frameworks like HTML/CSS/JS and React.
* **Window Customization**: Customize window title bar and draggable region.
* **Direct Utilization of PySide6 Features**: Leverage almost all features of PySide6 to customize and extend the Pyloid API, offering limitless possibilities.
* **Detailed Numpy-style Docstrings**: Provide detailed and clear Numpy-style docstrings that greatly enhance the development experience, making it easy to understand and apply the API.

# üîç Comparison with Existing Alternatives

Electron: While Electron is widely used for desktop apps, it relies on Node.js and Chrome, leading to heavier resource usage. In contrast, Pyloid offers deeper integration with Python and is easier to use for Python developers, providing a smooth development experience.

Tauri: Tauri uses Rust for backend processes, which can be challenging for Python developers. Pyloid focuses on Python, making it easier to integrate with Python libraries and features, while maintaining a similar web-based UI approach.

PyQt/PySide: These frameworks require building UIs from scratch, while Pyloid allows you to create more sophisticated and modern UIs using web technologies (HTML/CSS/JS). This approach simplifies development and enables the creation of more visually appealing and complex interfaces.

PyWebview: Although PyWebview offers Python-JS bridging, Pyloid supports modern frameworks like React and provides a wider range of advanced features, such as real-time UI development and seamless Python integration, making it easier to use and more scalable for complex projects.

Key Differentiator: Pyloid excels in providing detailed, well-organized documentation and clear, Numpy-style docstrings, making the development process smoother and more efficient. This attention to detail helps developers quickly understand and apply the API, setting Pyloid apart from other alternatives.

# Documentation

[Pyloid GitHub](https://github.com/pyloid/pyloid)

[Pyloid Documentation](https://docs.pyloid.com/)

# Update üéá
Many features have been added since the previous version, and the official documentation has been updated and Numpy-style docstrings for all functions and methods!


Your feedback and testing are essential to making this open-source project even better. I am open to receiving any feature addition-related issues for my projects. Stars and support are always welcome and greatly appreciated.

Thanks!",Ok-Method-9403,1g9hwas,https://reddit.com/r/Python/comments/1g9hwas/pyloid_a_webbased_gui_framwork_for_desktop/,https://www.reddit.com/r/Python/comments/1g9hwas/pyloid_a_webbased_gui_framwork_for_desktop/,2024-10-22 13:16:57,105,0.85,105,0,22,0,0,False,False,True,False,False,Showcase,self,t3_1g9hwas
Python,[Project] Export Amazon wishlist to JSON,"I created a CLI app to allow exporting Amazon wishlist metadata to JSON.

https://github.com/nateify/amazon-wishlist-exporter

# What My Project Does

You provide an Amazon wishlist ID, store TLD, and store locale, and the web page will be scraped to generate the resulting JSON. Options allow you to format date into ISO 8601, and the ordering of the wishlist items can be specified.

I included a Javascript bookmarklet to allow the browser to download a rendered copy of wishlist HTML in case of downloading a private wishlist, since my program does not support authentication.

# Target Audience

Web scraping and archival got me into Python as a hobbyist. If you have ever wanted to preserve Amazon wishlist data or compare over time, this will be useful

# Comparison

I found a very similar Python program seen here: https://github.com/Jaymon/wishlist

It did not fit my use-case so I wrote my own. It allows scraping private wishlists by using Selenium, however I went the route of using ""curl_cffi"" which is a Python binding for curl. I preferred the simplicity, speed, and lightweight nature of it compared to a full browser automation. Jaymon's code is also usable as a module, mine is not (for now).",nateify,1g9wp7l,https://reddit.com/r/Python/comments/1g9wp7l/project_export_amazon_wishlist_to_json/,https://www.reddit.com/r/Python/comments/1g9wp7l/project_export_amazon_wishlist_to_json/,2024-10-22 23:48:43,8,0.84,8,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1g9wp7l
Python,Bank Project using pyqt5,"Hey guys,

Today i wanted to share a project i've been on for now 2 weeks and im really proud about it. Its a bank application that allows users to create an account, make transfert, create other account into the main one, change username, password etc.. This program could be used at a larger scale for real banks but i dont know how to host the files that contains the user's data online..

# What my project does

When launching the program you'll have to create an account and when logging on to it you will have the choice to either create other accounts (like saving ones) or make transferts.

Im using pyqt5 because the look is very cool and you can customize nearly everything. However because im not a good programer, im only 15 and i didn't know this library 2 weeks before it was kinda hard. But i still managed to make this app!

# Target audience

This program is just a simulation so there is no real goal or not a real targeted audience. However, why not if I feel like it, why not stocking user's data online and open the app online so everyone can open an account, deposit money and make transferts with other users. It could be an interesting idea!

# Comparison

The projects i've found where on github and at my surprise there weren't so many so im happy to say that i believe that mine is one of the best you can find, my program is good-looking and easy to use thats what it makes it better than the other one (i think)

Here is the link to the github page to my program, make sure to read the readme file to get the whole idea and other more precised information about the program:¬†[https://github.com/TuturGabao/BankApplication](https://github.com/TuturGabao/BankApplication)",FreedomOdd4991,1g9nrrg,https://reddit.com/r/Python/comments/1g9nrrg/bank_project_using_pyqt5/,https://www.reddit.com/r/Python/comments/1g9nrrg/bank_project_using_pyqt5/,2024-10-22 17:26:41,13,0.72,13,0,16,0,0,False,False,True,False,False,Showcase,self,t3_1g9nrrg
Python,How marimo notebooks bring Altair charts to life,"&gt;Data visualization is a crucial part of data analysis and storytelling. While static charts can convey information, interactive visualizations take it to the next level by allowing users to explore and understand data in depth. In this post, we‚Äôll explore how marimo notebooks breathe life into Altair charts, creating a dynamic and interactive data exploration experience.

[https://marimo.io/blog/altair](https://marimo.io/blog/altair)",mmmmmmyles,1gafpql,https://reddit.com/r/Python/comments/1gafpql/how_marimo_notebooks_bring_altair_charts_to_life/,https://www.reddit.com/r/Python/comments/1gafpql/how_marimo_notebooks_bring_altair_charts_to_life/,2024-10-23 17:05:25,0,0.43,0,0,8,0,0,False,False,True,False,False,Resource,self,t3_1gafpql
Python,Python script to loop through all 4 AWS accounts ,Hi all I have 4 AWS accounts and different application load balancers in each. Can I get a python script using boto3 where my script takes ALB DNSName as input and navigate through all 4 accounts and give me ALB details and account details on which this ALB is hosted ?,srivatsavat92,1gah45u,https://reddit.com/r/Python/comments/1gah45u/python_script_to_loop_through_all_4_aws_accounts/,https://www.reddit.com/r/Python/comments/1gah45u/python_script_to_loop_through_all_4_aws_accounts/,2024-10-23 18:02:40,0,0.11,0,0,2,0,0,False,False,True,False,False,Discussion,self,t3_1gah45u
Python,BugGPT: a GPT powered vulnerable web app generator for bug bounty practice,"WHAT MY PROJECT DOES

By leveraging OpenAI's GPT-4o model, BugGPT creates intentionally exploitable web apps for bug bounty hunters to practice, and for software developers to learn best practices to avoid these flaws. BugGPT consists of 'rooms', which are named and numbered folders consisting of the vulnerable Flask app, and a markdown document explaining the flaw, the exploit, and best practices for developers to avoid these flaws. BugGPT utilizes GitHub Actions to periodically generate new room, assuring a growing collection of challenges to those interested.

TARGET AUDIENCE

My target audience is bug bounty hunters and students who want to learn and practice their skills in a *free* and forgiving environment, which will over time grow in variation. Additionally, amateur software developers who want to learn security best practice for their development journey and career.

COMPARISON

BugGPT aims to supplement and/or replace learning on PortSwigger, Hack The Box, etc. Additionally, it aims to provide security related learning material for software developers. By being free and constantly growing, BugGPT will surely be of service to people in the field.

I would love to hear your thoughts!

https://github.com/Trivulzianus/BugGPT",dvnci1452,1g9mvni,https://reddit.com/r/Python/comments/1g9mvni/buggpt_a_gpt_powered_vulnerable_web_app_generator/,https://www.reddit.com/r/Python/comments/1g9mvni/buggpt_a_gpt_powered_vulnerable_web_app_generator/,2024-10-22 16:50:26,8,0.68,8,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1g9mvni
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1g9wxn3,https://reddit.com/r/Python/comments/1g9wxn3/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1g9wxn3/wednesday_daily_thread_beginner_questions/,2024-10-23 00:00:09,2,0.76,2,0,6,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g9wxn3
Python,A search engine for all your memes - written in Python.,"The app is open source and written entirely in Python üëâ¬†[https://github.com/neonwatty/meme\_search](https://github.com/neonwatty/meme_search)

# What My Project Does

The open source engine indexes your memes by their visual content and text, making them easily searchable. Drag and drop recovered memes into any messager.

The backend is built using these great open source components:

* moondream: a tiny, kickass vision language model
* all-MiniLM-L6-v2: a popular text embedding model
* faiss: a fast and efficient vector db
* sqlite: the swiss army knife of dbs

# Target Audience

This is a toy project. Open source and made for fun.

# Comparison

* immich: great open source image organizer, ~~does not (yet) have powerful image-to-text indexing~~
* other local photo apps: some allow for indexing but not quite at the level of a vlm yet",neonwatty,1g93yyw,https://reddit.com/r/Python/comments/1g93yyw/a_search_engine_for_all_your_memes_written_in/,https://www.reddit.com/r/Python/comments/1g93yyw/a_search_engine_for_all_your_memes_written_in/,2024-10-21 23:25:17,88,0.92,88,0,13,0,0,False,False,True,False,False,Showcase,self,t3_1g93yyw
Python,Monoranger: A poetry plugin for managing monorepos,"I recently needed to set up a monorepo and I wanted to have similar structure as in Cargo workspaces from Rust.

Essentially I wanted to have a single lockfile shared between all components/projects in the library and have a single venv with all dependencies installed as this makes development so much easier. I use Poetry so I decided to create a plugin for this usecase.

# What my project does

* Enables multiple projects in a monorepo using Poetry to use a shared poetry lockfile
* Enables multiple projects in a monorepo using Poetry to use a shared virtual environment
* Allows projects to use path dependencies and pin their versions during 'poetry build'

# Target Audience

Any Python developer that wants to create a simple monorepo using Poetry and does not want to resort to complex build tools such as Nx. I will be keeping this plugin up to date and make sure that updates and fixes are pushed in a timely manner

# Comparison

The existing tools fall in two categories: 

a) Compicated build tools that have their focus on other programming languages but also support Python. An example of this is Nx. It's a nice tool but it has too many features for my use case

b) Some existing poetry plugins that allow users to use path dependencies and replace them with a pinned version during 'poetry build' but those do not offer the option to use a shared lockfile or venv. I wanted a single plugin that can handle all my monorepo-related requirements.

# Links

[https://github.com/ag14774/poetry-monoranger-plugin](https://github.com/ag14774/poetry-monoranger-plugin)",andreasyeah,1g9swii,https://reddit.com/r/Python/comments/1g9swii/monoranger_a_poetry_plugin_for_managing_monorepos/,https://www.reddit.com/r/Python/comments/1g9swii/monoranger_a_poetry_plugin_for_managing_monorepos/,2024-10-22 20:57:54,1,0.67,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1g9swii
Python,Build a Flask API for Whisper speech-to-text on GPU for free,"Hey guys, I just released a tutorial on [how to run Whisper on Colab GPU](https://www.assemblyai.com/blog/free-whisper-api-gpu/) and serve it with a Flask API so you can experiment with fast speech-to-text for free. [Here](https://github.com/AssemblyAI-Community/free-whisper-api-gpu)'s the repository if you want to take a look at it!",SleekEagle,1g9m5u6,https://reddit.com/r/Python/comments/1g9m5u6/build_a_flask_api_for_whisper_speechtotext_on_gpu/,https://www.reddit.com/r/Python/comments/1g9m5u6/build_a_flask_api_for_whisper_speechtotext_on_gpu/,2024-10-22 16:20:53,0,0.5,0,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1g9m5u6
Python,"Introducing Amphi, Visual Data Transformation based on Python","Hi everyone,

I‚Äôd like to introduce a new free and source-available visual data transformation tool called¬†[Amphi](https://github.com/amphi-ai/amphi-etl).

# What My Project Does

Amphi is low-code tool designed for data preparation, manipulation and ETL tasks, whether you're working with files or databases, and it supports a wide range of data transformation operations.

# Target Audience

This project is free and source-available and meant for any data practitioners. It is a young project but is ready to be used in production for many use cases.

# Comparison

The main difference from tools like Alteryx or Knime is that Amphi is based on Python and generates native Python code (pandas and DuckDB) that you can export and run anywhere. You also have the flexibility to use any Python libraries and integrate custom code directly into your pipeline.

# Try it

Check out the Github repository here:¬†[https://github.com/amphi-ai/amphi-etl](https://github.com/amphi-ai/amphi-etl)

If you're interested don't hesitate to try, you can install it via pip (you need to have python and pip installed on your laptop):

`pip install amphi-etl`

`amphi start -w workspace/path/folder`

Don't hesitate to star the repo and open GitHub issues if you encounter any problems or have suggestions.

Amphi is still a young project, so there‚Äôs a lot that can be improved. I‚Äôd really appreciate any feedback!",thibautDR,1g8znm0,https://reddit.com/r/Python/comments/1g8znm0/introducing_amphi_visual_data_transformation/,https://www.reddit.com/r/Python/comments/1g8znm0/introducing_amphi_visual_data_transformation/,2024-10-21 20:18:16,30,0.86,30,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1g8znm0
Python,web_python: A web-based Python interpreter with optional static type checking,"Hey r/Python!

# What My Project Does

`web_python` uses Pyodide (WASM-based Python interpreter) and an (as of writing) experimental feature that allows mounting native file system directories to Pyodide's virtual file system to persist changes to the user's actual file system using Python code.

I've also added optional mypy type checking upon detecting a Python source code file change.

# Target Audience

I wanted a way to develop and test Python projects when I didn't have access to a native Python installation, and make the process *as close* to a native Python development workflow as possible.

This started from a personal need. But I've been making improvements, and it's ready for public use. You need a Chromium-based browser to use this (Chrome, Edge, etc.).

# Comparison

If an online Python interpreter allows multiple files, these usually have to be uploaded/downloaded manually to and from a virtual file system. `web_python` doesn't have this limitation, upon mounting a directory changes to and from the virtual file system are automatically shared.

Source code: [https://github.com/jon-edward/web\_python](https://github.com/jon-edward/web_python)

Hosted: [https://jon.is-a.dev/web\_python/](https://jon.is-a.dev/web_python/)

Let me know what you think! `:)`",NUL_SOH_STX,1g93k9z,https://reddit.com/r/Python/comments/1g93k9z/web_python_a_webbased_python_interpreter_with/,https://www.reddit.com/r/Python/comments/1g93k9z/web_python_a_webbased_python_interpreter_with/,2024-10-21 23:05:48,14,0.76,14,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1g93k9z
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1g94p5f,https://reddit.com/r/Python/comments/1g94p5f/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1g94p5f/tuesday_daily_thread_advanced_questions/,2024-10-22 00:00:08,9,0.77,9,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g94p5f
Python,I made an app to lock your keyboard/mouse (Free + Open-source),"Link:¬†[https://github.com/Axorax/keylock](https://github.com/Axorax/keylock)

Download:¬†[https://github.com/Axorax/keylock/releases](https://github.com/Axorax/keylock/releases)

# What My Project Does

Keylock allows you to lock your keyboard or mouse or lock both so it blocks input coming from your keyboard/mouse. You can unlock it by clicking the buttons that you clicked to lock. There's also something called ""Emergency exit"". It's a shortcut which is ctrl + q by default which you can change. After your keyboard/mouse is locked, you can press the shortcut and it will unlock your keyboard/mouse instantly. You can also change other settings from the config file.

# Target Audience

Anyone who wants to lock their keyboard or mouse or both for any reason. Maybe you want to clean your keyboard without turning off your PC. Perhaps you want a video to play but don't want to accidentally click any keys. Or you just want to block off input from either your keyboard or mouse.

# Comparison

There's another paid app called keyboard mouse locker. Keylock has more features, it is free and open-source.",axorax,1g8w7mc,https://reddit.com/r/Python/comments/1g8w7mc/i_made_an_app_to_lock_your_keyboardmouse_free/,https://www.reddit.com/r/Python/comments/1g8w7mc/i_made_an_app_to_lock_your_keyboardmouse_free/,2024-10-21 18:00:16,21,0.76,21,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1g8w7mc
Python,Easily make and share GIFs of your favorite YouTube moments (using Python + Whisper Turbo),"The app is open source and written entirely in Python --&gt; [https://github.com/neonwatty/yt-gif-maker](https://github.com/neonwatty/yt-gif-maker)

# What My Project Does

Allows you to easily make and share gifs of your favorite YouTube moments.  Just

* Find a youtube / shorts url containing a short phrase you want to gif-a-fy
* Enter text describing the moment you want to gif-a-fy
* Click the 'create gif' button to create your gif, download, and share!

After creation you can manually adjust, trim, or extend the length of your gif.

# Target Audience

This is a toy project.  Open source and made for fun.

# Comparison

* ezgif: provides the ability to transform video to gif, but you have to cut the video yourself
* quicktime: allows video clipping / exporting as gif but all must be done manually",neonwatty,1g8u0nu,https://reddit.com/r/Python/comments/1g8u0nu/easily_make_and_share_gifs_of_your_favorite/,https://www.reddit.com/r/Python/comments/1g8u0nu/easily_make_and_share_gifs_of_your_favorite/,2024-10-21 16:32:15,28,0.84,28,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1g8u0nu
Python,PAR YT2Text v0.2.0 Released,"# What My project Does:

PAR YT2Text Based on ""yt"" By Daniel Miessler with the addition of OpenAI Whisper for videos that don't have transcripts.

# Whats New:

* Added support for local whisper model to transcribe audio

# Key Features:

* Extract metadata, transcripts, and comments from YouTube videos
* If the transcript is not available, optionally use OpenAI Whisper API or Local model to transcribe the audio

# GitHub and PyPI

* Check out the project on GitHub or for full documentation, installation instructions, and to contribute:¬†[https://github.com/paulrobello/par\_yt2text](https://github.com/paulrobello/par_yt2text)
* PyPI [https://pypi.org/project/par\_yt2text/](https://pypi.org/project/par_yt2text/)

# Comparison:

I have seem many command line applications that pull YouTube transcripts and some that transcribe Youtube audio, but none that try to get the transcript first then fall back to auto transcription and also have API / local model options for audio transcription.

# Target Audience

AI enthusiasts and people that dont have enough time to watch 100's of video blogs a day.",probello,1g94r46,https://reddit.com/r/Python/comments/1g94r46/par_yt2text_v020_released/,https://www.reddit.com/r/Python/comments/1g94r46/par_yt2text_v020_released/,2024-10-22 00:02:36,1,0.57,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1g94r46
Python,"temporals - A time, date and datetime periods support","Hi guys!


I'm excited (and mostly nervous) to share my first Python project that is aimed at the wider audience of Python users.


# What Does It Do


**temporals** aims to provide a minimalistic utility layer on top of the Python standard library's `datetime` package in regards to working with `time`, `date` and `datetime` periods.


The library offers three different flavours of periods:

* `TimePeriod`
* `DatePeriod`
* `DatetimePeriod`


As you can probably guess from the names, each period corresponds to a `datetime`object and contains the same as its start and end variables.


When working with periods, each and every one of them is viewed as existing on a timeline, thus each period contains its own implementation of methods related to that position in time:


* Methods like `is_before`, `is_after` and `get_interim` serve the purpose of comparison between periods that exist in time in a non-overlapping fashion;
* Methods like `overlapped_by`, `overlaps_with`, `get_overlap` and `get_disconnect` provide the ability to work with periods that exist in time in an overlapping fashion;
* Operations such as equality between periods and the `in` keyword allow you to determine if a period is equal to, or exists fully within, another period


Additionally, each period instance contains a **Duration** under its `duration` attribute which is built on top of the datetime's `timedelta` and serves the purpose of giving the users the ability to work with each period's time duration.


# Comparison


Other libraries out there such as [Pendulum's Duration](https://pendulum.eustace.io/docs/#duration) and [Pandas' Interval](https://pandas.pydata.org/docs/reference/api/pandas.Interval.html) offer the same functionality as this library, and in a much richer (and, let's be honest, better) way, however, in my personal opinion, they also add a lot of overhead for this specific use case.


# Examples, Documentation, Links


In-depth documentation and examples is available on the Wiki page in Github; I didn't want to blast you all with a wall of text, so if I've managed to grab your attention so far, please do have a look at: https://github.com/dimitarOnGithub/temporals/wiki


PyPi page - https://pypi.org/project/temporals/


Source Code - https://github.com/dimitarOnGithub/temporals



# Notes


* The library does not currently have any specific logic around handling timezone aware objects (or the mix and match of them). As you know, those can be quite tricky to get right and I'd personally like to come up with an elegant way to deal with them in time.


* Any feedback and criticism is more than welcome and will be greatly appreciated! This is my first time sharing something with an audience bigger than just myself and I'm well aware there's probably a lot to improve.


Thank you for taking the time!",winterchillz,1g8nu9s,https://reddit.com/r/Python/comments/1g8nu9s/temporals_a_time_date_and_datetime_periods_support/,https://www.reddit.com/r/Python/comments/1g8nu9s/temporals_a_time_date_and_datetime_periods_support/,2024-10-21 11:54:31,11,0.72,11,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1g8nu9s
Python,Asynchronous framework for working with RabbitMQ,"Hello everybody! I wrote the first version of a small (so far) framework that allows you to work with the RabbitMQ broker.

I hope that this small project can benefit people and grow into something more. The main idea is to process essays asynchronously without resorting to extending the code ring in the project. Among the nice bonuses: there is validation of field types from messages (something like what is in FastAPI, only without dependency injection).

I would like you to study my code and, if anyone has any criticism or recommendations, leave your feedback. Thank you very much!

[https://pypi.org/project/aiocarrot/](https://pypi.org/project/aiocarrot/)  
[https://github.com/d3nbr0/aiocarrot/](https://github.com/d3nbr0/aiocarrot/)",Valuable_Lake6567,1g8dt16,https://reddit.com/r/Python/comments/1g8dt16/asynchronous_framework_for_working_with_rabbitmq/,https://www.reddit.com/r/Python/comments/1g8dt16/asynchronous_framework_for_working_with_rabbitmq/,2024-10-21 00:55:28,52,0.92,52,0,4,0,0,False,False,True,False,False,News,self,t3_1g8dt16
Python,Why people still using flask after fastapi release,"Hi folks
I was having an interview for building machine learning based api application and the interviewer told me to use flask i did that and i used flask restful but i was wondering why not use fastapi instead",Sorry_Asparagus_3194,1g83rjr,https://reddit.com/r/Python/comments/1g83rjr/why_people_still_using_flask_after_fastapi_release/,https://www.reddit.com/r/Python/comments/1g83rjr/why_people_still_using_flask_after_fastapi_release/,2024-10-20 17:16:52,191,0.72,191,0,269,0,0,False,False,True,False,False,Discussion,self,t3_1g83rjr
Python,scikit-multiflow installation issue in ubuntu ,"I have trying to install scikit-multiflow lib in my system. I have all library updated. But I'm facing a issue with 'numpy.distutils. [SS from my terminal](https://i.sstatic.net/7Pw5VPeK.png). Any one fixed this before?

I came to know that distutils is not avialable in updated numpy. Even I tired to downgrade the verision still facing issue.",dumbestindumb,1g8zd31,https://reddit.com/r/Python/comments/1g8zd31/scikitmultiflow_installation_issue_in_ubuntu/,https://www.reddit.com/r/Python/comments/1g8zd31/scikitmultiflow_installation_issue_in_ubuntu/,2024-10-21 20:06:43,1,1.0,1,0,1,0,0,False,False,True,False,False,Discussion,self,t3_1g8zd31
Python,Puzzle: Determine actual cost basis given list of transactions,"I closed a robo-traded account at Wealthfront, and received a list of all transactions, and a final cost basis (a list of held lots of a stock).

Given a list of transactions (buy 10, buy 20, buy 15, sell 12), you can tell which lots were sold from if you were left with these three lots (5, 13, 15).

So I published the transactions and the final cost basis, and thought it would be fun to try to figure out the robot's algorithm for choosing lots to sell from. Here it is: https://gist.github.com/dblume/e3d90cc9ad5f8778cf9d9413b27d38b2

Actual cost basis seems to be a mix of Highest In First Out, with a minor adjustment for Long Term Tax Gain.

I have not solved it. If you like this sort of puzzle, give it a go.",betterfool,1g8ebzh,https://reddit.com/r/Python/comments/1g8ebzh/puzzle_determine_actual_cost_basis_given_list_of/,https://www.reddit.com/r/Python/comments/1g8ebzh/puzzle_determine_actual_cost_basis_given_list_of/,2024-10-21 01:24:19,9,0.7,9,0,0,0,0,False,False,True,False,False,Discussion,self,t3_1g8ebzh
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1g8cr07,https://reddit.com/r/Python/comments/1g8cr07/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1g8cr07/monday_daily_thread_project_ideas/,2024-10-21 00:00:11,5,0.74,5,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g8cr07
Python,Mutmut 3 released,"I've just released version 3 of mutmut, the industry standard mutation tester for Python. It's an almost complete rewrite to using mutation schemata, which (when coupled with some other changes) massively improve performance. 

There is also a new terminal based UI for working with mutants that makes doing MT much faster and more fun.

Docs: https://mutmut.readthedocs.io/

Code: https://github.com/boxed/mutmut",kankyo,1g806h6,https://reddit.com/r/Python/comments/1g806h6/mutmut_3_released/,https://www.reddit.com/r/Python/comments/1g806h6/mutmut_3_released/,2024-10-20 14:39:07,31,0.85,31,0,4,0,0,False,False,True,False,False,News,self,t3_1g806h6
Python,Are all the scientific python subreddits dead?,I have checked r/scipy and it doesn't look like it has had any posts for years.  Where do people go to discuss scientific applications of python now?  I have implemented a Biot Savart equation simulation I am looking for some feedback on.,kiwiheretic,1g7t726,https://reddit.com/r/Python/comments/1g7t726/are_all_the_scientific_python_subreddits_dead/,https://www.reddit.com/r/Python/comments/1g7t726/are_all_the_scientific_python_subreddits_dead/,2024-10-20 07:16:46,106,0.88,106,0,48,0,0,False,False,True,False,False,Meta,self,t3_1g7t726
Python,sympy vector coordinate system conversion using express is completely broken and has been for years,"Just putting this here as a public service announcement to keep all of you from wasting hours of time attempting to use a ""feature"" of sympy that has been completely broken for years and sympy does not state is broken in there [documentation](https://docs.sympy.org/latest/modules/vector/coordsys.html#orienting-and-locating-new-systems). when making a child coordinate system in sympy i.e. Cartesian as the parent and Spherical as the child.

Now this doesn't appear so bad as you can just use a transformation matrix to convert between the two using a transformation matrix. However the new system is very much in spherical coordinates and should NEVER be stated as being in Cartesian and from my investigation sympy.vector.Del() is not making the correct del operator to perform curl, divergence, gradient etc when spherical cords are in terms of variables [x,y,z](https://en.wikipedia.org/wiki/List_of_common_coordinate_transformations#From_Cartesian_coordinates_2) which is a totally valid expression of spherical cords. 

I found this when attempting to convert a vector field from Cartesian to Spherical. Do not waste your time attempting to use anything other than Cartesian with sympy coordinate systems it is not worth it unless they fix it.

I have reported the issue to sympy on [github](https://github.com/sympy/sympy/issues/27164#issuecomment-2423808407) but this has been an issue for [years](https://github.com/sympy/sympy/pull/17507), if anyone wants to finish the preexisting PR or make your own I highly recommend it.",ChunkyPanda03,1g7j63m,https://reddit.com/r/Python/comments/1g7j63m/sympy_vector_coordinate_system_conversion_using/,https://www.reddit.com/r/Python/comments/1g7j63m/sympy_vector_coordinate_system_conversion_using/,2024-10-19 21:28:54,34,0.87,34,0,4,0,0,False,False,True,False,False,News,self,t3_1g7j63m
Python,I Built a simple demo of PyFiglet inside of Textual,"  
Been doing a lot of stuff with Textual lately. This is an extremely simple demo to showcase that integrating PyFiglet into Textual was quite easy.

Would welcome any advice, I'm really new to publishing.

[https://github.com/edward-jazzhands/textual-pyfiglet-demo](https://github.com/edward-jazzhands/textual-pyfiglet-demo)

**What My Project Does**

PyFigments is a program for converting text into large ASCII-art versions of that text. This is a showcase of incorporating PyFigments into a Textual widget

**Target Audience**

Anyone who likes using the Textual framework

**Comparison**

There's a good online version here: [https://patorjk.com/software/taag/](https://patorjk.com/software/taag/)

This was mostly made as a demo for making a pull request to the Textual framework.",classy_barbarian,1g7pew6,https://reddit.com/r/Python/comments/1g7pew6/i_built_a_simple_demo_of_pyfiglet_inside_of/,https://www.reddit.com/r/Python/comments/1g7pew6/i_built_a_simple_demo_of_pyfiglet_inside_of/,2024-10-20 03:00:32,13,0.81,13,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1g7pew6
Python,"Real-time YouTube Comment Sentiment Analysis with Kafka, Spark, Docker, and Streamlit","Hey r/Python! üëã

# What My Project Does:

This project performs **real-time sentiment analysis** on **YouTube comments** using a stack of **Kafka**, **Spark**, **Docker**, and **Streamlit**. It classifies comments into **positive**, **neutral**, or **negative** sentiments and displays the results in a web interface for easy visualization and interpretation. The aim is to provide insights on how users are reacting to YouTube videos in real-time, which can be especially useful for content creators, marketers, or analysts who want to track audience reception.

# Target Audience:

This project is primarily a **learning-focused, proof-of-concept** to demonstrate the power of real-time big data analytics with modern tools. While it could potentially be expanded into a production-ready system, it‚Äôs currently a **toy project** meant for educational purposes and exploring various technologies. Developers looking to explore **Kafka**, **Spark**, and **Streamlit** in a Dockerized environment will find this project helpful.

# Comparison:

What sets this project apart from existing alternatives is its **real-time processing** capability combined with the use of **big data tools**. Most sentiment analysis projects process data in batch mode or on a smaller scale, while this project uses **Kafka** for real-time streaming and **Spark** for distributed processing. It‚Äôs also containerized with **Docker**, which makes it easy to deploy and scale. The use of **Streamlit** for a real-time dashboard further enhances the user experience by allowing dynamic data visualization.

# How it Works:

* **Kafka** streams YouTube comments in real-time.
* **Spark** processes the comments and classifies their sentiment (positive, neutral, negative).
* **Streamlit** provides a web interface to display the sentiment results.
* Everything is containerized using **Docker** for easy deployment.

If you‚Äôd like to check it out:

* **Docker Image**: [d3v3r/ytcomments]()
* **GitHub Repo**: [github.com/C0HEr/YTComments](https://github.com/C0HEr/YTComments)

Would love any feedback or suggestions from the community! üòä",dever404,1g7cs5l,https://reddit.com/r/Python/comments/1g7cs5l/realtime_youtube_comment_sentiment_analysis_with/,https://www.reddit.com/r/Python/comments/1g7cs5l/realtime_youtube_comment_sentiment_analysis_with/,2024-10-19 16:32:55,69,0.85,69,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1g7cs5l
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1g7m7nw,https://reddit.com/r/Python/comments/1g7m7nw/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1g7m7nw/sunday_daily_thread_whats_everyone_working_on/,2024-10-20 00:00:09,7,0.75,7,0,4,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g7m7nw
Python,"Incorporate long strings painlessly, beautifully into Python code.","# What My Project Does

Format long strings into paragraphs for easily editable, `gq`-able, `fill-paragraph`-able text values, error messages, and other paragraph-style strings.

    from paragraphs import par
    
    PARAGRAPH = par(
        """"""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
        veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
        commodo consequat.  Duis aute irure dolor in reprehenderit in voluptate
        velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat
        cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
        est laborum.""""""
    )
    
    # the above is equivalent to
    
    PARAGRAPH = (
        ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod""
        + "" tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim""
        + "" veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea""
        + "" commodo consequat. Duis aute irure dolor in reprehenderit in voluptate""
        + "" velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint""
        + "" occaecat cupidatat non proident, sunt in culpa qui officia deserunt""
        + "" mollit anim id est laborum.""
    )

    from paragraphs import par
    
    class SuddenDeathError(Exception):
        def __init__(self, cause: str) -&gt; None:
            self.cause = cause
    
        def __str__(self) -&gt; str:
            return par(
                f""""""
                Y - e - e - e - es, Lord love you! Why should she die of
                {self.cause}? She come through diphtheria right enough the year
                before. I saw her with my own eyes. Fairly blue with it, she was.
                They all thought she was dead; but my father, he kept ladling gin
                down her throat till she came to so sudden that she bit the bowl
                off the spoon.
    
                What call would a woman with that strength in her have to die of
                {self.cause}? What become of her new straw hat that should have
                come to me? Somebody pinched it; and what I say is, them as pinched
                it done her in.""""""
            )
    
    raise SuddenDeathError(""influenza"")

# Target Audience

Meant for production. This is a stable major version with no substantive changes in several years.

# Comparison

This likely does not compare with other libraries, only short functions you may have written yourself to accomplish the same thing. I find it more convenient to keep this stable, tested library as a dependency.

[ShayHill/paragraphs: Incorporate long strings painlessly, beautifully into Python code.](https://github.com/ShayHill/paragraphs)",Shay-Hill,1g7ea20,https://reddit.com/r/Python/comments/1g7ea20/incorporate_long_strings_painlessly_beautifully/,https://www.reddit.com/r/Python/comments/1g7ea20/incorporate_long_strings_painlessly_beautifully/,2024-10-19 17:40:50,8,0.57,8,0,23,0,0,False,False,True,False,False,Showcase,self,t3_1g7ea20
Python,filefrag - library and executable to explore file fragmentation,"Spent last night making this, added some turd polish today and added it to pypi.

## ü§∑ why/what?

I wanted to get file fragmentation info so I can punch holes in files, aligned with memory pages. But I really didn't want to parse `filefrag`'s outputs, so I wrote a python version with a friendly API and a command line that can produce json.

It only works on Linux as it depends on the FIE interface, but pull requests welcome etc.

## ‚öíÔ∏è how?

See [the video](https://asciinema.org/a/681791) for a demo including installing from source, but you can install with pip:

`pip install filefrag`

Then you can run `pyfilefrag`, see `--help` for details. It has `--verbose`, and `--json` outputs for your parsing pleasure.

To use the library, just call `filefrag.FileMap('/path/whatever')` to build a map of the extents in the file using ioctl's interface. Then you can poke about in the guts of a file:

* ‚õìÔ∏è‚Äçüí• inspect fragmentation
* üîç find out where data is on your physical drive
* üü∞ compare extents between paths
* üìî use them as dict keys
* üï≥Ô∏è check files for holes, like before and after hole punching
* ‚úÖverify your XFS deduplication strategy, write your own stats tool
* üí© dump file layouts to json (`print(f""{filemap:j}""`)
* ‚ö†Ô∏è break your disk because you believed the outputs of this 0.0.1 release!

Comes with a Device class to do comparisons, so it ought to work with fragments in files on different mountpoints, bind mounts and so on (unfortunately not snap's FUSE mounts; they're far too abstract and piped in via a socket)

## üåç links

* üì∫ [asciinema](https://asciinema.org/a/681791) - video of install and use
* üßë‚Äçüíª [github](https://github.com/bitplane/pyfilefrag) - source is wtfpl licensed (with warranty clause)
* üì¶ [pypi](https://pypi.org/project/filefrag/) - current version is 0.0.1

------
Form 8.16432b follows

## What My Project Does
See above

## Target Audience
See above

## Comparison
See above

## Submission statement

AutoMod is a fascist with regex for arms and /dev/null for a brain.",david-song,1g70lqb,https://reddit.com/r/Python/comments/1g70lqb/filefrag_library_and_executable_to_explore_file/,https://www.reddit.com/r/Python/comments/1g70lqb/filefrag_library_and_executable_to_explore_file/,2024-10-19 03:56:50,19,0.79,19,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1g70lqb
Python,I built an open-source AI-driven Code Review app for GitHub repos,"**What My Project Does**

Hi Everyone,

I recently built an open-source GitHub app in Django/python that can post a detailed line-by-line code review on any new PR. I'd love help in testing it as I seek feedback on it.

Here is the app:¬†[https://gitpack.co/](https://gitpack.co/)

Here is the source-code:¬†[https://github.com/gitpack-ai/gitpack-ai](https://github.com/gitpack-ai/gitpack-ai)¬†and an example PR review:¬†[https://github.com/gitpack-ai/gitpack-ai/pull/9](https://github.com/gitpack-ai/gitpack-ai/pull/9)

It's free for open-source repos, but I can enable this for private repos for a month or so, if you DM me. Appreciate your feedback! I hope you all can find value in it.

**Target Audience** 

Anyone who is actively developing on GitHub",shootingstar00,1g6m2mb,https://reddit.com/r/Python/comments/1g6m2mb/i_built_an_opensource_aidriven_code_review_app/,https://www.reddit.com/r/Python/comments/1g6m2mb/i_built_an_opensource_aidriven_code_review_app/,2024-10-18 16:18:01,94,0.76,94,0,26,0,0,False,False,True,False,False,Showcase,self,t3_1g6m2mb
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1g6wbs0,https://reddit.com/r/Python/comments/1g6wbs0/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1g6wbs0/saturday_daily_thread_resource_request_and/,2024-10-19 00:00:11,3,0.64,3,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g6wbs0
Python,"FriendlyDateParser, just another Python module for date parsing! ","Hello!

I've just released **FriendlyDateParser**, just another Python module for date parsing.


## What My Project Does

It can parse complex date expressions like:

* `2 days before the last day of next month`
* `1h15m after next Sunday at midnight CEST`
* `the second Monday of 2012`

The goal is to make working with date references straightforward, even when the expressions are complex.


## Target Audience

At this point, the module is still young and bugs should be expected. There may still be some edge cases which are not handled correctly.


## Comparison

Well, actually the reason for writing this module is that I had been using [**dateparser**](https://dateparser.readthedocs.io/) (*the* mature module with a similar purpose) for a while, but I found it was not able to handle all the cases I needed. So, I created **FriendlyDateParser** to address those gaps.

On the other hand, `dateparser` is multilingual while `friendlydateparser` only support English expressions (and I don't plan to extend the module in that way).

## Links

Check out the documentation and repo [here](https://github.com/salva/py-friendlydateparser)!

The module is also available from [PyPI](https://pypi.org/project/friendlydateparser/)



I'd love to hear your feedback and see how it works for you!",sfandino,1g6nwca,https://reddit.com/r/Python/comments/1g6nwca/friendlydateparser_just_another_python_module_for/,https://www.reddit.com/r/Python/comments/1g6nwca/friendlydateparser_just_another_python_module_for/,2024-10-18 17:35:21,12,0.72,12,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1g6nwca
Python,"PyTraceToIX - Debugging Jinja2 template, Flask web apps without breaking the design or code changes ","[Project on GitHub](https://github.com/a-bentofreire/pytracetoix)

## What My Project Does

PyTraceToIX is an expression tracer designed for debugging Jinja2 templates, Flask web apps, lambdas, list comprehensions, method chaining, and expressions in general.

Code editors often cannot set breakpoints within these kinds of expressions, which requires significant code modifications to debug effectively.
For Jinja2 templates, the debug extension can be used, but it typically dumps the entire context, making it difficult to isolate specific issues.

PyTraceToIX solves this by allowing developers to trace and write specific data directly to sys.stdout or a stream without altering the design or making any changes to the web application.

Additionally, PyTraceToIX can capture multiple inputs and their results, displaying them all in a single line, making it easier to view aggregated data and trace the flow of values.

PyTraceToIX offers a straightforward solution to these challenges, simplifying debugging while preserving the integrity of the original codebase.
It was designed to be simple, with easily identifiable functions that can be removed once the bug is found.

PyTraceToIX has 2 major functions:
- c__ capture the input of an expression input. ex: c__(x)
- d__ display the result of an expression and all the captured inputs. ex: d__(c__(x) + c__(y))

And 2 optional functions:
- init__ initializes display format, output stream and multithreading.
- t__ defines a name for the current thread.

## Features

- No external dependencies.
- Minimalist function names that are simple and short.
- Traces Results along with Inputs.
- Configurable Result and Input naming.
- Output to the `stdout` or a stream.
- Supports multiple levels.
- Capture Input method with customizable `allow` and `name` callbacks.
- Display Result method with customizable `allow`, `before`, and `after` callbacks.
- Result and Inputs can be reformatted and overridden.
- Configurable formatting at global level and at function level.
- Multithreading support.

## Target Audience

Anyone who wants to debug Jinja2 templates, Flask web apps, lambdas, list comprehensions, method chaining, and expressions in general.
It's not target for production, although, it could be used as well.

## Comparison

I looked for alternatives and I couldn't find any other project that would solve the same problem.

## Example

- A flask web app uses a Jinja2 template
- It generates a shopping card html table with product, quantity and final price.

| Product | Qty | Final Price |
| ------- | --- | ----------- |
| Smartphone | 5 | 2500 |
| Wireless B | 50 | 49960 |
| Smartphone | 20 | 1990 |

- The product name is only the first 11 characters, but we need to know the full name.
- It only shows the final price which is Price * Qty - discount.
- The discount is dependent of the quantity.
- c__ captures the complete name but doesn't change the design.
- c__ captures the qty and labels it as Qty.
- c__ captures the discount value.
- d__ outputs to sys.stdout all the captured inputs and the final price.

The stdout will display these lines:

```plaintext
i0:`Smartphone 128GB` | qty:`5` | i2:`500` | discount:`0` | _:`2500`
i0:`Wireless Bluetooth Headphones` | qty:`50` | i2:`1000` | discount:`40` | _:`49960`
i0:`Smartphone 64GB Black` | qty:`20` | i2:`100` | discount:`10` | _:`1990`
```

Jinja2 template:

```html
&lt;html lang=""en""&gt;
&lt;head&gt;&lt;link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css"" rel=""stylesheet""&gt;&lt;/head&gt;
&lt;body&gt;
    &lt;div class=""container mt-5""&gt;
        &lt;h1&gt;Shopping Cart&lt;/h1&gt;
        &lt;table class=""table table-striped""&gt;
            &lt;tr&gt;&lt;th&gt;Product&lt;/th&gt;&lt;th&gt;Qty&lt;/th&gt;&lt;th&gt;Final Price&lt;/th&gt;&lt;/tr&gt;
            {% for item in purchases %}
            {% set product = products[item['product']] %}
            &lt;tr&gt;
                &lt;td&gt;{{ c__(product['name'])[0:10] }}&lt;/td&gt;
                &lt;td&gt;{{ c__(item['qty'], name='qty') }}&lt;/td&gt;
                &lt;td&gt;{{ d__(c__(product['price']) * item['qty']
                    - c__(discount(item['qty']), name='discount')) }}&lt;/td&gt;
            &lt;/tr&gt;
            {% endfor %}
        &lt;/table&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
```

app.py:

```python
from flask import Flask, render_template
from pytracetoix import c__, d__

app = Flask(__name__)

app.Jinja2_env.globals['d__'] = d__
app.Jinja2_env.globals['c__'] = c__

DISCOUNTS = {50: 40, 20: 10, 10: 5, 0: 0}
PRODUCTS = {
    'WB50CC': {'name': 'Wireless Bluetooth Headphones', 'price': 1000},
    'PH20XX': {'name': 'Smartphone 128GB', 'price': 500},
    'PH50YY': {'name': 'Smartphone 64GB Black', 'price': 100}
}

PURCHASES = [
    {'product': 'PH20XX', 'qty': 5},
    {'product': 'WB50CC', 'qty': 50},
    {'product': 'PH50YY', 'qty': 20}
]


def discount(qty): return next((k, v) for k, v in DISCOUNTS.items() if k &lt;= qty)[1]


@app.route('/', methods=['GET'])
def index():
    return render_template('index.html', products=PRODUCTS, purchases=PURCHASES, discount=discount)


if __name__ == '__main__':
    app.run(debug=True)
```

If the previous example, we add c__ to the discount function on app.py:

```python
def discount(qty): return c__(next((k, v) for k, v in DISCOUNTS.items() if k &lt;= qty))[1]
```

It will add richer discount information to the output:

```plaintext
i0:`Smartphone 128GB` | qty:`5` | i2:`500` | i3:`(0, 0)` | discount:`0` | _:`2500`
i0:`Wireless Bluetooth Headphones` | qty:`50` | i2:`1000` | i3:`(50, 40)` | discount:`40` | _:`49960`
i0:`Smartphone 64GB Black` | qty:`20` | i2:`100` | i3:`(20, 10)` | discount:`10` | _:`1990`
```",abentofreire,1g6fd28,https://reddit.com/r/Python/comments/1g6fd28/pytracetoix_debugging_jinja2_template_flask_web/,https://www.reddit.com/r/Python/comments/1g6fd28/pytracetoix_debugging_jinja2_template_flask_web/,2024-10-18 11:02:58,27,0.94,27,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1g6fd28
Python,PyQt best option for commercial use? ,"I'm looking to possibly develop an app that will run on a Linux Desktop, specifically Ubuntu, and the latest OS X. The UI and performance are very important. Is PyQt my best option?",yellowgolfball,1g6brra,https://reddit.com/r/Python/comments/1g6brra/pyqt_best_option_for_commercial_use/,https://www.reddit.com/r/Python/comments/1g6brra/pyqt_best_option_for_commercial_use/,2024-10-18 06:32:29,39,0.81,39,0,39,0,0,False,False,True,False,False,Discussion,self,t3_1g6brra
Python,"Advanced python tips, libraries or best practices from experts?","I have been working as a software engineer for about 2 years and python was always my go to language while building various different application. I always tried to keep my code clean and implement best practices as much as possible. 

I wonder if there are many more tips which could enhance the way I write python? ",FuzzyCraft68,1g5xswk,https://reddit.com/r/Python/comments/1g5xswk/advanced_python_tips_libraries_or_best_practices/,https://www.reddit.com/r/Python/comments/1g5xswk/advanced_python_tips_libraries_or_best_practices/,2024-10-17 18:29:20,153,0.92,153,0,71,0,0,False,False,True,False,False,Discussion,self,t3_1g5xswk
Python,[Project] I was tired of reading through thousands of lines of documentation,"Alongside Python, Im learning C. So as a way of testing how much I have learned, I decided to dabble in some socket programming in C. Found beej's guide, and got to work.

Problem? I hate reading too much educational stuff. I realized that after every 10 or so minutes I'd lose focus of what I was reading

Solution? Build a program into which I can stuff the ENTIRE documentation, then ask it questions, and it'll give me answers from the documentation I stuffed it with.

Behold, FTHEDOCS!

**What my project does:** It basically gives you a question-answer like interface to search the documentation, so you dont have to spend hours looking for those 2 lines.

**Target audience:** Anyone looking for a nicer way to read the docs. Or anyone who has a bunch of text and would like to search through it.

**Comparisons:** Not that I know of. Though I guess the Ctrl+F shortcut is kind of similiar

**REPO:** [**https://github.com/muaaz-ur-habibi/fthedocs**](https://github.com/muaaz-ur-habibi/fthedocs)

  
Do note: This was a fun project I built as a way to learn RAG, and to suite my specific needs. As a result, it might not be suited for you, though I tried my best to make it as customizable as possible.

  
Thanks to this, I got a simple connection from and to google up and running :)",Ok-Balance4649,1g5nyng,https://reddit.com/r/Python/comments/1g5nyng/project_i_was_tired_of_reading_through_thousands/,https://www.reddit.com/r/Python/comments/1g5nyng/project_i_was_tired_of_reading_through_thousands/,2024-10-17 10:43:42,58,0.81,58,0,13,0,0,False,False,True,False,False,Showcase,self,t3_1g5nyng
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1g654oy,https://reddit.com/r/Python/comments/1g654oy/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1g654oy/friday_daily_thread_rpython_meta_and_freetalk/,2024-10-18 00:00:43,5,0.86,5,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g654oy
Python,LLM Static Assert: Using LLMs for more expressive static analysis,"Hi everyone, I've been working on a Python library called [LLM Static Assert](https://github.com/kdunee/llm-static-assert) that uses large language models (LLMs) to perform static analysis. It's designed to help you verify complex code properties that might be difficult to capture with traditional static analysis tools.

**What it does:**

LLM Static Assert lets you write assertions in plain English. For example, you could assert that ""all public methods in class X should have a corresponding unit test.""

Here's a quick example of how it works:

    # Traditional approach would require:
    # 1. Iterating through all methods
    # 2. Parsing AST for each method
    # 3. Checking exception handling patterns
    # 4. Verifying logging calls
    # 5. Maintaining complex test code
    
    # With AILintTest:
    def test_error_handling():
        ailint.assert_code(
            ""All methods in {module} should use the custom ErrorHandler class for exception management, and log errors before re-raising them"",
            {""module"": my_critical_module}
        )
    
    # Another example - checking documentation consistency
    def test_docstring_completeness():
        ailint.assert_code(
            ""All public methods in {module} should have docstrings that include Parameters, Returns, and Examples sections"",
            {""module"": my_api_module}
        )

The library then uses an LLM to analyze your code and determine whether the assertion holds true.

**Target audience:**

This library is aimed at developers who are comfortable with static analysis and are looking for more expressive ways to verify their code. It could be particularly useful for projects with complex or nuanced code properties that are difficult to check with traditional tools.

**Comparison:**

Traditional static analysis tools rely on predefined rules and patterns. LLM Static Assert, on the other hand, leverages the reasoning capabilities of LLMs to understand and evaluate code in a more flexible and context-aware manner. This opens up possibilities for checking a wider range of code properties, including those that are difficult to define formally.

**Additional notes:**

* The library uses [LiteLLM](https://github.com/BerriAI/litellm) for LLM integration, allowing you to easily switch between different models.
* It also implements a quorum system to improve the reliability of the results.
* LLM Static Assert is still experimental, but I believe it has the potential to be a valuable addition to the Python ecosystem.

I've also written a more detailed blog post about the project, which you can find here: [https://www.kosmadunikowski.com/posts/llm-static-assert/](https://www.kosmadunikowski.com/posts/llm-static-assert/)

Feedback and suggestions are welcome!",kdunee,1g6mwtc,https://reddit.com/r/Python/comments/1g6mwtc/llm_static_assert_using_llms_for_more_expressive/,https://www.reddit.com/r/Python/comments/1g6mwtc/llm_static_assert_using_llms_for_more_expressive/,2024-10-18 16:53:25,0,0.33,0,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1g6mwtc
Python,"Latest release of FastAgency makes building web, REST or streaming apps with AI agents a breeze","Today we hit a major milestone with the latest 0.3.0 release of the [**FastAgency**](https://github.com/airtai/fastagency) framework. With just a few lines of code, it allows you to go from a workflow written in **AutoGen** to:

* a web application using [**Mesop**](https://google.github.io/mesop/),
* a REST application using [**FastAPI**](https://fastapi.tiangolo.com/tutorial/), or
* a fully-distributed application using [**NATS.io**](https://nats.io/) message broker and [FastStream](https://github.com/airtai/faststream).

This solves a major problem of bringing agentic workflows written in frameworks such as **AutoGen** to production. The process that took us three months to get [Captn.ai](https://captn.ai/) to production can now be done in three days or less!

Please check out our GitHub repository and let us know what you think about it:

[https://github.com/airtai/fastagency](https://github.com/airtai/fastagency)",davorrunje,1g5vlip,https://reddit.com/r/Python/comments/1g5vlip/latest_release_of_fastagency_makes_building_web/,https://www.reddit.com/r/Python/comments/1g5vlip/latest_release_of_fastagency_makes_building_web/,2024-10-17 16:55:39,13,0.66,13,0,0,0,0,False,False,True,False,False,Resource,self,t3_1g5vlip
Python,"Create and run a microservice, with a simple browser prompt.  Download and customize in your IDE.","Open the [Web/GenAI website](https://apifabric.ai/admin-app/), and provide a **Natural Language prompt to create a microservice** - a database, an API and a Web App.  Then run it.  See the example prompt below.

&gt;Working software - real screens - have proven to be an effective way to collaborate and iterate with stakeholders, to ensure the requirements are met.  Much more effective than wire frames.

You can now produce these in a minute - no database definition, no framework complexity, not even any screen painting.

Then, download the project and **customize it in your IDE**.  You can also use CodeSpaces, a browser-based version of VSCode.

**Open container-based deployment** supports the infrastructure of your choice.

Web/GenAI is part of [API Logic Server](https://apilogicserver.github.io/Docs/WebGenAI/), an open source Python project based on the Flask and SQLAlchemy frameworks.

You can also view [this video](https://www.youtube.com/watch?v=-tMGqDzxd2A&amp;t=4s).

.

# 1. Web/GenAI - create microservice from prompt

Enter the following prompt into the Web/GenAI site:

    Create a system with customers, orders, items and products.
    
    Include a notes field for orders.
    
    Use LogicBank to create declare_logic() to enforce the Check Credit requirement (do not generate check constraints):
    1. Customer.balance &lt;= credit_limit
    2. Customer.balance = Sum(Order.amount_total where date_shipped is null)
    3. Order.amount_total = Sum(Item.amount)
    4. Item.amount = quantity * unit_price
    5. Store the Item.unit_price as a copy from Product.unit_price

You can also use an existing database.

# 2. What gets created

The created microservice includes:

1. **A Web App:** multi-table (master/detail), multi-page with page navigations, lookups (find a Product by name, not product#) and automatic joins (show Product Name for each Item)
2. **Logic:** the rules above are translated to Python rule declarations
3. **A JSON:API**: multi-table standards-based API, including swagger
4. **A database**: with test data

# Created Project: Models, not code

What does *not* get created is piles of code that are hard to understand and modify.  Rather, the app, logic and api are represented as *models.* expressed in Python:

1. The web app is a YAML file (about 150 lines - no html or JavaScript).
2. The api looks like this (the models are SQLAlchemy data model classes, automatically created from the database):



        api.expose_object(database.models.Customer, method_decorators= method_decorators)
        api.expose_object(database.models.Item, method_decorators= method_decorators)
        api.expose_object(database.models.Order, method_decorators= method_decorators)
        api.expose_object(database.models.Product, method_decorators= method_decorators)

# 3. Customize in your IDE: Rules, and Python

You can download the project and use your preferred desktop IDE, or continue using the browser with CodeSpaces.  You customize using Rules, and Python.  Let's have a look.

# Rules

The logic above (items 1-5) is translated into the following:

        # Logic from GenAI:
    
        Rule.sum(derive=Customer.balance, 
             as_sum_of=Order.amount_total, 
             where=lambda row: row.date_shipped is None)
        Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)
        Rule.formula(derive=Item.amount, 
             as_expression=lambda row: row.quantity * row.unit_price)
        Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)
        Rule.constraint(validate=Customer,
             as_condition=lambda row: row.balance &lt;= row.credit_limit,
             error_msg=""Balance exceeds credit limit ({row.credit_limit})"")
    
        # End Logic from GenAI

Note the Rule engine preserves the abstraction level of your logic - still just 5 rules, translated to Python.  Without rules, this would [require 200 lines of code](https://apilogicserver.github.io/Docs/Logic-Why/)... difficult to understand, debug, and extend.

You can add additional logic using IDE services for code completion.  Whether from natural language or via code completion, there are several important aspects of logic:

* Logic is **automatically reused** across all relevant Use Cases (add order, reselect products, re-assign orders to different customers, etc).  This drives quality by eliminating missed corner cases.
* Logic is **automatically ordered**, so maintenance does not require you to 'untangle' existing code to determine where to insert new logic.  This simplifies maintenance.
* **Automatic dependency management** analyzes each transaction (at the attribute level) to determine which rules fire (others are pruned).  **Automatic chaining** supports multi-table transactions (e.g., the a new Item *adjusts* the `Order.amount_total`, which *adjusts* the `Customer balance`, with is checked against the `credit_limit`).
* Logic is **optimized** to minimize SQL.  The adjustments noted above avoid expensive multi-row queries (`select sum`).

You can also activate **security** (`ApiLogicServer add-security db_url=auth`), and add a declarative Grant to filter out inactive customers for the sales role.

Debug the multi-table logic in your debugger.  The console log depicts each rule firing, with multi-row chaining shown by indentation.

&gt;Backend logic is typically nearly half the system.  A declarative approach makes this *far* more concise, easier to maintain, and higher quality.

# Python

In addition to rules, you can use standard Python and Python libraries.

Let's iterate our project to add Product.CarbonNeutral, and add business logic to provide discounts.

We update the logic - we change the amount derivation to test for carbon neutral products, using standard Python:

        def derive_amount(row: models.Item, 
                          old_row: models.Item, logic_row: LogicRow):
            amount = row.Quantity * row.UnitPrice
            if row.Product.CarbonNeutral == True and row.Quantity &gt;= 10:
               amount = amount * Decimal(0.9)  # breakpoint here
            return amount
    
        Rule.formula(derive=models.Item.Amount, calling=derive_amount)

Both the Rules and Python are automatically part of your API.  So, you can verify it works by using the Admin app to add a new Item to our Order, or Swagger.

# Application Integration

In addition to customizing our logic, we might also want to extend our API for integration, e.g., a custom endpoint for B2B orders, and send messages to internal applications.

We create a new B2B endpoint using standard Flask.  API Logic Server provides RowDictMapping services to transform incoming requests into SQLAlchemy rows.

    class ServicesEndPoint(safrs.JABase):
    
    
    (http_methods=[""POST""])
    def OrderB2B(self, *args, **kwargs):
        """""" # yaml creates Swagger description (not shown)
        """"""
    
        db = safrs.DB         # Use the safrs.DB, not db!
        session = db.session  # sqlalchemy.orm.scoping.scoped_session
    
        order_b2b_def = OrderB2B()
        request_dict_data = request.json[""meta""][""args""][""order""]
        sql_alchemy_row = order_b2b_def.dict_to_row(row_dict = 
                              request_dict_data, session = session)
    
        session.add(sql_alchemy_row)
        return {""Thankyou For Your OrderB2B""}  # automatic commit, which executes transaction logic

Our logic is automatically re-used for all updates, whether from the Admin App or the new custom endpoint.  That is why our api implementation is so small.

We extend our logic with an event that sends a Kafka message for internal App Integration:

    #als: Demonstrate that logic == Rules + Python (for extensibility)
    
    def send_order_to_shipping(row: Order, old_row: Order, logic_row: LogicRow):
            """""" #als: Send Kafka message formatted by RowDictMapper
    
            Args:
                row (Order): inserted Order
                old_row (Order): n/a
                logic_row (LogicRow): bundles curr/old row
            """"""
            if logic_row.is_inserted():
                kafka_producer.send_kafka_message(logic_row=logic_row,
                                     row_dict_mapper=OrderShipping,
                                     kafka_topic=""order_shipping"",
                                     kafka_key=str(row.OrderID),
                                     msg=""Sending Order to Shipping"")
                
    Rule.after_flush_row_event(on_class=Order, calling=send_order_to_shipping)

Test the integration with Swagger.  The log shows the logic, and the Kafka payload.

# Summary

And there you have it.

**GenAI Microservice Automation** creates projects with one prompt, providing API and App Automation, right from your browser.  Or, if you prefer, install and run from the command line.  Iterate, and find out fast if the requirements are understood, *before* intensive development.

Customize with **Logic Automation**, declaring rules to reduce the backend half of your system by 40X. No restrictions - use Python as required.

Open source, your IDE, container-based deployment, and all the flexibility of a framework.",ValBayArea,1g5pm3z,https://reddit.com/r/Python/comments/1g5pm3z/create_and_run_a_microservice_with_a_simple/,https://www.reddit.com/r/Python/comments/1g5pm3z/create_and_run_a_microservice_with_a_simple/,2024-10-17 12:23:47,29,0.79,29,0,10,0,0,False,False,True,False,False,Tutorial,self,t3_1g5pm3z
Python,"I made my computer go ""Cha Ching!"" every time my website makes money","**What My Project Does**

This is a really simple script, but I thought it was a pretty neat idea so I thought I'd show it off.

It alerts me of when my website makes money from affiliate links by playing a Cha Ching sound.

It searches for an open Firefox window with the title ""eBay Partner Network"" which is my daily report for my Ebay affiliate links, set to auto refresh, then loads the content of the page and checks to see if any of the fields with ""¬£"" in them have changed (I assume this would work for US users just by changing the ¬£ to a $). If it's changed, it knows I've made some money, so it plays the Cha Ching sound.

**Target Audience**

This is mainly for myself, but the code is available for anyone who wants to use it.

**Comparison**

I don't know if there's anything out there that does the same thing. It was simple enough to write that I didn't need to find an existing project.

I'm hoping my computer will be making noise non stop with this script.

Github: https://www.github.com/sgriffin53/earnings_update",haddock420,1g5f73k,https://reddit.com/r/Python/comments/1g5f73k/i_made_my_computer_go_cha_ching_every_time_my/,https://www.reddit.com/r/Python/comments/1g5f73k/i_made_my_computer_go_cha_ching_every_time_my/,2024-10-17 01:11:31,212,0.86,212,0,36,0,0,False,False,True,False,False,Showcase,self,t3_1g5f73k
Python,Durable OpenAI Swarm - Reliable Multi-Agent Orchestration with OAI‚Äôs Swarm,"**What my project does**

Durable Swarm is a drop-in replacement for OpenAI‚Äôs Swarm that augments it with durable execution to help you build reliable and scalable multi-agent systems.

Durable Swarm makes your agentic workflows resilient to failures, so that if they are interrupted or restarted, they automatically resume from their last completed steps.

https://github.com/dbos-inc/durable-swarm

As multi-agent workflows become more common, longer-running, and more interactive, it's important to make them reliable. If an agent spends hours waiting for user inputs or processing complex workflows, it needs to be resilient to transient failures, such as a server restart. However, reliable multi-agent orchestration isn't easy‚Äîit requires complex rearchitecting like routing agent communication through SQS or Kafka.

Durable execution helps you write reliable agents while preserving the ease of use of a framework like Swarm. The idea is to automatically persist the execution state of your Swarm workflow in a Postgres database. That way, if your program is interrupted, it can automatically resume your agentic workflows from the last completed step.
Here‚Äôs an example application‚Äìa durable refund agent that automatically recovers from interruptions when processing refunds:

https://github.com/dbos-inc/durable-swarm/tree/main/examples/reliable_refund

We also converted all of OpenAI‚Äôs example applications to Durable Swarm:

https://github.com/dbos-inc/durable-swarm/tree/main/examples

Under the hood, we implemented Durable Swarm using DBOS (https://github.com/dbos-inc/dbos-transact-py), an open-source lightweight durable execution library that my company developed. The entire implementation of Durable Swarm is 24 lines of code, declaring the main loop of swarm to be a durable workflow and each chat completion or tool call to be a step in that workflow. Check it out here:

https://github.com/dbos-inc/durable-swarm/blob/main/durable_swarm.py


**Target Audience**

This is designed for both hobby projects and production workloads.  Anyone who wants a simple way to run OpenAI's swarm reliably would be interested in our library.  You can host locally with our open-source library or get the full set of optimizations by uploading to our cloud.

**Comparison**

This is OpenAIs swarm with durability. There is no other library like this, probably because OAI's swarm is only two days old!

We'd love to hear what you think!  We‚Äôll be in the comments for the rest of the day to answer any questions you may have.",jedberg,1g5uuuo,https://reddit.com/r/Python/comments/1g5uuuo/durable_openai_swarm_reliable_multiagent/,https://www.reddit.com/r/Python/comments/1g5uuuo/durable_openai_swarm_reliable_multiagent/,2024-10-17 16:24:11,12,0.83,12,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1g5uuuo
Python,"[Project] Automatically detecting optimal cuda device
","For folks who are doing ML, I often face the challenge of automating experiments on a shared workstation with multiple CUDA devices available. Instead of manually tracking which GPU has the most available memory, today I decided to create a simple package that handles this task for me.

[Pypi](https://pypi.org/project/cuda-selector/0.1.0/)

[Github](https://github.com/SamerMakni/cuda-selector)

```python
from cuda_selector import auto_cuda
        
# Select cuda device with most memory available
device = auto_cuda()
        
# Select cuda device with lowest power usasge usage
device = auto_cuda('power')

# Select cuda device with lowest power usasge usage
device = auto_cuda('utilization')
```

**What My Project Does**: It simply autodetects which optimal cuda device to use based on gpu usage, power, and available memory.

**Target Audience**: People who are running experiments on large shared workstation, for example in research centers.

**Comparison** Easier than choosing one cuda device at the begining of the experiment, it also automatically use cpu if no cuda devices are available or apple mps if you're on a mac device and mps are available.",SensitiveAccident505,1g5wv6n,https://reddit.com/r/Python/comments/1g5wv6n/project_automatically_detecting_optimal_cuda/,https://www.reddit.com/r/Python/comments/1g5wv6n/project_automatically_detecting_optimal_cuda/,2024-10-17 17:49:12,6,0.8,6,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1g5wv6n
Python,"Conceptual optimization, would a custom byte checking function be faster than len(list(object)) &gt;0?","i know this can be technically tested with a time thingy inside a test environment with something like timeit, but the answer would be limited to my machine's performance and state

rather i'm perplexed if the python code overhead compared to the direct cpython implementation + boolean check implementation would be roughly equal or not

i'm working with an api rather than directly python, this api has really weird quirks and what would be a usless improvement like `your_list[:]` in this software it can change between a crash and subsequent cpu hanging to a few second of processing due to it's horrible implementations of some of it's custom types

being a type conversion is already necessary in this software from it's custom types to a python datastruct to improve performance, the thought is: being it's a forced single thread api, making that usually useless millisecond save becomes important

would
```py
def is_data_struct_empty(data_struct: list | set | dict | tuple):
    match type(data_struct):
        case ""list"":
            return (data_struct.__sizeof__() == 40)
        case ""set"":
            return (data_struct.__sizeof__() == 200)
        case ""dict"":
            return (data_struct.__sizeof__() == 48)
        case ""tuple"":
            return (data_struct.__sizeof__() == 24)
        case _:
            return (len(data_struct) &gt; 0) #fallback hopefully never used
```
be faster than
```py
if ( len(list(weird_api_type)) &gt; 0 ):
```
from a conceptual perspective?

note: the conversion to list can't be cached as often the data will change mid operation and causes frequently stale data to be used instead making
```py
var = deepcopy(list(object))
if ( len(var) &gt; 0 ):
```
not feasible",ValyArhal,1g6fr6o,https://reddit.com/r/Python/comments/1g6fr6o/conceptual_optimization_would_a_custom_byte/,https://www.reddit.com/r/Python/comments/1g6fr6o/conceptual_optimization_would_a_custom_byte/,2024-10-18 11:26:52,0,0.38,0,0,8,0,0,False,False,True,False,False,Discussion,self,t3_1g6fr6o
Python,Explore (almost) any python codebase interactively,"https://github.com/markuslahde/pop-up-ide

#What My Project Does
I made a package that enables entering interactive/iterative coding environment from any line of regular python code. Namespace of host environment is copied and can be manipulated inside the environment without irreversible changes. The coding environment has autocomplete and syntax highlighting.

#Target Audience 
This is a toy project, but I think this kind of tool could have use cases in debugging or iterative development.

#Comparison
Functionality is a bit similar to REPL or notebook workflow.

Comments and ideas are welcome!",ArkhamDuels,1g5sxez,https://reddit.com/r/Python/comments/1g5sxez/explore_almost_any_python_codebase_interactively/,https://www.reddit.com/r/Python/comments/1g5sxez/explore_almost_any_python_codebase_interactively/,2024-10-17 15:01:03,7,0.74,7,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1g5sxez
Python,Why do widely used frameworks in python use strings instead of enums for parameters?,"First that comes to mind is matplotlib. Why are parameters strings? E.g. `fig.legend(loc='topleft')`.  
Wouldn't it be much more elegant for enum `LegendPlacement.TOPLEFT` to exist?

What was their reasoning when they decided ""it'll be strings""?

EDIT: So many great answers already! Much to learn from this...",tothespace2,1g52103,https://reddit.com/r/Python/comments/1g52103/why_do_widely_used_frameworks_in_python_use/,https://www.reddit.com/r/Python/comments/1g52103/why_do_widely_used_frameworks_in_python_use/,2024-10-16 15:25:50,227,0.9,227,0,110,0,0,False,False,True,False,False,Discussion,self,t3_1g52103
Python,Extension to render Google Colab Forms in regular Jupyter Notebooks,"Hi everyone,

Lately, I‚Äôve been bouncing between Google Colab and Jupyter for my projects. While I still prefer Jupyter for most of my work, I really miss the simplicity of Colab‚Äôs Forms feature.

So I create this tiny Extension bringing the functionality of Google Colab Forms to Jupyter Notebooks

    # Just add this to the top of your notebook
    %pip install ipyform
    %load_ext ipyform
    %form_config --auto-detect 1

From there, you can use the same Colab Form syntax you‚Äôre familiar with. It also plays well with all the popular data visualization libraries, including **matplotlib**, **plotly**, and **altair.**

Code¬†here:¬†[https://github.com/phihung/ipyform](https://github.com/phihung/ipyform)

*Let me know your thoughts or if you have any suggestions!*

**What My Project Does**

Extension to render *Google Colab Forms* on regular Jupyter Notebooks.

**Target audience**

People who use Jupyter notebooks - so data scientists and ML researchers.

**Comparisons**

Some [other](https://stackoverflow.com/questions/68360285/is-there-a-way-to-use-google-colab-form-feature-in-a-local-jupyter-notebook) approaches to solving this problem that I've seen include:

* Avoid Colab forms and use ipywidgets instead
* Connecting Colab UI to local Jupyter server",phi89,1g5mg6y,https://reddit.com/r/Python/comments/1g5mg6y/extension_to_render_google_colab_forms_in_regular/,https://www.reddit.com/r/Python/comments/1g5mg6y/extension_to_render_google_colab_forms_in_regular/,2024-10-17 08:54:20,5,0.79,5,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1g5mg6y
Python,Vim Plugin for Incremental Programming (SLIME) with Python,"I just did a major refactor of some Vim plugin ([https://www.vim.org/](https://www.vim.org/)) I've been using for a bit that was inspired by Emacs' slime-mode ([http://common-lisp.net/project/slime/](http://common-lisp.net/project/slime/)), but focused on Python rather than the parentheses-oriented languages. I've been calling it [vim-incpy](https://github.com/arizvisa/vim-incpy) and it's hosted at [https://github.com/arizvisa/vim-incpy](https://github.com/arizvisa/vim-incpy).

You can use ""`arizvisa/vim-incpy""` to install it with whatever Vim/Neovim plug-in manager you're using. The refactor added support for plugin managers, neovim's terminal, and includes documentation (which is always painful to write).

# Target Audience

This is for users general python users of the Vim editors (Vim or Neovim). I tend to find having a Python interpreter always available as useful even when I'm not writing Python. Hopefully others feel the same way...

# What my project does

The gist of it is that it's just a hidden buffer for whatever process you have configured. So you can always evaluate something in that REPL if you need to, and keep it hidden if you care about the screen space.. or not. It's pretty handy if you main with Python or prefer modal-editing for your REPL-ing. Usage is pretty much selecting the line or text, hitting `!` and it executes your code... where `&lt;C-/&gt;` or `&lt;C-\&gt;` will evaluate it. If you want to popup the help for an expression, you can use `&lt;C-@&gt;`.

It's pretty basic, but here's a screenshot (from an xpost) of me using it to help reverse some file format (it's the bottom panel): [https://i.redd.it/6t7lj94ql0vd1.png](https://i.redd.it/6t7lj94ql0vd1.png).

# Comparison (similar and related plugins for the Vim editors)

I just recently read about Conjure ([https://github.com/Olical/conjure](https://github.com/Olical/conjure)) and vim-slime ([https://github.com/jpalardy/vim-slime](https://github.com/jpalardy/vim-slime)) while trying to find similar projects.

Probably the one thing that might be different is that my plugin is probably a little more lightweight compared to Jupyter/IPython ([https://github.com/jupyterlab-contrib/jupyterlab-vim](https://github.com/jupyterlab-contrib/jupyterlab-vim)) or other notebook interfaces. It works cross-platform and runs your selection in a separate namespace within the internal python interpreter (to avoid python plugins for the editor clashing with your python workspace). It also works if your editor doesn't have a terminal api (since that was what it was originally written for).. although the terminal api is far superior.

Anyways, would appreciate any input or even feature requests if they're practical. If you know of any similar editor plugins, I'd love to hear about them too.",arizvisa,1g5byo7,https://reddit.com/r/Python/comments/1g5byo7/vim_plugin_for_incremental_programming_slime_with/,https://www.reddit.com/r/Python/comments/1g5byo7/vim_plugin_for_incremental_programming_slime_with/,2024-10-16 22:29:28,13,0.83,13,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1g5byo7
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1g5dt6z,https://reddit.com/r/Python/comments/1g5dt6z/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1g5dt6z/thursday_daily_thread_python_careers_courses_and/,2024-10-17 00:00:09,6,1.0,6,0,5,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g5dt6z
Python,Text/Terminal-based games for project-based learning,"I'm already utilizing¬†[traitlets](https://traitlets.readthedocs.io/)¬†to keep containers (barrels, inventory etc.) updated on their content's states which I've learned is called ""reactive"" or ""event-based programming"", a skill utilized in the real world.

Do you think one can learn / practice a broad skillset through text-based games, translatable to real-world problems (which companies pay for)?",Maleficent_Height_49,1g5e4mw,https://reddit.com/r/Python/comments/1g5e4mw/textterminalbased_games_for_projectbased_learning/,https://www.reddit.com/r/Python/comments/1g5e4mw/textterminalbased_games_for_projectbased_learning/,2024-10-17 00:15:57,5,0.86,5,0,0,0,0,False,False,True,False,False,Discussion,self,t3_1g5e4mw
Python,A new way to manipulate a deep nested data without manually writing for loops to iterate it.,"for example we need to calculate the sum of estimated value from all tasks.

we'll need to loop from teams, sprints, stories and tasks.

in python the code will looks like a shape of callback hell (in js)

    # get the sum of estimated and done estimated
    input = {
        ""name"": ""Team A"",
        ""sprints"": [
            {
                ""name"": ""Sprint 1"",
                ""stories"": [
                    {
                        ""name"": ""Story 1"",
                        ""tasks"": [
                            {""name"": ""Task 1"", ""estimated"": 5, ""done"": False},
                            {""name"": ""Task 2"", ""estimated"": 3, ""done"": True},
                        ]
                    },
                    {
                        ""name"": ""Story 2"",
                        ""tasks"": [
                            {""name"": ""Task 3"", ""estimated"": 2, ""done"": True},
                            {""name"": ""Task 4"", ""estimated"": 1, ""done"": True},
                        ]
                    }
                ]
            },
            {
                ""name"": ""Sprint 2"",
                ""stories"": [
                    {
                        ""name"": ""Story 3"",
                        ""tasks"": [
                            {""name"": ""Task 5"", ""estimated"": 3, ""done"": False},
                            {""name"": ""Task 6"", ""estimated"": 2, ""done"": False},
                        ]
                    },
                    {
                        ""name"": ""Story 4"",
                        ""tasks"": [
                            {""name"": ""Task 7"", ""estimated"": 1, ""done"": False},
                            {""name"": ""Task 8"", ""estimated"": 3, ""done"": False},
                        ]
                    }
                ]
            }
        ]
    }

We can hide the part of iterating, and let pydantic-resolve do it internally.

what we need is just simply describing the schema, and add some collect (and define the behavior).

    import asyncio
    from pydantic_resolve import Resolver, ICollector
    from pydantic import BaseModel
    
    
    class TotalEstimateCollector(ICollector):
        def __init__(self, alias):
            self.alias = alias
            self.counter = 0
    
        def add(self, val):
            self.counter = self.counter + val
    
        def values(self):
            return self.counter
    
    class TotalDoneEstimateCollector(ICollector):
        def __init__(self, alias):
            self.alias = alias
            self.counter = 0
    
        def add(self, val):
            done, estimate = val
            if done:
                self.counter = self.counter + estimate
    
        def values(self):
            return self.counter
    
    class Task(BaseModel):
        __pydantic_resolve_collect__ = {
            'estimated': 'total_estimate',
            ('done', 'estimated'): 'done_estimate'
        }
        name: str
        estimated: int
        done: bool
    
    class Story(BaseModel):
        name: str
        tasks: list[Task]
    
    class Sprint(BaseModel):
        name: str
        stories: list[Story]
    
    class Team(BaseModel):
        name: str
        sprints: list[Sprint]
    
        total_estimated: int = 0
        def post_total_estimated(self, counter=TotalEstimateCollector('total_estimate')):
            return counter.values()
    
        total_done_estimated: int = 0
        def post_total_done_estimated(self, counter=TotalDoneEstimateCollector('done_estimate')):
            return counter.values()
    
    async def main():
        team = Team.parse_obj(input)
        team = await Resolver().resolve(team)
        print(team.total_estimated)   # 20
        print(team.total_done_estimated)  # 6
    
    asyncio.run(main())



PART 2:

what would the for loop become if the total\_estimated and total\_done\_estimated are required at all levels (e.g. sprint, story)



it's would be as simple as copy and paste in pydantic-resolve

    class Story(BaseModel):
        name: str
        tasks: list[Task]
    
        total_estimated: int = 0
        def post_total_estimated(self, counter=TotalEstimateCollector('total_estimate')):
            return counter.values()
    
        total_done_estimated: int = 0
        def post_total_done_estimated(self, counter=TotalDoneEstimateCollector('done_estimate')):
            return counter.values()
    
    class Sprint(BaseModel):
        name: str
        stories: list[Story]
    
        total_estimated: int = 0
        def post_total_estimated(self, counter=TotalEstimateCollector('total_estimate')):
            return counter.values()
    
        total_done_estimated: int = 0
        def post_total_done_estimated(self, counter=TotalDoneEstimateCollector('done_estimate')):
            return counter.values()
    
    class Team(BaseModel):
        name: str
        sprints: list[Sprint]
    
        total_estimated: int = 0
        def post_total_estimated(self, counter=TotalEstimateCollector('total_estimate')):
            return counter.values()
    
        total_done_estimated: int = 0
        def post_total_done_estimated(self, counter=TotalDoneEstimateCollector('done_estimate')):
            return counter.values()
    
    async def main():
        team = Team.parse_obj(input)
        team = await Resolver().resolve(team)
        print(team.total_estimated)   # 20
        print(team.total_done_estimated)  # 6
    
    asyncio.run(main())



this is pydantic-resolve (https://github.com/allmonday/pydantic-resolve)

a simple yet flexible library that can enhance your coding experience.

",TurbulentAd8020,1g5sb9d,https://reddit.com/r/Python/comments/1g5sb9d/a_new_way_to_manipulate_a_deep_nested_data/,https://www.reddit.com/r/Python/comments/1g5sb9d/a_new_way_to_manipulate_a_deep_nested_data/,2024-10-17 14:34:19,0,0.39,0,0,39,0,0,False,False,True,False,False,Discussion,self,t3_1g5sb9d
