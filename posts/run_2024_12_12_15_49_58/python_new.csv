subreddit,title,selftext,author,id,permalink,url,created_utc,score,upvote_ratio,ups,downs,num_comments,total_awards_received,gilded,is_video,is_original_content,is_self,over_18,spoiler,link_flair_text,thumbnail,name
Python,News Article Scrapper - Telegram automation,"Hey guys,



I wanted to share a project I‚Äôve been working on for the past few days. Using Scrapy, I‚Äôm scraping news websites to extract English-language articles. I‚Äôm storing the articles in an SQLite3 database and posting them on a Telegram channel: GeorgiaNewsDaily.

**What My Project Does**

Recent events unfolding in Georgia (the country) made me realize how important it is to share information from trusted sources with a foreign audience.

Before starting this project, I was completely unfamiliar with Scrapy or the Telegram Python library. The learning curve wasn‚Äôt super steep, but it definitely had its challenges. Each website had its own quirks, which made the scraping logic tricky. One of the biggest issues was avoiding duplicate articles that had already been extracted and posted. To solve this, I used hashing for article URLs. In the database, there‚Äôs a field to check whether an article has been posted‚ÄîPOSTED = 0 means ‚Äúnot posted,‚Äù and POSTED = 1 means ‚Äúposted.‚Äù When the spider stores the articles in the database, the default value is 0. After the script responsible for posting to Telegram finishes, it updates the field to 1.

For deployment, I used PythonAnywhere. It‚Äôs fairly easy to use, though I had a hard time figuring out how to properly schedule the spiders.

**Target Audience**

Anyone who is interested in the similar project.

**Comparison**

I don't know any similar project to compare it to.



Anyway, feel free to check out the Telegram channel (GeorgiaNewsDaily) if you‚Äôre curious about how it works or just want to see the content.

And here‚Äôs the GitHub link: [https://github.com/nodri09/codespaces-blank](https://github.com/nodri09/codespaces-blank)",Shmlack,1hcnhnv,https://reddit.com/r/Python/comments/1hcnhnv/news_article_scrapper_telegram_automation/,https://www.reddit.com/r/Python/comments/1hcnhnv/news_article_scrapper_telegram_automation/,2024-12-12 15:25:55,1,1.0,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1hcnhnv
Python,Mon interpr√©teur Python ne peut pas lire les .pyi,"Salut! j'ai un probl√®me qui me viens, je pense, de mon interpereteur python... J'ai r√©cemment voulus essayer Pygame, mais il me dit que que mes modules n'existe pas, alors m√™me qu'ils ont bien pr√©sent. J'ai r√©ussi √† r√©soudre ce probl√®me en passant l'extension de .pyi √† .PY , mais quand je fait √ßa, je rencontre pliens de probl√®me directement lier au code des modules pygame, comme si la personne qui l'avais d√©velloper ne savais pas coder... j'ai corriger quelques erreurs, mais je ne pense pas √™tre sur le bon chemin. Je vous ais r√©sumer ma situation, je vous pose ma question : ais-je bien fait de passer les .pyi en .PY, ou bien il y as un autre moyen de faire marcher pygame?",Titionebe,1hcmt1d,https://reddit.com/r/Python/comments/1hcmt1d/mon_interpr√©teur_python_ne_peut_pas_lire_les_pyi/,https://www.reddit.com/r/Python/comments/1hcmt1d/mon_interpr√©teur_python_ne_peut_pas_lire_les_pyi/,2024-12-12 14:54:55,0,0.25,0,0,1,0,0,False,False,True,False,False,Discussion,self,t3_1hcmt1d
Python,python-json-logger has changed hands,"Hi r/python,

I wanted to introduce myself as the new maintainer of [python-json-logger](https://pypi.org/project/python-json-logger/) and hopefully establish a bit of trust.

Understandably there [has been some anxiety](https://github.com/madzak/python-json-logger/issues/187#issuecomment-2063184958) over the [PEP 541 Request ](https://github.com/pypi/support/issues/3607)that I submitted given the importance / popularity of the package -  especially in the context of the XZ Utils backdoor earlier in the year.

I think it's important to highlight that although this was prompted by the PEP 541 request, it was not done through PEP 541 mechanisms. In other words this was a decision by the original maintainer¬†and¬†**not**¬†the PyPI Administrators.

For those wanting to know more about me (to prove that I'm not some statebased actor subverting the package), [I'm a security professional](https://www.linkedin.com/in/nicholas-hairs/) and [maintain a few other packages](https://github.com/nhairs). You might also have seen some of [my blog posts](https://www.nicholashairs.com/) on reddit.

Finally apologies if the newly released versions broke your things - despite my best efforts at testing and maintaining backwards compatibility it appears [some bugs managed to slip through](https://github.com/nhairs/python-json-logger/issues/29).",nicholashairs,1hcm2rr,https://reddit.com/r/Python/comments/1hcm2rr/pythonjsonlogger_has_changed_hands/,https://www.reddit.com/r/Python/comments/1hcm2rr/pythonjsonlogger_has_changed_hands/,2024-12-12 14:18:50,18,0.96,18,0,0,0,0,False,False,True,False,False,News,self,t3_1hcm2rr
Python,My First Python Project: URL to NDEF Converter! üéâ,"Hi everyone,

I‚Äôm thrilled to share my first Python project, **url2ndef**, a tool that converts URLs into NDEF (NFC Data Exchange Format) messages. You can use these messages to program NFC tags.

GitHub: [url2ndef](https://github.com/brunoooost/url2ndef)

# What My Project Does

This script takes a URL as input and encodes it into the NDEF format, which is compatible with NFC-enabled devices. It‚Äôs a simple and lightweight way to prepare data for NFC tags, whether you‚Äôre working on IoT applications, marketing use cases, or just having fun with NFC tech.

# Target Audience

This is primarily a **learning project** but could also be useful for:

* Beginners interested in Python or NFC tech.
* Developers exploring NFC-related applications.
* Hobbyists looking for a simple tool to work with NFC tags.

It‚Äôs not production-ready, but I hope it can serve as a foundation or inspiration for others!

# Comparison

There are more advanced tools like NXP TagWriter or NFC Tools, but those are typically GUI-based and cater to broader use cases. **url2ndef** is purely a Python CLI script designed for simplicity and learning.

This was a great learning experience for me, and I‚Äôd love to hear your feedback or suggestions for improvement. If you‚Äôre interested in NFC, let‚Äôs chat! Thanks for checking out my project. üòä",BST04,1hcjdg9,https://reddit.com/r/Python/comments/1hcjdg9/my_first_python_project_url_to_ndef_converter/,https://www.reddit.com/r/Python/comments/1hcjdg9/my_first_python_project_url_to_ndef_converter/,2024-12-12 11:48:05,3,0.8,3,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1hcjdg9
Python,Free Python IDE for Android with Pypi,"Blaze IDE for Python on Android is now released!

https://play.google.com/store/apps/details?id=com.blaze.code&amp;hl=en_IN

**Target Audience**
Many students across the world have an interest for coding but they are not able to fulfill their dreams because they don't own a laptop or a computer.
But no need to worry, because Blaze is here to solve the problem!

Features of Blaze
Runs via web so minimal ram requirements
Pypi modules are supported (except gui)
Fast code compiler
Less than 15 mb app size

Download &amp; Support
Please support the initiative by giving ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê reviews! Hope you will love Blaze!

**Comparisions**
Other projects have atleast 300 mb storage while this is Just 15mb

Tutorials
https://github.com/techxsarthak/Blaze-code",sarthakdeveloper,1hcj48d,https://reddit.com/r/Python/comments/1hcj48d/free_python_ide_for_android_with_pypi/,https://www.reddit.com/r/Python/comments/1hcj48d/free_python_ide_for_android_with_pypi/,2024-12-12 11:31:00,11,0.92,11,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1hcj48d
Python, Just started a course and am starting to learn. Need a small clarification.,"So i just got introduced to adding variables, and the fact that you cannot add variables of different types like string and intger. the tutorial said use explict conversion by str(varible), eg. print( ""your total is "" + str(total)). But I acheived the same result by using print( ""your total is "", (total)). 

is this wrong or is there an advantage to using the conversion/",krithyk_2105,1hcj3d3,https://reddit.com/r/Python/comments/1hcj3d3/just_started_a_course_and_am_starting_to_learn/,https://www.reddit.com/r/Python/comments/1hcj3d3/just_started_a_course_and_am_starting_to_learn/,2024-12-12 11:29:26,2,0.56,2,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1hcj3d3
Python,Programming languages that compile to Python?,"All I'm aware of is [Coconut](https://coconut-lang.org/), which is a functional programming language that is essentially a superset of Python syntax. Are there any other languages like this?",jsonathan,1hchwjd,https://reddit.com/r/Python/comments/1hchwjd/programming_languages_that_compile_to_python/,https://www.reddit.com/r/Python/comments/1hchwjd/programming_languages_that_compile_to_python/,2024-12-12 10:05:45,5,0.64,5,0,7,0,0,False,False,True,False,False,Discussion,self,t3_1hchwjd
Python,Open-source Python Time-wasters,"Hi r/Python community! I recently made an time waster program with python. You can fork it here: [https://github.com/LarryEmerson12/TimeWasters/](https://github.com/LarryEmerson12/TimeWasters/) It simply just shows some 0s, and then animates it. You can edit the speed at how you want.

**Target Audience:**

Use this when you're bored.

**Comparison:**

I do not know about other projects.

If there are any issues, feel free to comment.",Careful_Tea3877,1hcgtrz,https://reddit.com/r/Python/comments/1hcgtrz/opensource_python_timewasters/,https://www.reddit.com/r/Python/comments/1hcgtrz/opensource_python_timewasters/,2024-12-12 08:41:49,17,0.8,17,0,10,0,0,False,False,True,False,False,Showcase,self,t3_1hcgtrz
Python,Python OCR for each element/section reading multiple details of multiple objects,"Hey I have a list of buttons underneath each other (sections). Each button has some details, pretty many different, I need to read some data with OCR, some with is image in that region,... I really struggle to find something reliable, anyone got any tips.  
And please if you do not dont write, pytesseract is not the way to go here...",Tiny_Solid_3325,1hcgtlr,https://reddit.com/r/Python/comments/1hcgtlr/python_ocr_for_each_elementsection_reading/,https://www.reddit.com/r/Python/comments/1hcgtlr/python_ocr_for_each_elementsection_reading/,2024-12-12 08:41:27,8,0.79,8,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1hcgtlr
Python,is it wrong to use chatgpt to improve your code?,"I am trying to make a web scraper right now, I have been reading documentation/watching videos but i ran into a few errors so i plugged it into chatgpt to see what it had to say. I like the changes chatgpt made to my code and its stuff i really didn't know about. would it be wrong to just use the code chatgpt gave me? it's still my general concept but its more organized i suppose. 

  
I'm just wondering what you guys think about it.",Big-Suit-5540,1hcgov7,https://reddit.com/r/Python/comments/1hcgov7/is_it_wrong_to_use_chatgpt_to_improve_your_code/,https://www.reddit.com/r/Python/comments/1hcgov7/is_it_wrong_to_use_chatgpt_to_improve_your_code/,2024-12-12 08:30:21,0,0.33,0,0,21,0,0,False,False,True,False,False,Discussion,self,t3_1hcgov7
Python,Python telegram bot,"Hello
So am trying to send a direct download link for a video using telegram library 
And i found that the direct download link cant be used with send_video. 
So any way to generate a preview link using the direct download link? ",Mr_N_01,1hcfw8q,https://reddit.com/r/Python/comments/1hcfw8q/python_telegram_bot/,https://www.reddit.com/r/Python/comments/1hcfw8q/python_telegram_bot/,2024-12-12 07:30:25,1,0.57,1,0,5,0,0,False,False,True,False,False,Discussion,self,t3_1hcfw8q
Python,Open-source Python Uno shuffler,"Hi r/Python community! I recently made an Uno shuffler program with python. You can fork it here: [https://github.com/LarryEmerson12/UnoShuffler/](https://github.com/LarryEmerson12/UnoShuffler). It simply just generates the whole Uno deck, and then shuffles it. You can shuffle it as many times as you want.

**Target Audience:**

You can implement it in your other projects.

**Comparison:**

I do not know about other projects.

If there are any issues, feel free to comment.",Careful_Tea3877,1hcbfp7,https://reddit.com/r/Python/comments/1hcbfp7/opensource_python_uno_shuffler/,https://www.reddit.com/r/Python/comments/1hcbfp7/opensource_python_uno_shuffler/,2024-12-12 02:53:59,10,0.7,10,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1hcbfp7
Python,Can ya suggest small-yet-serious webscraping portfolio project ideas?,"I wanna do a real project with Python and webscraping. Doesn't have to be big or fancy, nor bring me money, I just wanna take it seriously, reason being I wanna learn both python and webscraping.

In case you wonder, I do have some serious projects on my bag, like a Unity game, an Api in Dotnet core, flutter and React apps. But with python, and webscraping, it'll be my first

What is one of the easiest, simplest projects on the matter that'll give me valid experience on these subjects? Maybe not an exact idea, but types of ideas to do. Something that once complete someone can ask me ""hey can you work with this"" and I can say ""yes""?

Asking partly because I asked ChatGPT yesterday and it said I could scrape LinkedIn, which is a hard no",Blender-Fan,1hc82by,https://reddit.com/r/Python/comments/1hc82by/can_ya_suggest_smallyetserious_webscraping/,https://www.reddit.com/r/Python/comments/1hc82by/can_ya_suggest_smallyetserious_webscraping/,2024-12-12 00:04:22,0,0.47,0,0,10,0,0,False,False,True,False,False,Meta,self,t3_1hc82by
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1hc7z1a,https://reddit.com/r/Python/comments/1hc7z1a/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1hc7z1a/thursday_daily_thread_python_careers_courses_and/,2024-12-12 00:00:09,1,0.67,1,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1hc7z1a
Python,Looking to start a python bootcamp in IL around Schaumburg.,I am interested in practicing python consistently while also finds ngnew friends that have programming as a mutual interest with me. If anyone is interested in starting s club of sorts where we meet once a week during the weekends or smth and just throw code at the screen please let me know!,sntfrancisco91,1hc2wti,https://reddit.com/r/Python/comments/1hc2wti/looking_to_start_a_python_bootcamp_in_il_around/,https://www.reddit.com/r/Python/comments/1hc2wti/looking_to_start_a_python_bootcamp_in_il_around/,2024-12-11 20:17:01,0,0.35,0,0,6,0,0,False,False,True,False,False,Discussion,self,t3_1hc2wti
Python,"Polars, I'm confused","Hi, recently I read an article about Polars, that is ""blazingly fast"" and easier to read than pandas.   
I tried to learn something converting a project from pandas to polars. I got confused. It's incredibly fast (for instance I read a big excel file: pandas 15 seconds, Polars 3) but I really got confused about it's readability. In pandas conversion to datetime took me a simple line like   
`df.to_datetime(df['column'])`  


whereas in polars:  


`df = df.with_columns(`  
`pl.col(""column"").str.strptime(pl.Date, ""%d/%m/%Y"").alias(""column"")`  
`)`

I don't know. Is this going to be the new standard?",December92_yt,1hbxwtl,https://reddit.com/r/Python/comments/1hbxwtl/polars_im_confused/,https://www.reddit.com/r/Python/comments/1hbxwtl/polars_im_confused/,2024-12-11 16:50:40,0,0.09,0,0,11,0,0,False,False,True,False,False,Discussion,self,t3_1hbxwtl
Python,My first program I coded with Python!,"Hi r/python community! I finally completed my first program! You can find it here: [https://github.com/Phil-Carrier/lookilooki/](https://github.com/Phil-Carrier/lookilooki/) . I know it is unnecessary, but I'm proud I got it to work and I finally have something to waste my time with.

**What my project does:**

I drew an image of a head with Paint, then imported it into Python and made its unnaturally big nose always point to the mouse pointer. That's it.

**Target audience:**

Anyone who likes very unnecessary programs to waste their time.

**Comparison:**

I don't know about other projects.",Phil_Carrier,1hbxnsx,https://reddit.com/r/Python/comments/1hbxnsx/my_first_program_i_coded_with_python/,https://www.reddit.com/r/Python/comments/1hbxnsx/my_first_program_i_coded_with_python/,2024-12-11 16:40:25,28,0.75,28,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1hbxnsx
Python,How did you finally understand classes in python? üßê,"Ive been coding in python for quite a while now but I really dont have a clue what is going on with classes. Like why do you NEED to use the dunder methods and how exactly self works. I undertand classes enough to get by using them but I dont understand why I need to do the things I do in classes. 

What made it so you finally understood what was going on in classes?",Akusoki,1hbvebc,https://reddit.com/r/Python/comments/1hbvebc/how_did_you_finally_understand_classes_in_python/,https://www.reddit.com/r/Python/comments/1hbvebc/how_did_you_finally_understand_classes_in_python/,2024-12-11 15:02:05,0,0.12,0,0,23,0,0,False,False,True,False,False,Discussion,self,t3_1hbvebc
Python,Introducing My New Favicon Extraction Tool,"## What My Project Does

I've created a tool that extracts favicons from any website. It works by parsing HTML pages, checking fallback routes for icons, and even supports inline base64-encoded images. The tool can also verify availability, guess missing icon sizes, and download the favicons for further processing. It aims to streamline favicon retrieval for web scraping, data analysis or just curious exploration.

## Links

- Source code: https://github.com/AlexMili/extract_favicon/
- Documentation: https://alexmili.github.io/extract_favicon/


## Target Audience

The project is designed for developers and data enthusiasts who work with web metadata. Whether you‚Äôre building a crawler, enhancing a web directory, or simply analyzing website branding. My intention is to maintain and improve it, making it stable and ready for production use cases.


## Comparison

While there are other favicon extraction libraries out there, many of them have become unmaintained or lack features like asynchronous support, thorough availability checks, and automatic size guessing. My project is actively maintained, built with modern Python standards, and provides a more robust, flexible solution than many existing alternatives.",Beneficial_Expert448,1hbtf03,https://reddit.com/r/Python/comments/1hbtf03/introducing_my_new_favicon_extraction_tool/,https://www.reddit.com/r/Python/comments/1hbtf03/introducing_my_new_favicon_extraction_tool/,2024-12-11 13:26:32,3,1.0,3,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1hbtf03
Python,The hand-picked selection of the best Python libraries and tools of 2024 ‚Äì 10th edition!,"Hello Python community!

We're excited to share our milestone 10th edition of the **Top Python Libraries and tools**, continuing our tradition of exploring the Python ecosystem for the most innovative developments of the year.

Based on community feedback (thank you!), we've made a significant change this year: we've split our selections into **General Use** and **AI/ML/Data** categories, ensuring something valuable for every Python developer. Our team has carefully reviewed hundreds of libraries to bring you the most impactful tools of 2024.

**Read the full article with detailed analysis here**: [https://tryolabs.com/blog/top-python-libraries-2024](https://tryolabs.com/blog/top-python-libraries-2024)

Here's a preview of our top picks:

**General Use**:

1. [**uv**](https://github.com/astral-sh/uv) ‚Äî Lightning-fast Python package manager in Rust
2. [**Tach**](https://github.com/gauge-sh/tach) ‚Äî Tame module dependencies in large projects
3. [**Whenever**](https://github.com/ariebovenberg/whenever) ‚Äî Intuitive datetime library for Python
4. [**WAT**](https://github.com/igrek51/wat) ‚Äî Powerful object inspection tool
5. [**peepDB**](https://github.com/PeepDB-dev/peepdb) ‚Äî Peek at your database effortlessly
6. [**Crawlee**](https://github.com/apify/crawlee-python) ‚Äî Modern web scraping toolkit
7. [**PGQueuer**](https://github.com/janbjorge/pgqueuer) ‚Äî PostgreSQL-powered job queue
8. [**streamable**](https://github.com/ebonnal/streamable) ‚Äî Elegant stream processing for iterables
9. [**RightTyper**](https://github.com/RightTyper/RightTyper) ‚Äî Generate static types automatically
10. [**Rio**](https://github.com/rio-labs/rio) ‚Äî Modern web apps in pure Python

**AI / ML / Data**:

1. [**BAML**](https://github.com/BoundaryML/baml) ‚Äî Domain-specific language for LLMs
2. [**marimo**](https://github.com/marimo-team/marimo) ‚Äî Notebooks reimagined
3. [**OpenHands**](https://github.com/All-Hands-AI/OpenHands) ‚Äî Powerful agent for code development
4. [**Crawl4AI**](https://github.com/unclecode/crawl4ai) ‚Äî Intelligent web crawling for AI
5. [**LitServe**](https://github.com/Lightning-AI/LitServe) ‚Äî Effortless AI model serving
6. [**Mirascope**](https://github.com/Mirascope/mirascope) ‚Äî Unified LLM interface
7. [**Docling**](https://github.com/DS4SD/docling) and [**Surya**](https://github.com/VikParuchuri/surya) ‚Äî Transform documents to structured data
8. [**DataChain**](https://github.com/iterative/datachain) ‚Äî Complete data pipeline for AI
9. [**Narwhals**](https://github.com/narwhals-dev/narwhals) ‚Äî Compatibility layer for dataframe libraries
10. [**PydanticAI**](https://github.com/pydantic/pydantic-ai) ‚Äî Pydantic for LLM Agents

Our selection criteria remain focused on innovation, active maintenance, and broad impact potential. We've included detailed analyses and practical examples for many libraries in the full article.

Special thanks to all the developers and teams behind these libraries. Your work continues to drive Python's evolution and success! üêç‚ú®

**What are your thoughts on this year's selections? Any notable libraries we should consider for next year?** Your feedback helps shape future editions!",dekked_,1hbs4t8,https://reddit.com/r/Python/comments/1hbs4t8/the_handpicked_selection_of_the_best_python/,https://www.reddit.com/r/Python/comments/1hbs4t8/the_handpicked_selection_of_the_best_python/,2024-12-11 12:14:34,392,0.92,392,0,74,0,0,False,False,True,False,False,Discussion,self,t3_1hbs4t8
Python,Proof of PCAP Certification?,"For those of you who have taken (and passed) the PCAP, did you receive anything other than the paper printout after the exam? (I know the PCAP isn't particularly useful, but my company offered me a 3% raise if I passed it so...) I'm just wondering if I should expect an email with some official looking certification or if I should just show the exam printout to my company.",ambassador_spock1701,1hbq85s,https://reddit.com/r/Python/comments/1hbq85s/proof_of_pcap_certification/,https://www.reddit.com/r/Python/comments/1hbq85s/proof_of_pcap_certification/,2024-12-11 10:02:42,3,0.71,3,0,2,0,0,False,False,True,False,False,Discussion,self,t3_1hbq85s
Python,Starting off in Python,"Why isn't import function working? A quick google says I need to write the shebang which doesn't work either. Pls help.

\*\*\*@\*\*\*\*\*\* \~ % #!/usr/bin/python

zsh: event not found: /usr/bin/python

\*\*\*@\*\*\*\*\*\* \~ % import pandas as pd

zsh: command not found: import

\*\*\*@\*\*\*\*\*\*r \~ %¬†

",Independent-Tax3836,1hbq122,https://reddit.com/r/Python/comments/1hbq122/starting_off_in_python/,https://www.reddit.com/r/Python/comments/1hbq122/starting_off_in_python/,2024-12-11 09:48:09,0,0.29,0,0,11,0,0,False,False,True,False,False,Discussion,self,t3_1hbq122
Python,Did an open source tool for code exploration,"# Description

Treeline is a code analysis and visualization tool designed to help developers understand the quality and structure of their Python codebases. It does some complexity metrics, detects code smells, and generates an interactive HTML-based visualization for relatively easy exploration. I hope it will give developers some insights into architectural dependencies, complexity hotspots, and maintainability issues.

# Links

* [https://github.com/duriantaco/treeline](https://github.com/duriantaco/treeline)
* [https://pypi.org/project/treeline/](https://pypi.org/project/treeline/)

# What My Project Does

* **Dependency Analysis**: Identifies which modules import others, which classes belong to which modules, and which functions call which, creating a complete dependency graph.
* **Metrics Computation**: Calculates cyclomatic complexity, cognitive complexity, maintainability index, function length, and code smell occurrences.
* **Visualization**: Renders an interactive HTML report using D3.js, where each node represents a module, class, or function. You can hover over nodes to see detailed metrics, search for specific elements.
* **Quality Reporting**: Produces Markdown and HTML reports summarizing complexity hotspots.

# Target Audience

* Anyone using Python

# Extra Details

Started of as a simple ASCII tree generator. Promised to add more stuff so here i am.

# Conclusion

Hopefully you guys will find it useful. If you think it's a stupid idea or ways to improve, do let me know too. I'm open to criticisms and constructive feedback.  If you find any bugs please open an issue on github or you can just contact me here. **Lastly, if you'll love to work on this together to expand this further, i'm more than happy to do so.** Just drop me a message!",papersashimi,1hbnasw,https://reddit.com/r/Python/comments/1hbnasw/did_an_open_source_tool_for_code_exploration/,https://www.reddit.com/r/Python/comments/1hbnasw/did_an_open_source_tool_for_code_exploration/,2024-12-11 06:21:34,28,0.88,28,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1hbnasw
Python,Brushless Motor with Circuit python and ESC,"Hey,

  
I'm trying to drive a brushless motor with circuit python on an Adafruit rp2040 feather. I can't seem to find a single libray or tutorial that is not Arduino to be able to drive an ESC Brushless motor",Boring_Secretary_699,1hbgx14,https://reddit.com/r/Python/comments/1hbgx14/brushless_motor_with_circuit_python_and_esc/,https://www.reddit.com/r/Python/comments/1hbgx14/brushless_motor_with_circuit_python_and_esc/,2024-12-11 00:33:05,1,0.56,1,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1hbgx14
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1hbg7qh,https://reddit.com/r/Python/comments/1hbg7qh/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1hbg7qh/wednesday_daily_thread_beginner_questions/,2024-12-11 00:00:08,2,0.76,2,0,5,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1hbg7qh
Python,Nodriver - The next step in web scraping,"Hey guys! Scraping is something we've all needed at some point, whether for personal or professional reasons. But nowadays I feel like I get blocked immediately if I go to any website and tbh I don't want to setup complex patches and go through all that stuff for like a tiny thing. Nodriver solved this problem for me.

Here's an article I wrote about getting started with nodriver and how it faces up with the competition - https://www.hyperbrowser.ai/blog/nodriver_:_The_next_step_in_web_automation
",MeetYourCreator,1hbea0n,https://reddit.com/r/Python/comments/1hbea0n/nodriver_the_next_step_in_web_scraping/,https://www.reddit.com/r/Python/comments/1hbea0n/nodriver_the_next_step_in_web_scraping/,2024-12-10 22:31:43,24,0.7,24,0,3,0,0,False,False,True,False,False,Tutorial,self,t3_1hbea0n
Python,Need to run selenium on databricks ,"Hi everyone,

Am part of a small IT group, we have started developing our new DW in databricks, part of the initiative is automating the ingestion of data from 3rd party data sources.
I have a working Python code locally on my PC using selenium but I can‚Äôt get to make this work on Databricks.
There are tons of resources on the web but most of the blogs am reading on, people are getting stuck here and there.
Can you point me in the right direction.
Sorry if this is a repeated question.

Thank you very much",Haunting_Lab6079,1hbbpf9,https://reddit.com/r/Python/comments/1hbbpf9/need_to_run_selenium_on_databricks/,https://www.reddit.com/r/Python/comments/1hbbpf9/need_to_run_selenium_on_databricks/,2024-12-10 20:41:25,7,0.73,7,0,11,0,0,False,False,True,False,False,Discussion,self,t3_1hbbpf9
Python,Looking for a mid-ish level web project in django or flash more info below ,I am working on transitioning some data projects to the web. I know an okay amount of HTML CSS and a bit of JS so I could do it that way. I would rather build a couple sites just using python using flash or django. I just can't seem to find a repo or tutorial thats not super basic or advanced. Anyone have one that falls in the middle area they would be willing to share?  ,Druber13,1hb8f7h,https://reddit.com/r/Python/comments/1hb8f7h/looking_for_a_midish_level_web_project_in_django/,https://www.reddit.com/r/Python/comments/1hb8f7h/looking_for_a_midish_level_web_project_in_django/,2024-12-10 18:23:52,9,0.85,9,0,10,0,0,False,False,True,False,False,Discussion,self,t3_1hb8f7h
Python,decision records with mkdocs made easy,"Manage decision records with mkdocs in a customizable and minimal fashion.

https://github.com/timo-reymann/mkdocs-decision-records",R3ym4nn,1hb7qk9,https://reddit.com/r/Python/comments/1hb7qk9/decision_records_with_mkdocs_made_easy/,https://www.reddit.com/r/Python/comments/1hb7qk9/decision_records_with_mkdocs_made_easy/,2024-12-10 17:55:28,4,0.84,4,0,0,0,0,False,False,True,False,False,Resource,self,t3_1hb7qk9
Python,Need assistance for reviewing a python project! ASAP.,"Hello, I‚Äôve created a project and would appreciate your assistance in checking if it‚Äôs correct or if any changes are needed. It involves time series analysis on specific data (which I‚Äôll share in DM), along with a link to the HTML file.",_undefine,1hb6udr,https://reddit.com/r/Python/comments/1hb6udr/need_assistance_for_reviewing_a_python_project/,https://www.reddit.com/r/Python/comments/1hb6udr/need_assistance_for_reviewing_a_python_project/,2024-12-10 17:17:47,0,0.14,0,0,7,0,0,False,False,True,False,False,Discussion,self,t3_1hb6udr
Python,Pype - Python Desktop App Framework,"I created a python framework that easily enables users to create reactive desktop applications with Python backend and HTML frontend.

**What My Project Does**

Easily enables the user to create desktop applications with a Python backend and a HTML frontend. Using the frameworks functions listed in the documentation reactive variables, state-management and dynamic UI-s can be created with ease.

Feel free to use it if you see fit. Also im very much open to discussion as this is my first public project that i published, errors have a very high chance of appering.

[PyPI pype-framework](https://pypi.org/project/pype-framework/)

[Pype Github](https://github.com/kokasmark/Pype)

  
edit: I used a post template so i can post here and forgot the delete the post templates text...",kaakaaskaa,1hb0jr4,https://reddit.com/r/Python/comments/1hb0jr4/pype_python_desktop_app_framework/,https://www.reddit.com/r/Python/comments/1hb0jr4/pype_python_desktop_app_framework/,2024-12-10 12:22:45,21,0.86,21,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1hb0jr4
Python,tui-network: another TUI for the wifi on Linux,"**What My Project Does**

[tui-network](https://github.com/Zatfer17/tui-network) is a Python based TUI for the wifi on Linux built with¬†[Textual](https://github.com/Textualize/textual). And you can read¬†[classic fortune quotes](https://wiki.debian.org/fortune)¬†on the side, while waiting for the list of networks to refresh.  
  
**Target Audience**

Linux users without DEs (typically tiling wm users with no gnome/xfce settings manager)  
  
**Comparison**

Prettier than nmtui, similar to [impala](https://github.com/pythops/impala) but Python based",zatfer,1haxvtn,https://reddit.com/r/Python/comments/1haxvtn/tuinetwork_another_tui_for_the_wifi_on_linux/,https://www.reddit.com/r/Python/comments/1haxvtn/tuinetwork_another_tui_for_the_wifi_on_linux/,2024-12-10 09:15:36,4,0.63,4,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1haxvtn
Python,I build PdfDing with Python,"Hi r/Python,

over the last six months I have build PdfDing. You can find it on¬†[GitHub](https://github.com/mrmn2/PdfDing).

**What My Project Does**

PdfDing is a selfhosted PDF manager and viewer offering a seamless user experience on multiple devices. Some of its features include:

* Remembers current position - continue where you stopped reading on any device
* Share PDFs with an external audience via a link or a QR Code. Shared PDFs can be access controlled
* Dark Mode, colored themes and custom theme colors
* Inverted color mode for reading PDFs
* SSO support via OIDC

¬†I have used the following tech stack:

* the web app is build using Python (Django)
* The frondend is build using Alpine.js, htmx, jQuery and Tailwind CSS
* Mozilla's PDF.js is used for viewing PDF files in the browser

**Target Audience**

Homelabs or businesses who want a self-hosted solution for their PDFs.

**Comparison**

There are solutions like self-hosted ebook readers. However, they are using the inbuilt PDF viewer of the browser. This works fine on desktops and laptops but on smartphones it will simply download the PDF file and not display it in the browser (at least it is like this on my mobile devices). This solution also does not allow you to continue reading where you stopped on another device.

Most solutions also do not allow users to upload files, as there is an admin curating the content. Furthermore, I wanted a minimal and resource-friendly solution that allows me to share PDFs with an external audience.

**Final remarks**

If you like PdfDing I would be really happy over a star on [GitHub](https://github.com/mrmn2/PdfDing). As the project is open source, if anyone wants to contribute you are welcome to do so!",Mindless-View-3071,1haxeb7,https://reddit.com/r/Python/comments/1haxeb7/i_build_pdfding_with_python/,https://www.reddit.com/r/Python/comments/1haxeb7/i_build_pdfding_with_python/,2024-12-10 08:37:42,49,0.84,49,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1haxeb7
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1haod3g,https://reddit.com/r/Python/comments/1haod3g/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1haod3g/tuesday_daily_thread_advanced_questions/,2024-12-10 00:00:08,5,1.0,5,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1haod3g
Python,My first decent Python project: Tic Tac Toe using Turtle,"hello, i recently wanted to start learning pythone when i stumbled across Turtle, and ive seen a tic tac toe in the python terminal before and i thougt, it would look so much better by drawing it. so i did, its 340 lines of code that could be improved so please correct me since this is my first time and i am trying to learn, and maybe tell me what you think of it, thx.

What my project does: this is a toy project

Target audience: made for people who want to play tic tac toe in python

Comparison: its different from other project because they type the field in their terminals, but this paints it in a seperate window.

side note: (the giant circle it makes at the end is so the turtle windows doesnt close)

heres the link:¬†[https://github.com/codefish-py/Python-Turtle-Tic-Tac-Toe/blob/main/Tic%20Tac%20Toe.py](https://github.com/codefish-py/Python-Turtle-Tic-Tac-Toe/blob/main/Tic%20Tac%20Toe.py)",Gullible_Spirit1450,1hajhin,https://reddit.com/r/Python/comments/1hajhin/my_first_decent_python_project_tic_tac_toe_using/,https://www.reddit.com/r/Python/comments/1hajhin/my_first_decent_python_project_tic_tac_toe_using/,2024-12-09 20:27:57,4,0.58,4,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1hajhin
Python,New android app project called AndroidFetch,"Target Audience: People who like messing with their devices, people who want to know about their phones

Comparison: Not any python based that I'm aware of, but in general the closest match is ""Device info HW"". in comparison my application is: open-source, gives some information which device info doesn't, is easier to read and has a better ui (in my opinion as I don't like the other's look)

information on the app: It is a .py file that will eventually become an apk and is fully based on Python, including the ui that is made in kivy. It is currently on v0.7 and has support for most samsung devices (support for other vendors needs testers from other Android manufacturers if your interested). To get its information it uses the subprocess module.

thanks for reading this! here's the github: https://github.com/FastCocobo/AndroidFetch

Thanks for everyone's input! I have imported the github page and have taken the advice to watch some tutorials on git",QueasyWrangler4171,1hahglk,https://reddit.com/r/Python/comments/1hahglk/new_android_app_project_called_androidfetch/,https://www.reddit.com/r/Python/comments/1hahglk/new_android_app_project_called_androidfetch/,2024-12-09 19:04:15,6,0.64,6,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1hahglk
Python,Looking to Transition from Web Development to Python ‚Äì Seeking Tips and Insights,"I‚Äôve been working as a JS web developer for over 8 years now, but I‚Äôve found myself losing interest in it. I‚Äôm really looking to make a switch to something new, and I‚Äôve been getting advice to get into Python and move into that field. However, I‚Äôm not entirely sure what the career opportunities in Python are like, or how I can best break into it.

Has anyone else made a similar transition? I‚Äôd love to hear about your experiences and any advice you have on how to make this switch successfully. Specifically, I‚Äôm curious about:

The job market for Python developers
The skills and projects I should focus on to get noticed. How much time would it take.
Any roadmaps or resources you‚Äôd recommend.

Thank you in advance!",Western-Lack8015,1hagupi,https://reddit.com/r/Python/comments/1hagupi/looking_to_transition_from_web_development_to/,https://www.reddit.com/r/Python/comments/1hagupi/looking_to_transition_from_web_development_to/,2024-12-09 18:39:47,11,0.7,11,0,13,0,0,False,False,True,False,False,Discussion,self,t3_1hagupi
Python,DNS server written in Python,"Hi All 

I am researching the DNS protocol in depth (security research) and have written a DNS server in Python that relies on responses from a upstream service (Quad9,for now). Hope you all like it. Do recommend improvements.

Link: [https://xer0x.in/dns-server-in-python/](https://xer0x.in/dns-server-in-python/)

PS: I am aware of the Blocklist parsing inconsistency bug.",Bulky_Pomegranate_53,1hagkql,https://reddit.com/r/Python/comments/1hagkql/dns_server_written_in_python/,https://www.reddit.com/r/Python/comments/1hagkql/dns_server_written_in_python/,2024-12-09 18:28:39,134,0.98,134,0,15,0,0,False,False,True,False,False,Tutorial,self,t3_1hagkql
Python,Create a complete WORD SEARCH BOOK with a single click.,"# [BOOP (Book Of Organized Puzzles)](https://github.com/Muneer320/BOOP)

# Description

BOOP is a Python-based automation project that generates a fully personalized puzzle book. With just a list of words as input, it creates a complete PDF with title pages, index pages, word search puzzles, and solutions.

Why did I make this? Honestly:

1. I was bored and needed something fun to work on.
2. I already had a script that could make word search puzzles, so I thought, ""Why not take it up a notch?""
3. I‚Äôve always wanted to write a book but lack the intellectual supremacy to do so. This project seemed like the next best thing!

# Links

* [Sample PDF Output](https://drive.google.com/file/d/1KkbCUuIuO8hmeHavUyO8e90r4qIQCxPc)
* [GitHub Repository](https://github.com/Muneer320/BOOP)

# What My Project Does

* **Word Search Puzzles**: Generates 17 puzzles per topic, categorized into Normal, Hard, and Bonus modes.
   * Normal: 10 puzzles (13x13 grid).
   * Hard: 5 puzzles (17x17 grid).
   * Bonus: 2 challenging puzzles.
* **Fully Designed Book**: Includes title pages, a detailed index, puzzle pages, and solution pages.
* **Automation**: Users only need to input a list of 200 words per topic; the script handles everything else.

# Target Audience

* Puzzle enthusiasts looking for custom-made puzzle books.
* Educators creating engaging learning materials.
* Developers interested in Python-based automation projects.

# Comparison to Other Tools

Unlike existing puzzle generation tools that often require manual input and separate design efforts, BOOP automates the entire process‚Äîfrom generating puzzles to compiling them into a polished, ready-to-print PDF. It‚Äôs an all-in-one solution for creating professional-quality puzzle books.

# Extra Details

BOOP started as just another random project, but it taught me a lot along the way. I learned about handling PDFs in Python, the importance of using different file formats for various tasks, and discovered many dos and don'ts that only hands-on experience can teach. It‚Äôs been an incredibly fun and rewarding journey!

# Conclusion

BOOP makes puzzle book creation easy, fun, and entirely automated. Whether you‚Äôre an educator, puzzle fan, or a developer looking to explore automation, this project has something for you. Check it out on GitHub and let me know your thoughts!",Either-Let-331,1ha82ex,https://reddit.com/r/Python/comments/1ha82ex/create_a_complete_word_search_book_with_a_single/,https://www.reddit.com/r/Python/comments/1ha82ex/create_a_complete_word_search_book_with_a_single/,2024-12-09 11:55:33,29,0.83,29,0,14,0,0,False,False,True,False,False,Showcase,self,t3_1ha82ex
Python,Introducing PyKick: A Python Project Generator for PowerShell,"**Hello everyone,**

Even with the intention of sharing, it's always a bit stressful to expose personal work to the community =}

But well... Maybe someone has the same question or need as I did, so with that in mind, I'm sharing my modest work done during my free time in the evenings (when the whole family is asleep =D) As you can see, besides the templates, there isn't anything particularly special ‚Äì PyKick does what it needs to do and voil√† ‚Äì unit tests were the most time-consuming, as always (the PowerShell module was quick to write).

# What My Project Does

PyKick is an installable PowerShell module (or can be sourced otherwise) that quickly generates a new Python project with Git management, a virtual environment, and Sphinx documentation (if requested). In my Python projects, I need CLI exposure. Therefore, the generated Python project is immediately functional (a `pip install .` results in a CLI providing package information and version - the structure is here, just to complete)

PyKick doesn't aim to replace anything. Not finding something that met my needs, I ended up writing it without realizing it =}

# Target Audience

I think it's quite clear =√æ

* If you are a developer or need a Python project generator with Git version control, isolated virtual environment, and documentation, etc.
* Especially if you work with PowerShell

PyKick can assist you.

# Comparison

I don't think comparison is relevant as the goal and environment are not identical... If a comparison is necessary, then PyKick is a Python project generator that works on PowerShell.

# GitHub Repo: [https://github.com/KaminoU/pykick](https://github.com/KaminoU/pykick)

Thank you for any feedback you might have.

Cheers",K4minoU,1ha65l9,https://reddit.com/r/Python/comments/1ha65l9/introducing_pykick_a_python_project_generator_for/,https://www.reddit.com/r/Python/comments/1ha65l9/introducing_pykick_a_python_project_generator_for/,2024-12-09 09:37:19,9,0.74,9,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1ha65l9
Python,Convert Figma design into Python code,"üîó Link ‚Äî [https://github.com/axorax/tkforge](https://github.com/axorax/tkforge)

# What My Project Does

TkForge is a Python app that allows you to turn your Figma design into Python tkinter code. So, you can make a GUI design in Figma and use specific names like ""textbox"", ""circle"", ""image"" and more for interactable elements then use TkForge to get the code for a fully functional working GUI app from your design.

And it's **free, open-source** and regularly maintained!

# Target Audience

TkForge is made for anyone who wants to make a GUI with Python easily and efficiently. It's fast and you can make some really complex and beautiful GUI's with it.

# Comparison

There's another project similar to TkForge called Tkinter Designer. Personally without being biased, I think TkForge is better. TkForge supports everything Tkinter Designer does and more. TkForge generates better code, supports more elements, allows you to add placeholder text (which you can't by default in tkinter), automatically sets foreground color and a lot more! Placeholder text and foreground color generation is a bit buggy though.  I use TkForge for most of my tkinter projects. You can get help in the Discord server.

# Updates

I updated the app to support multiple frames, fixed a lot of previous bugs and added checks for new updates!

Thanks for reading! üòÑ",axorax,1ha47wt,https://reddit.com/r/Python/comments/1ha47wt/convert_figma_design_into_python_code/,https://www.reddit.com/r/Python/comments/1ha47wt/convert_figma_design_into_python_code/,2024-12-09 07:10:06,51,0.9,51,0,11,0,0,False,False,True,False,False,Showcase,self,t3_1ha47wt
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1h9wkuk,https://reddit.com/r/Python/comments/1h9wkuk/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1h9wkuk/monday_daily_thread_project_ideas/,2024-12-09 00:00:08,3,0.72,3,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1h9wkuk
Python,Sharing Smoke Simulation Project I have Been Working On,"Hello all, I have been working on this project for quite some time and found it to be very useful for my task as a software engineer trying to build Computer Vision applications. My daily job involves working with smokey images and finding models but getting smokey images on demand was not possible and hence I came up with an idea to make a simulator. I modified the existing solution from [bijection/smoke.js](https://github.com/bijection/smoke.js) and implemented it with Python.

Links:

* GitHub Repo: [https://github.com/q-viper/SmokeSim/](https://github.com/q-viper/SmokeSim/)
* Demo: [https://q-viper.github.io/SmokeSim/](https://q-viper.github.io/SmokeSim/) (This demo is from only the JavaScript Version.)

## What My Project Does

It simulates a reproducible smoke image using PyGame. The property of the smoke and its particles can be controlled by the properties like size, velocity, lifetime, color, etc. In addition to that, this package can act as an image augmentation and can return the overlayed smoke mask, overlayed image, and smoke too.

## Target Audience

The main target audience would be anyone who is working on Computer Vision projects or image augmentation and looking for a cool way to increase training images. However, anyone who is interested in building something fun with Python and collaboration might find it interesting.

## Comparison

There are packages like Torchvision and Albumentations and this feature of simulating and overlaying a smoke on top of the image is not implemented there. While my little work is not huge to be compared with such tools, I smoke simulation useful.

Edit: Typos",Acceptable_Candy881,1h9t8r7,https://reddit.com/r/Python/comments/1h9t8r7/sharing_smoke_simulation_project_i_have_been/,https://www.reddit.com/r/Python/comments/1h9t8r7/sharing_smoke_simulation_project_i_have_been/,2024-12-08 21:24:28,18,0.88,18,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1h9t8r7
Python,"Deply 0.5.1 Released: New Collectors, 10x Performance Boost, and Stronger Architectural Rules","Hello everyone,

It's Archil again, checking in from Wroc≈Çaw, Poland. I'm excited to announce the release of Deply 0.5.1, an updated version of my Python tool for enforcing architectural patterns and dependencies in larger codebases. I've noticed steady downloads since the previous post, and I'm genuinely grateful to everyone who has tried Deply or provided feedback.

# What My Project Does

For those new here [here is my previous post](https://www.reddit.com/r/Python/comments/1gthdpy/deply_keep_your_python_architecture_clean/), Deply analyzes your code structure and verifies that your Python project adheres to a defined architecture. You specify layers, set rules, and Deply enforces them‚Äîhelping maintain clean, modular, and maintainable code as your project grows.

# Target Audience

Ideal for developers and teams building medium to large Python applications who need to maintain clear, enforceable architectural boundaries. It also suits those aiming to teach or learn best practices.

# Comparison to Other Tools

‚Ä¢ **pydeps:**

*Focus:* Visualization of dependencies

*Comparison:* pydeps provides a visual map of imports, helping you understand how parts of your code relate. Deply goes further by actively enforcing rules on these dependencies, ensuring that your project structure adheres to architectural guidelines instead of merely displaying it.

‚Ä¢ **import-linter:**

*Focus:* Import-based dependency constraints

*Comparison:* import-linter is excellent for managing import hierarchies and preventing forbidden dependencies. Deply builds on this approach by supporting additional collectors (class inheritance, decorators, file patterns) and more complex rules, making it easier to define rich architectural standards beyond imports.

‚Ä¢ **pytest-archon:**

*Focus:* Architectural checks integrated into pytest

*Comparison:* pytest-archon provides Pythonic tests for architectural constraints. While it‚Äôs great for projects already using pytest, Deply is a standalone tool that can integrate with any CI pipeline or workflow. Deply‚Äôs configuration-driven approach and broader set of collectors and rules allow for more flexible and layered architecture definitions.

‚Ä¢ **pytestarch:**

*Focus:* ArchUnit-inspired checks for Python using pytest

*Comparison:* pytestarch mimics the style of Java‚Äôs ArchUnit, letting you write tests for architectural constraints. Deply‚Äôs YAML configuration and layer-based modeling approach differ by providing a domain-specific language for architecture, reducing the need to write code-based tests and offering more straightforward integration for non-test environments.

‚Ä¢ **Tach (Rust-based):**

*Focus:* Architecture checks written in Rust

*Comparison:* Tach brings a Rust-based perspective on architecture enforcement. Deply, being Python-native, integrates more seamlessly into Python ecosystems. Deply also provides Python-specific collectors and is tailored for Python‚Äôs dynamic nature, whereas Tach, being language-agnostic and built in Rust, may require additional steps or adaptations for Python-specific patterns.

‚Ä¢ **ArchUnit (Java-focused):**

*Focus:* Architecture rules for Java codebases

*Comparison:* ArchUnit excels at defining and enforcing architecture rules in Java projects. Deply serves a similar purpose but is designed specifically for Python‚Äôs idioms and ecosystems. Deply‚Äôs flexible configuration and Python-oriented collectors cater directly to Python developers‚Äô needs, whereas ArchUnit remains tied closely to Java‚Äôs conventions.

# What's New in 0.5.1?

1. **New Collectors** More versatile collectors now let you define conditions for class and function selection with greater precision, making it easier to adapt Deply to your specific frameworks and coding patterns.
2. **10x Performance Improvement** We've significantly optimized the analysis process. Deply now runs about 10 times faster than the first version, ensuring that integrating it into your CI/CD pipelines won't slow you down.
3. **Extended Rule Set** From inheritance and naming conventions to decorator usage, the enhanced rule system provides finer control over maintaining architectural integrity.

# Example: Simple Django API Views and Models Layer Checker

    deply:
      paths:
        - /Users/a.abuladze/pinup/pinup-teams/pinup_teams
    
      exclude_files:
        - "".*\\.venv/.*""
    
      layers:
        - name: models
          collectors:
            - type: bool
              any_of:
                - type: class_inherits
                  base_class: ""django.db.models.Model""
                - type: class_inherits
                  base_class: ""django.contrib.auth.models.AbstractUser""
    
        - name: views
          collectors:
            - type: file_regex
              regex: "".*/views_api.py""
    
      ruleset:
        views:
          disallow_layer_dependencies:
            - models
          enforce_function_decorator_usage:
            - type: bool
              any_of:
                - type: bool
                  must:
                    - type: function_decorator_name_regex
                      decorator_name_regex: ""^HasPerm$""
                    - type: function_decorator_name_regex
                      decorator_name_regex: ""^extend_schema$""
                - type: function_decorator_name_regex
                  decorator_name_regex: ""^staticmethod$""

**What this does:**

* Ensures that your views\_api.py file belongs to the views layer and can't depend on models.
* Requires view functions to use certain decorators (**HasPerm** and **extend\_schema** together, or **staticmethod** as a fallback).

&gt;*Note: These examples are not calls to action; they're hypothetical and depend entirely on your project's structure, architecture, and your team's preferences.*

# Additional Examples

# Class Naming Rule:

    service:
      enforce_class_naming:
        - type: class_name_regex
          class_name_regex: "".*Service""

Classes in the service layer must have names ending with Service.

# Function Naming Rule:

    tasks:
      enforce_function_naming:
        - type: function_name_regex
          function_name_regex: ""task_.*""

Functions in the tasks layer must start with task\_.

Again, these are just hypothetical configurations. Every team and project has different needs, so you can tailor Deply's rules to fit your unique architectural guidelines.

# Rules Overview

* `disallow_layer_dependencies`: Prevent certain layers from referencing other layers.
* `enforce_function_decorator_usage`: Ensure functions use specified decorators.
* `enforce_class_decorator_usage`: Require classes to have certain decorators.
* `enforce_class_naming`: Enforce naming conventions for classes.
* `enforce_function_naming`: Enforce naming conventions for functions.
* `enforce_inheritance`: Ensure that classes inherit from specified base classes.
* `bool` rules (must, any\_of, must\_not): Combine multiple conditions for complex logic.

# Collectors Overview

* `bool`: Combine other collectors with logical conditions (must, any\_of, must\_not).
* `class_inherits`: Select classes that inherit from a given base class.
* `class_name_regex`: Select classes matching a specific regex pattern.
* `function_name_regex`: Select functions matching a specific regex pattern.
* `decorator_usage`: Select classes or functions based on their decorators.
* `directory`: Select elements (classes, functions, variables) from specific directories.
* `file_regex`: Select elements from files that match a given regex pattern.

# Check the README

For detailed explanations, usage guides, and more examples, please visit the Deply GitHub Repository and check out the README.

# Links

* **GitHub**: [https://github.com/Vashkatsi/deply](https://github.com/Vashkatsi/deply)
* **PyPI**: [https://pypi.org/project/deply/](https://pypi.org/project/deply/)

Thank you all for your support and interest! I'm looking forward to your feedback and contributions. Your involvement helps shape Deply into a stronger, more valuable tool for the community.

**Happy coding!**",vashkatsi,1h9qjjj,https://reddit.com/r/Python/comments/1h9qjjj/deply_051_released_new_collectors_10x_performance/,https://www.reddit.com/r/Python/comments/1h9qjjj/deply_051_released_new_collectors_10x_performance/,2024-12-08 19:24:36,62,0.9,62,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1h9qjjj
Python,ARM Native Python execution time higher than x64 Python?,"I am running below python code X Elite Surface Laptop 7. With python x64 and arm64 (3.11.8)  
I get below execution speeds:

x64: 28.32 seconds  
arm64: 33.34 seconds

I have run it multiple times, I get similar values. I was expecting native python to run much faster than emulated python.  
What am I missing? Also please point to different sub if needed.

    import time
    import math
    
    def calculate_pi(iterations):
    pi = 0
    for i in range(iterations):
    pi += 4 * (-1)**i / (2 * i + 1)
    return pi
    
    if __name__ == ""__main__"":
    iterations = 100000000
    start_time = time.time()
    pi_value = calculate_pi(iterations)
    end_time = time.time()
    elapsed_time = end_time - start_time
    print(f""Pi value: {pi_value}"")
    print(f""Elapsed time: {elapsed_time:.2f} seconds"")

I am running below python code on X Elite Surface Laptop 7.  
With python x64 and arm64 (3.11.8), I get below execution speeds:

x64: 28.32 seconds  
arm64: 33.34 seconds

I have run it multiple times, I get similar values.  
I was expecting native python to run much faster than emulated python. What am I missing? Also please point to different sub if needed.

    import time
    import math
    
    def calculate_pi(iterations):
    pi = 0
    for i in range(iterations):
    pi += 4 * (-1)**i / (2 * i + 1)
    return pi
    
    if __name__ == ""__main__"":
    iterations = 100000000
    start_time = time.time()
    pi_value = calculate_pi(iterations)
    end_time = time.time()
    elapsed_time = end_time - start_time
    print(f""Pi value: {pi_value}"")
    print(f""Elapsed time: {elapsed_time:.2f} seconds"")

Another code (Matrix Multiplication) seems to be doing a lot better  
x64:5 runs using timeit: 11.6211 seconds  
arm64:  5 runs using timeit: 6.3276 seconds

Edit: Added another testing done with matrix multiplication which uses only standard python library.

    import time
    import timeit
    import sys
    import platform
    from typing import Callable
    import random
    
    def pure_matrix_multiplication(size: int = 300):
        """"""
        Perform matrix multiplication using pure Python lists.
        
        Args:
            size (int): Size of the square matrices to multiply
        
        Returns:
            float: Total computation time
        """"""
        # Create matrices with random float values
        def create_matrix(size):
            return [[random.uniform(0, 1) for _ in range(size)] for _ in range(size)]
        
        # Create two random matrices
        a = create_matrix(size)
        b = create_matrix(size)
        
        # Perform matrix multiplication
        def matrix_multiply(x, y):
            # Transpose b for more efficient column access
            y_t = list(map(list, zip(*y)))
            
            # Preallocate result matrix
            result = [[0.0 for _ in range(len(y_t))] for _ in range(len(x))]
            
            # Multiply matrices
            for i in range(len(x)):
                for j in range(len(y_t)):
                    result[i][j] = sum(x[i][k] * y_t[j][k] for k in range(len(x[0])))
            
            return result
        
        # Measure matrix multiplication time
        start_time = time.time()
        _ = matrix_multiply(a, b)
        end_time = time.time()
        
        return end_time - start_time
    
    def benchmark_function(func: Callable, iterations: int = 5):
        """"""
        Run a benchmark function multiple times and calculate statistics.
        
        Args:
            func (Callable): Function to benchmark
            iterations (int): Number of times to run the benchmark
        
        Returns:
            dict: Benchmark statistics
        """"""
        times = []
        for _ in range(iterations):
            exec_time = func()
            times.append(exec_time)
        
        return {
            'mean_time': sum(times) / len(times),
            'min_time': min(times),
            'max_time': max(times),
            'iterations': iterations
        }
    
    def print_system_info():
        """"""Print detailed system information.""""""
        print(f""Python Version: {sys.version}"")
        print(f""Platform: {platform.platform()}"")
        print(f""Architecture: {platform.architecture()[0]}"")
        print(f""Machine: {platform.machine()}"")
        
    def main():
        print(""Python Emulation Overhead Benchmark"")
        print(""-"" * 40)
        
        # Print system information
        print_system_info()
        
        # Benchmark matrix multiplication
        print(""\nRunning Matrix Multiplication Benchmark..."")
        benchmark_results = benchmark_function(pure_matrix_multiplication)
        
        print(""\nBenchmark Results:"")
        for key, value in benchmark_results.items():
            print(f""{key}: {value}"")
    
        # Optional: More detailed timing using timeit
        print(""\nTimeit Detailed Profiling:"")
        detailed_time = timeit.timeit(
            stmt='pure_matrix_multiplication()',
            setup='from __main__ import pure_matrix_multiplication',
            number=5
        )
        print(f""Total time for 5 runs using timeit: {detailed_time:.4f} seconds"")
    
    if __name__ == ""__main__"":
        main()",star_lord007,1h9o1ed,https://reddit.com/r/Python/comments/1h9o1ed/arm_native_python_execution_time_higher_than_x64/,https://www.reddit.com/r/Python/comments/1h9o1ed/arm_native_python_execution_time_higher_than_x64/,2024-12-08 17:35:43,12,0.73,12,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1h9o1ed
Python, RedSage is a terminal-based pair programming assistant that integrates with LLMs. Opensource. ,"Need a junior developer that can program with you? I built one in Python.

What my project does?

After installing the program, you can start RedSage right from your terminal. It‚Äôs an AI-powered pair programming assistant that connects to LLMs like OpenAI and Claude to help you write code, explain concepts, and even review your changes in real-time. 

Comparisons:

Unlike complex IDE plugins, RedSage is lightweight and works directly from the command line, giving you intelligent code suggestions, context-aware explanations, and seamless Git integration without the overhead. Think of it as having a junior developer by your side, but with no setup hassles and a super-fast workflow. Perfect for anyone looking for a simple, yet powerful coding companion.

LINK: [https://github.com/chisasaw/redsage](https://github.com/chisasaw/redsage)

  
Conclusion: 

I'd like your feedback and project direction. It's entirely built in Python and available on Github. The link i above. 

",hack_knight,1h9jd21,https://reddit.com/r/Python/comments/1h9jd21/redsage_is_a_terminalbased_pair_programming/,https://www.reddit.com/r/Python/comments/1h9jd21/redsage_is_a_terminalbased_pair_programming/,2024-12-08 13:56:59,0,0.4,0,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1h9jd21
Python,Python Quiz for Beginners and Experts,"Curated a 40 questions quiz on Python coding. Test your knowledge with this quiz. Would love to know your score and feedback!!

I will keep updatig this quiz to make it more comprehensive. 

Try this [Python quiz](https://www.codeitbro.in/quiz/python/) here. ",CodeItBro,1h9fg6x,https://reddit.com/r/Python/comments/1h9fg6x/python_quiz_for_beginners_and_experts/,https://www.reddit.com/r/Python/comments/1h9fg6x/python_quiz_for_beginners_and_experts/,2024-12-08 09:43:13,0,0.15,0,0,5,0,0,False,False,True,False,False,Resource,self,t3_1h9fg6x
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1h95vc3,https://reddit.com/r/Python/comments/1h95vc3/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1h95vc3/sunday_daily_thread_whats_everyone_working_on/,2024-12-08 00:00:10,10,0.83,10,0,13,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1h95vc3
Python,Python .gitignore,"I'm sure a lot of you have done this:

1. Start new project
2. Need that generic Python `.gitignore` file on GitHub
3. Google ""python gitignore"" (though you probably typed ""gitingore"")
4. Click link and click raw
5. Copy all and paste in your local `.gitignore`

And I'm sure a lot of you probably just use curl and have it memorized or have it in your shell history or something (`fzf` ftw). But I can't be bothered to learn curl properly, and I got tired of the manual steps, so I just created a function in my `.zshrc` file:

    function pgi {
        curl -JL https://raw.githubusercontent.com/github/gitignore/refs/heads/main/Python.gitignore -o .gitignore
    }

So now I can just run `pgi` whenever I start a new project, and boom, precious seconds of my life saved.

That's it, that's all I have, thanks for reading. I'm sure some of you have ever better solutions, but that's mine.",EarthGoddessDude,1h8rc4g,https://reddit.com/r/Python/comments/1h8rc4g/python_gitignore/,https://www.reddit.com/r/Python/comments/1h8rc4g/python_gitignore/,2024-12-07 12:20:52,121,0.82,121,0,49,0,0,False,False,True,False,False,Resource,self,t3_1h8rc4g
Python,Astral (uv/ruff) will be taking stewardship of python-build-standalone,"An interesting blog post explaining how python-build-standalone is used:

&gt; ""On 2024-12-17, astral will be taking stewardship of `python-build-standalone` ...""

- https://astral.sh/blog/python-build-standalone",commandlineluser,1h8qoxl,https://reddit.com/r/Python/comments/1h8qoxl/astral_uvruff_will_be_taking_stewardship_of/,https://www.reddit.com/r/Python/comments/1h8qoxl/astral_uvruff_will_be_taking_stewardship_of/,2024-12-07 11:38:17,258,0.98,258,0,48,0,0,False,False,True,False,False,News,self,t3_1h8qoxl
Python,Flet vs Streamlit PWA and conceptual questions,"I'm new to flet, but I'm experienced Flutter developer plus I'm a Generative AI Engineer and worked with streamlit or Gradio. I have some conceptual questions.  
Q1. If flet uses Flutter, then why does the flet Flutter plugin require a URL? Why cannot the flet UI ""live"" all together in Flutter?  
Q2. Since there's a URL needed anyway, what's the advantage of using it vs for example having a Streamlit UI displayed in a PWA?  
Q3. Let's say I develop a personal assistant in flet. Can the assistant access my location, heart rate, my camera (for multi-modal Gen AI), microphone and speakers (for voice assistant functionalities)?",MrCsabaToth,1h8nzyy,https://reddit.com/r/Python/comments/1h8nzyy/flet_vs_streamlit_pwa_and_conceptual_questions/,https://www.reddit.com/r/Python/comments/1h8nzyy/flet_vs_streamlit_pwa_and_conceptual_questions/,2024-12-07 08:15:44,13,0.78,13,0,7,0,0,False,False,True,False,False,Discussion,self,t3_1h8nzyy
Python,Accenture interview experience 2024 | I got selected | I used to python to ace the coding round,I am a computer science student and I have multiple offeres. I have recently attended accenture interview and got selected. I have made a video on my interview experience : [https://youtu.be/bq3FrksBpwc?si=3tv\_QZNOhy4yhRLy](https://youtu.be/bq3FrksBpwc?si=3tv_QZNOhy4yhRLy) . I will share my amazon interview experience and other experiences (like Tredence)  in the follow videos.,Sure_Cry3926,1h8jkfc,https://reddit.com/r/Python/comments/1h8jkfc/accenture_interview_experience_2024_i_got/,https://www.reddit.com/r/Python/comments/1h8jkfc/accenture_interview_experience_2024_i_got/,2024-12-07 03:30:20,0,0.38,0,0,0,0,0,False,False,True,False,False,Discussion,self,t3_1h8jkfc
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1h8fj53,https://reddit.com/r/Python/comments/1h8fj53/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1h8fj53/saturday_daily_thread_resource_request_and/,2024-12-07 00:00:19,11,0.84,11,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1h8fj53
Python,Directory for AI Python libraries,"Hello all,

Using Unicorn Platform I made  my first directory : a comprehensive list of Python libraries used in AI based programming. You can find the directory here: 

https://www.aipythonlibraries.com/

  
I have already fed about 189 libraries into the directory, but the list is still growing.

Tell me what you think, any feedback is much appreciated.

Thank you,
Daniel",Danielopol,1h89nwg,https://reddit.com/r/Python/comments/1h89nwg/directory_for_ai_python_libraries/,https://www.reddit.com/r/Python/comments/1h89nwg/directory_for_ai_python_libraries/,2024-12-06 19:34:32,0,0.5,0,0,7,0,0,False,False,True,False,False,Resource,self,t3_1h89nwg
Python,PyCon US 2025 Registration Opens,"Howdy Pythonistas :) 

PyCon US 2025 registration and Travel Grant applications are officially open!

Early bird tickets are available until the first 500 tickets are sold or until January 6, 2025 (whichever comes first). Register today to get your discounted tickets and help us spread the word!

P.S. You can also **[Submit a Talk](&lt;https://us.pycon.org/2025/speaking/pretalx/&gt;)** for the next 2 weeks!

- [Blog Announcement](https://pycon.blogspot.com/2024/12/pycon-us-2025-registration-launch.html)
- [Travel Grants](&lt;https://us.pycon.org/2025/attend/travel-grants/&gt;)",monorepo,1h89mmg,https://reddit.com/r/Python/comments/1h89mmg/pycon_us_2025_registration_opens/,https://www.reddit.com/r/Python/comments/1h89mmg/pycon_us_2025_registration_opens/,2024-12-06 19:32:59,28,0.88,28,0,3,0,0,False,False,True,False,False,:pythonLogo: Official Event,self,t3_1h89mmg
Python,VCAT: Video Transcriber and Translator,"



# Have you ever wanted to share videos to your non bilingual friends? üåé


Fear not because I (Claude) have made a script that does exactly that!


## **What My Project Does** ‚ö°


Type in a video URL along with the target language and the program will:

A) Download the media from the URL (Uses youtube-dlp so most websites are compatible)  
B) Transcribe it (srt file output)  
C) Translate it (srt file output)  
D) Add subtitles using ffmpeg  

All fully automated of course!

üîç [https://github.com/tikene/video-caption-and-translate](https://github.com/tikene/video-caption-and-translate) - You can see some sample translations on my repo to get an idea of how the output video looks


## **Target Audience** üë•


If you have any friends who, for example, aren't fluent with English, you may have ran into some frustration when trying to share movies, videos or shows that you like. That's what motivated me to make this script, making it so you can easily share your interests and build human connections regardless of the language barrier (It's all about making the world a better place üíÅ‚Äç‚ôÄÔ∏è)



## **Comparison** üîÑ

The projects I could find relating to this subject either:
- Don't accept URLs 
- Don't work with long videos
- Don't add the subtitles directly to the video
- Are outdated



## **Extra details** üí°

The process is fully automatic so I actually find myself using it often, it only takes 10 seconds to start the translation. 

Every language is supported because it uses OpenAI for translation, which means you do need an API key but it only costs around $0.01 for every minute of video. I spent $5 and have been using this script for months.



## **Conclusion** üéØ

This is my first time sharing a project, so feedback would be greatly appreciated, if this gets any traction whatsoever I'll continue updating it. Let me know if you have any questions or suggestions",Tikene,1h85e6v,https://reddit.com/r/Python/comments/1h85e6v/vcat_video_transcriber_and_translator/,https://www.reddit.com/r/Python/comments/1h85e6v/vcat_video_transcriber_and_translator/,2024-12-06 16:33:39,10,0.83,10,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1h85e6v
Python,pytest-fixture-forms - A new plugin to simplify testing parameter variations,"Hey Python testing enthusiasts! I'm excited to share a pytest plugin I've been working on that makes testing different parameter variations much cleaner and more maintainable.

# What my project does

If you've ever found yourself writing lots of parametrized tests for different API inputs, credentials, or configuration combinations, you know it can get messy quickly. This plugin lets you organize these variations as fixture methods in a class, making your tests more structured and easier to maintain.

Here's a quick example:

    class UserCredentials(FixtureForms):
        @pytest.fixture
        def valid_user(self):
            return {""username"": ""john_doe"", ""password"": ""secure123""}
    
        @pytest.fixture
        def invalid_password(self):
            return {""username"": ""john_doe"", ""password"": ""wrong""}
    
    def test_login(user_credentials):
        response = login_service.authenticate(**user_credentials.value)
        if user_credentials.form == ""valid_user"":
            assert response.status_code == 200
        else:
            assert response.status_code == 401

Key Features:

* Auto-generates fixtures from class methods
* Integrates with pytest's parametrization
* Handles nested dependencies elegantly
* Zero configuration needed

# Target Audience

anyone want to write and maintain tests for combinations of parameter. it should be stable but hey! its a new project so expect rough edges.

# Comparison¬†

there is no currently plugin in pytest that let you dynamically generate fixtures and test nodes in similar way to how pytest-fixture-forms does. this plugin is also being actively used inside a real product(actually this plugin was written as inside an internal tool testing code and later migrated by me to become a standalone pytest plugin).

# Source

Check it out on [GitHub](https://github.com/Eliav2/pytest-fixture-forms) or install with `pip install pytest-fixture-forms`.

I'd love to hear your thoughts and feedback!",Eliav2,1h7ztqd,https://reddit.com/r/Python/comments/1h7ztqd/pytestfixtureforms_a_new_plugin_to_simplify/,https://www.reddit.com/r/Python/comments/1h7ztqd/pytestfixtureforms_a_new_plugin_to_simplify/,2024-12-06 12:02:26,18,0.96,18,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1h7ztqd
Python,How we made Celery tasks bulletproof,"Hey folks, 

I just published a deep dive into how we handle task resilience at GitGuardian, where our Celery tasks scan GitHub PRs for secrets. Wanted to share some key learnings that might help others dealing with similar challenges.


**Key takeaways:**

1. Don‚Äôt just blindly retry tasks. Each type of failure (transient, resource limits, race conditions, code bugs ) needs its own handling strategy.
2. Crucial patterns we implemented:
   - Ensure tasks are idempotent (may not be straightforward, 
   - Used `autoretry_for` with specific exceptions + backoff
   - Implemented `acks_late` for process interruption protection
   - Created separate queues for resource-heavy tasks

**Watch out for:**

1. Never set task_retry_on_worker_lost=True (can cause infinite retries)
2. With Redis, ensure tasks complete within visibility_timeout
3. Different behavior between prefork vs thread/gevent models for OOM handling

---

For those interested in the technical details: https://blog.gitguardian.com/celery-tasks-retries-errors/


What resilience patterns have you found effective in your Celery deployments? Any war stories about tasks going wrong in production?",protoplancton,1h7xr6s,https://reddit.com/r/Python/comments/1h7xr6s/how_we_made_celery_tasks_bulletproof/,https://www.reddit.com/r/Python/comments/1h7xr6s/how_we_made_celery_tasks_bulletproof/,2024-12-06 09:37:58,104,0.93,104,0,20,0,0,False,False,True,False,False,Tutorial,self,t3_1h7xr6s
Python,Is a TypeScript-like language for Python possible and desirable?,"While tools like MyPy, Pyright, and Pylance have significantly improved static typing in Python, they don't offer the same level of rigor and performance as fully compiled languages.

Imagine a language that compiles to Python bytecode, providing:  

* **Strong static typing:** catching errors early and improving code reliability.
* **Performance benefits:** through compilation and optimizations.
* **Advanced language features:** such as algebraic data types, pattern matching, and better concurrency support.

**But what are the trade-offs?** Would such a language be compatible with the vast Python ecosystem? Could a compiler achieve the same performance as the CPython interpreter? And would the added complexity outweigh the benefits for many Python developers?

**I'm curious to hear your thoughts.** Have you ever experimented with statically typed Python dialects or considered the potential benefits and drawbacks of a more rigid type system?",Ok_Durian6656,1h7uyiz,https://reddit.com/r/Python/comments/1h7uyiz/is_a_typescriptlike_language_for_python_possible/,https://www.reddit.com/r/Python/comments/1h7uyiz/is_a_typescriptlike_language_for_python_possible/,2024-12-06 06:15:51,0,0.25,0,0,12,0,0,False,False,True,False,False,Discussion,self,t3_1h7uyiz
Python,Is a TypeScript-like language for Python possible and desirable?,"While tools like MyPy, Pyright, and Pylance have significantly improved static typing in Python, they don't offer the same level of rigor and performance as fully compiled languages.

Imagine a language that compiles to Python bytecode, providing:  

* **Strong static typing:** catching errors early and improving code reliability.
* **Performance benefits:** through compilation and optimizations.
* **Advanced language features:** such as algebraic data types, pattern matching, and better concurrency support.

**But what are the trade-offs?** Would such a language be compatible with the vast Python ecosystem? Could a compiler achieve the same performance as the CPython interpreter? And would the added complexity outweigh the benefits for many Python developers?

**I'm curious to hear your thoughts.** Have you ever experimented with statically typed Python dialects or considered the potential benefits and drawbacks of a more rigid type system?",Ok_Durian6656,1h7uyic,https://reddit.com/r/Python/comments/1h7uyic/is_a_typescriptlike_language_for_python_possible/,https://www.reddit.com/r/Python/comments/1h7uyic/is_a_typescriptlike_language_for_python_possible/,2024-12-06 06:15:48,0,0.4,0,0,16,0,0,False,False,True,False,False,Discussion,self,t3_1h7uyic
Python,ML Trading Bot that uses Ranked Ensemble Learning,"I created a ML Trading Bot - trained it for a little over 3 years with 24 years of data and started it live on November 20, 2024. It's been going over a little more than 2 weeks, but it's been doing great so far - not indicative of how it will perform but it's had a great debut if you can say that.

GitHub Repo: [https://github.com/yeonholee50/AmpyFin](https://github.com/yeonholee50/AmpyFin)

Bot Website: [https://ampyfin-website.onrender.com/](https://ampyfin-website.onrender.com/)

**What My Project Does**

In essence, the trading bot ranks the strategies and gives them weights based on their overall performance while giving slight bias to recent performance (this is so it is reactive to current market trends and adjusts accordingly). These weights determine how much influence they have on the trading strategy. That's the oversimplified explanation of how the bot works. A more descriptive explanation is done on the website as well as README

**Target Audience**

Reason why I'm posting here is because I'm currently looking for contributors who have some expertise in Python (maybe want to contribute or just interested) on the trading strategies side. The more trading and diverse strategies there are, the better the bot will perform. This project is aimed towards developers interested in contributing or just anyone interested in the project. Currently there is 60 strategies, but the aim is to get much more: at least 100. If you have any questions on how it works or just interested in contributing, please don't hesitate to dm or comment.

**Comparison**

Most trading bots either use one strategy or multiple combination of strategies. The one's that use ML are too complex to understand or use libraries with jargons that are too coated. I specifically used ranked ensemble learning because it's something I've used in the past (for a facial feature measurement application for a medical company), but also because it's quite simple to understand and effective at the same time.",Inevitable-Air-1712,1h7qtzs,https://reddit.com/r/Python/comments/1h7qtzs/ml_trading_bot_that_uses_ranked_ensemble_learning/,https://www.reddit.com/r/Python/comments/1h7qtzs/ml_trading_bot_that_uses_ranked_ensemble_learning/,2024-12-06 02:26:49,24,0.7,24,0,24,0,0,False,False,True,False,False,Showcase,self,t3_1h7qtzs
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1h7nue4,https://reddit.com/r/Python/comments/1h7nue4/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1h7nue4/friday_daily_thread_rpython_meta_and_freetalk/,2024-12-06 00:00:52,6,0.88,6,0,2,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1h7nue4
Python,"I made a generative ai project template (python, uv, pytest and more)","Hey everyone,

I‚Äôve been working on a template to get started with a generative AI project ! 

I‚Äôve created a **Generative AI Project Template** that‚Äôs loaded with tools and features to streamline your AI development. You can check it out [here on GitHub](https://github.com/AmineDjeghri/generative-ai-project-template).

  
**üõ†Ô∏è Key Features**

**Engineering tools:**

‚Ä¢ ‚úÖ **Package management**: UV

‚Ä¢ ‚úÖ **Code quality**: Pre-commit hooks with Ruff &amp; Detect-secrets

‚Ä¢ ‚úÖ **Logging**: Colorful logs with Loguru

‚Ä¢ ‚úÖ **Unit tests**: Pytest

‚Ä¢ ‚úÖ **Dockerized**: Dockerfile &amp; docker-compose for your evaluation pipeline

‚Ä¢ ‚úÖ **Make commands**: Simplify your workflow (install, run, test)



**AI tools:**

‚Ä¢ ‚úÖ **LLMs**: Run locally (Ollama, Ollamazure) or in the cloud (OpenAI, Azure OpenAI)

‚Ä¢ ‚úÖ **Information extraction &amp; QA** from documents

‚Ä¢ ‚úÖ **Chat interface** to test your system

‚Ä¢ ‚úÖ **Async code** for efficient AI workflows

‚Ä¢ ‚úÖ **AI Evaluation Frameworks**: Promptfoo, Ragas, and more



**CI/CD &amp; Maintenance tools:**

‚Ä¢ ‚úÖ **Pipelines**: GitHub Actions (.github/workflows) &amp; GitLab CI (.gitlab-ci.yml)

‚Ä¢ ‚úÖ **Local CI/CD pipelines**: Run GitHub Actions with act and GitLab CI with gitlab-ci-local



**Documentation tools:**

‚Ä¢ ‚úÖ **Documentation website**: MkDocs + mkdocs-material

‚Ä¢ ‚úÖ **GitHub Pages deployment**: Easy deployment with mkdocs gh-deploy

Any feedback, issues, or PRs are welcome!

",aminedjeghri,1h7ff4i,https://reddit.com/r/Python/comments/1h7ff4i/i_made_a_generative_ai_project_template_python_uv/,https://www.reddit.com/r/Python/comments/1h7ff4i/i_made_a_generative_ai_project_template_python_uv/,2024-12-05 18:02:47,28,0.75,28,0,11,0,0,False,False,True,False,False,Resource,self,t3_1h7ff4i
Python,PydanticAI: AI Agent framework for using Pydantic with LLMs,"PydanticAI is a trending GitHub repo which helps you to use Pydantic with LLM applications &amp; AI Agents, hence a great release considering production deployment and API developments. It can also help in structuring your output based on a certain format. Checkout this tutorial on how to use it and a demo app using PydanticAI: https://youtu.be/vnBcowFaQyU?si=0Bz6V2o5I2YWurRz",mehul_gupta1997,1h7aduu,https://reddit.com/r/Python/comments/1h7aduu/pydanticai_ai_agent_framework_for_using_pydantic/,https://www.reddit.com/r/Python/comments/1h7aduu/pydanticai_ai_agent_framework_for_using_pydantic/,2024-12-05 14:27:57,0,0.39,0,0,1,0,0,False,False,True,False,False,News,self,t3_1h7aduu
Python,HandiRokuRemote (Open Source) - Control your Roku with only your hand gestures,"###What My Project Does
This is a Python application that lets you control your Roku device with nothing but hand gestures! Using Mediapipe's Hand Landmark Detector, it tracks your hand, identifies gestures, and sends commands to your Roku via its External Control Protocol.

Check out the [demo gif](https://imgur.com/zVbX1T6)

Features:

*Real-time hand tracking: Gestures like ""thumbs up"" control volume or navigation.

*Cross-device support: Works with any Roku device on the same network.

*Easy setup: Plug in a camera, and you‚Äôre ready to go.

###Target Audience
The target audience is anyone who's ever lost their TV remote, but probably more likely fellow tinkerers and anyone interested in computer-vision.

###Comparison
As far as I can tell, there is no comparison. I've looked around and haven't found anything that does what this does. I guess the only comparison is a regular remote (but you lost that earlier, remember?)

Check out the code on [Github](https://github.com/BBelk/HandiRokuRemote/)

Or download the .exe and try it out! [PC only - Download](https://github.com/BBelk/HandiRokuRemote/releases/tag/v1)

Let me know what you think!",BB_dev,1h7acxc,https://reddit.com/r/Python/comments/1h7acxc/handirokuremote_open_source_control_your_roku/,https://www.reddit.com/r/Python/comments/1h7acxc/handirokuremote_open_source_control_your_roku/,2024-12-05 14:26:45,9,0.81,9,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1h7acxc
Python,Built a tool to step through LeetCode Python solutions‚Äîfeedback welcome! üêõ‚ú®,"Hey everyone! üëã

\# What my project does

This tool allows you to step through Python code for LeetCode problems line-by-line. It highlights the current line being executed and shows the real-time values of variables and sub-expressions. It's designed to help visualize code execution and understand the logic flow more easily.

check it our : [https://github.com/roshixyz/StepThrough](https://github.com/roshixyz/StepThrough)

# # Target Audience

anyone trying to understand code behaviour (specifically Leetcode problems)

\# Comparison

Unlike standard IDEs or debuggers, this tool focuses on simplifying the debugging process for LeetCode-style coding challenges. It provides a clear, visual breakdown of what‚Äôs happening under the hood, making it easier to spot issues and understand how each line affects the program‚Äôs state.

Demo : [https://x.com/roshi\_xyz/status/1864257060042330455](https://x.com/roshi_xyz/status/1864257060042330455)",aman167k,1h79tdf,https://reddit.com/r/Python/comments/1h79tdf/built_a_tool_to_step_through_leetcode_python/,https://www.reddit.com/r/Python/comments/1h79tdf/built_a_tool_to_step_through_leetcode_python/,2024-12-05 14:00:56,12,0.78,12,0,11,0,0,False,False,True,False,False,Showcase,self,t3_1h79tdf
Python,Python binary which runs everwhere,"I wanted to share some insights about an interesting project called¬†[python-build-standalone](https://github.com/indygreg/python-build-standalone)¬†that I've been exploring.

# What is python-build-standalone?

The¬†**python-build-standalone**¬†project produces fully usable Python installations that include most extension modules from the standard library. The key feature here is that it minimizes runtime dependencies.

# Why Use It?

1. **Portability**: The distributions are designed to work on any system for the targeted architecture, making it easier to deploy Python applications in diverse environments.
2. **Customizability**: Users can include build artifacts and rich metadata, which allows for downstream repackaging. This means you can create a custom Python distribution tailored to specific needs‚Äîgreat for embedding Python in larger binaries.
3. **Sister Project - PyOxy**: For those interested in enhancing their Python interpreter with Rust code, there's a related project called PyOxy that builds on these standalone distributions to create single-file executables.

# Getting Started

If you‚Äôre interested in trying out python-build-standalone, you can find the documentation¬†[here](https://gregoryszorc.com/docs/python-build-standalone/main/). The documentation provides detailed instructions on how to build your own standalone Python distributions and includes examples of how to customize your builds.

# Use Cases

This tool is particularly beneficial for:

* Developers who need to distribute applications without requiring users to install Python or additional libraries.
* Projects that aim for a minimal footprint on user systems.
* Scenarios where embedding Python within other applications is necessary.

Happy coding!

P.S :- (I am building Origins AI, If you are facing some hard tech issues or If you want to get a product built, DM me)",rava-dosa,1h78av5,https://reddit.com/r/Python/comments/1h78av5/python_binary_which_runs_everwhere/,https://www.reddit.com/r/Python/comments/1h78av5/python_binary_which_runs_everwhere/,2024-12-05 12:42:16,89,0.82,89,0,25,0,0,False,False,True,False,False,Tutorial,self,t3_1h78av5
Python,"Looking at Investing in Quantum processing, Python Question.","RGTI)  Rigetti quantum states Python is language of choice for users of their ""processing cloud""... Is Python easy enough to figure out, the AI through language models, could learn to code itself?

Sorry, Social Science degree here... Lol",TimeGrifter,1h781xt,https://reddit.com/r/Python/comments/1h781xt/looking_at_investing_in_quantum_processing_python/,https://www.reddit.com/r/Python/comments/1h781xt/looking_at_investing_in_quantum_processing_python/,2024-12-05 12:28:22,0,0.31,0,0,20,0,0,False,False,True,False,False,Discussion,self,t3_1h781xt
Python,BAD PYTHON wrong calc,"Python error on first code. There was wrong calculation. 881/12=6.75
Same code was pasted and gave actual result of 73.4... 

https://imgur.com/a/bap4g49
&gt;picture of error ",[deleted],1h773ym,https://reddit.com/r/Python/comments/1h773ym/bad_python_wrong_calc/,https://www.reddit.com/r/Python/comments/1h773ym/bad_python_wrong_calc/,2024-12-05 11:31:44,0,0.22,0,0,8,0,0,False,False,True,False,False,Discussion,self,t3_1h773ym
Python,What are dataclasses so famous?,"As the title says, I've read the whole documentation more than once and have used them plenty of times. But in practice for me it's just a way to avoid writing an __init__ method. This is a good QL improvement, I guess, but now means that my code uses another dependency and extra complexity for what?
I won't argue the merits of options like hash and frozen, but i don't find myself needing that functionality that often. So I return to my genuine question, why has the community so quickly adopted and recommended the use of dataclasses? I'm referring to articles and YouTube videos about them.

In what use cases are you finding success with them?",Smash-Mothman,1h76er3,https://reddit.com/r/Python/comments/1h76er3/what_are_dataclasses_so_famous/,https://www.reddit.com/r/Python/comments/1h76er3/what_are_dataclasses_so_famous/,2024-12-05 10:44:12,0,0.43,0,0,48,0,0,False,False,True,False,False,Discussion,self,t3_1h76er3
Python, üí• Tech Talks Weekly #40: newly uploaded videos from PyCon AU 2024,"Hello again r/Python. I'm sharing an excerpt from the latest issue of Tech Talks Weekly with the newest PyCon AU 2024 talks, ordered by the view count for your convenience. Let me know what you think!

1. [**""""Switching to MongoDB: The challenges of translating database schemas"" - Katie Bell (Pycon AU 2024)""**](https://youtube.com/watch?v=cESAbE_orVU) ‚∏± **+600 views** ‚∏± 28 Nov 2024 ‚∏± 00h 29m 00s
2. [**""""How we used Python to try and save lives"" - Anthony Baxter (Pycon AU 2024)""**](https://youtube.com/watch?v=hfCkGNV5iLI) ‚∏± **+300 views** ‚∏± 01 Dec 2024 ‚∏± 00h 30m 56s
3. [**""""Time and Time Again"" - Yaakov (Pycon AU 2024)""**](https://youtube.com/watch?v=vWc2D-xQgtc) ‚∏± **+300 views** ‚∏± 30 Nov 2024 ‚∏± 00h 28m 10s
4. [**""""Student showcase"" - Education Track (Pycon AU 2024)""**](https://youtube.com/watch?v=xVjlVYFrJj4) ‚∏± **+300 views** ‚∏± 29 Nov 2024 ‚∏± 01h 40m 15s
5. [**""Failsafes and Safety Fails: How to crash a train and other lessons for software engineers""**](https://youtube.com/watch?v=Rscgum-aVTY) ‚∏± **+200 views** ‚∏± 29 Nov 2024 ‚∏± 00h 31m 03s
6. [**""Space Django: Migrating and Redesigning a Database while Hunting for Satellites.""**](https://youtube.com/watch?v=XcOybozDk_0) ‚∏± **+200 views** ‚∏± 28 Nov 2024 ‚∏± 00h 31m 16s
7. [**""Where am I? What am I doing? Mobile App development in Python""**](https://youtube.com/watch?v=cLNWwNHgTco) ‚∏± **+200 views** ‚∏± 30 Nov 2024 ‚∏± 00h 29m 38s
8. [**""How to confirm that the index you added actually improves query performance""**](https://youtube.com/watch?v=MlCQAaL6V3U) ‚∏± **+200 views** ‚∏± 01 Dec 2024 ‚∏± 00h 28m 47s
9. [**""ML ain‚Äôt your only hammer: adding mathematical optimisation to the data scientist‚Äôs toolbox""**](https://youtube.com/watch?v=G0tlyC9Sr3w) ‚∏± **+200 views** ‚∏± 01 Dec 2024 ‚∏± 00h 19m 14s
10. [**""""Quantifying Nebraska"" - Adam Harvey (Pycon AU 2024)""**](https://youtube.com/watch?v=9HQOTIqP6KM) ‚∏± **+100 views** ‚∏± 29 Nov 2024 ‚∏± 00h 26m 06s

See the remaining list here: [https://www.techtalksweekly.io/i/152513751/pycon-au](https://www.techtalksweekly.io/i/152513751/pycon-au)",TechTalksWeekly,1h75wv7,https://reddit.com/r/Python/comments/1h75wv7/tech_talks_weekly_40_newly_uploaded_videos_from/,https://www.reddit.com/r/Python/comments/1h75wv7/tech_talks_weekly_40_newly_uploaded_videos_from/,2024-12-05 10:08:08,19,0.88,19,0,1,0,0,False,False,True,False,False,News,self,t3_1h75wv7
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1h6vb5l,https://reddit.com/r/Python/comments/1h6vb5l/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1h6vb5l/thursday_daily_thread_python_careers_courses_and/,2024-12-05 00:00:09,2,0.63,2,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1h6vb5l
Python,Agent-Based Modeling library Mesa releases version 3.1,"Hi everyone! After our huge¬†[Mesa 3.0](https://www.reddit.com/r/Python/comments/1gn5q8z/mesa_30_a_major_update_to_pythons_agentbased/) release, we're proud to announce Mesa 3.1 less than a month later. It contains some major spatial improvements and groundwork for new control and data collection features.

- https://github.com/projectmesa/mesa/releases/tag/v3.1.0

### What's Agent-Based Modeling?

Ever wondered how bird flocks organize themselves? Or how traffic jams form? Agent-based modeling (ABM) lets you simulate these complex systems by defining simple rules for individual ""agents"" (birds, cars, people, etc.) and then watching how they interact. Instead of writing equations to describe the whole system, you model each agent's behavior and let patterns emerge naturally through their interactions. It's particularly powerful for studying systems where individual decisions and interactions drive collective behavior.

### What's Mesa?

Mesa is Python's leading framework for agent-based modeling, providing a comprehensive toolkit for creating, analyzing, and visualizing agent-based models. It combines Python's scientific stack (NumPy, pandas, Matplotlib) with specialized tools for handling spatial relationships, agent scheduling, and data collection. Whether you're studying epidemic spread, market dynamics, or ecological systems, Mesa provides the building blocks to create sophisticated simulations while keeping your code clean and maintainable.

### What's new in Mesa 3.1?

This release adds experimental support for Observables and Computed, enabling a more reactive and responsive programming model for agent-based simulations. The new `Observable` and `Computable` classes allow developers to declaratively define attributes that automatically emit signals when their values change, and compute derived values that update dynamically. This lays the groundwork for more advanced event handling and data visualization features in future releases (#2291).

The experimental cell space module has been updated with full support for n-dimensional property layers. These allow agents to easily interact with and modify spatial properties of the environment, such as terrain, resources, or environmental conditions. The new implementation provides a more intuitive attribute-based API and ensures tight integration with the cell space architecture (#2512).

Mesa now includes built-in support for logging using the standard Python `logging` module. This provides developers with a flexible and powerful way to add structured diagnostic and debug output to their simulations, without the need for custom logging solutions. The logging system is integrated throughout the library, including the new SolaraViz visualization system (#2506).

Creating multiple agents with varying initialization parameters is now significantly easier with the new `Agent.create_agents` class method. This factory function supports both uniform and per-agent parameters, simplifying the code required to set up a simulation with a large number of heterogeneous agents (#2351).

In addition to the major new features, this release includes a number of smaller enhancements and bug fixes that improve the overall developer experience. These include removing deprecated functionality, cleaning up examples, and addressing various edge cases reported by the community. Mesa 3.1 requires Python 3.11 or higher.

### Talk with us!

We always love to hear what you think:

- Join our Matrix chat: https://matrix.to/#/#project-mesa:matrix.org
- Checkout our Discussions: https://github.com/projectmesa/mesa/discussions",Balance-,1h6pwdn,https://reddit.com/r/Python/comments/1h6pwdn/agentbased_modeling_library_mesa_releases_version/,https://www.reddit.com/r/Python/comments/1h6pwdn/agentbased_modeling_library_mesa_releases_version/,2024-12-04 20:13:37,73,0.96,73,0,1,0,0,False,False,True,False,False,News,self,t3_1h6pwdn
Python,need to work with someone for free to learn dev environment,"Hi,

I am a working professional with the experience of 12 years. I started learning C and python for quite a time now, i have studied a lot but not getting any hands on . if someone needs my support , I will work with them for free just to learn and i will really appreciate it.

regards ",Ok_Reference1975,1h6n48d,https://reddit.com/r/Python/comments/1h6n48d/need_to_work_with_someone_for_free_to_learn_dev/,https://www.reddit.com/r/Python/comments/1h6n48d/need_to_work_with_someone_for_free_to_learn_dev/,2024-12-04 18:22:29,0,0.36,0,0,5,0,0,False,False,True,False,False,Discussion,self,t3_1h6n48d
Python,Nefertiti for Sphinx,"Hi there,

A new Sphinx theme is available, it is called Nefertiti, and it is highly customizable: it comes with several font bundles and new fonts can be added easily (to avoid accessing 3rd party font sites, like Google Fonts). It supports filtering of the index (in the left side column), which allows to find index entries that we might remember from a previous visit but can't remember in what level they are. It has support for light/dark color schemes, and when given, images switch between color-schemes too (this last feature is based on [sphinx-colorschemed-images](https://github.com/danirus/sphinx-colorschemed-images)). Nefertiti provides several colorsets, and there is an extra option to make the header color neutral, so that the primary color adapts to the light/dark color scheme. You can see these color customizations directly in [the docs of Nefertiti for Sphinx](https://sphinx-nefertiti.readthedocs.io/). Another feature are header links, they are visible in the docs. They are customizable too. Header links can be displayed next to the project's name or in a second row in the header, below the project's name (see examples in [this page](https://sphinx-nefertiti.readthedocs.io/latest/users-guide/customization/header-links.html)). They can contain dropdown menus too. All that is customizable. 

If you take a look and see something not working, please, create an issue in GitHub or let me know here. I hope you like it.",danielarus,1h6hq7i,https://reddit.com/r/Python/comments/1h6hq7i/nefertiti_for_sphinx/,https://www.reddit.com/r/Python/comments/1h6hq7i/nefertiti_for_sphinx/,2024-12-04 14:47:01,15,0.91,15,0,3,0,0,False,False,True,False,False,News,self,t3_1h6hq7i
Python,ProgressPal (an alternative/iteration to tqdm),"**Get ProgressPal** here is full documentation available in the Github repo: [https://github.com/levi2234/Progresspal](https://github.com/levi2234/Progresspal)

**What My Project Does**¬†The code progress tracker called ProgressPal provides an easy to use environment for tracking python functions, iterables and logs. It tries to keep the known tqdm syntax while expanding the usability for simulataneous python runtimes such as Threads and parallel processes. ProgressPal provides an easy to access online environment which collects all progress in one place, visible from anywhere in the world. The main features included are:

* **Progress Tracking**: Track the progress of Python iterables, functions, and log messages in real-time.
* **Decentralized Monitoring**: Monitor multiple Python scripts from any device with an internet connection.
* **Collaborative Projects**: Collaborate and monitor the real-time progress of various scripts running on different devices and processes.
* **Distributed Systems**: Track progress across distributed systems for seamless monitoring and remote collaboration.
* **Function Tracking**: Track the call-count, execution time distribution, execution history, time between calls, error count, function file origin, and function name.
* **Iterable Tracking**: Track the progress of iterables and generators with a progress bar. Additionally, track the total number of iterations, current iteration, and percentage completion, time remaining, iteration execution time, and iteration rate.
* **Log Server**: Start a log server to receive progress updates from Python scripts. The log server can be accessed from any device with an internet connection.
* **Threading support**: Track the progress of multiple threads and processes simultaneously.
* **Search Functionality**: Search for specific functions and iterables in the log server.

**Target Audience** ProgressPal is made for people who are working with multiple python processes or want to remotely monitor their code. ProgressPal has collaboration in mind providing a 2 click monitoring server for everyone to use. Because of the 1 ms overhead (9ns of tqdm) of the code we recommend this for tracking longer execution times of loops and functions to minimize impact.

**Comparison** During my work I grew increasingly annoyed with having to jump from terminal to terminal using tqdm. I had a use for a central logging environment. Scouring through my options I couldn't find a suitable option. So after 2 years of being annoyed I decided to make my own.

**Comments** This project was my first experience with web developement (code quality does reflect this) Because this is my first webdev project security is not the first priority. Therefore this project is mainly developed for personal use and recommended not to run on critical systems. However, it is a great tool to use during developement which  I myself have used this in projects with multiple dozens of simultaneous processes without problems.

",More-Tower9993,1h6hu9s,https://reddit.com/r/Python/comments/1h6hu9s/progresspal_an_alternativeiteration_to_tqdm/,https://www.reddit.com/r/Python/comments/1h6hu9s/progresspal_an_alternativeiteration_to_tqdm/,2024-12-04 14:51:57,49,0.89,49,0,16,0,0,False,False,True,False,False,Showcase,self,t3_1h6hu9s
Python,doc2exam - Full Self-Driving for exam prep and certs,"hello everyone! here's doc2exam

a place to turn any material into live exams -- for students prepping or professors setting official certifications

working on doc2exam proved to be really fun, I've learned svelte5, deepened my django skills, and rag/llm skills.

I've found¬†[llamaindex](https://github.com/run-llama/llama_index)¬†is much easier to use than langchain, and the reddit dwarfs and yc hackers are right, at least in my case: langchain is over-engineered for most people

but llamaindex also tries too hard in some places to replace manual prompt engineering, and I had to dodge many of its incomplete (and sometimes inconsistent or unintuitive) apis

\# What My Project Does

it turns any material into a fully-fledged live exam that you can send to your students who can take it online., and receive a perma-url certificate like on Coursera (which you can attach to your linkedin or whatever).  
the idea is to have the examination part of a course completely automated, while the teaching itself is still driven by a human (as per the neoducation manifesto - google it).

  
\# Target Audience

Schools, Professors or students prepping for exams

  
\# Comparison

[https://jungleai.com/](https://jungleai.com/) \-- more of a flashcard generator, and it focuses on student prepping while doc2exam is primarily targeted towards professors (but students can use it just as easily for prep)

[https://www.marquiz.io/](https://www.marquiz.io/) \-- the term ""quiz"" is too casual for doc2exam's intended scope: to become a de-facto platform for exam generation but also, equally important, live exam taking

[https://pdfquiz.com/](https://pdfquiz.com/) \-- idem marquiz.io",lutian,1h6f71a,https://reddit.com/r/Python/comments/1h6f71a/doc2exam_full_selfdriving_for_exam_prep_and_certs/,https://www.reddit.com/r/Python/comments/1h6f71a/doc2exam_full_selfdriving_for_exam_prep_and_certs/,2024-12-04 12:49:03,0,0.47,0,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1h6f71a
Python,Using Pyjokes in Other Programming Languages,"Hey everyone,

Check out this guide on integrating Pyjokes into various languages like Java, C#, and JavaScript. If you enjoy adding humor to your code, this article is worth a read: [How to Use Pyjokes in Other Programming Languages](https://www.javonet.com/how-to-use-pyjokes-in-other-programming-languages/?utm_source=reddit&amp;utm_medium=social&amp;utm_campaign=new_features_highlights&amp;utm_content=pyjokes-python)

Have fun and let me know your thoughts!",javonet1,1h6f3j4,https://reddit.com/r/Python/comments/1h6f3j4/using_pyjokes_in_other_programming_languages/,https://www.reddit.com/r/Python/comments/1h6f3j4/using_pyjokes_in_other_programming_languages/,2024-12-04 12:43:36,9,0.66,9,0,3,0,0,False,False,True,False,False,Tutorial,self,t3_1h6f3j4
Python,Algorithmic Portfolio Rebalancer Bot (4.5% USD interest) for DeFi,"For the pythonic fintech/finance peeps. You can get into finance &amp; Python without a Bank account, API key, or any of that.



Let me know what you think! I have a video coming out with it soon too!



\# What My Project Does



We do the following all in Python:

1. Set a target portoflio allocation of 30% USDC, 70% ETH/WETH

2. Deposit all our funds into Aave to gain 4.5% interest on our USDC and 0.3% on our WETH (as of writing)

3. Withdraw our funds if our target allocations have not been met

4. Trade funds on Uniswap programatically to reach out target allocations

5. Re-deposit into Aave to gain interest again



\# Target Audience 



\- Python learners

\- Blockchain learners

\- DeFi/FinTech Developers / Automators



I have used this code in production myself!



\# Comparison 

This is similar to an algorithmic trading bot, but with a high-yield savings account as well. 



\[https://github.com/Cyfrin/mox-algorithmic-trading-cu\](https://github.com/Cyfrin/mox-algorithmic-trading-cu)",patrickalphac,1h65lsy,https://reddit.com/r/Python/comments/1h65lsy/algorithmic_portfolio_rebalancer_bot_45_usd/,https://www.reddit.com/r/Python/comments/1h65lsy/algorithmic_portfolio_rebalancer_bot_45_usd/,2024-12-04 02:38:16,0,0.33,0,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1h65lsy
Python,Sqrt Random faster than Max double Random?,"Any thoughts on **why** the sqrt version below is faster?

Saw this video from 3blue1brown. His concept focused on the following having the same probability distributions. 

`max(rand(), rand())`

`sqrt(rand())`

What was surprising to me was that the sqrt version actually ran faster. I guess this means the HW is likely more optimized for the sqrt operation than pulling a uniform random number. 

Here's my code that tested the speed:

    import math
    import time
    #&gt;1
    import random#&lt;1
    
    def method1():
    ¬† ¬† innerList = []
    
    ¬† ¬† #‚Æû for 1000000 ‚Æú#@&gt;2
    ¬† ¬† for i in range(1000000):#&lt;2
    ¬† ¬† ¬† ¬† rand1 = random.random() #‚Æû Random ¬†‚Æú#@4
    ¬† ¬† ¬† ¬† rand2 = random.random() #‚Æû Random ‚Æú#@5
    ¬† ¬† ¬† ¬† innerList.append(max(rand1, rand2))
    
    ¬† ¬† return innerList
    
    def method2():
    ¬† ¬† innerList = []
    
    ¬† ¬† #‚Æû for 1000000 ‚Æú#@&gt;3
    ¬† ¬† for i in range(1000000):#&lt;3
    ¬† ¬† ¬† ¬† rand = random.random() #‚Æû Random ‚Æú#@6
    ¬† ¬† ¬† ¬† innerList.append(math.sqrt(rand))
    
    ¬† ¬† return innerList
    
    
    start = time.time()
    list1 = method1()
    end = time.time()
    print(end - start) # printed: 0.2354288101196289
    
    start = time.time()
    list2 = method2()
    end = time.time()
    print(end - start) # printed: 0.17833805084228516
    ",ArcticFoxMB,1h64pm0,https://reddit.com/r/Python/comments/1h64pm0/sqrt_random_faster_than_max_double_random/,https://www.reddit.com/r/Python/comments/1h64pm0/sqrt_random_faster_than_max_double_random/,2024-12-04 01:53:35,0,0.38,0,0,11,0,0,False,False,True,False,False,Discussion,self,t3_1h64pm0
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1h629va,https://reddit.com/r/Python/comments/1h629va/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1h629va/wednesday_daily_thread_beginner_questions/,2024-12-04 00:00:09,3,0.72,3,0,4,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1h629va
Python,In-memory processing using Python promises faster and more efficient computing by skipping the CPU,"https://www.techradar.com/pro/in-memory-processing-using-python-promises-faster-and-more-efficient-computing-by-skipping-the-cpu

In-memory processing hardware exists, but software is lacking
Researchers created PyPIM to enable in-memory computation
Python commands translated into memory-executable instructions",gurugabrielpradipaka,1h5ze3s,https://reddit.com/r/Python/comments/1h5ze3s/inmemory_processing_using_python_promises_faster/,https://www.reddit.com/r/Python/comments/1h5ze3s/inmemory_processing_using_python_promises_faster/,2024-12-03 21:56:40,10,0.66,10,0,3,0,0,False,False,True,False,False,News,self,t3_1h5ze3s
Python,Introducing Security Testing Skills in Our Open-Source Testing Agent,"**What My Project Does**  
Our [open source testing agent¬†](https://github.com/test-zeus-ai/testzeus-hercules/tree/main)now includes **security testing skills**, enabling it to perform security scans across 15 different benchmarks. It's designed to make advanced security testing accessible and affordable, all within a fully open-source ecosystem.

**Target Audience**  
This project is ideal for developers, QA engineers, and teams looking for a **cost-effective, production-ready solution** for software testing and security scanning without the overhead of commercial tools.

**Comparison**  
Unlike traditional security testing tools that are often expensive and closed-source, our agent is **open source**, affordable (costing less than a cup of coffee), and seamlessly integrates with your existing testing workflows. It also combines functional and security testing in one agent, making it a unique offering in the testing ecosystem.

Would love to hear your thoughts and feedback! üòä",Unhappy-Economics-43,1h5v877,https://reddit.com/r/Python/comments/1h5v877/introducing_security_testing_skills_in_our/,https://www.reddit.com/r/Python/comments/1h5v877/introducing_security_testing_skills_in_our/,2024-12-03 19:07:07,0,0.5,0,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1h5v877
Python, Fine-grained open source authorization solution (SDK for Python),"Hey, Python community! If anyone here is thinking about implementing authorization for RBAC / ABAC in your apps - feel free to check out our OSS solution: [https://github.com/cerbos/cerbos](https://github.com/cerbos/cerbos)¬†

It‚Äôs useful if you‚Äôre dealing with complex access control scenarios and fast-growing apps, where requirements are constantly changing.

  
**What My Project Does:**¬†  
Cerbos PDP is an authorization solution that lets users define context-aware access control in simple, intuitive, and testable policies.¬† Some of Cerbos PDP‚Äôs key capabilities:

* Infinitely scalable RBAC and ABAC
* Plug-and-play &amp; language-agnostic¬†
* Stateless design¬†
* Self-hosted
* Centralized audit logs of all authorization requests help compliance with ISO27001, SOC2, and HIPAA requirements  

  
**Target Audience:**  
Software developers working on building authorization for apps, AI agents, and AI companions.  
  
  
**Comparison**   
The most common alternative to externalized authorization is the ‚Äúbuild it yourself‚Äù approach, hard-coded authorization. Here is how our approach is different:

* Our off-the-shelf solution allows you to avoid the technical debt and developer cost of hard-coded authorization.
* Having the separation of the permissions from the code base just makes the code and the permissions more elegant (no spaghetti code).
* Permissions are centralized, so they're not tied to specific endpoints.¬†
* Cerbos makes fine-grained access control easy to implement and manage while saving time. It also improves security by making access control highly visible and making it easy to keep up with changing requirements.

  
And here‚Äôs our SDK &amp; installation guide for Python - [https://www.cerbos.dev/ecosystem/python](https://www.cerbos.dev/ecosystem/python)¬†",West-Chard-1474,1h5v7n7,https://reddit.com/r/Python/comments/1h5v7n7/finegrained_open_source_authorization_solution/,https://www.reddit.com/r/Python/comments/1h5v7n7/finegrained_open_source_authorization_solution/,2024-12-03 19:06:28,39,0.9,39,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1h5v7n7
Python,PyCon Austria 2025,"PyCon Austria will take place on April 6 and 7, 2025 in Eisenstadt, Austria. The Call for Papers is already open, so you can submit your proposals for talks and workshops. Although registration is recommended for visitors, attendance is free of charge. The conference will start with an opening party on April 5, 2025.

Website with details, registration, and sponsor information: [https://at.pycon.org](https://at.pycon.org)

Call for Papers: [https://www.papercall.io/pycon-austria](https://www.papercall.io/pycon-austria)",RisingFire,1h5ubiu,https://reddit.com/r/Python/comments/1h5ubiu/pycon_austria_2025/,https://www.reddit.com/r/Python/comments/1h5ubiu/pycon_austria_2025/,2024-12-03 18:29:45,28,0.91,28,0,4,0,0,False,False,True,False,False,News,self,t3_1h5ubiu
Python,Curly brackets in python!,"[https://github.com/DevBoiAgru/CurlyPy](https://github.com/DevBoiAgru/CurlyPy)

  
**What CurlyPy does:**

CurlyPy enables you to write Python code using curly braces `{}` instead of relying on indentation to define code blocks (though indentation is still a part of the syntax). It essentially allows you to combine the best of both worlds ‚Äî Python‚Äôs simplicity with the clarity and familiarity of curly braces for block delimitation.

# It works as a pre processor which translates the code with brackets into code with proper indentation, and then runs it using python. Since it works as a preprocessor, there is a great potential for exciting features in the future like ""compile time"" evaluation of functions, type checking and much more in the future.

**Target Audience:**

People who want to try out how python would be if it supported braces, or people who complain about code blocks using whitespace.

**Comparison:**

The only other preprocessor I am aware of which does this is [Bython](https://github.com/mathialo/bython), but the last commit to its repo was 6 years ago, and it does not support dictionaries and sets. 

Any suggestions on improving CurlyPy and ideas for future features are appreciated!",DevBoiAgru,1h5skiu,https://reddit.com/r/Python/comments/1h5skiu/curly_brackets_in_python/,https://www.reddit.com/r/Python/comments/1h5skiu/curly_brackets_in_python/,2024-12-03 17:17:37,0,0.38,0,0,14,0,0,False,False,True,False,False,Showcase,self,t3_1h5skiu
Python,Dink: a command line notifier,"Hi there,

I‚Äôm Pranav, a self-taught python developer. Just wanted to share a little script I made.

What my project does:
Dink is a command line notifier. It can notify you of the completion of a command, so you don‚Äôt have to keep checking the terminal.

Target audience:
All devs.

Comparison:
This, unlike maybe a few other tools, is extremely lightweight and does not require extensive setup. All you do is install it and just put the word dink before any command you want notified about and that's it.

You can find this at https://github.com/Pranav435/dink.git

This has, in the 6 months since I made it, saved me a bunch of hours, and I hope it is equally as useful to you.

Would appreciate all feedback!

Cheers.",phoenix_00916,1h5qv5d,https://reddit.com/r/Python/comments/1h5qv5d/dink_a_command_line_notifier/,https://www.reddit.com/r/Python/comments/1h5qv5d/dink_a_command_line_notifier/,2024-12-03 16:05:13,20,0.82,20,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1h5qv5d
Python,I had to touch Jython for a project I'm working on. ,"I honestly never even heard of it before this. For the project I'm doing it's necessary, and it's pretty doable. But man what is it horrible to work with. 

So have you ever worked with it and why? I honestly can't figure out another use case than Ghidra scripting. Pretty interested to see what somebody does with it. 


EDIT: JYTHON SAVING THE FING DAY! WHO WOULD HAVE THOUGHT. FCK what a rollercoaster. Cursing is probably not allowed on this sub BUT I DON'T FUCKING CARE ANYMORE! I FOUND THE FUCKING MEGA SEEDS!",TastyDepartureFrom,1h5igmd,https://reddit.com/r/Python/comments/1h5igmd/i_had_to_touch_jython_for_a_project_im_working_on/,https://www.reddit.com/r/Python/comments/1h5igmd/i_had_to_touch_jython_for_a_project_im_working_on/,2024-12-03 07:57:20,36,0.87,36,0,22,0,0,False,False,True,False,False,Discussion,self,t3_1h5igmd
Python,What's the cheapest way to host a python script?,"Hello, I have a Python script that I need to run every minute. I came across PythonAnywhere, which costs about $5 per month for the first Tier Account. 

Are there any cheaper alternatives to keep my script running? Would it be more cost-effective to run the script continuously by leaving my computer on? I‚Äôm new to this, so any advice or suggestions would be greatly appreciated. Thank you!",Fickle-Sock720,1h5hikf,https://reddit.com/r/Python/comments/1h5hikf/whats_the_cheapest_way_to_host_a_python_script/,https://www.reddit.com/r/Python/comments/1h5hikf/whats_the_cheapest_way_to_host_a_python_script/,2024-12-03 06:49:11,195,0.93,195,0,143,0,0,False,False,True,False,False,Discussion,self,t3_1h5hikf
Python,"How I Automated My Tech Job Applications Using Python, Apify, and AI","Hi everyone!  

I‚Äôve found job hunting to be one of the most time-consuming and repetitive tasks. Manually searching for job listings, crafting cover letters, and sending applications felt like an endless loop of frustration. So, I decided to build a solution!

### What My Project Does:
I developed a Python script that automates the entire job application process. Here's how it works:
- **Scrapes job listings** using Apify‚Äôs Seek Job Scraper.
- **Uses Meta AI** to generate personalized cover letters and email content.
- **Sends tailored applications** with resumes attached via SMTP.
- **Logs every application** to avoid duplicates.

### Target Audience:
This tool is designed for anyone who wants to streamline their job search process. Whether you're a career changer, or an experienced developer looking to save time, this script will help you automate the most repetitive parts of applying to jobs.

### Comparison:
While there are some job application automation tools available, most are either too complex or not customizable enough. My script stands out because it offers:
- **Smart filtering** for roles in specific regions, salary ranges, and work types.
- **AI-powered** personalized cover letter generation using Meta AI.
- **A simple, customizable workflow** with easy integration to your job boards and email system.

Would love to hear your thoughts or any tips you have for automating job searches!

**Repo:** [https://github.com/Jacob1802/seek-automation](https://github.com/Jacob1802/seek-automation)
",Puzzleheaded-Host951,1h5cajf,https://reddit.com/r/Python/comments/1h5cajf/how_i_automated_my_tech_job_applications_using/,https://www.reddit.com/r/Python/comments/1h5cajf/how_i_automated_my_tech_job_applications_using/,2024-12-03 01:55:13,0,0.44,0,0,11,0,0,False,False,True,False,False,Showcase,self,t3_1h5cajf
Python,Building native Python desktop application with Pyloid and Gradio,"Let's build a desktop chat application that streams responses from an LLM. We'll use three key libraries that work beautifully together:

- **[Pyloid](https://github.com/pyloid/pyloid)**: Creates native desktop applications -- like Electron but with Python
- **[Gradio](https://gradio.app)**: Builds the chat interface
- **[Promptic](https://github.com/knowsuchagency/promptic)**: Handles LLM interactions

Source Code: https://github.com/knowsuchagency/pyloid-chat-demo

## Prerequisites

Before running the application, you'll need:
- An OpenAI API key ([get one here](https://platform.openai.com/api-keys))
- [uv](https://github.com/astral-sh/uv) for Python package management
- [just](https://github.com/casey/just) command runner

## The Chat Interface

First, let's create the chat interface. This is where Gradio and Promptic work together:

```python
import gradio as gr
from promptic import llm

@llm(memory=True, stream=True)
def assistant(message):
    """"""{message}""""""

def predict(message, history):
    partial_message = """"
    for chunk in assistant(message):
        partial_message += str(chunk)
        yield partial_message

with gr.ChatInterface(
    fn=predict,
    title=""Chat Demo"",
) as chat_interface:
    chat_interface.chatbot.clear(assistant.clear)
```

The code above:
- Uses Promptic's `@llm` decorator to handle LLM interactions
- Implements streaming responses using a generator
- Creates a chat interface with Gradio
- By passing `memory=True`, Promptic will manage conversation history

## Making It a Desktop App

Now, let's wrap our chat interface in a native window using Pyloid:

```python
from pyloid import Pyloid
import threading
import time
import socket
from contextlib import contextmanager

HOST = ""127.0.0.1""
PORT = 7861

def run_demo():
    chat_interface.launch(
        server_name=HOST,
        server_port=PORT,
        share=False,
        show_api=False,
    )

# Run Gradio in a separate thread
demo_thread = threading.Thread(target=run_demo, daemon=True)
demo_thread.start()

app = Pyloid(app_name=""Chat-App"", single_instance=True)
win = app.create_window(""chat-window"")

@contextmanager
def wait_for_server(host=HOST, port=PORT, timeout=30):
    start_time = time.time()
    while True:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                if sock.connect_ex((host, port)) == 0:
                    break
        except:
            pass

        if time.time() - start_time &gt; timeout:
            raise TimeoutError(f""Server at {host}:{port} did not start within {timeout} seconds"")
        time.sleep(0.5)
    yield

with wait_for_server():
    win.load_url(f""http://{HOST}:{PORT}"")
    win.show_and_focus()

app.run()
```

This code:
- Runs the Gradio interface in a background thread
- Creates a native window that loads the interface
- Ensures the server is ready before loading the UI

## Running the Application

This project includes a [`justfile`](https://just.systems/man/en/) with commands for building and running the application. It also uses [`uv`](https://github.com/astral-sh/uv) for package management.

```bash
# clone the repo
git clone https://github.com/knowsuchagency/pyloid-chat-demo
cd pyloid-chat-demo

# this builds the application and opens it
# it will create a virtual environment and
# install the dependencies automatically
just build open
```

That's it! With just these few lines of code, you have a desktop chat application with streaming responses. The magic comes from combining these libraries:

- Promptic handles the LLM interaction and streaming
- Gradio provides the chat interface
- Pyloid wraps everything in a native window

You can now extend this foundation by adding features like API key configuration, custom themes, or system prompts.
",knowsuchagency,1h5a26x,https://reddit.com/r/Python/comments/1h5a26x/building_native_python_desktop_application_with/,https://www.reddit.com/r/Python/comments/1h5a26x/building_native_python_desktop_application_with/,2024-12-03 00:08:37,13,0.69,13,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1h5a26x
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1h59v6z,https://reddit.com/r/Python/comments/1h59v6z/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1h59v6z/tuesday_daily_thread_advanced_questions/,2024-12-03 00:00:09,7,1.0,7,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1h59v6z
Python,Feedback for project creating conversational agents using a Finite State Machine (FSM) and LLMs,"Hi r/Python community!

I've been working on a project combining Finite State Machines and Large Language Models.  
  
What My Project Does  
This project provides a framework for building conversational agents using a Finite State Machine (FSM) powered by LLMs like OpenAI GPT. It aims to create structured tools like step-by-step teaching systems, customer support bots, and multi-step memory games while addressing issues like hallucinations, loss of context, and unpredictability. I have a few example usages in the repo.

Target Audience  
This is currently an experimental setup, and also part of a research project I am doing for university. For now it is meant for developers and experimenters mainly. Requires an OpenAI API key (currently tested on gpt-4o-mini).

Comparison  
Unlike typical LLM-based chatbots, this combines FSM with LLMs to enforce structured, predictable conversations, making it ideal for use cases requiring adherence to predefined paths.

If anyone is interested I would love to hear your feedback and thoughts! The repo is here: [https://github.com/jsz-05/LLM-State-Machine](https://github.com/jsz-05/LLM-State-Machine)

Cheers!",JeffZ117,1h594wc,https://reddit.com/r/Python/comments/1h594wc/feedback_for_project_creating_conversational/,https://www.reddit.com/r/Python/comments/1h594wc/feedback_for_project_creating_conversational/,2024-12-02 23:27:04,15,0.87,15,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1h594wc
Python,PerpetualBooster outperforms AutoGluon on AutoML benchmark,"* **What My Project Does**
   * PerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't need hyperparameter optimization unlike other GBM algorithms. Similar to AutoML libraries, it has a¬†`budget`¬†parameter. Increasing the¬†`budget`¬†parameter increases the predictive power of the algorithm and gives better results on unseen data.
* **Target Audience**¬†(e.g., Is it meant for production, just a toy project, etc.)
   * It is meant for production. 
* **Comparison**¬†(A brief comparison explaining how it differs from existing alternatives.)


PerpetualBooster is a GBM but behaves like AutoML so it is benchmarked also against AutoGluon (v1.2, best quality preset), the current leader in [AutoML benchmark](https://automlbenchmark.streamlit.app/cd_diagram). Top 10 datasets with the most number of rows are selected from [OpenML datasets](https://www.openml.org/). The results are summarized in the following table for regression tasks:

| OpenML Task                                  | Perpetual Training Duration | Perpetual Inference Duration                                      | Perpetual RMSE | AutoGluon Training Duration | AutoGluon Inference Duration                                      | AutoGluon RMSE |
| -------------------------------------------- | --------------------------- | ----------------------------------------------------------------- | -------------- | --------------------------- | ----------------------------------------------------------------- | -------------- |
| [Airlines_DepDelay_10M](openml.org/t/359929) | 518                         | 11.3                                                              | 29.0           | 520                         | 30.9 | 28.8   |
| [bates_regr_100](openml.org/t/361940)        | 3421                        | 15.1 | 1.084  | OOM            | OOM                         | OOM                                                               |
| [BNG(libras_move)](openml.org/t/7327)        | 1956                        | 4.2 | 2.51   | 1922           | 97.6                        | 2.53                                                              |
| [BNG(satellite_image)](openml.org/t/7326)    | 334                         | 1.6                                                               | 0.731          | 337                         | 10.0 | 0.721  |
| [COMET_MC](openml.org/t/14949)               | 44                          | 1.0 | 0.0615  | 47             | 5.0                         | 0.0662                                                            |
| [friedman1](openml.org/t/361939)             | 275                         | 4.2 | 1.047   | 278            | 5.1                         | 1.487                                                             |
| [poker](openml.org/t/10102)                  | 38                          | 0.6 | 0.256   | 41             | 1.2                         | 0.722                                                             |
| [subset_higgs](openml.org/t/361955)          | 868                         | 10.6 | 0.420  | 870            | 24.5                        | 0.421                                                             |
| [BNG(autoHorse)](openml.org/t/7319)          | 107                         | 1.1 | 19.0    | 107            | 3.2                         | 20.5                                                              |
| [BNG(pbc)](openml.org/t/7318)                | 48                          | 0.6 | 836.5   | 51             | 0.2                         | 957.1                                                             |
| average                                      | 465                         | 3.9                                                               | -              | 464                         | 19.7                                                              | -              |

PerpetualBooster outperformed AutoGluon on 8 out of 10 datasets, training equally fast and inferring 5x faster. The results can be reproduced using the automlbenchmark fork [here](https://github.com/deadsoul44/automlbenchmark).

Github: https://github.com/perpetual-ml/perpetual",mutlu_simsek,1h532c8,https://reddit.com/r/Python/comments/1h532c8/perpetualbooster_outperforms_autogluon_on_automl/,https://www.reddit.com/r/Python/comments/1h532c8/perpetualbooster_outperforms_autogluon_on_automl/,2024-12-02 19:15:32,8,0.64,8,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1h532c8
Python,"Iris Templates: A Modern Python Templating Engine Inspired by Laravel Blade
","**What My Project Does**

As a Python developer, I‚Äôve always admired the elegance and power of Laravel‚Äôs¬†**Blade templating engine**. Its intuitive syntax, flexible directives, and reusable components make crafting dynamic web pages seamless. Yet, when working on Python projects, I found myself longing for a templating system that offered the same simplicity and versatility. Existing solutions often felt clunky, overly complex, or just didn‚Äôt fit the bill for creating dynamic, reusable HTML structures.

That‚Äôs when¬†**Iris Templates**¬†was born‚Äîa lightweight, modern Python template engine inspired by¬†**Laravel Blade**, tailored for Python developers who want speed, flexibility, and an intuitive way to build dynamic HTML.

# üßê Why I Developed Iris Templates (Comparison)

When developing Python web applications, I noticed a gap in templating solutions:

* **Jinja2**¬†is great but can feel verbose for straightforward tasks.
* **Django templates**¬†are tied closely to the Django framework.
* Many templating engines lack the modularity and extendability I needed for larger projects.

Iris Templates was created to bridge this gap. It's:

* **Framework-agnostic**: Use it with FastAPI, Flask, or even standalone scripts.
* **Developer-friendly**: Intuitive syntax inspired by Blade for faster development.
* **Lightweight but Powerful**: Built for efficiency without sacrificing flexibility.

# üåü Key Features of Iris Templates

1. **""extends""**¬†and¬†**""section""**¬†for Layout Inheritance; Create a base layout and extend it effortlessly.
2. **""include""**¬†for Reusability.
3. Customizable Directives. (if, else, endif, switch..)
4. Safe Context Evaluation; Iris Templates includes a built-in safe evaluation mechanism to prevent malicious code execution in templates.
5. Framework-Independent; Whether you‚Äôre using FastAPI, Flask, or a custom Python framework, Iris fits in seamlessly.

# ü§î What Makes Iris Templates Different?

Unlike other Python templating engines:

* **Inspired by Blade**: Iris takes the best ideas from Blade and adapts them to Python.
* **No Boilerplate**: Write clean, readable templates without extra overhead.
* **Focus on Modularity**: Emphasizes layout inheritance, reusable components, and maintainable structures.

It‚Äôs designed to feel natural and intuitive, reducing the cognitive load of managing templates.

# üîó Resources

* **GitHub Repository**:¬†[https://github.com/altxriainc/iris](https://github.com/altxriainc/iris)
* **Install via pip**:¬†`pip install iris-templates`

**Target Audience**

Iris Templates is my way of bringing the elegance of Blade into Python. I hope it makes your projects easier and more enjoyable to develop.

Any advice and suggestions are welcome. There are also examples and unittests in the¬†[repository](https://github.com/altxriainc/iris)¬†to help you get started!",ImNotEdd,1h4zfnr,https://reddit.com/r/Python/comments/1h4zfnr/iris_templates_a_modern_python_templating_engine/,https://www.reddit.com/r/Python/comments/1h4zfnr/iris_templates_a_modern_python_templating_engine/,2024-12-02 16:49:03,16,0.77,16,0,30,0,0,False,False,True,False,False,Showcase,self,t3_1h4zfnr
Python,Trying PyInstaller¬†and PyWebView¬†with Django,"I recently started experimenting with¬†**PyInstaller**¬†and¬†**PyWebView**¬†in conjunction with¬†**Django**, and I must say, the experience has been incredibly rewarding! i build a django application and after that i use this two libraries together to create a native windows app. ",Legitimate-Tourist70,1h4wyqk,https://reddit.com/r/Python/comments/1h4wyqk/trying_pyinstaller_and_pywebview_with_django/,https://www.reddit.com/r/Python/comments/1h4wyqk/trying_pyinstaller_and_pywebview_with_django/,2024-12-02 15:04:24,5,0.67,5,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1h4wyqk
Python,"Goodbye Make and Shell, Hello... Python?","I wrote an post documenting a [transition from typical build project tooling using Make and bash scripts, to a Python system](https://trstringer.com/python-build-tooling/). Lots of lessons learned, but it was a very enlightening exercise!",chillysurfer,1h4wvzy,https://reddit.com/r/Python/comments/1h4wvzy/goodbye_make_and_shell_hello_python/,https://www.reddit.com/r/Python/comments/1h4wvzy/goodbye_make_and_shell_hello_python/,2024-12-02 15:01:18,22,0.73,22,0,33,0,0,False,False,True,False,False,News,self,t3_1h4wvzy
Python,Optimization-Based Rule Learning for Scalable and Interpretable Classification,"RuleOpt is a Python library that uses optimization-based rule learning for classification tasks, focusing on scalability and model interpretability. It helps practitioners generate transparent, rule-based models, even for large datasets, using linear programming. RuleOpt is designed to integrate smoothly with machine learning pipelines and is especially powerful for extracting rules from ensemble models like random forests and boosting algorithms.

An earlier version of this work is available in [our manuscript](https://arxiv.org/abs/2104.10751).


**What RuleOpt Does:**

- **Efficient Rule Generation and Extraction:** Uses linear programming to generate rules both as a stand-alone machine learning method and for extracting rules from trained models like random forests and boosting algorithms (XGBoost, LightGBM).
- **Interpretability:** Focuses on achieving a balance between rule accuracy and transparency, allowing for clear decision-making.
- **Model Integration:** Seamlessly integrates with popular Python libraries such as scikit-learn, XGBoost, and LightGBM for smooth model development and rule extraction.
- **Extensive Solver Support:** Works with a range of solvers, including Gurobi, CPLEX, and OR-Tools, to optimize rule learning tasks.

**Target Audience:**
This library is ideal for:

- Data scientists and machine learning engineers who need transparent models.
- Researchers who are exploring rule-based classification systems.
- ML practitioners working with large datasets who seek interpretable, scalable models for decision-making.

**Comparison to Existing Alternatives:**
Here‚Äôs how RuleOpt stands out:

- **Versus Other Rule Learning Methods:** RuleOpt leverages the power of optimization and linear programming for scalable rule generation, offering higher efficiency for large-scale datasets compared to traditional rule induction methods.
- **Versus SHAP and LIME:** While SHAP and LIME focus on explaining model predictions, RuleOpt goes a step further by extracting clear, interpretable rules that can be used directly for decision-making and model transparency.

**Key Features:**

- **Scalable Rule Learning:** Efficiently handles large datasets and complex models through linear programming.
- **Transparent Models:** Provides human-readable rules, ensuring high interpretability.
- **Integration with ML Libraries:** Works smoothly with scikit-learn, XGBoost, LightGBM, and other machine learning frameworks.
- **Solver Flexibility:** Supports multiple solvers (Gurobi, CPLEX, OR-Tools) for enhanced performance.

**Algorithm &amp; Performance:**
The RuleOpt algorithm focuses on formulating rule extraction as an optimization problem using linear programming. It has been tested on large-scale classification problems and demonstrated scalability and interpretability, even in the case of ensemble models.


**Quick Start:**
Install RuleOpt via pip:

```bash
pip install ruleopt
```

For examples, detailed usage, and API details, check out the [documentation](https://ruleopt.readthedocs.io/).

**GitHub Repository:**  
[RuleOpt GitHub](https://github.com/sametcopur/ruleopt)

We encourage feedback and contributions! While RuleOpt is a powerful tool, we are continuously working to refine its algorithm and improve usability.",zedeleyici3401,1h4tvzd,https://reddit.com/r/Python/comments/1h4tvzd/optimizationbased_rule_learning_for_scalable_and/,https://www.reddit.com/r/Python/comments/1h4tvzd/optimizationbased_rule_learning_for_scalable_and/,2024-12-02 12:30:55,8,0.8,8,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1h4tvzd
Python,ComputeLite - A true serverless tool,"What My Project Does:

ComputeLite is a true serverless tool that leverages the power of WebAssembly (WASM) and SQLite OPFS to ensure that all data and code remain securely in the browser, with no server dependencies or external storage. Right now it supports Python (powered by Pyodide) and SQL( powered by SQLITE)

So you can write all your python code and use Pyodide supported or pure python packages right away in browser without any need to install anything.

Target Audience:

Students, Developers, Could be used for scripting

Comparison:

It can be compared with PyScript but user can create different models which could include scripts with relative imports and packages listed in requirements.txt file

Link: https://computelite.com/

GitHub: https://github.com/computelite/computelite

",airen977,1h4spi7,https://reddit.com/r/Python/comments/1h4spi7/computelite_a_true_serverless_tool/,https://www.reddit.com/r/Python/comments/1h4spi7/computelite_a_true_serverless_tool/,2024-12-02 11:17:20,23,0.8,23,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1h4spi7
Python,Best PDF library for extracting text from structured templates,"Hello All, 

I am currently working on a project where I have to extract data from around 8 different structured templates which together spans 12 Million + pages across 10K PDF Documents. 

I am using a mix of Regular Expression and bounding box approach where by 4 of these templates are regular expression friendly and for the rest I am using bounding box to extract the data. On testing the extraction works very well. There are no images or tables, but simple labels and values.

The library that I am currently using is PDF Plumber for data extraction and PyPDF for splitting the documents in small chunks for better memory utilization(PDF Plumber sometimes throws an error when the page count goes above 4000 pages, hence splitting them into smaller chunks temporarily). However this approach is taking 5 seconds per page which is a bit too much considering that I have to process 12M pages. 

I did take a look at the different other libraries mentioned in the below link but I am not sure which one to choose as I would love to work with an open source library that is having a good maintenance history and better performance .   
[https://github.com/py-pdf/benchmarks?tab=readme-ov-file](https://github.com/py-pdf/benchmarks?tab=readme-ov-file)

Request your suggestions . Thanks in advance !",WarmAd3569,1h4pqqh,https://reddit.com/r/Python/comments/1h4pqqh/best_pdf_library_for_extracting_text_from/,https://www.reddit.com/r/Python/comments/1h4pqqh/best_pdf_library_for_extracting_text_from/,2024-12-02 07:36:35,42,0.89,42,0,34,0,0,False,False,True,False,False,Discussion,self,t3_1h4pqqh
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1h4hhn4,https://reddit.com/r/Python/comments/1h4hhn4/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1h4hhn4/monday_daily_thread_project_ideas/,2024-12-02 00:00:08,5,0.86,5,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1h4hhn4
Python,"kanban-tui , customizable cross platform kanban/task manager in your terminal","* **What My Project Does**

Kanban-Tui is a CLI tool that gives you a visual board with moveable tasks in the terminal.

With the newest release v0.4.0, you can create multiple boards with individual columns.
More Customization like creating task categories for tasks or change the column visibility is also possible.
It also utilizes plotext to give you an overview about several metrics (created/completed/started tasks). 


For a quick demo you can use uvx to create a temporary database and config files with: `uvx --from kanban-tui ktui demo`
They get deleted after you close the application. For detailed instructions and features you can check the Readme on github.

Source Code on github: [Link](https://github.com/Zaloog/kanban-tui)


* **Target Audience**¬†

Terminal affine developers who do not want to miss a nice graphical experience.

* **Comparison**¬†

Its similar to kanban-python, which I created before before this project but less minimal and the interaction with the tasks is faster more convenient.
I.e with the TUI one is able to utilize vim-like motions to move cards around, which comes closer to the feeling of actually moving physical cards. 



If you find bugs or are missing a feature, please dont hesitate to open an [issue](https://github.com/Zaloog/kanban-tui/issues).",Zaloog1337,1h4aagg,https://reddit.com/r/Python/comments/1h4aagg/kanbantui_customizable_cross_platform_kanbantask/,https://www.reddit.com/r/Python/comments/1h4aagg/kanbantui_customizable_cross_platform_kanbantask/,2024-12-01 18:48:34,7,0.78,7,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1h4aagg
Python,I made a Python Script that Shows up current playing song lyrics synced as discord activity.,"demo : [https://imgur.com/a/guIH7fM](https://imgur.com/a/guIH7fM)

hey , its my first time posting here.

i got this idea few days ago , i wanted to show the lyrics as status in my discord. so i made it happen!

# What My Project Does:

it tracks your current playing song using spotify api and fetch the lyrics and apply it to rpc.

its really easy to use i hope u enjoy it!

# Target Audience:

anyone who uses discord and wants a nice RPC.

# Comparison:

i couldn't find anything like this in my search so i dont know if there is something similar.

let me know if there is something i can do to make it better!

[https://github.com/iiDriisTN/lyrics-rpc](https://github.com/iiDriisTN/lyrics-rpc)",iiDris_TN,1h48722,https://reddit.com/r/Python/comments/1h48722/i_made_a_python_script_that_shows_up_current/,https://www.reddit.com/r/Python/comments/1h48722/i_made_a_python_script_that_shows_up_current/,2024-12-01 17:19:52,16,0.87,16,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1h48722
Python,Advent of Code 2024!,"# Join the Advent of Code Challenge with Python!

Hey Pythonistas! üêç

It's almost that exciting time of the year again! The [Advent of Code](https://adventofcode.com/2024) is just around the corner, and we're inviting everyone to join in the fun!

## What is Advent of Code?

Advent of Code is an annual online event that runs from December 1st to December 25th. Each day, a new coding challenge is released‚Äîtwo puzzles that are part of a continuing story. It's a fantastic way to improve your coding skills and get into the holiday spirit!

You can read more about it [here](https://adventofcode.com/2024/about).

## Why Python?

Python is a great choice for these challenges due to its readability and wide range of libraries. Whether you're a beginner or an experienced coder, Python makes solving these puzzles both fun and educational.

## How to Participate?

1. [**Sign Up/In**](https://adventofcode.com/2024/auth/login)**.**
2. Join the r/Python private leaderboard with code `2186960-67024e32`
3. Start solving the puzzles released each day using ***Python.***
4. **Share your solutions and discuss strategies with the community.**

## Join the r/Python Leaderboard!

We can have up to 200 people in a private leaderboard, so this may go over poorly - but you can join us with the following code: `2186960-67024e32`

## How to Share Your Solutions?

You can join the [Python Discord](https://discord.gg/python) to discuss the challenges, share your solutions, or you can post in the r/AdventOfCode mega-thread for solutions.

There will be a stickied post for each day's challenge. Please follow their subreddit-specific rules. Also, shroud your solutions in spoiler tags &gt;!like this!&lt;

## Resources

## Community

* [Python official Documentation](https://docs.python.org) for Python documentation.
* [r/LearnPython](https://www.reddit.com/r/learnpython/) for Python learning resources and discussions.
* [Python Discord](https://discord.gg/python) for Python discussions and help.

## AoC

* [2024 Leaderboard](https://adventofcode.com/2024/leaderboard)
* [AoC++](https://adventofcode.com/2024/support) to support the project
* [AoC Subreddit](https://www.reddit.com/r/adventofcode/) for general discussions
* [AoC Shop](https://advent-of-code.creator-spring.com/) for merch

## Python Discord

The [Python Discord](https://discord.gg/python) will also be participating in this year's Advent of Code. Join it to discuss the challenges, share your solutions, and meet other *Pythonistas*. You will also find they've set up a Discord bot for joining in the fun by linking your AoC account.Check out their [Advent of Code FAQ channel](https://discord.com/channels/267624335836053506/1047672643584786442).

Let's code, share, and celebrate this festive season with Python and the global coding community! üåü

Happy coding! üéÑ

P.S. - Any issues in this thread? Send us a modmail.",xelf,1h47nhs,https://reddit.com/r/Python/comments/1h47nhs/advent_of_code_2024/,https://www.reddit.com/r/Python/comments/1h47nhs/advent_of_code_2024/,2024-12-01 16:56:30,87,0.97,87,0,3,0,0,False,False,True,False,False,:pythonLogo: Official Event,self,t3_1h47nhs
Python,Advanced Python Development Workflow in Emacs,"Hey everyone!

Lately, I‚Äôve been spending more time reading code than writing it, but I still code every now and then, mostly in Python. My daily editor ‚Äî for both coding and just about everything else ‚Äî has been Emacs for several years now.

Recently, I decided to dig into how the Language Server Protocol (LSP) and Debug Adapter Protocol (DAP) work in Emacs, how they can be integrated, and what minimal configuration is needed to get started. As I explored, I took notes for myself, and eventually, those notes turned into a blog post.

It ended up being quite a long read, but I‚Äôm really happy with the result. The more I researched and wrote, the further I drifted from my original goal of creating a quick and minimal Emacs setup guide. I rewrote the introduction a few times before landing on something I felt good about, and now I‚Äôm ready to share it with you.

The article isn‚Äôt perfect ‚Äî there are still some rough edges and gaps I plan to address soon. For example:

* I haven‚Äôt covered tree-sitter integration.
* Navigation between code elements feels a bit underexplored.
* Some parts are more superficial than I‚Äôd like.

But it‚Äôs in a good enough state to share. If you‚Äôre curious and have the patience to read through, I‚Äôd love some constructive feedback. Let me know if there‚Äôs anything missing that you‚Äôd find helpful or if you catch any mistakes I might‚Äôve made.

Here‚Äôs the link to the article: [https://blog.serghei.pl/posts/emacs-python-ide/](https://blog.serghei.pl/posts/emacs-python-ide/)

Thanks in advance for your time and thoughts!",i_serghei,1h45hl7,https://reddit.com/r/Python/comments/1h45hl7/advanced_python_development_workflow_in_emacs/,https://www.reddit.com/r/Python/comments/1h45hl7/advanced_python_development_workflow_in_emacs/,2024-12-01 15:19:10,11,0.79,11,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1h45hl7
Python,Project collaboration ,"Hi everyone, I have been creating and working on a few python projects for fun  i have one I'm working on and would love some people to join in and collaborate to make the project better. Many hands make light work and different inputs and ideas can make a project that much better.
The GUI is built with ttkbootstrap pretty much a themed fork of tkinter.
Would love to see some pull requests in the future and I'm excited to see where this project can go 
I have created build scripts that basically fit for my environment as they generate RPM packages for installing on Fedora. I do have code in build scripts generate standalone binary files also if needed.

Thanks, find the repo here: https://github.com/BradHeff/Arxis-Pentester",bradheff,1h44g99,https://reddit.com/r/Python/comments/1h44g99/project_collaboration/,https://www.reddit.com/r/Python/comments/1h44g99/project_collaboration/,2024-12-01 14:29:38,0,0.5,0,0,0,0,0,False,False,True,False,False,Discussion,self,t3_1h44g99
Python,Kitten Mixer: A Fun Tool to Combine Cat Images with AI,"Hello Python community,

My name is Dylan, and I‚Äôm a data scientist. I recently developed a fun little project called¬†[Kitten Mixer](https://mezclador-gatitos.streamlit.app/), and I‚Äôd love to share it with you and hear your feedback!

# What My Project Does

Kitten Mixer is a Python-based web app that uses Variational Autoencoders (VAEs) to generate smooth image interpolations of cats. By combining the power of AI with some adorable cat pictures, the app creates unique and visually fascinating blends between different cat images.

# Key Features

* **Image Interpolations:**¬†Combine two cat images and explore their latent-space interpolations.
* **Latent Space Exploration:**¬†Visualize how the neural network represents cat images in a 2D latent space.
* **Interactive Web App:**¬†The app is built with Streamlit for an intuitive and easy-to-use interface.

# Target Audience

* **Who It‚Äôs For:**¬†Python enthusiasts, AI hobbyists, and cat lovers looking for an entertaining and educational use of machine learning.
* **Intended Use:**¬†Great for learning about Variational Autoencoders, showcasing AI-generated content, or just having fun creating unique cat images.

# How It Works

1. The project uses a Variational Autoencoder (VAE) implemented in PyTorch to encode and decode cat images.
2. By interpolating in the latent space of the VAE, the app generates smooth transitions between any two selected cat images.
3. The app runs interactively on Streamlit, allowing users to upload images, select parameters, and visualize results in real time.

*Important Note:*¬†Don‚Äôt forget to press the ""English"" button on the¬†Kitten Mixer web app¬†and the¬†GitHub repository README¬†to view the content in English!

# Links

* **GitHub:**¬†[Kitten¬†Mixer¬†Repository](https://github.com/dylannalex/mezclador_de_gatitos)
* **Web App:**¬†[Kitten¬†Mixer](https://mezclador-gatitos.streamlit.app/)

I‚Äôd love to get your thoughts on this project! If you find it interesting or fun, feel free to star the repository on GitHub. I‚Äôm also open to suggestions or contributions if anyone wants to collaborate.

Thank you for your time, and I hope you enjoy experimenting with Kitten Mixer!",dylannalex01,1h43i92,https://reddit.com/r/Python/comments/1h43i92/kitten_mixer_a_fun_tool_to_combine_cat_images/,https://www.reddit.com/r/Python/comments/1h43i92/kitten_mixer_a_fun_tool_to_combine_cat_images/,2024-12-01 13:40:49,4,0.64,4,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1h43i92
Python,"Enhance Your Python Logging with Pretty Pie Log: Colorized, Structured, and Thread-Safe!","# What My Project Does:

Pretty Pie Log is a feature-rich Python logging utility designed to improve the readability and usability of logs. It provides customizable colorized output for easy distinction of log levels, supports structured logging with JSON, and offers thread-safe logging for multi-threaded applications. It can be customized with different colors, timezone support, and file logging. It even tracks function execution and provides detailed stack traces for exceptions.

# Target Audience:

This package is intended for developers working on small‚Äîto medium-sized Python applications and those with multi-threaded components. It's ideal for debugging and tracking program behaviour in an organized and visually appealing way. Pretty Pie Log is lightweight enough for scripts but offers features robust enough for small applications or internal tools.

# Comparison:

There are several Python logging libraries available, such as `logging`. However, Pretty Pie Log stands out because of its:

* **Colorized Output**: Making logs more readable at a glance.
* **Function Execution Tracking**: Using decorators to log function entry, exit, and results automatically.
* **Enhanced Data Handling**: It handles complex data types, including non-serializable objects, with automatic serialization to strings.

Other logging libraries might lack one or more of these features, making Pretty Pie Log an ideal choice for developers looking for a lightweight but feature-packed solution.

# Why You Should Try It:

* **Customizable Formatting**: Adjust colors, log level widths, and padding to suit your preferences.
* **Enhanced Log Details**: Handles non-serializable objects, ensuring all your log details are readable.
* **File Logging**: Automatically rotates log files when they exceed size limits, keeping your disk space clean.
* **Timezone Support**: Configure timestamps to match your local timezone.
* **Stack Trace Integration**: Automatically includes full stack traces for exceptions.
* **Function Execution Tracking**: Logs function entry, arguments, exit, and return values with a simple decorator.

Check out the full documentation and code on GitHub:  
[pretty-pie-log GitHub Repository](https://github.com/chanpreet3000/pretty-pie-log)",chanpreet3000,1h42kmi,https://reddit.com/r/Python/comments/1h42kmi/enhance_your_python_logging_with_pretty_pie_log/,https://www.reddit.com/r/Python/comments/1h42kmi/enhance_your_python_logging_with_pretty_pie_log/,2024-12-01 12:48:50,58,0.82,58,0,25,0,0,False,False,True,False,False,Showcase,self,t3_1h42kmi
Python,"CntxtPY: Smarter Python Context Management for LLMs (Open Source, MIT)","No more burning through your LLM context window tokens trying to make it understand your codebase.

* **What My Project Does**: Generates knowledge graphs to compress Python codebases, reducing token usage by up to 75% for better LLM performance.
* **Target Audience**: Developers and teams integrating LLMs into workflows; ready for production and experimental use.
* **Comparison**: Unlike generic tools, CntxtPY optimizes LLM context windows with tailored graphs, modern framework support, and dependency analysis.

‚≠ê Try it out and leave a star: [CntxtPY on GitHub](https://github.com/brandondocusen/CntxtPY)  
Why try¬†**CntxtPY**?

* üß†¬†**75% Token Reductio**n: Compresses your code context without losing critical details.
* üîç¬†**Deep Codebase Analysi**s: Maps relationships, hierarchies, imports, and workflows.
* üìä¬†**Knowledge Graph**s: Generates structured JSON and visual graphs of your codebase.
* üöÄ¬†**Optimized for LLM**s: Provides LLMs with focused, actionable insights for better recommendations.
* üéØ¬†**Wide Compatibilit**y: Supports modern Python frameworks, decorators, and type hints.",jxjq,1h3x04k,https://reddit.com/r/Python/comments/1h3x04k/cntxtpy_smarter_python_context_management_for/,https://www.reddit.com/r/Python/comments/1h3x04k/cntxtpy_smarter_python_context_management_for/,2024-12-01 06:19:04,5,0.61,5,0,12,0,0,False,False,True,False,False,Showcase,self,t3_1h3x04k
Python,Multi-Threading in Python and Free threaded Python 3.13,"Here is my article  [Multi-Threading in Python and Free threaded Python 3.13](https://nolowiz.com/multi-threading-in-python-and-free-threaded-python-3-13/) which discuss  multi threading in Python and some experiments on free threaded Python 3.13. 

# ",simpleuserhere,1h3wd80,https://reddit.com/r/Python/comments/1h3wd80/multithreading_in_python_and_free_threaded_python/,https://www.reddit.com/r/Python/comments/1h3wd80/multithreading_in_python_and_free_threaded_python/,2024-12-01 05:39:36,0,0.47,0,0,10,0,0,False,False,True,False,False,Tutorial,self,t3_1h3wd80
Python,Python backend interview experience - Fresher ,"https://youtu.be/w3feD6wsDp4?si=hLvDvh4OvSQKf60I

Hello all, I am a final year student who got multiple offers and I have decided to post my interview experiences on youtube. I have also recently attended amazon interview(which I ll be posting soon). I have shared my first interview experience video in the above youtube video. This interview was for Python backend developer role. You can check it out and let me know if I have to change anything from my upcoming videos",Sure_Cry3926,1h3uqhr,https://reddit.com/r/Python/comments/1h3uqhr/python_backend_interview_experience_fresher/,https://www.reddit.com/r/Python/comments/1h3uqhr/python_backend_interview_experience_fresher/,2024-12-01 04:04:52,0,0.47,0,0,0,0,0,False,False,True,False,False,Discussion,self,t3_1h3uqhr
Python,Protocols vs Abstract Base Classes in Python,"Hi everyone. Last time I shared a post about [Interface programming using abs in Python](https://www.reddit.com/r/Python/comments/1h0rkmn/interface_programming_using_abs_in_python/), and it got a lot of positive feedback‚Äîthank you! 

Several people mentioned protocols, so I wrote a new article exploring that topic. In it, I compare protocols with abstract base classes and share my thoughts and experiences with both. You can check it out here: [https://www.tk1s.com/python/protocols-vs-abstract-base-classes-in-python](https://www.tk1s.com/python/protocols-vs-abstract-base-classes-in-python) Hope you'll like it! Thanks!",tuple32,1h3rmn5,https://reddit.com/r/Python/comments/1h3rmn5/protocols_vs_abstract_base_classes_in_python/,https://www.reddit.com/r/Python/comments/1h3rmn5/protocols_vs_abstract_base_classes_in_python/,2024-12-01 01:17:41,121,0.97,121,0,32,0,0,False,False,True,False,False,Tutorial,self,t3_1h3rmn5
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1h3q203,https://reddit.com/r/Python/comments/1h3q203/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1h3q203/sunday_daily_thread_whats_everyone_working_on/,2024-12-01 00:00:18,5,0.79,5,0,7,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1h3q203
Python,"Package for Sharing/Editing Pandas Dataframes with Nontechnical Contributors
","**1. What My Project Does**

I created a python package that allows you to generate temporary shareable links to a web-editor for your pandas dataframe!

Running df = pandaBear(df) will generate the free ngrok link from your token in the .env, prompt you for a gmail to authorize access, and then when the person you shared it with finishes editing using the web editor you will have the updated df.

Feel free to check out the demos on¬†[GitHub](https://github.com/RohanAdwankar/share-df)!

**2. Target Audience**

This is for the scenario where devs are collaborating with nontechnical contributors who want to make quick edits, and the devs want to save time by not having to export the df to a different file and import it again (and deal with whatever issues happen in this formatting and reformatting process).

This is my first python package and it is in the early stages. If people are interested in it I would love to make upgrades to the UI and how it handles large dataframes so please don't hesitate to provide feedback and feature requests! 

**3. Comparison**

There are great, more mature tools like Streamlit for displaying dataframes, but as far as I know, this is the only tool oriented toward temporary sharing and editing.",ilikehikingalot,1h3prey,https://reddit.com/r/Python/comments/1h3prey/package_for_sharingediting_pandas_dataframes_with/,https://www.reddit.com/r/Python/comments/1h3prey/package_for_sharingediting_pandas_dataframes_with/,2024-11-30 23:46:03,7,0.74,7,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1h3prey
Python,"I hadn't used Python in a while, but I came back to it to make this CLI hash checking script","Here is a link to the project on GitHub (MIT License):

https://github.com/Cyncrovee/CynVee-Hash-Checker_CLI

## What My Project Does
It's a simple CLI tool to output the hashes of files using multiple algorithms, which at the moment includes:

- SHA1
- SHA224
- SHA256
- SHA384
- SHA512
- SHA3\_224
- SHA3\_256
- SHA3\_384
- SHA3\_512
- MD5
- BLAKE2b
- BLAKE2s

You simply run the main.py file (with optional arguments) and once you have selected the file you want to use, it will generate the hashes for said file with all the above algorithms (though the README has more detailed intructions).

It's actually a sort of ""spin-off"" of another project I have in C#, which is a similar thing except with a GUI and less hashing algorithms (with some other differences). I started making it because I just wanted to test out a Neovim config I made, but now I think I may keep using it.

## Target Audience
Well to be honest I mostly made it for myself, but I think other people might get some leverage out of it if they need to hash files often. For example, if you're a distro hopper and need to verify lots of ISO files (I've been there lol-)

## Comparison
There are a few similar utilities like certUtil or the checksum package on Chocolatey, however they can be a bit tedious to use in my experience, usually because the commands can get quite long, and/or because it doesn't support the hashing algorithms I need. The downside is that the script can take quite a long time when hashing a large file, so it wouldn‚Äôt be the best choice if speed is a concern

## End
I hope you like it! Coming back to Python was nice, the syntax is great and most things just work really easily. Hopefully I can use it for another project soon :]",ever-ella77,1h3ntgy,https://reddit.com/r/Python/comments/1h3ntgy/i_hadnt_used_python_in_a_while_but_i_came_back_to/,https://www.reddit.com/r/Python/comments/1h3ntgy/i_hadnt_used_python_in_a_while_but_i_came_back_to/,2024-11-30 22:13:26,1,0.52,1,0,23,0,0,False,False,True,False,False,Showcase,self,t3_1h3ntgy
Python,Big Tech Best Practices ,"I'm working at small startup, we are using FastAPI, SQLAlchemy, Pydantic, Postgres for backend  
I was wondering what practices do people in FAANG  use when building production API  
Code organization, tests structure, data factories, session managing, error handling, logging etc

I found this repo [https://github.com/zhanymkanov/fastapi-best-practices](https://github.com/zhanymkanov/fastapi-best-practices) and it gave me some insights but I want more

Please share practices from your company if you think they worth to share",Key-Deer-8156,1h3jize,https://reddit.com/r/Python/comments/1h3jize/big_tech_best_practices/,https://www.reddit.com/r/Python/comments/1h3jize/big_tech_best_practices/,2024-11-30 18:56:04,151,0.97,151,0,40,0,0,False,False,True,False,False,Discussion,self,t3_1h3jize
Python,Is there such CP for NumPy?,"Vectorized programming is really different compared to traditional competitive programming problem that relied on sequential processing. I feel loop and conditional if-else is not really recommended due to performance issue, instead tensor operation can beneficially faster than it.

This makes me wonder if there is such competitive programming platform but for vectorized programming specifically for the NumPy?",Commercial_Diver_805,1h3fa20,https://reddit.com/r/Python/comments/1h3fa20/is_there_such_cp_for_numpy/,https://www.reddit.com/r/Python/comments/1h3fa20/is_there_such_cp_for_numpy/,2024-11-30 15:45:43,0,0.37,0,0,7,0,0,False,False,True,False,False,Discussion,self,t3_1h3fa20
Python,Tech Events @ Europe,"In the repository¬†[https://github.com/ortolanph/tech-events-europe](https://github.com/ortolanph/tech-events-europe)¬†there is a listing of events for Europe for this year (I know that's only Portugal, but this is what I have done for now). If you want to contribute to next year's event, just follow the rules on the site.

Thanks!",ortolanph,1h3bhgl,https://reddit.com/r/Python/comments/1h3bhgl/tech_events_europe/,https://www.reddit.com/r/Python/comments/1h3bhgl/tech_events_europe/,2024-11-30 12:23:50,8,0.75,8,0,0,0,0,False,False,True,False,False,Discussion,self,t3_1h3bhgl
Python,Short-Circuiting in Python,"Here is my article on [Short-Circuiting in Python](https://nolowiz.com/short-circuiting-in-python/) . It discusses what is short-circuiting with examples, and also discusses the different advantages of using short-circuiting.",simpleuserhere,1h30nsp,https://reddit.com/r/Python/comments/1h30nsp/shortcircuiting_in_python/,https://www.reddit.com/r/Python/comments/1h30nsp/shortcircuiting_in_python/,2024-11-30 00:55:38,4,0.54,4,0,16,0,0,False,False,True,False,False,Tutorial,self,t3_1h30nsp
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1h2zjp4,https://reddit.com/r/Python/comments/1h2zjp4/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1h2zjp4/saturday_daily_thread_resource_request_and/,2024-11-30 00:00:19,3,0.81,3,0,2,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1h2zjp4
Python,YTSage: A Modern YouTube Downloader with a Stunning PyQt6 Interface!,"**What My Project Does:**  
**[YTSage](https://github.com/oop7/YTSage)** is a modern YouTube downloader designed for simplicity and functionality. With a sleek PyQt6 interface, it allows users to:  
- üé• Download videos in various qualities with automatic audio merging.  
- üéµ Extract audio in multiple formats.  
- üìù Fetch both manual and auto-generated subtitles.  
- ‚ÑπÔ∏è View detailed video metadata (e.g., views, upload date, duration).  
- üñºÔ∏è Preview video thumbnails before downloading.  

---

**Target Audience:**  
YTSage is ideal for:  
- Casual users who want an easy-to-use video and audio downloader.  
- Developers looking for a robust yt-dlp-based tool with a clean GUI.  
- Educators and content creators who need subtitles or metadata for their projects.  

---

**Comparison with Existing Alternatives:**  
- **vs yt-dlp**: While yt-dlp is powerful, it operates through the command line. YTSage simplifies the process with an intuitive graphical interface.  
- **vs other GUI downloaders**: Many alternatives lack modern design or features like subtitle support and metadata display. YTSage bridges this gap with its PyQt6-powered interface and advanced functionality.  

---

**Getting Started:**  
Download the pre-built executable from the [Releases](https://github.com/oop7/YTSage/releases) page ‚Äì no installation required! For developers, source code and build instructions are available in the repository.

---

**Screenshots:**  
[Main Interface](https://github.com/user-attachments/assets/0dc04ecf-082e-458a-acfe-2c5482d36de2)  
*Main interface with video metadata and thumbnail preview*  

[Subtitle Options](https://github.com/user-attachments/assets/b001ceb5-5446-4b56-b00c-b578814e2cf0)  
*Support for both manual and auto-generated subtitles*  

---

**Feedback and Contributions:**  
I‚Äôd love your thoughts on how to make YTSage better! Contributions are welcome on GitHub.  

üîó [GitHub Repository](https://github.com/oop7/YTSage)",NO-N_A_M_E,1h2ta56,https://reddit.com/r/Python/comments/1h2ta56/ytsage_a_modern_youtube_downloader_with_a/,https://www.reddit.com/r/Python/comments/1h2ta56/ytsage_a_modern_youtube_downloader_with_a/,2024-11-29 19:10:09,69,0.73,69,0,79,0,0,False,False,True,False,False,Showcase,self,t3_1h2ta56
Python,Python Online IDE,"# 1. What My Project Does

This project is a sample application that integrates a language model to generate code and provides an interface for users to execute it.

# 2. Target Audience

It is built for Python enthusiasts. The purpose of integrating AI is to allow students to query the AI and practice coding at the same time. It is not meant for production use.

It can be helpful for teachers and tutors as well.

# 3. Comparison

It differs in two key ways. First, it automatically downloads the required modules based on the generated code and allows users to upload files. While it is a toy project, Google Colab already provides a 100000 times better alternative for this type of IDE. However, this project can be adapted for other programming languages, as the code execution occurs on the local machine

Code: [https://github.com/MuhammadMuneeb007/PythonOnlineIDE/](https://github.com/MuhammadMuneeb007/PythonOnlineIDE/)",Muneeb007007007,1h2rmkt,https://reddit.com/r/Python/comments/1h2rmkt/python_online_ide/,https://www.reddit.com/r/Python/comments/1h2rmkt/python_online_ide/,2024-11-29 17:59:21,0,0.21,0,0,14,0,0,False,False,True,False,False,Showcase,self,t3_1h2rmkt
Python,What are some really awesome projects/channels you have encountered so far in YouTube?,"What are some really awesome projects/channels you have encountered so far in YouTube? Looking for some ideas to work on for a long time now. 

Doing same automation and using same libraries, I am feeling kinda bored now. Need some fresh ideas.",ElasticMusk,1h2quqa,https://reddit.com/r/Python/comments/1h2quqa/what_are_some_really_awesome_projectschannels_you/,https://www.reddit.com/r/Python/comments/1h2quqa/what_are_some_really_awesome_projectschannels_you/,2024-11-29 17:25:39,109,0.91,109,0,39,0,0,False,False,True,False,False,Discussion,self,t3_1h2quqa
Python,"Web Scraping Social Media Profiles [ X, Instagram, Tiktok, Youtube ]","Hi everyone!

I‚Äôve created a script for scraping public social media accounts for work purposes. I‚Äôve wrapped it up, formatted it, and created a repository for anyone who wants to use it.

# What My Project Does
The main focus of this project is to scrape data from profiles and their posts. For example:
- In my job, I‚Äôve automated it to run daily for our social media profiles, storing the data for later analysis.
- A firend of mine wanted to download all the thumbnails of a youtube channel.

# How it works
The script uses Playwright to intercept requests and clean up the data. It also includes a second part that converts images to Base64 encoding, which is useful when image URLs expire or cannot be displayed directly in an `HTML img tag`. For YouTube, it uses the API v3, as it's straightforward to obtain an API key.

I believe the script is easy to use, and you can quickly adapt it to suit your needs. Be sure to check out the README for more details!
 
# Target Audience
This tool is for anyone who needs to scrape social media data. The code is simple enough to copy, modify, and integrate into your project.

# Comparison
I haven‚Äôt extensively researched if there are better solutions out there. However, you can consider using libraries like Instaloader or Twitter-scraper for similar functionality.

# Finally
I‚Äôd love to hear your thoughts and any feedback you have.

# Links
- https://github.com/luciomorocarnero/scraping_media",Lcrack753,1h2o2n5,https://reddit.com/r/Python/comments/1h2o2n5/web_scraping_social_media_profiles_x_instagram/,https://www.reddit.com/r/Python/comments/1h2o2n5/web_scraping_social_media_profiles_x_instagram/,2024-11-29 15:21:13,19,0.79,19,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1h2o2n5
Python,"Creating a type-safe ""pipe"" function in Python","I'm interested in exploring writing Python in a more functional style, but unfortunately, the most popular libraries that offer fp utility functions (like [toolz](https://github.com/pytoolz/toolz), [funcy](https://github.com/Suor/funcy) and [returns](https://github.com/dry-python/returns)) don't include static types. (The latter tries to, but still often returns `Any`.)

This is my attempt at starting my own collection, beginning with `pipe`: [Creating a type-safe ""pipe"" function in Python](https://michaeluloth.com/python-fp-pipe/). Feedback is welcome! Along with general advice about applying fp to Python effectively.",ooloth,1h2esxo,https://reddit.com/r/Python/comments/1h2esxo/creating_a_typesafe_pipe_function_in_python/,https://www.reddit.com/r/Python/comments/1h2esxo/creating_a_typesafe_pipe_function_in_python/,2024-11-29 05:38:08,7,0.66,7,0,18,0,0,False,False,True,False,False,Tutorial,self,t3_1h2esxo
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1h293f6,https://reddit.com/r/Python/comments/1h293f6/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1h293f6/friday_daily_thread_rpython_meta_and_freetalk/,2024-11-29 00:00:53,5,0.78,5,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1h293f6
Python,Neurosintesis mapping EEG brain data into sound waves,"Full code, data and audio samples: [https://github.com/itzcuintli/neurosintesis](https://github.com/itzcuintli/neurosintesis)

Some audio samples: [https://www.youtube.com/watch?v=zfuD-rfgQSw](https://www.youtube.com/watch?v=zfuD-rfgQSw)

* **What My Project Does:** Different audio mappings of EEG brain waves data recorded using a Muse 2 EEG head band.
* **Target Audience:** Some ideas for musicians, cognitive scientists, etc with inspiration taken from music, cosmology and the Vedas.
* **Comparison:** Just something I wanted to play around for a while! Things such as mapping different scales/modes to each EEG band, playing around with pulses, frequency modulation, oscillatory synthesis, things like that.

Hope you enjoy it!",___mariana___,1h25tgi,https://reddit.com/r/Python/comments/1h25tgi/neurosintesis_mapping_eeg_brain_data_into_sound/,https://www.reddit.com/r/Python/comments/1h25tgi/neurosintesis_mapping_eeg_brain_data_into_sound/,2024-11-28 21:09:41,3,0.71,3,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1h25tgi
Python,I built an AI tool that post tweets and retweets on my behalf and save my time,"Hello all,

# I have built an AI tool that posts tweets and retweets from my Twitter account.

# What My Project Does

I have been active on Twitter for a very long time. Posting tweets and retweeting tweets on daily basis becomes a very task. So I built this AI app that does this task for me.

# Target Audience

For the developers who are looking to automate their daily tasks and that love building something using AI agents.

Technologies I used:

* [Composio](https://dub.composio.dev/O2A7OJz)¬†\- To integrate Twitter tool
* [CrewAI](https://github.com/crewAIInc/crewAI)¬†\- To configure AI functionality
* [Firebase](https://firebase.google.com/)¬†\- To perform authentication
* React+Vite - To create the UI

Workflow of app:

* First, connect the app with your Twitter account by entering credentials. Also, give the access to your Twitter account so app can post tweets from your account.
* Next, add the Compose API key in the application and link other users' Twitter accounts from which you want to repost and quote repost your tweets. You can add more than 1 user.
* Finally, generate the tweet by providing a few keywords to the application. The application will generate a tweet, with proper format and suitable hashtags. Just click post, and your tweet will be posted.

Here's full code -¬†[https://github.com/abhishekpatil4/tweetify/tree/main](https://github.com/abhishekpatil4/tweetify/tree/main)

Here's live link -¬†[https://tweetify.try.composio.dev/](https://tweetify.try.composio.dev/)

Try it out and share your valuable feedback",tsayush,1h20ipv,https://reddit.com/r/Python/comments/1h20ipv/i_built_an_ai_tool_that_post_tweets_and_retweets/,https://www.reddit.com/r/Python/comments/1h20ipv/i_built_an_ai_tool_that_post_tweets_and_retweets/,2024-11-28 17:04:34,0,0.3,0,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1h20ipv
Python,"Creating an AI-powered Image Generation API Service with FLUX, Python, and Diffusers",[https://herahaven.ai/blog/creating-an-ai-powered-image-generation-api-service-with-flux-python-and-diffusers/](https://herahaven.ai/blog/creating-an-ai-powered-image-generation-api-service-with-flux-python-and-diffusers/),komninosc,1h1tx73,https://reddit.com/r/Python/comments/1h1tx73/creating_an_aipowered_image_generation_api/,https://www.reddit.com/r/Python/comments/1h1tx73/creating_an_aipowered_image_generation_api/,2024-11-28 11:25:08,30,0.74,30,0,6,0,0,False,False,True,False,False,Tutorial,self,t3_1h1tx73
Python,Stormchaser: A Python program that collects and animates Western Pacific typhoon data.,"# What my project does:

[Stormchaser](https://github.com/TreacherousDev/Stormchaser) is a real-time typhoon visualization system. It scrapes typhoon data from the [Digital Typhoon database](http://agora.ex.nii.ac.jp/digital-typhoon/), visualizes typhoon paths on a map of the Western Pacific, and animates the data with smooth transitions, dynamic color coding based on typhoon intensity, and additional features like landfall detection, all within an interactive timeline.

# Target Audience

This project is designed for:

* People interested in typhoon tracking and data visualization.
* Educational use, demonstrating the real-world application of data scraping and visualization,

# How it differs from existing alternatives:

Stormchaser is designed for people who want an easy, user-friendly way to visualize typhoon data. No programming or editing skills is required to create animations. Just enter a date and press play, that's it! It is free and open source, and even comes packed as a[ standalone Windows executable](https://github.com/TreacherousDev/Stormchaser/releases/tag/v0.1).

# Information

The app was built using the following resources:

* beautifulsoup4 - webscraping
* cartopy - map generation
* pygame - visual output renderer

To use, simply install and input a date. It will take a while to scrape the web on the first time you input the given year, and afterwards it will redirect you to the main animation window where you can play the animation. Data scraped will be cached into your computer files so that the next time you view the same year, it doesnt have to scrape again.

Project Stormchaser is in early beta and is open to contributions.  
[https://github.com/TreacherousDev/Stormchaser](https://github.com/TreacherousDev/Stormchaser)",treacherous_dev,1h1rk2c,https://reddit.com/r/Python/comments/1h1rk2c/stormchaser_a_python_program_that_collects_and/,https://www.reddit.com/r/Python/comments/1h1rk2c/stormchaser_a_python_program_that_collects_and/,2024-11-28 08:33:00,24,0.92,24,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1h1rk2c
Python,Conversational RAG on local files (on-premises usage),"Hey everyone,

**What My Project Does:**  
That is a local conversational rag on your files. Be honest, you can use this as a rag on-premises, cause it is build with docker, langchain, ollama, fastapi, hf All models download automatically, soon I'll add an ability to choose a model For now solution contains:

* Locally running Ollama (currently qwen-0.5b model hardcoded, soon you'll be able to choose a model from ollama registry)
* Local indexing (using sentence-transformer embedding model, you can switch to other model, but only sentence-transformers applied, also will be changed soon)
* Qdrant container running on your machine
* Reranker running locally (BAAI/bge-reranker-base currently hardcoded, but i will also add an ability to choose a reranker)
* Websocket based chat with saving history
* Simple chat UI written with React
* As a plus, you can use local rag with ChatGPT as a custom GPT, so you able to query your local data through official chatgpt web and mac os/ios app.
* You can deploy it as a RAG on-premises, all containers can work on CPU machines

Couple of ideas/problems:

* Model Context Protocol support
* Right now there is no incremental indexing or reindexing
* No selection for the models (will be added soon)
* Different environment support (cuda, mps, custom npu's)

**Target Audience:**  
This project is designed for developers, as you‚Äôll need to set up Docker to get it running. Unfortunately, there‚Äôs no consumer-friendly app yet.

**Comparison**:  
The closest competitor, though already far ahead (so I doubt I can truly compete with them), is¬†**LLM Studio**.

For anyone interested in making local RAG or on-premises RAG as accessible as possible, you‚Äôre warmly invited to contribute!

Here is a link:¬†[https://github.com/dmayboroda/minima](https://github.com/dmayboroda/minima)

Thank you so much!",davidvroda,1h1qzds,https://reddit.com/r/Python/comments/1h1qzds/conversational_rag_on_local_files_onpremises_usage/,https://www.reddit.com/r/Python/comments/1h1qzds/conversational_rag_on_local_files_onpremises_usage/,2024-11-28 07:51:57,8,0.79,8,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1h1qzds
Python,What are you all-time favorite Python talks?,"I recently discovered [https://pyvideo.org/](https://pyvideo.org/) with its 19 163 talks from Python conferences. 

Do you have any favorite talks or speakers you can recommend?",dhaitz,1h1qun7,https://reddit.com/r/Python/comments/1h1qun7/what_are_you_alltime_favorite_python_talks/,https://www.reddit.com/r/Python/comments/1h1qun7/what_are_you_alltime_favorite_python_talks/,2024-11-28 07:42:08,158,0.99,158,0,31,0,0,False,False,True,False,False,Discussion,self,t3_1h1qun7
Python,ASCII tree generator package,"So i was trying to create an easier way to list the files within my folder structure. Just did some side project to make this happen. Created a package to create these representations in an ascii tree and you can save them in a .md format. Do check it out and lemme know what you guys think

# What My Project Does

[Treeline](https://github.com/duriantaco/treeline) is a simple to use directory tree structure generator that can create ASCII tree representations and save them as markdown files.

# Target Audience

Anyone and everyone that needs to create their folder structure. 

# Comparison

I cant find any packages so far so i created it on my own. Next closest will be, [https://www.text-tree-generator.com/](https://www.text-tree-generator.com/)

# Link

[https://github.com/duriantaco/treeline](https://github.com/duriantaco/treeline)",papersashimi,1h1pmbh,https://reddit.com/r/Python/comments/1h1pmbh/ascii_tree_generator_package/,https://www.reddit.com/r/Python/comments/1h1pmbh/ascii_tree_generator_package/,2024-11-28 06:19:00,5,0.64,5,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1h1pmbh
Python,PixelPurge: Game Cleanup Tool,"Hey everyone üëã

I‚Äôm excited to introduce you to **PixelPurge**, my latest side project!

# What PixelPurge Does

PixelPurge is a lightweight Python tool designed to help gamers clean up after trying new games. It‚Äôs perfect for anyone who loves testing games but hates the leftover files. It tracks new files and folders created while you play and lets you delete them effortlessly.

You can find images and details in the [project repository](https://github.com/Izaan17/PixelPurge).

# Target Audience

If you‚Äôre a gamer who frequently downloads and uninstalls new titles, you‚Äôll love PixelPurge. It‚Äôs also great for anyone who wants to reclaim storage space by ensuring no leftover game files clutter your system. While it‚Äôs aimed at Windows users, macOS users can use it too.

# Comparison

You might be thinking, ‚ÄúWhy not just manually delete leftover files?‚Äù Sure, you can, but PixelPurge takes the guesswork out of the process by:

‚Ä¢ Automatically tracking changes in monitored directories while games are running.

‚Ä¢ Providing an easy GUI for reviewing and selecting files to delete.

‚Ä¢ Supporting recursive folder monitoring so nothing is missed.

# Links

‚Ä¢ **Repository**: [https://github.com/izaan17/PixelPurge](https://github.com/izaan17/PixelPurge)

If you‚Äôre curious or have feedback, I‚Äôd love for you to check it out. Feel free to contribute, suggest features, or just share your thoughts‚Äîthis project is all about making our gaming lives easier. Thanks for reading.",HyperrNuk3z,1h1plj9,https://reddit.com/r/Python/comments/1h1plj9/pixelpurge_game_cleanup_tool/,https://www.reddit.com/r/Python/comments/1h1plj9/pixelpurge_game_cleanup_tool/,2024-11-28 06:17:34,9,0.75,9,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1h1plj9
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1h1isdo,https://reddit.com/r/Python/comments/1h1isdo/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1h1isdo/thursday_daily_thread_python_careers_courses_and/,2024-11-28 00:00:10,2,0.76,2,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1h1isdo
Python,"opennb: Open Jupyter notebooks from GitHub with dependencies, instantly (with uv)!","**What My Project Does:**

[opennb](https://github.com/basnijholt/opennb) is a tiny CLI tool that lets you open Jupyter notebooks directly from GitHub (or any URL) while automatically handling dependencies in an ephemeral environment. For example:

```
uvx --with ""pipefunc[docs]"" opennb pipefunc/pipefunc/example.ipynb
```

This single command:
- Creates a temporary environment
- Installs all dependencies (instant with uv's cache!)
- Downloads the notebook
- Opens it in Jupyter

With a cold cache ü•∂ it takes 1.5s to do this all, and with a hot cache ü•µ it takes a couple of ms!

GitHub: https://github.com/basnijholt/opennb

**Target Audience:**

- Data scientists and developers who frequently try out tutorial notebooks
- Anyone learning from Jupyter notebooks in GitHub repositories
- Teachers sharing notebooks with students
- People who want to try notebooks without polluting their environment

It's meant for real use but is intentionally simple and focused on doing one thing well.

**Comparison:**

Existing workflows typically involve:
1. Cloning the entire repository
2. Creating a virtual environment
3. Installing dependencies
4. Finding and opening the notebook

This can be tedious, especially when you just want to quickly try a notebook. opennb combines these steps into a single command and leverages uv's speed to make it instant.

The closest alternative would be using Binder, but:
- Binder requires waiting for container builds
- opennb works locally and instantly
- opennb integrates with your local Jupyter installation
- No need for external services

Built on top of the amazing uv tool (https://docs.astral.sh/uv/), which makes this workflow possible through its unprecedented speed and smart caching.",basnijholt,1h1ecw7,https://reddit.com/r/Python/comments/1h1ecw7/opennb_open_jupyter_notebooks_from_github_with/,https://www.reddit.com/r/Python/comments/1h1ecw7/opennb_open_jupyter_notebooks_from_github_with/,2024-11-27 20:40:33,35,0.93,35,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1h1ecw7
Python,Update on pgcrud: CRUD operations for PostgreSQL,"A couple of days ago, I shared a post ([link here](https://www.reddit.com/r/Python/comments/1gy1qg7/crud_operations_for_postgresql_with_pgcrud/)) about my open-source library pgcrud. I've received a lot of positive and constructive feedback and I was even asked to give an update on some topics. Here it is:

**What My Project Does**

pgcrud is a python library that makes Create, Read, Update, and Delete (CRUD) operations for PostgreSQL simple and fast. It serves as the bridge between the PostgreSQL adapter psycopg and Pydantic, the leading library for data modelling, data serialization and validation

**Target Audience**

All python developers that are using PostgreSQL. Most of them either write raw SQL or use ORMs like SQLAlchemy or SQLModel.

**Comparison**

Cons of current methods:  
  
\- Classical ORMs are convenient but struggle handling relations. In addition, you often need separate (Pydantic) models for your output layer (API interface)  
\- Raw SQL can be repetitive and it is difficult to handle dynamic filter or sorting conditions (and I don't parametrisation but optional parameters)

pgcrud solves these problems by using powerful data annotations to in Pydantic models so that you can map any Pydantic model field to a corresponding database object. pgcrud is an abstractly declarative similar to SQLAlchemy Core but is specifically tailored PostgreSQL and with built in Pydantic support.  
  
In my Github repo you can see how you  can handle parent-children relationships with pgcrud in a single database call and recieve a list of Pydantic models as result. Essentially any ""n+1"" problem can be solved in a single database call with pgcrud.

Looking forward to your comments! Any Feedback, positive or negative, is highly appreciated!

The link to my Github Repository is here:  
[https://github.com/dakivara/pgcrud](https://github.com/dakivara/pgcrud)

If you like pgcrud, please consider starring in on GitHub! I also want to avoid spamming this subreddit in the future, so I've created a dedicated pgcrud subreddit:  
[https://www.reddit.com/r/pgcrud/](https://www.reddit.com/r/pgcrud/)

Feel free to join if you're interested! I'll be posting there more frequently and would greatly appreciate any questions or feedback there.",[deleted],1h1di9u,https://reddit.com/r/Python/comments/1h1di9u/update_on_pgcrud_crud_operations_for_postgresql/,https://www.reddit.com/r/Python/comments/1h1di9u/update_on_pgcrud_crud_operations_for_postgresql/,2024-11-27 20:03:57,2,0.6,2,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1h1di9u
Python,My side project has gotten 420k downloads and 69 GitHub stars (noice!),"Hey Redditors! üëã

I couldn't think of a better place to share this achievement other than here with you lot. Sometimes the universe just comes together in such a way that makes you wonder if the simulation is winking back at you...

But now that I've grabbed your attention, allow me tell you a bit about my project.

# What My Project Does

[ridgeplot](https://github.com/tpvasconcelos/ridgeplot?tab=readme-ov-file) is a Python package that provides a simple interface for plotting beautiful and interactive ridgeline plots within the extensive Plotly ecosystem.

Unfortunately, I can't share any screenshots here, but feel free to take a look at our [**getting started guide**](https://ridgeplot.readthedocs.io/en/stable/getting_started/getting_started.html) for some examples of what you can do with it.

# Target Audience

Anyone that needs to plot a ridgeline graph can use this library. That said, I expect it to be mainly used by people in the data science, data analytics, machine learning, and adjacent spaces.

# Comparison

If all you need is a simple ridgeline plot with Plotly without any bells and whistles, take a look at [this example](https://plotly.com/python/violin/#ridgeline-plot) in their official docs. However, if you need more control over how the plot looks like, like plotting multiple traces per row, using different [coloring options](https://ridgeplot.readthedocs.io/en/stable/getting_started/getting_started.html#coloring-options), or mixing [KDEs and histograms](https://github.com/tpvasconcelos/ridgeplot/issues/194#issuecomment-2500864292), then I think my library would be a better choice for you...

Other alternatives include:

* [matplotlib - example blogpost](https://matplotlib.org/matplotblog/posts/create-ridgeplots-in-matplotlib/)
* [joypy - Ridgeplot library using a matplotlib backend](https://github.com/sbebo/joypy)
* [seaborn - also using a matplotlib backend](https://seaborn.pydata.org/examples/kde_ridgeplot)
* [bokeh - using yet a different graphing backend](https://docs.bokeh.org/en/latest/docs/examples/topics/categorical/ridgeplot.html)

I [included](https://ridgeplot.readthedocs.io/en/stable/reference/alternatives.html) these alternatives in the project's documentation. Feel free to contribute more!

# Links

* Repository: [https://github.com/tpvasconcelos/ridgeplot](https://github.com/tpvasconcelos/ridgeplot)
* Docs: [https://ridgeplot.readthedocs.io/](https://ridgeplot.readthedocs.io/)",tpvasconcelos,1h1ccfu,https://reddit.com/r/Python/comments/1h1ccfu/my_side_project_has_gotten_420k_downloads_and_69/,https://www.reddit.com/r/Python/comments/1h1ccfu/my_side_project_has_gotten_420k_downloads_and_69/,2024-11-27 19:15:37,329,0.9,329,0,36,0,0,False,False,True,False,False,Showcase,self,t3_1h1ccfu
Python,"Django Protego - A Flexible and Dynamic Circuit Breaker
","**What My Project Does**

**Django Protego** implements the Circuit Breaker pattern in Django. It helps prevent service failures from propagating through your application by ""breaking"" the circuit after a specified number of consecutive failures. Once the circuit is broken, Protego will stop making requests to the failing service and return a graceful fallback response (like an error message) until the service is healthy again.

By using **Django Protego**, you can:

* Detect failures early: When external services or APIs start to fail, Protego can detect this and break the circuit.
* Gracefully degrade: Instead of letting failures cascade, Protego will return a preconfigured fallback response (e.g., a 503 Service Unavailable) to users.
* Retry after a delay: Protego will attempt to restore the service by retrying the request after a set timeout, once the failure threshold is cleared.

**Target Audience**

Django Protego is built for small to medium size Django projects that are urgent need for circuit breaker pattern for their APIs.

Link: [https://github.com/grandimam/protego](https://github.com/grandimam/protego)",grandimam,1h1924d,https://reddit.com/r/Python/comments/1h1924d/django_protego_a_flexible_and_dynamic_circuit/,https://www.reddit.com/r/Python/comments/1h1924d/django_protego_a_flexible_and_dynamic_circuit/,2024-11-27 17:00:20,13,0.86,13,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1h1924d
Python,Python Imports... just why! ü•∂,"Forgive me, today I'm just here to friendly rant a bitü§ì... Python's manner of handling imports is just üôÑ. One minute everything is working fine and the next minute ModuleNotFoundError: No module named... The slightest refactoring can endup a day of wanting to smash your keyboardü•∂. And no, \_\_init\_\_.py isn't always the magic stick.‚ú®

After coming back to python from using Flutter/Dart (where a file simply works as a package) to do some backend work, I'm reminded just how imports can be one of those python-things that just ruin your day; you have to be extremely mindful in python with your import style.

Share your thoughts and experience on this topic... you might give me some peace of mind or.... maybe some more wrath.üôÉ",DigiProductive,1h17dpb,https://reddit.com/r/Python/comments/1h17dpb/python_imports_just_why/,https://www.reddit.com/r/Python/comments/1h17dpb/python_imports_just_why/,2024-11-27 15:49:32,0,0.31,0,0,52,0,0,False,False,True,False,False,Discussion,self,t3_1h17dpb
Python, I made a Python signal/slot library that works like Qt but without Qt dependency,"Hi everyone!

**What My Project Does:**  
I've been working on TSignal, a library that implements Qt-style signals and slots in pure Python. It handles async operations and thread communication automatically, making it easy to build event-driven applications without pulling in heavy dependencies.

**Target Audience:**  
This is meant for production use, especially for:

* Python developers who like Qt's signal/slot pattern but don't want Qt as a dependency
* Anyone building async applications that need clean component communication
* Developers working with multi-threaded applications who want easier thread communication

**Comparison:**  
While Qt provides a robust signal/slot system, it comes with the entire Qt framework. Other alternatives like PyPubSub or RxPY exist, but TSignal is unique because it:

* Provides Qt-like syntax without Qt dependencies
* Has native asyncio integration (unlike Qt)
* Handles thread-safety automatically (simpler than manual PyPubSub threading)
* Is much lighter than RxPY while keeping the essential event handling features

Here's a quick example:

    @t_with_signals
    class Counter:
        @t_signal
        def count_changed(self):
            pass
        
        def increment(self):
            self.count += 1
            self.count_changed.emit(self.count)
    
    @t_with_signals
    class Display:
        @t_slot
        async def on_count_changed(self, value):
            print(f""Count is now: {value}"")
    
    # Connect and use
    counter = Counter()
    display = Display()
    counter.count_changed.connect(display, display.on_count_changed)
    counter.increment()  
    # Triggers async update

You can find it here: [https://github.com/TSignalDev/tsignal-python](https://github.com/TSignalDev/tsignal-python)

I'd love to hear what you think! If you're building anything with async/await or need thread communication in Python, give it a try and let me know how it works for you. Any feedback or suggestions would be super helpful!",liaddial,1h115dx,https://reddit.com/r/Python/comments/1h115dx/i_made_a_python_signalslot_library_that_works/,https://www.reddit.com/r/Python/comments/1h115dx/i_made_a_python_signalslot_library_that_works/,2024-11-27 10:15:52,28,0.84,28,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1h115dx
Python,Is there life beyond PyUnit/PyTest?,"Some years ago, there were many alternatives to just using these: [grappa](https://grappa.readthedocs.io/en/latest/intro.html#why-grappa), [behave](https://pypi.org/project/behave/), for instance, with many less-popular alternatives around and thriving.

Today, if you check Snyk Advisor for these, or simply the repo, you will find them abandoned or worse, with security issues. To be sure, checking the *Assertions* category in Pypi will give you some alternatives, a few interesting ones based in a fluent API, for instance, but none of them are even remotely as popular as these ones. [New tutorials](https://testomat.io/blog/a-guide-to-the-basics-of-python-testing-how-to-write-unit-tests-and-organize-execution-test-cases/) don't even bother in telling people to look for alternatives.

Have we arrived to a point where Python is so mature that a single framework is enough to test it all?",Sea-Bug2134,1h0yg58,https://reddit.com/r/Python/comments/1h0yg58/is_there_life_beyond_pyunitpytest/,https://www.reddit.com/r/Python/comments/1h0yg58/is_there_life_beyond_pyunitpytest/,2024-11-27 06:56:40,33,0.75,33,0,51,0,0,False,False,True,False,False,Discussion,self,t3_1h0yg58
Python,error: use of undeclared identifier 'BPF_SK_LOOKUP'; did you mean 'BPF_F_LOCK'?,"the machine: 4.18.0-240.el8.x86\_64, bpftrace v0.10.0,  Centos8.3

when I  run

In file included from /virtual/main.c:3:

In file included from include/net/sock.h:13:

In file included from include/linux/netdevice.h:19:

In file included from include/net/net\_namespace.h:35:

In file included from include/net/netns/bpf.h:7:

include/linux/bpf-netns.h:21:7: error: use of undeclared identifier 'BPF\_SK\_LOOKUP'; did you mean 'BPF\_F\_LOCK'?

case BPF\_SK\_LOOKUP:

\^\~\~\~\~\~\~\~\~\~\~\~\~

BPF\_F\_LOCK

/virtual/include/bcc/bpf.h:338:2: note: 'BPF\_F\_LOCK' declared here

BPF\_F\_LOCK      = 4, /\* spin\_lock-ed map\_lookup/map\_update \*/

\^

In file included from /virtual/main.c:3:

In file included from include/net/sock.h:13:

In file included from include/linux/netdevice.h:23:

In file included from include/net/netprio\_cgroup.h:6:

In file included from include/linux/cgroup.h:22:

In file included from include/linux/cgroup-defs.h:17:

In file included from include/linux/bpf-cgroup.h:7:

include/linux/bpf.h:809:21: error: field has incomplete type 'enum bpf\_link\_type'

enum bpf\_link\_type type;

\^

include/linux/bpf.h:809:7: note: forward declaration of 'enum bpf\_link\_type'

enum bpf\_link\_type type;

\^

include/linux/bpf.h:823:17: warning: declaration of 'struct bpf\_link\_info' will not be visible outside of this function \[-Wvisibility\]

struct bpf\_link\_info \*info);

\^

include/linux/bpf.h:1220:12: warning: declaration of 'union bpf\_iter\_link\_info' will not be visible outside of this function \[-Wvisibility\]

union bpf\_iter\_link\_info \*linfo,

\^

include/linux/bpf.h:1226:14: warning: declaration of 'struct bpf\_link\_info' will not be visible outside of this function \[-Wvisibility\]

struct bpf\_link\_info \*info);

\^

include/linux/bpf.h:1269:12: warning: declaration of 'struct bpf\_link\_info' will not be visible outside of this function \[-Wvisibility\]

struct bpf\_link\_info \*info);

  
\#!/usr/bin/python

\#

\# tcpv4connect  Trace TCP IPv4 connect()s.

\#       For Linux, uses BCC, eBPF. Embedded C.

\#

\# USAGE: tcpv4connect \[-h\] \[-t\] \[-p PID\]

\#

\# This is provided as a basic example of TCP connection &amp; socket tracing.

\#

\# All IPv4 connection attempts are traced, even if they ultimately fail.

\#

\# Copyright (c) 2015 Brendan Gregg.

\# Licensed under the Apache License, Version 2.0 (the ""License"")

\#

\# 15-Oct-2015   Brendan Gregg   Created this.



from \_\_future\_\_ import print\_function

from bcc import BPF



\# define BPF program

bpf\_text = """"""

\#include &lt;uapi/linux/ptrace.h&gt;

\#include &lt;net/sock.h&gt;

\#include &lt;bcc/proto.h&gt;



BPF\_HASH(currsock, u32, struct sock \*);



int kprobe\_\_tcp\_v4\_connect(struct pt\_regs \*ctx, struct sock \*sk)

{

u32 pid = bpf\_get\_current\_pid\_tgid();



// stash the sock ptr for lookup on return

currsock.update(&amp;pid, &amp;sk);



return 0;

};



int kretprobe\_\_tcp\_v4\_connect(struct pt\_regs \*ctx)

{

int ret = ctx-&gt;ax;

u32 pid = bpf\_get\_current\_pid\_tgid();



struct sock \*\*skpp;

skpp = currsock.lookup(&amp;pid);

if (skpp == 0) {

return 0;   // missed entry

}



if (ret != 0) {

// failed to send SYNC packet, may not have populated

// socket \_\_sk\_common.{skc\_rcv\_saddr, ...}

currsock.delete(&amp;pid);

return 0;

}



// pull in details

struct sock \*skp = \*skpp;

u32 saddr = 0, daddr = 0;

u16 dport = 0;

bpf\_probe\_read(&amp;saddr, sizeof(saddr), &amp;skp-&gt;\_\_sk\_common.skc\_rcv\_saddr);

bpf\_probe\_read(&amp;daddr, sizeof(daddr), &amp;skp-&gt;\_\_sk\_common.skc\_daddr);

bpf\_probe\_read(&amp;dport, sizeof(dport), &amp;skp-&gt;\_\_sk\_common.skc\_dport);



// output

bpf\_trace\_printk(""trace\_tcp4connect %x %x %d\\\\n"", saddr, daddr, ntohs(dport));



currsock.delete(&amp;pid);



return 0;

}

""""""



\# initialize BPF

b = BPF(text=bpf\_text)



\# header

print(""%-6s %-12s %-16s %-16s %-4s"" % (""PID"", ""COMM"", ""SADDR"", ""DADDR"",""DPORT""))



def inet\_ntoa(addr):

dq = ''

for i in range(0, 4):

dq = dq + str(addr &amp; 0xff)

if (i != 3):

dq = dq + '.'

addr = addr &gt;&gt; 8

return dq



\# filter and format output

while 1:

\# Read messages from kernel pipe

try:

(task, pid, cpu, flags, ts, msg) = b.trace\_fields()

(\_tag, saddr\_hs, daddr\_hs, dport\_s) = msg.split("" "")

except ValueError:

\# Ignore messages from other tracers

continue



\# Ignore messages from other tracers

if \_tag != ""trace\_tcp4connect"":

continue



print(""%-6d %-12.12s %-16s %-16s %-4s"" % (pid, task,inet\_ntoa(int(saddr\_hs, 16)),inet\_ntoa(int(daddr\_hs, 16)),dport\_s))",Warm-Tea-403,1h0ukew,https://reddit.com/r/Python/comments/1h0ukew/error_use_of_undeclared_identifier_bpf_sk_lookup/,https://www.reddit.com/r/Python/comments/1h0ukew/error_use_of_undeclared_identifier_bpf_sk_lookup/,2024-11-27 03:08:34,0,0.14,0,0,2,0,0,False,False,True,False,False,Discussion,self,t3_1h0ukew
Python,Stock Etf Tracker,"having trouble with the dates being accuratly measured. LMK if anyone knows what the problem is

[https://colab.research.google.com/drive/1Lx4XVyRB8O7gSn9ezcWDhC0RS3Yd--61?usp=sharing](https://colab.research.google.com/drive/1Lx4XVyRB8O7gSn9ezcWDhC0RS3Yd--61?usp=sharing)",Ok-Network-74,1h0tr0k,https://reddit.com/r/Python/comments/1h0tr0k/stock_etf_tracker/,https://www.reddit.com/r/Python/comments/1h0tr0k/stock_etf_tracker/,2024-11-27 02:25:48,0,0.38,0,0,5,0,0,False,False,True,False,False,Discussion,self,t3_1h0tr0k
Python,Interface programming using abs in Python,"Hi everyone, I just wrote an article about using `abc`¬† for interface programming in python. abstract base classes (ABCs) provide a robust way to enforce contracts, ensuring consistency and reliability across implementation. It is essential for building scalable and maintainable systems. See the details here: [https://www.tk1s.com/python/interface-programming-in-python](https://www.tk1s.com/python/interface-programming-in-python) Hope you like it!",tuple32,1h0rkmn,https://reddit.com/r/Python/comments/1h0rkmn/interface_programming_using_abs_in_python/,https://www.reddit.com/r/Python/comments/1h0rkmn/interface_programming_using_abs_in_python/,2024-11-27 00:36:54,29,0.85,29,0,12,0,0,False,False,True,False,False,Tutorial,self,t3_1h0rkmn
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1h0qsi6,https://reddit.com/r/Python/comments/1h0qsi6/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1h0qsi6/wednesday_daily_thread_beginner_questions/,2024-11-27 00:00:09,9,1.0,9,0,3,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1h0qsi6
Python,"Build, ship and run containers is too slow for Python ‚Äî here‚Äôs what we do instead ","I wrote an article on the motivations for our custom Python dependency resolution flow and fast serverless stack with some of the engineering details behind it. Check it out :)

https://www.bauplanlabs.com/blog/build-ship-and-run-containers-is-too-slow-for-python-and-what-we-do-about-it",yoitsnate,1h0qd22,https://reddit.com/r/Python/comments/1h0qd22/build_ship_and_run_containers_is_too_slow_for/,https://www.reddit.com/r/Python/comments/1h0qd22/build_ship_and_run_containers_is_too_slow_for/,2024-11-26 23:39:40,38,0.8,38,0,31,0,0,False,False,True,False,False,Discussion,self,t3_1h0qd22
Python,Python.org entire download library is inaccessible right now,"I was at work and I was using pyenv to install a virtual environment. I was having issues and was needed to retry my installs pretty frequently. Then suddenly pyenv stopped being able to curl the xz tarball from the python.org download library with 403 return code. I tried on a different network, a different computer, downloading via browser, downloading via browser on my phone. All 403. I had my coworkers try to do the same with the same results. I'm in Seattle, WA so I had someone somewhere else in the world try and they were able to access from Arizona. It seems that the PNW can't download python for the time being.

Update: 
Seems like more regions are also down. Have tried accessing with a VPN to other US regions and countries and nothing.
Arizona person is also down now too

Update 2: it's back up as of 15:26 PST",TheHerosShade,1h0oxlt,https://reddit.com/r/Python/comments/1h0oxlt/pythonorg_entire_download_library_is_inaccessible/,https://www.reddit.com/r/Python/comments/1h0oxlt/pythonorg_entire_download_library_is_inaccessible/,2024-11-26 22:35:16,11,0.74,11,0,8,0,0,False,False,True,False,False,News,self,t3_1h0oxlt
Python,Anybody else all the sudden unable to access Python downloads at python.org?,"We have a number of jobs that download python distros from [python.org/ftp](http://python.org/ftp), and they just started failing due to Access Denied errors. Anybody else seeing this? Is this intentional? Everything in [https://www.python.org/downloads/source/](https://www.python.org/downloads/source/) is going to Access Denied

edit: Either¬†[python.org](http://python.org/)¬†got ransomeware'd or some admin pushed a bad config change. Could be infra issues too I suppose. Looks like that backlog card for saving a copy of the source for the versions we use to S3 and pulling from there just got moved to this sprint...

Issue here for tracking - [https://github.com/python/cpython/issues/127307](https://github.com/python/cpython/issues/127307)

  
edit edit: looks like it's back up again",britishbanana,1h0opoj,https://reddit.com/r/Python/comments/1h0opoj/anybody_else_all_the_sudden_unable_to_access/,https://www.reddit.com/r/Python/comments/1h0opoj/anybody_else_all_the_sudden_unable_to_access/,2024-11-26 22:25:37,46,0.87,46,0,19,0,0,False,False,True,False,False,Discussion,self,t3_1h0opoj
Python,"Promptic: ""requests"" for LLMs","Promptic aims to be the ""[requests](https://requests.readthedocs.io/en/latest/)"" of LLM development -- the most productive and pythonic way to build LLM applications. It leverages [LiteLLM][litellm], so you're never locked in to an LLM provider and can switch to the latest and greatest with a single line of code. Promptic gets out of your way so you can focus entirely on building features.

https://github.com/knowsuchagency/promptic

### At a glance

- üéØ Type-safe structured outputs with Pydantic
- ü§ñ Easy-to-build agents with function calling
- üîÑ Streaming support for real-time responses
- üíæ Built-in conversation memory
- üõ†Ô∏è Error handling and retries
- üîå Extensible state management

## Installation

```bash
pip install promptic
```

## Usage

### Basics

Functions decorated with `@llm` inject arguments into the prompt. You can customize the model, system prompt, and more. Most arguments are passed directly to [litellm.completion](https://docs.litellm.ai/docs/completion/input).

```python
from promptic import llm

@llm
def translate(text, target_language=""Chinese""):
    """"""Translate '{text}' to {target_language}""""""

print(translate(""Hello world!""))
# ÊÇ®Â•ΩÔºå‰∏ñÁïåÔºÅ

@llm(
    model=""claude-3-haiku-20240307"",
    system=""You are a customer service analyst. Provide clear sentiment analysis with key points.""
)
def analyze_sentiment(text):
    """"""Analyze the sentiment of this customer feedback: {text}""""""

print(analyze_sentiment(""The product was okay but shipping took forever""))
# Sentiment: Mixed/Negative
# Key points:
# - Neutral product satisfaction
# - Significant dissatisfaction with shipping time
```

### Structured Outputs

You can use Pydantic models to ensure the LLM returns data in exactly the structure you expect. Simply define a Pydantic model and use it as the return type annotation on your decorated function. The LLM's response will be automatically validated against your model schema and returned as a Pydantic object.

```python
from pydantic import BaseModel
from promptic import llm

class Forecast(BaseModel):
    location: str
    temperature: float
    units: str

@llm
def get_weather(location, units: str = ""fahrenheit"") -&gt; Forecast:
    """"""What's the weather for {location} in {units}?""""""

print(get_weather(""San Francisco"", units=""celsius""))
# location='San Francisco' temperature=16.0 units='Celsius'
```

Alternatively, you can use JSON Schema dictionaries for more low-level validation:

```python
from promptic import llm

schema = {
    ""type"": ""object"",
    ""properties"": {
        ""name"": {
            ""type"": ""string"",
            ""pattern"": ""^[A-Z][a-z]+$"",
            ""minLength"": 2,
            ""maxLength"": 20
        },
        ""age"": {
            ""type"": ""integer"",
            ""minimum"": 0,
            ""maximum"": 120
        },
        ""email"": {
            ""type"": ""string"",
            ""format"": ""email""
        }
    },
    ""required"": [""name"", ""age""],
    ""additionalProperties"": False
}

@llm(json_schema=schema, system=""You generate test data."")
def get_user_info(name: str) -&gt; dict:
    """"""Get information about {name}""""""

print(get_user_info(""Alice""))
# {'name': 'Alice', 'age': 25, 'email': 'alice@example.com'}
```

### Agents

Functions decorated with `@llm.tool` become tools that the LLM can invoke to perform actions or retrieve information. The LLM will automatically execute the appropriate tool calls, creating a seamless agent interaction.

```python
from datetime import datetime

from promptic import llm

@llm(model=""gpt-4o"")
def scheduler(command):
    """"""{command}""""""

@scheduler.tool
def get_current_time():
    """"""Get the current time""""""
    print(""getting current time"")
    return datetime.now().strftime(""%I:%M %p"")

@scheduler.tool
def add_reminder(task: str, time: str):
    """"""Add a reminder for a specific task and time""""""
    print(f""adding reminder: {task} at {time}"")
    return f""Reminder set: {task} at {time}""

@scheduler.tool
def check_calendar(date: str):
    """"""Check calendar for a specific date""""""
    print(f""checking calendar for {date}"")
    return f""Calendar checked for {date}: No conflicts found""

cmd = """"""
What time is it? 
Also, can you check my calendar for tomorrow 
and set a reminder for a team meeting at 2pm?
""""""

print(scheduler(cmd))
# getting current time
# checking calendar for 2023-10-05
# adding reminder: Team meeting at 2023-10-05T14:00:00
# The current time is 3:48 PM. I checked your calendar for tomorrow, and there are no conflicts. I've also set a reminder for your team meeting at 2 PM tomorrow.
```

### Streaming
The streaming feature allows real-time response generation, useful for long-form content or interactive applications:

```python
from promptic import llm

@llm(stream=True)
def write_poem(topic):
    """"""Write a haiku about {topic}.""""""

print("""".join(write_poem(""artificial intelligence"")))
# Binary thoughts hum,
# Electron minds awake, learn,
# Future thinking now.
```

### Error Handling and Dry Runs

Dry runs allow you to see which tools will be called and their arguments without invoking the decorated tool functions. You can also enable debug mode for more detailed logging.

```python
from promptic import llm

@llm(
    system=""you are a posh smart home assistant named Jarvis"",
    dry_run=True,
    debug=True,
)
def jarvis(command):
    """"""{command}""""""

@jarvis.tool
def turn_light_on():
    """"""turn light on""""""
    return True

@jarvis.tool
def get_current_weather(location: str, unit: str = ""fahrenheit""):
    """"""Get the current weather in a given location""""""
    return f""The weather in {location} is 45 degrees {unit}""

print(jarvis(""Please turn the light on and check the weather in San Francisco""))
# ...
# [DRY RUN]: function_name = 'turn_light_on' function_args = {}
# [DRY RUN]: function_name = 'get_current_weather' function_args = {'location': 'San Francisco'}
# ...
```

### Resiliency

`promptic` pairs perfectly with [tenacity](https://github.com/jd/tenacity) for handling rate limits, temporary API failures, and more.

```python
from tenacity import retry, wait_exponential, retry_if_exception_type
from promptic import llm
from litellm.exceptions import RateLimitError

@retry(
    wait=wait_exponential(multiplier=1, min=4, max=10),
    retry=retry_if_exception_type(RateLimitError)
)
@llm
def generate_summary(text):
    """"""Summarize this text in 2-3 sentences: {text}""""""

generate_summary(""Long article text here..."")
```

### Memory and State Management

By default, each function call is independent and stateless. Setting `memory=True` enables built-in conversation memory, allowing the LLM to maintain context across multiple interactions. Here's a practical example using Gradio to create a web-based chatbot interface:

```python
import gradio as gr
from promptic import llm

@llm(memory=True, stream=True)
def assistant(message):
    """"""{message}""""""

def predict(message, history):
    partial_message = """"
    for chunk in assistant(message):
        partial_message += str(chunk)
        yield partial_message

with gr.ChatInterface(title=""Promptic Chatbot Demo"", fn=predict) as demo:
    # ensure clearing the chat window clears the chat history
    demo.chatbot.clear(assistant.clear)

demo.launch()
```

For custom storage solutions, you can extend the `State` class to implement persistence in any database or storage system:

```python
import json
from promptic import State, llm

class RedisState(State):
    def __init__(self, redis_client):
        super().__init__()
        self.redis = redis_client
        self.key = ""chat_history""
    
    def add_message(self, message):
        self.redis.rpush(self.key, json.dumps(message))
    
    def get_messages(self, limit=None):
        messages = self.redis.lrange(self.key, 0, -1)
        return [json.loads(m) for m in messages][-limit:] if limit else messages
    
    def clear(self):
        self.redis.delete(self.key)


@llm(state=RedisState(redis_client))
def persistent_chat(message):
    """"""Chat: {message}""""""
```

* What My Project Does

Promptic aims to be the ""[requests](https://requests.readthedocs.io/en/latest/)"" of LLM development -- the most productive and pythonic way to build LLM applications. It leverages [LiteLLM][litellm], so you're never locked in to an LLM provider and can switch to the latest and greatest with a single line of code. Promptic gets out of your way so you can focus entirely on building features.

* Target Audience

Promptic is for anyone looking to build LLM applications in Python -- both casual and enterprise users.

[litellm]: https://github.com/BerriAI/litellm
",knowsuchagency,1h0lmbk,https://reddit.com/r/Python/comments/1h0lmbk/promptic_requests_for_llms/,https://www.reddit.com/r/Python/comments/1h0lmbk/promptic_requests_for_llms/,2024-11-26 20:16:36,34,0.78,34,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1h0lmbk
Python,Built a research automation API that replaces messy web scraping scripts,"Hey devs! Wanted to share a solution I built after getting frustrated with maintaining multiple scraping scripts.

**The Problem**:
- Different sites need different scraping approaches
- Sites change their structure frequently
- Managing rate limiting and proxies is a pain
- Selenium/Playwright maintenance headaches

**The Solution**:

Built a Python agent API that returns structured JSON for specific queries.

Example:

    import requests
    
    # Instead of complex scraping logic
    response = requests.post('&lt;endpoint&gt;', {
        'query': 'find a therapist in Toronto that does virtual sessions and specializes in ADHD',
        'start_url': (optional)
    })
    
    # Get clean, structured JSON back
    result = response.json()

    {
            jobId: ""job_123456"",
            status: ""completed"",
            results: [
              {
                name: ""Dr. Emily Chen"",
                specialization: ""ADHD, Anxiety"",
                location: ""New York"",
                virtualSessions: true,
                availability: ""Mon, Wed, Fri"",
              },
              {
                name: ""Michael Thompson, MSW"",
                specialization: ""ADHD, Depression"",
                location: ""New York"",
                virtualSessions: true,
                availability: ""Tue, Thu, Sat"",
              },
              {
                name: ""Sarah Patel, PhD"",
                specialization: ""ADHD, Cognitive Behavioral Therapy"",
                location: ""New York"",
                virtualSessions: true,
                availability: ""Mon, Tue, Thu"",
              },
            ],
            sources: [""https://mentalhealthmatch.com""],
         }

Currently building the **[beta](https://query-rho.vercel.app/)** - would love feedback from fellow devs about what research / query tasks you'd want to automate.

Also open sourcing some tools as I build this:

* https://github.com/addy999/omniparser-api

EDIT

* Added in start_url
* Added in response example
* Added in sources",spacespacespapce,1h0kph4,https://reddit.com/r/Python/comments/1h0kph4/built_a_research_automation_api_that_replaces/,https://www.reddit.com/r/Python/comments/1h0kph4/built_a_research_automation_api_that_replaces/,2024-11-26 19:40:08,7,0.67,7,0,5,0,0,False,False,True,False,False,Resource,self,t3_1h0kph4
Python,How important is software testing to you as a Python developer? üêçü§î,"Hey Pythonistas! üëã

In the world of software development, we often talk about shiny new frameworks, libraries, and cool features ‚Äì but what about software testing?

I‚Äôm curious:

- Where does testing sit on your list of priorities?
- Do you use tools like Pytest, Unittest, or even CI/CD pipelines to automate your testing?
- Do you feel like testing helps you code faster and better ‚Äì or is it more of a chore for you?

With Python, writing tests is so straightforward it‚Äôs almost fun (almost, right? üòÖ). Personally, I find that testing not only reduces bugs but also boosts my confidence in the code, especially with larger projects.

What about you? Do you test everything religiously, just the critical stuff, or are you more like, ‚ÄúTesting? Never heard of it.‚Äù

Let‚Äôs chat about best practices, tools, and your experiences ‚Äì we might all learn something new! üöÄ

Looking forward to hearing your thoughts. üôå",ah3n0,1h0kjcy,https://reddit.com/r/Python/comments/1h0kjcy/how_important_is_software_testing_to_you_as_a/,https://www.reddit.com/r/Python/comments/1h0kjcy/how_important_is_software_testing_to_you_as_a/,2024-11-26 19:33:21,0,0.33,0,0,10,0,0,False,False,True,False,False,Discussion,self,t3_1h0kjcy
Python,What do you guys think of this Python course?,What do you guys think of 100 days of python by dr. angela yu? im looking to get into data science/engineering through learning these skills n python. or do u guys have/suggest any better courses? :),Gloomy-Profession-19,1h0ij26,https://reddit.com/r/Python/comments/1h0ij26/what_do_you_guys_think_of_this_python_course/,https://www.reddit.com/r/Python/comments/1h0ij26/what_do_you_guys_think_of_this_python_course/,2024-11-26 18:13:18,0,0.32,0,0,16,0,0,False,False,True,False,False,Discussion,self,t3_1h0ij26
Python,I made a Report Generation and Project Management Tool [Django Rest],"Hi, I recently released my open-source project APTRS (Automated Penetration Testing Reporting System). It is an automated pentest report generation application built with the Django Rest framework.

  
**What it does:**

* Enables users to create and manage projects while tracking their statuses. 
* Management of customers and their respective projects, as well as any associated security vulnerabilities. 
* Users can generate project reports in Word using a custom template, as well as in PDF and Excel formats.
* Additionally, the application allows users to use the WYSIWYG CKEDITOR to input data and document vulnerabilities for report creation.

  
**Target Audience:**

* Individual Security Consultant
* Cyber Security Companies to manage projects and clients and create a report 

Many similar tools exist, but most Python-based options do not support custom word templates. APTRS stands out by focusing on company needs with features for project management and status tracking. It also plans to introduce customer login functionality, a feature lacking in other open-source tools.

**Tech Stack:**

* Python 3.9+ with Django Rest Framework
* Postgresql
* Redis
* Vite + React Frontend

  
Here's the source:¬†[APTRS](https://github.com/APTRS/APTRS)

  
In case you're interested, I have demo instances hosted in the cloud available at: [https://live.aptrs.com/](https://live.aptrs.com/)  (Default creds are¬†[sourav.kalal@aptrs.com](mailto:sourav.kalal@aptrs.com)¬†&amp; I-am-Weak-Password-Please-Change-Me) - Some APIs are disabled on Demo for security reasons. ",Ano_F,1h0g0us,https://reddit.com/r/Python/comments/1h0g0us/i_made_a_report_generation_and_project_management/,https://www.reddit.com/r/Python/comments/1h0g0us/i_made_a_report_generation_and_project_management/,2024-11-26 16:32:23,6,0.72,6,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1h0g0us
Python,Sou iniciante n mundo da progrma√ß√£o,O que voc√™s que j√° tem mais experi√™ncia acham que deve estudar e por onde devo come√ßar no estudo de Python. Se poss√≠vel indique conteudo de leitura.,Confident_Coat_5595,1h0aomx,https://reddit.com/r/Python/comments/1h0aomx/sou_iniciante_n_mundo_da_progrma√ß√£o/,https://www.reddit.com/r/Python/comments/1h0aomx/sou_iniciante_n_mundo_da_progrma√ß√£o/,2024-11-26 12:27:19,0,0.17,0,0,8,0,0,False,False,True,False,False,Discussion,self,t3_1h0aomx
Python,Goal Screener (my first python app) ,"* **What My Project Does**
   * it takes your quests/goals as main and side and a picture, then it simply draw them on it and make it the background picture so you can visualize your quests, besides that in the app you can see the list of your goals and track one of them.
* **Target Audience:**
   * this project was meant for my own needs and to help some people boost their productivity to reach their goals
* **Comparison**:
   * i really didn't look that much for comparison but i think there is some extensions or widget to do that especially on phone, no one  draws on the background l  think, the idea is that backgrounds let you see your goals more often that's why i did it this way

here's the link to the code [github ](https://github.com/L4z3x/goal_screener/) if anyone's interested, and remember to give me your feedback so i can develop my skills for future projects",L4z3x,1h064ct,https://reddit.com/r/Python/comments/1h064ct/goal_screener_my_first_python_app/,https://www.reddit.com/r/Python/comments/1h064ct/goal_screener_my_first_python_app/,2024-11-26 07:12:46,15,0.82,15,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1h064ct
Python,Can Your Networking Library Do This,"I've been using a networking library for a while and getting some value out it. Especially when I'm dealing with complex collections of process, i.e. distributed processing. It turns out that some wacky ideas actually work, and as far as I know, dont work with any other tools. Here is the repo;

[Can your networking library do this](https://github.com/mr-ansar/can-your-networking-library-do-this)

This repo demonstrates what you might do once you have OSI application layering and a pretty fresh approach to network addressing, i.e. not IPv4, IPv6 or socket id or request id or channel id.

Please find a link to a blog in the README that describes what to do with the modules. Does anyone claim that there is an equivalent, or better? Does anyone think that this kind of capability is missing from current toolsets?",Public_Being3163,1h04rcp,https://reddit.com/r/Python/comments/1h04rcp/can_your_networking_library_do_this/,https://www.reddit.com/r/Python/comments/1h04rcp/can_your_networking_library_do_this/,2024-11-26 05:43:17,0,0.36,0,0,11,0,0,False,False,True,False,False,Discussion,self,t3_1h04rcp
Python,Im getting an error on the script bellow,"The error:

File ""/home/kali1/reddit\_bypass.py"", line 6

""User-Agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"" 1

\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^

SyntaxError: invalid syntax. Perhaps you forgot a comma?

My script:

import requests

def bypass\_reddit\_login(username):

url = ""[https://www.reddit.com/login](https://www.reddit.com/login)""

headers = {

""User-Agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36""

}

data = {

""username"": username,

""password"": """" # Empty password field

}

response = requests.post(url, headers=headers, data=data)

if response.status\_code == 200:

print(""Login successful!"")

else:

print(""Login failed. Check your username or internet connection."")

if \_\_name\_\_ == ""\_\_main\_\_"":

username = input(""Enter your Reddit username: "")

bypass\_reddit\_login(username)",Quick_Elk3813,1h0259u,https://reddit.com/r/Python/comments/1h0259u/im_getting_an_error_on_the_script_bellow/,https://www.reddit.com/r/Python/comments/1h0259u/im_getting_an_error_on_the_script_bellow/,2024-11-26 03:18:09,0,0.24,0,0,6,0,0,False,False,True,False,False,Meta,self,t3_1h0259u
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1gzy1hi,https://reddit.com/r/Python/comments/1gzy1hi/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1gzy1hi/tuesday_daily_thread_advanced_questions/,2024-11-26 00:00:11,2,0.76,2,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gzy1hi
Python,nxt-python and pyusb on OpenSuse Linux,"I have a mindstorm NXT lying around in the house that my kinds used for school several years ago.  I tought of interfacing it with python.  I downloaded the nxt-python.  It uses pyusb.  When I tested it out with the tutorial from [https://ni.srht.site/nxt-python/latest/handbook/tutorial.html](https://ni.srht.site/nxt-python/latest/handbook/tutorial.html) and tried to locate the device using the following code:

    #!/usr/bin/python3
    """"""NXT-Python tutorial: use touch sensor.""""""
    import time
    
    import nxt.locator
    import nxt.sensor
    import nxt.sensor.generic
    
    with nxt.locator.find() as b:
        
    # Get the sensor connected to port 1, not a digital sensor, must give the sensor
        
    # class.
        mysensor = b.get_sensor(nxt.sensor.Port.S1, nxt.sensor.generic.Touch)
        
    # Read the sensor in a loop (until interrupted).
        print(""Use Ctrl-C to interrupt"")
        while True:
            value = mysensor.get_sample()
            print(value)
            time.sleep(0.5)

and I get an error on the nxt.locator.find().  Any pointers, anyone?   The following is the error I am getting:

`usb.core.USBError: [Errno 13] Access denied (insufficient permissions)`

`Here is the complete log.  I redacted the userame with xxxxxx.`

      File ""/home/xxxxxx/workspace/nxt/play/locate.py"", line 9, in &lt;module&gt;
        with nxt.locator.find() as b:
             ~~~~~~~~~~~~~~~~^^
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/nxt/locator.py"", line 213, in find
        brick = next(iter_bricks(), None)
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/nxt/locator.py"", line 191, in iter_bricks
        for brick in backend.find(name=name, host=host, **filters):
                     ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/nxt/backend/usb.py"", line 107, in find
        brick = sock.connect()
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/nxt/backend/usb.py"", line 61, in connect
        self._dev.reset()
        ~~~~~~~~~~~~~~~^^
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/usb/core.py"", line 959, in reset
        self._ctx.managed_open()
        ~~~~~~~~~~~~~~~~~~~~~~^^
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/usb/core.py"", line 113, in wrapper
        return f(self, *args, **kwargs)
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/usb/core.py"", line 131, in managed_open
        self.handle = self.backend.open_device(self.dev)
                      ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/usb/backend/libusb1.py"", line 804, in open_device
        return _DeviceHandle(dev)
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/usb/backend/libusb1.py"", line 652, in __init__
        _check(_lib.libusb_open(self.devid, byref(self.handle)))
        ~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      File ""/home/xxxxxx/anaconda3/envs/nxt/lib/python3.13/site-packages/usb/backend/libusb1.py"", line 604, in _check
        raise USBError(_strerror(ret), ret, _libusb_errno[ret])
    usb.core.USBError: [Errno 13] Access denied (insufficient permissions)
    
    --end--
    ",thuruthy,1gztwtn,https://reddit.com/r/Python/comments/1gztwtn/nxtpython_and_pyusb_on_opensuse_linux/,https://www.reddit.com/r/Python/comments/1gztwtn/nxtpython_and_pyusb_on_opensuse_linux/,2024-11-25 21:06:55,1,0.57,1,0,1,0,0,False,False,True,False,False,Discussion,self,t3_1gztwtn
Python,Improving GroupBy.map with Dask and Xarray,"I'm a Dask contributor and wanted to share some recent improvements on using Dask + Xarray for working with large geo datasets.

Over the past couple months, there's been more work on the array integration for Dask, with a focus on geospatial workloads. Running GroupBy-Map patterns backed by Dask arrays is essential for a number of tasks when working with large climate/weather data, like detrending or zonal averaging. The latest version of Dask uses a new algorithm for selecting data that‚Äôs more robust and we're already seeing improved performance.

We are actively working on improvements and are interested in feedback. Feel free to [reach out](https://docs.dask.org/en/stable/support.html#asking-for-help) and let us know if things aren't working for you.

Blog post: [https://docs.coiled.io/blog/dask-detrending.html](https://docs.coiled.io/blog/dask-detrending.html)",already-raining,1gznukm,https://reddit.com/r/Python/comments/1gznukm/improving_groupbymap_with_dask_and_xarray/,https://www.reddit.com/r/Python/comments/1gznukm/improving_groupbymap_with_dask_and_xarray/,2024-11-25 17:07:14,13,0.84,13,0,0,0,0,False,False,True,False,False,News,self,t3_1gznukm
Python,What do you think of front-end python libraries such as Reflex (old Pynecone)?,"As a doctor, Python has been really useful for me in a bunch of ways. Lately, I\`ve been trying to learn web development, saw some Flask/Jinja/HTML/CSS tutorials, but doing anything without javascript seems very clunky and unnatural. 

  
Then, I saw this library called REFLEX (old Pynecone). Seems very beautiful and powerful.. 



The thing is. Is it worth for me to use my limited time to learn a framework like this or should I just go ahead and learn Javascript/React already?

  
What do you guys think? I won\`t be a professional developer.",Sones_d,1gznoub,https://reddit.com/r/Python/comments/1gznoub/what_do_you_think_of_frontend_python_libraries/,https://www.reddit.com/r/Python/comments/1gznoub/what_do_you_think_of_frontend_python_libraries/,2024-11-25 17:00:58,16,0.8,16,0,40,0,0,False,False,True,False,False,Discussion,self,t3_1gznoub
Python,"What do you think is the most visually appealing or 'good-looking' Python GUI library, and why?","I‚Äôm looking for a GUI library that provides a sleek and modern interface with attractive, polished design elements. Ideally, it should support custom styling and look aesthetically pleasing out-of-the-box. Which libraries would you recommend for creating visually appealing desktop applications in Python?",UnemployedTechie2021,1gzmv9p,https://reddit.com/r/Python/comments/1gzmv9p/what_do_you_think_is_the_most_visually_appealing/,https://www.reddit.com/r/Python/comments/1gzmv9p/what_do_you_think_is_the_most_visually_appealing/,2024-11-25 16:28:17,248,0.94,248,0,124,0,0,False,False,True,False,False,Discussion,self,t3_1gzmv9p
Python,Make your log spark joy with a single line,"Hey everyone!

I'm excited to reveal **Sane Rich Logging**‚Äîa simple one-liner for beautiful, usable logging, its just a set of defaults for regular logging.

### What My Project Does
**Sane Rich Logging** enhances Python's built-in `logging` by adding colorful, human-readable console output (via [Rich](https://rich.readthedocs.io/en/stable)) and automatic file rotation. Just call `setup_logging()`, nothing else!

### Target Audience
It's for developers who want a hassle-free logging setup. Whether it's a toy project or a production system, **Sane Rich Logging** adds sensible defaults with minimal configuration.

### Comparison
Unlike **loguru** or **structlog**, **Sane Rich Logging** builds on Python's standard `logging`‚Äîno new API to learn. It keeps your existing setup and simply enhances it with better readability and easy file management, works as a drop-in addition to existing code.

### Features
- **Colorful Logs**: Engaging, colorful console output.
- **Simple Setup**: One function to start (`setup_logging()`).
- **Log Rotation**: Automatic, configurable file management.
- **Env Variable Config**: Adjust via `LOG_LEVEL`, `LOG_FILE`, etc.

### Get Started
Install from PyPI and use like this:

```python
from sane_rich_logging import setup_logging
import logging

setup_logging()
logging.debug(""This is a debug message"")
```

### Check It Out
- **PyPI**: [sane-rich-logging](https://pypi.org/project/sane-rich-logging/)
- **GitHub**: [sane-rich-logging](https://github.com/jakob1379/sane-rich-logging)

Any feedback is much appreciated!
",jakob1379,1gzjft6,https://reddit.com/r/Python/comments/1gzjft6/make_your_log_spark_joy_with_a_single_line/,https://www.reddit.com/r/Python/comments/1gzjft6/make_your_log_spark_joy_with_a_single_line/,2024-11-25 14:00:10,0,0.39,0,0,10,0,0,False,False,True,False,False,Showcase,self,t3_1gzjft6
Python,Python scrip to standalone GUI .exe dependency issues. Tried several modules.,"It always throws some module missing while comiling or after running the exe file. tried nuitka, auto-py-to-exe and few others.... here's the list of library my script uses: 

    import sys
    import os
    from PySide6.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, 
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†QPushButton, QFileDialog, QWidget, QLabel, QComboBox, 
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†QCheckBox, QTreeWidget, QTreeWidgetItem, QTextEdit, 
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†QColorDialog, QMessageBox, QDialog, QFormLayout, QScrollArea,
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†QSpinBox)
    from PySide6.QtGui import QAction, QColor, QDragEnterEvent, QDropEvent
    from PySide6.QtCore import Qt, QMimeData
    import geopandas as gpd
    import matplotlib.pyplot as plt
    from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
    from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
    import contextily as ctx
    ",Alone_Swimming_3705,1gzh717,https://reddit.com/r/Python/comments/1gzh717/python_scrip_to_standalone_gui_exe_dependency/,https://www.reddit.com/r/Python/comments/1gzh717/python_scrip_to_standalone_gui_exe_dependency/,2024-11-25 11:59:00,0,0.5,0,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1gzh717
Python,Best Android Python IDE,"I am looking for a Python IDE for my tablet to develop apps on the go, but I couldnt find anything that would allow me to work with virtual enviroments containing older Python versions like 3.9. This feature is crucial for me as I work with libraries that are compatible with these older versions. An ability to organize the files in a hierarchical structure would be also nice.

Any suggestions apprieciated!",WhiteFrost365,1gzfxw5,https://reddit.com/r/Python/comments/1gzfxw5/best_android_python_ide/,https://www.reddit.com/r/Python/comments/1gzfxw5/best_android_python_ide/,2024-11-25 10:34:00,0,0.4,0,0,14,0,0,False,False,True,False,False,Discussion,self,t3_1gzfxw5
Python,Inviting contributors to an open source project - AI Dashboard Builder,"**Introducing the AI Dashboard Builder**

[pnmartinez/ai-dashboard-builder: Throw your data, let AI make a dashboard](https://github.com/pnmartinez/ai-dashboard-builder)

[AI Dashboard Builder](https://github.com/pnmartinez/ai-dashboard-builder) is an open-source tool designed to simplify the creation of data dashboards using AI. Our motto is: *""Throw your data, let AI make a dashboard.""* By leveraging Large Language Models (LLMs), the project automates the generation of intuitive and interactive dashboards from your datasets.

**What My Project Does**

The AI Dashboard Builder automates the process of creating dashboards by:

* **KPI-Directed Analysis**: Prioritizes your key performance indicators within the dataset using AI.
* **Data Preview and Filtering**: Offers an import wizard to preview data and filter by columns or rows.
* **Dynamic Filters**: Uses AI to infer the most relevant filters for your data dynamically.
* **Custom LLM Support**: Allows integration with your preferred third-party LLMs or local models via Ollama.
* **Reusability**: Generates reusable ""viz\_spec"" JSON files for each dashboard, stored in the ""llm\_responses"" folder. Each visualization includes a ""Code"" tab for easy reproduction elsewhere.

**Target Audience**

This project is ideal for:

* **Data Scientists and Analysts**: Looking to streamline the dashboard creation process.
* **Developers**: Interested in integrating AI-powered visualization tools into their projects.
* **LLM Enthusiasts**: Who want to explore practical applications of language models in data visualization.
* **Privacy-Conscious Users**: Offering the ability to use local LLMs ensures that private data remains secure.

Whether for production environments or as a learning tool, the AI Dashboard Builder caters to both professional and educational purposes.

**Comparison with Existing Alternatives**

While there are many ""data-science-automated with AI"" projects out there, our AI Dashboard Builder stands out due to its:

* **Open Source and Community-Driven Approach**: We believe in collaborative development and welcome contributions from the community.
* **Simplicity**: The project focuses on ease of use and maintains a clean, understandable codebase.
* **Privacy-Friendly Features**: By supporting local LLMs through Ollama, users can keep their data private without relying on external services.
* **Flexibility**:
   * **Customizable AI Interactions**: Users can direct the AI to focus on specific KPIs.
   * **Versatile Data Handling**: The import wizard and dynamic filters make data manipulation straightforward.
   * **Integration Capabilities**: Supports various LLMs and provides reusable code snippets for broader applicability.

**Join Us**

We are seeking contributors who have experience with:

* **Python/Plotly**: To enhance the functionality and user experience of the dashboards.
* **Large Language Models (LLMs)**: To improve AI prompting strategies and performance.
* **Data Visualization Best Practices**: To make the dashboards more intuitive and user-friendly.

If you're passionate about AI, data visualization, and open-source collaboration, we'd love for you to join us in advancing this project!

[GitHub Repository: pnmartinez/ai-dashboard-builder](https://github.com/pnmartinez/ai-dashboard-builder)

Thank you for your interest, and we look forward to your contributions!",nava_7777,1gzflho,https://reddit.com/r/Python/comments/1gzflho/inviting_contributors_to_an_open_source_project/,https://www.reddit.com/r/Python/comments/1gzflho/inviting_contributors_to_an_open_source_project/,2024-11-25 10:09:41,0,0.46,0,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gzflho
Python,Generate a gradient between 2 colors in python.,"Saving this here for future people. This method relies on a library i made called [hueforge](https://github.com/Schkimansky/Hueforge):

Installation: pip install hueforge  
Code:

    from hueforge import Color
    
    starting_color = Color('red')  # You can use other color formats. to see all check the readme file
    ending_color = Color('orange red')
    print(starting_color.gradient(to=ending_color, steps=5))",Tall_Coffee_1644,1gzdra0,https://reddit.com/r/Python/comments/1gzdra0/generate_a_gradient_between_2_colors_in_python/,https://www.reddit.com/r/Python/comments/1gzdra0/generate_a_gradient_between_2_colors_in_python/,2024-11-25 07:51:17,9,0.63,9,0,18,0,0,False,False,True,False,False,Resource,self,t3_1gzdra0
Python,I cant find the logic error in my code,"import random



a1 = random.randint(1,3)





score\_p = 0

score\_c = 0



player = input(""Choose rock, paper, Or scissors "")



if player == ""rock"":

if a1 == 1:

print(""Tie"")

player = input(""Choose rock, paper, Or scissors "")

elif a1 == 2:

print(""Computer chose paper, one point to computer"")

score\_c += 1

player = input(""Choose rock, paper, Or scissors "")

else :

print(""Computer chose scissors, one point to player"")

score\_p += 1

player = input(""Choose rock, paper, Or scissors "")

if score\_p == 2:

print(""Player Wins the game"")





if score\_c == 2:

print(""Computer wins"")













if player == ""paper"":

if a1 == 2:

print(""Tie"")

player = input(""Choose rock, paper, Or scissors "")

elif a1 == 3:

print(""Computer chose scissors, one point to computer"")

score\_c += 1

player = input(""Choose rock, paper, Or scissors "")

else:

print(""Computer chose rock, one point to player "")

score\_p += 1

player = input(""Choose rock, paper, Or scissors "")

if score\_p == 2:

print(""Player Wins the game"")





if score\_c == 2:

print(""Computer wins"")







if player == ""scissors"":

if a1 == 3:

print(""Tie"")

player = input(""Choose rock, paper, Or scissors "")

elif a1 == 1:

print(""Computer chose rock , one point to computer"")

score\_c += 1

player = input(""Choose rock, paper, Or scissors "")

else :

print(""Computer chose paper, one point to player "")

score\_p += 1

player = input(""Choose rock, paper, Or scissors "")

if score\_p == 2:

print(""Player Wins the game"")





if score\_c == 2:

print(""Computer wins"")















",PristineCharity2972,1gzbkmr,https://reddit.com/r/Python/comments/1gzbkmr/i_cant_find_the_logic_error_in_my_code/,https://www.reddit.com/r/Python/comments/1gzbkmr/i_cant_find_the_logic_error_in_my_code/,2024-11-25 05:24:35,0,0.2,0,0,9,0,0,False,False,True,False,False,Discussion,self,t3_1gzbkmr
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1gz5fou,https://reddit.com/r/Python/comments/1gz5fou/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1gz5fou/monday_daily_thread_project_ideas/,2024-11-25 00:00:08,10,0.86,10,0,2,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gz5fou
Python,Multipython: Python 2.7 and 3.5 to 3.14 multi-version Docker image for Tox tests and CI/CD,"Hi r/Python, for those who maintains projects for multiple Python versions (including reached end-of-life) and tired of waiting for pyenv builds, there's now a [Docker image](https://hub.docker.com/r/makukha/multipython) with pre-built pyenv versions.

**What My Project Does**

Reduce build time and lines of code in multi-version Tox testing setups.

* CPython 2.7, 3.5, 3.6, 3.7, 3.8, 3.9, 3.10, 3.11, 3.12, 3.13, 3.13 (free threading), 3.14 symlinked to `pythonX.Y`
* Includes latest patch versions for stable and pre-release branches
* Ready to use with Tox (included) and in CI/CD pipelines
* Image itself is tested

**Target Audience**

Maintainers of multi-Python projects, DevOps engineers, QA engineers.

**Comparison**

Existing alternatives don't provide that many Python versions:

* Github Actions (does not support Python 2.7 and 3.13 free threading)
* [divio/multi-python](https://github.com/divio/multi-python) (Apt-managed CPython 3.7 to 3.12 from deadsnakes PPA)
* [dhermes/python-multi](https://github.com/dhermes/python-multi) (pyenv-managed CPython 3.8 to 3.12, PyPy 3.10)
* [vicamo/pyenv](https://hub.docker.com/r/vicamo/pyenv) (not supported for 2 years)

**Feedback**

GitHub: [makukha/multipython](https://github.com/makukha/multipython)

Looking for your feedback, hints, alternatives, and improvement ideas!",mmakukha,1gz3pkh,https://reddit.com/r/Python/comments/1gz3pkh/multipython_python_27_and_35_to_314_multiversion/,https://www.reddit.com/r/Python/comments/1gz3pkh/multipython_python_27_and_35_to_314_multiversion/,2024-11-24 22:40:33,4,0.65,4,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gz3pkh
Python,I Wrote a Guide to Simulation in Python with SimPy,"Hi folks,

I wrote a guide on discrete-event simulation with [SimPy](https://simpy.readthedocs.io/en/latest/), designed to help you learn how to build simulations using Python. Kind of like the official documentation but on steroids.

I have used SimPy personally in my own career for over a decade, it was central in helping me build a [pretty successful engineering career](https://www.reddit.com/r/MechanicalEngineering/comments/1gh8at0/my_13_year_nontraditional_meche_career_journey/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button). Discrete-event simulation is useful for modelling real world industrial systems such as factories, mines, railways, etc.

My latest venture is teaching others all about this.

If you do get the guide, I‚Äôd really appreciate any feedback you have. Feel free to drop your thoughts here in the thread or DM me directly!

Here‚Äôs the link to get the guide: [https://simulation.teachem.digital/free-simulation-in-python-guide](https://simulation.teachem.digital/free-simulation-in-python-guide)

For full transparency, why do I ask for your email?

Well I‚Äôm working on a full course following on from my previous [Udemy course on Python](https://www.udemy.com/course/python-for-engineers-scientists-and-analysts/?referralCode=8E30A5C432085F42D090). This new course will be all about real-world modelling and simulation with SimPy, and I‚Äôd love to send you keep you in the loop via email. If you found the guide helpful you would might be interested in the course. That said, you‚Äôre completely free to hit ‚Äúunsubscribe‚Äù after the guide arrives if you prefer.",bobo-the-merciful,1gz3bgp,https://reddit.com/r/Python/comments/1gz3bgp/i_wrote_a_guide_to_simulation_in_python_with_simpy/,https://www.reddit.com/r/Python/comments/1gz3bgp/i_wrote_a_guide_to_simulation_in_python_with_simpy/,2024-11-24 22:22:55,35,0.82,35,0,33,0,0,False,False,True,False,False,Tutorial,self,t3_1gz3bgp
Python,I made a Spotify ‚Üí YouTube Music converter that doesn't need API keys! [GUI],"Hey r/python! After Spotify decided to make their mobile app practically unusable for free users, my friend u/zakede and I decided to switch to YT Music. With our huge libraries, we needed something to convert our playlists, so we made this. It works with a Web GUI (made in FastHTML), and did I mention you don't need any API or OAuth keys?

**What it does:**

* Transfers your Spotify playlists/albums/liked songs to YouTube Music
* Has a simple Web GUI
* Better song search than the default YouTube one (at least in my testing)
* No API keys needed

**Target Audience:** This is for anyone who:

* Is switching from Spotify to YouTube Music
* Wants to maintain libraries on both platforms (Library sync is on the roadmap)
* Is tired of copying playlists manually
* Doesn't want to mess with API keys

**How it's different:** Most existing tools either:

* Require you to get API keys and do OAuth (which is currently [broken](https://github.com/sigma67/ytmusicapi/issues/676) for YT Music)
* Are online services that are slow and have low limits (the one I tried only allowed 150 songs per playlist and a total of 5 playlists)
* Are CLI-only

Here's the source: [spotify-to-ytm](https://github.com/Kan1shak/spotify-to-ytm)

Would love to hear your thoughts! Let me know if you try it out",Kanishak404,1gz2vhf,https://reddit.com/r/Python/comments/1gz2vhf/i_made_a_spotify_youtube_music_converter_that/,https://www.reddit.com/r/Python/comments/1gz2vhf/i_made_a_spotify_youtube_music_converter_that/,2024-11-24 22:03:42,119,0.94,119,0,10,0,0,False,False,True,False,False,Showcase,self,t3_1gz2vhf
Python,Pythonic API for POSIX Named Semaphores,"**What My Project Does:**

Hi!

I wrote¬†[named\_semaphores](https://pypi.org/project/named_semaphores/)¬†a small Python package that provides a pythonic API to POSIX Named Semaphores.

**Key Features:**

* **Named Semaphores**: Handle POSIX IPC named semaphores with ease.
* **Pythonic API**: Similar to Python's built-in¬†`threading.Semaphore`¬†for familiarity.
* **Flexible Creation**: Choose how to handle existing semaphores (`RAISE_IF_EXISTS`,¬†`LINK_OR_CREATE`, etc.).
* **Timeouts**: Optionally specify timeouts for acquiring semaphores (platform-dependent).
* **Automatic Cleanup**: Semaphore can be automatically unlinked when the object is deleted.

**Target Audience:**

Anyone dealing with access to limited resources by different Python programs that are not directly connected. For example, limiting API requests to a AWS Bedrock service between FastAPI workers.

**Comparison with Existing Alternatives:**

It wraps around existing library¬†`posix_ipc`, but adds some features such as automatic unlinking, and an API more similar to¬†`threading.Semaphore`. It also improves the documentation by complete docstrings and typing annotations (the C bindings of the¬†`posix_ipc`¬†library does not provide type hints or docstrings).

**How to Get Started:**

Install from Pypi: [https://pypi.org/project/named\_semaphores/](https://pypi.org/project/named_semaphores/)

Feel free to check out the¬†[Github Repository](https://github.com/johacks/named-semaphores)¬†and/or open any issues. Thanks!",johacks_,1gz2fcn,https://reddit.com/r/Python/comments/1gz2fcn/pythonic_api_for_posix_named_semaphores/,https://www.reddit.com/r/Python/comments/1gz2fcn/pythonic_api_for_posix_named_semaphores/,2024-11-24 21:44:26,6,0.73,6,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gz2fcn
Python,Dungeons and Dragon's Character Generator Code,"I have been working on a Dungeon and Dragons's Character Generator in python for months. If you want a percentage I would say 85% done (only because additional info needs added! It works just fine!)

After about 600 random characters flawlessly made (flawlessly as in I made 600 and the code didn't bug out once), I wanted to get community input and maybe make some for others, so I can start stresstesting that portion of code.

Here's a vague idea how it works:
Character provides Character name, player name and player level and whether they wanna provide Character info. There are follow ups based on the response, but in the end it will PyPDF write to a fillable Character sheet and create your character, and for abilities too long to put on the sheet, the ability says (see notes) and a Note.txt file is made for that character/playername.

Edit: The GitHub URL for the repository is:
https://github.com/JJNara39/dndcode/tree/main/dnd-post-split/Multi-Class

Only the files in that repository.",Nara39,1gyv85s,https://reddit.com/r/Python/comments/1gyv85s/dungeons_and_dragons_character_generator_code/,https://www.reddit.com/r/Python/comments/1gyv85s/dungeons_and_dragons_character_generator_code/,2024-11-24 16:42:24,24,0.82,24,0,29,0,0,False,False,True,False,False,Discussion,self,t3_1gyv85s
Python,Sparx maths python bot ,Can anybody with good python knowledge perchance try to make a python program which completes your Sparx homework at  sparxmaths.uk and fills in all the questions etc,Own-Background2283,1gyueei,https://reddit.com/r/Python/comments/1gyueei/sparx_maths_python_bot/,https://www.reddit.com/r/Python/comments/1gyueei/sparx_maths_python_bot/,2024-11-24 16:08:02,0,0.21,0,0,3,0,0,False,False,True,False,False,Tutorial,self,t3_1gyueei
Python,[OC] (Dooit V3) A very customizable TUI Todo Manager!,"

**What My Project Does:**

Dooit is a TUI based todo manager app which gives you a nice user interface to organize your tasks. Unlike other applications, dooit runs directly in your terminal!

It tries to be function and customizable at the same time



**Key Features:**

* An interactive &amp; beautiful UI
* Fully customizable, you can configure your bar, your colors and how everything is displayed!
* Extensible, python config file allows you to do as much as you like!
* Vim like keybindings
* Topicwise separated Todo Lists (With branching)

  
**Target Audience:**

  
Anyone who uses the terminal!

  
**Comparison with Existing Alternatives:**

There are definitely a lot of options out there but I didnt find anyone which fulfilled all my requirements



**How  to Get Started:**

  
Github Link: [Dooit](https://github.com/dooit-org/dooit)

Get started with the [Dooit Docs](https://dooit-org.github.io/dooit/)",otaku_____,1gysoo4,https://reddit.com/r/Python/comments/1gysoo4/oc_dooit_v3_a_very_customizable_tui_todo_manager/,https://www.reddit.com/r/Python/comments/1gysoo4/oc_dooit_v3_a_very_customizable_tui_todo_manager/,2024-11-24 14:53:03,24,0.92,24,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1gysoo4
Python,"Benchmark: DuckDB, Polars, Pandas, Arrow, SQLite, NanoCube on filtering / point queryies ","While working on the [NanoCube project](https://github.com/nanocubeai/nanocube), an in-process OLAP-style query engine written in Python, I needed a baseline **performance comparison** against the most prominent in-process data engines: DuckDB, Polars, Pandas, Arrow and SQLite. I already had a comparison with Pandas, but now I have it for all of them. My findings:

* A purpose-built technology (here OLAP-style queries with NanoCube) written in Python can be faster than general purpose high-end solutions written in C.
* A fully index SQL database is still a thing, although likely a bit outdated for modern data processing and analysis.
* DuckDB and Polars are awesome technologies and best for large scale data processing.
* **Sorting of data matters!** **Do it! Always!** If you can afford the time/cost to sort your data before storing it. Especially DuckDB and Nanocube deliver significantly faster query times.

The [**full comparison**](https://github.com/nanocubeai/nanocube/tree/main#nanocube-benchmarks) with many **very nice charts** can be found in the [**NanoCube GitHub repo**](https://github.com/nanocubeai/nanocube?tab=readme-ov-file#nanocube-benchmarks). Maybe it's of interest to some of you. Enjoy...

|    | technology       |   duration_sec |   factor |
|---:|:-----------------|---------------:|---------:|
|  0 | NanoCube         |          0.016 |    1     |
|  1 | SQLite (indexed) |          0.137 |    8.562 |
|  2 | Polars           |          0.533 |   33.312 |
|  3 | Arrow            |          1.941 |  121.312 |
|  4 | DuckDB           |          4.173 |  260.812 |
|  5 | SQLite           |         12.565 |  785.312 |
|  6 | Pandas           |         37.557 | 2347.31  |

The table above shows the duration for 1000x point queries on the `car_prices_us` dataset (available on [kaggle.com](https://www.kaggle.com)) containing 16x columns and 558,837x rows. The query is highly selective, filtering on 4 dimensions `(model='Optima', trim='LX', make='Kia', body='Sedan')` and aggregating column `mmr`. The factor is the speedup of NanoCube vs. the respective technology. Code for all benchmarks is linked in the readme file.",Psychological-Motor6,1gyoi7n,https://reddit.com/r/Python/comments/1gyoi7n/benchmark_duckdb_polars_pandas_arrow_sqlite/,https://www.reddit.com/r/Python/comments/1gyoi7n/benchmark_duckdb_polars_pandas_arrow_sqlite/,2024-11-24 11:00:22,162,0.95,162,0,40,0,0,False,False,True,False,False,Showcase,self,t3_1gyoi7n
Python,Open Source Discord Bot for Live Football Tracking Across 75+ Leagues,"**What My Project Does:**  
I developed **Scoring Returns Bot**, an open-source Discord bot written in Python that tracks live football matches across 75+ leagues. It provides real-time updates, instant event notifications, and detailed match statistics, allowing users to stay informed about their favorite games directly within Discord.

**Key Features:**

* **Live Match Tracking:** Real-time updates on ongoing football matches, similar to platforms like FlashScore and LiveScore.
* **Instant Event Notifications:** Alerts for goals, VAR decisions, red/yellow cards, and more.
* **Comprehensive Statistics:** Includes possession, shots on goal, corner kicks, and other detailed match stats.

**Target Audience:**  
The bot is designed for football fans who want a seamless way to stay updated on matches within their Discord servers. It‚Äôs suitable for production use in communities where live football updates are a key interest and also for developers who want an open-source, customizable solution for tracking games.

**Comparison with Existing Alternatives:**  
Unlike other bots:

1. **Ease of Use:** Scoring Returns Bot is simple to set up and use, with a clean command structure that makes it accessible even to non-technical users.
2. **Customizability:** Being open-source, it allows users to modify it as per their needs, including branding and additional features.
3. **Aesthetics:** The bot provides visually appealing messages with embedded statistics and event announcements.

**How to Get Started:**  
Visit the GitHub page for source code and setup instructions:

*  [https://github.com/BernKing/Scoring-Returns-Bot](https://github.com/BernKing/Scoring-Returns-Bot)

For a detailed breakdown of the implementation and the reasoning behind design choices, check out my blog post:

*  [https://bernking.xyz/2024/Scoring-Returns-Bot/](https://bernking.xyz/2024/Scoring-Returns-Bot/)",BernKing2,1gynfso,https://reddit.com/r/Python/comments/1gynfso/open_source_discord_bot_for_live_football/,https://www.reddit.com/r/Python/comments/1gynfso/open_source_discord_bot_for_live_football/,2024-11-24 09:47:58,10,0.87,10,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gynfso
Python,GitHub Projects for begginers,"I'm studying quantitative finance, are there any github project recs that is friendlt to beginners but also challenging at the same time? I need the concepts to stick in and without doing any projects, its hard to conceptualise it. I also need some projects to stuck into my CV to show that I a able to apply the concepts in real life.",Civil_Rutabaga730,1gyklzq,https://reddit.com/r/Python/comments/1gyklzq/github_projects_for_begginers/,https://www.reddit.com/r/Python/comments/1gyklzq/github_projects_for_begginers/,2024-11-24 06:26:58,0,0.33,0,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1gyklzq
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1gydn91,https://reddit.com/r/Python/comments/1gydn91/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1gydn91/sunday_daily_thread_whats_everyone_working_on/,2024-11-24 00:00:08,7,0.75,7,0,2,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gydn91
Python,Steganography tool + algo in python,"  
**What My Project Does** 

Stega Shade CLI is a user-friendly command-line interface tool designed for image-based steganography. With a focus on simplicity and security, it provides functionality to encode and decode messages into images, including password-protected encoding for enhanced privacy.

**Comparison**

* **Dual Modes**: Offers both simple and AES-encrypted steganography, catering to users with varying security needs.
* **AES Encryption**: Ensures strong encryption, adding an advanced layer of security to embedded messages.
* **User Experience**: The CLI tool is intuitive, visually engaging, and user-friendly, making it accessible to both beginners and experts.
* **Minimal Impact**: Maintains the original image‚Äôs visual fidelity while effectively hiding the message.

  
**Target Audience**

\- kids intrested in cs

\- hackers

\- fbi

WORKING! -

1. The algorithm encodes the binary representation of a message into the least significant bits (LSBs) of pixel values in the image.
2. Minor changes in the LSBs are imperceptible to the human eye, keeping the message hidden without noticeably altering the image.

[https://github.com/merwin-asm/StegaShade](https://github.com/merwin-asm/StegaShade)  
",MrCactochan,1gyagru,https://reddit.com/r/Python/comments/1gyagru/steganography_tool_algo_in_python/,https://www.reddit.com/r/Python/comments/1gyagru/steganography_tool_algo_in_python/,2024-11-23 21:33:03,16,0.82,16,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1gyagru
Python,Advice please on python,"I‚Äôm in a coding class atm and only have been writing in c++ and she just assigned a python assignment and I don‚Äôt know where to start.

Assignment

You have 2 programs to write this week.
Q1. Write a Python program that declares a List of 7 integer numbers that represent the radii of 7 circles. For each element of the list, your program must ask user to enter A for calculating area or C for circumference of circle, and calculate and display the required value.
You must use loops to access, calculate and print the required quantities with correct units. Write detailed comments in your program to explain what each statement does.
Run the program through all 7 elements of the list and attach a screenshot of your output window. Write detailed comments in your program to explain what each statement does.
 
 
Q2. Write a python program to find the largest element in a list of 5 elements. Run the program and take screenshot of your output. Write detailed comments in your program to explain what each statement does.
",Ok_Tooth8811,1gyaa58,https://reddit.com/r/Python/comments/1gyaa58/advice_please_on_python/,https://www.reddit.com/r/Python/comments/1gyaa58/advice_please_on_python/,2024-11-23 21:24:41,0,0.13,0,0,4,0,0,False,False,True,False,False,Discussion,self,t3_1gyaa58
Python,Simple deployment options for Python projects?,"Hi everyone,

I‚Äôve been thinking about ways to host and deploy Python projects. For those of you who‚Äôve worked on anything from small Python scripts to full web apps or APIs, what kind of hosting setups have you used?

Do you rely on cloud providers (AWS, Google Cloud‚Ä¶ etc), or have you found platforms that simplify the process for smaller projects? I‚Äôm especially curious about solutions that make deployment and monitoring easier, with features like:
* CI/CD integration (like GitHub or gitlab pipelines)
* Real-time logs
* Ability to pause or stop execution

I‚Äôve been exploring ways to streamline hosting for small to medium-sized Python projects, but I‚Äôd love to hear what‚Äôs been working (or not) for you/your team.

What hosting tools do you use? And what are the biggest pain points you‚Äôve encountered?",ClassicNullPointer,1gy697b,https://reddit.com/r/Python/comments/1gy697b/simple_deployment_options_for_python_projects/,https://www.reddit.com/r/Python/comments/1gy697b/simple_deployment_options_for_python_projects/,2024-11-23 18:27:41,29,0.91,29,0,39,0,0,False,False,True,False,False,Discussion,self,t3_1gy697b
Python,CRUD Operations for PostgreSQL with pgcrud,"Over the past few years, I've built a Python application with a PostgreSQL database and spent countless hours optimising CRUD operations without bloating the codebase. I have open-sourced it and want to share **pgcrud** with you:

**What My Project Does**

**pgcrud**¬†is a fast and lightweight library that enables seamless integration between PostgreSQL databases, the psycopg adapter and Pydantic models.¬†**pgcrud**¬†simplifies CRUD operations with straightforward, abstractly declarative functions, eliminating the need for ORMs or redundant SQL queries.

**Target Audience**

Python developers:

Most developers either choose ORMs ( like SQLAlchemy or SQLModel) or write raw SQL

* ORMs are convenient but they map directly to tables and real-world applications often require modelling relationships. This leads to added complexity with extra data models and more database requests
* Raw SQL avoids abstraction but results in repetitive code and difficulties handling optional filter parameters or sorting conditions

**Comparison**

**pgcrud** is a purely abstract declarative module, meaning it's not tied to specific database tables. This flexibility allows developers to model their logic without being constrained by rigid tables. Additionally, **pgcrud** has built-in support for pydantic models and can easily handle reactions between tables via view definitions.

There are more explanations on my Github page. Here is the link: [https://github.com/dakivara/pgcrud](https://github.com/dakivara/pgcrud)

I know that documentation is still lacking and the project is still in progress. I just wanted to get some feedback sooner than later. Any feedback, positive or negative, is highly appreciated.",[deleted],1gy1qg7,https://reddit.com/r/Python/comments/1gy1qg7/crud_operations_for_postgresql_with_pgcrud/,https://www.reddit.com/r/Python/comments/1gy1qg7/crud_operations_for_postgresql_with_pgcrud/,2024-11-23 15:10:56,29,0.94,29,0,13,0,0,False,False,True,False,False,Showcase,self,t3_1gy1qg7
Python,Bagels - Expense tracker that lives in your terminal (TUI),"Hi r/Python! I'm excited to share [Bagels](https://github.com/EnhancedJax/Bagels) \- a terminal (UI) expense tracker built with the [textual](https://github.com/Textualize/textual) TUI library! Check out the git repo for screenshots.

# Target audience

**But first, why an expense tracker in the terminal?**¬†This is intended for people like me: I found it easier to build a habit and keep an accurate track of my expenses if I did it at the end of the day, instead of on the go. So why not in the terminal where it's fast, and I can keep all my data locally?

# What my project does

Some notable features include:

* Keep track of your expenses with Accounts, (Sub)Categories, Splits, Transfers and Records
* Templates for recurring transactions
* Keep track of who owes you money in the people's view
* Add templated records with number keys
* Clear and concise table layout with collapsible splits
* Transfer to and from non-tracked accounts (outside of wallet)
* ""Jump Mode"" Navigation
* Fewer fields to enter per transaction by default input modes
* Insights
* Customizable config, such as First Day of Week

Comparison: Unlike traditional expense trackers that are accessed by web or mobile, Bagels lives in your terminal. It differs as an expense tracker tool by providing more convenient input fields and a clear and concise layout. (though subjective)

# Quick start

Install uv and install the uv tool:

    uv tool install --python 3.13 bagels

Then run `bagels` to get started!

You can learn more at the project repo: [https://github.com/EnhancedJax/Bagels](https://github.com/EnhancedJax/Bagels)",EnhancedJax,1gy0r1v,https://reddit.com/r/Python/comments/1gy0r1v/bagels_expense_tracker_that_lives_in_your/,https://www.reddit.com/r/Python/comments/1gy0r1v/bagels_expense_tracker_that_lives_in_your/,2024-11-23 14:24:56,150,0.96,150,0,23,0,0,False,False,True,False,False,Showcase,self,t3_1gy0r1v
Python,Simplify Your RabbitMQ Workflow with RabbitMQ Queue Manager,"Hi everyone! üëã

I recently started working on¬†[RabbitMQ Queue Manager](https://github.com/ViktorViskov/rabbit-queue-manager)‚Äîa Python-based tool designed to make managing RabbitMQ queues easier and more efficient. The idea came from my experience on projects where queue management often felt overly complicated, and I wanted to create something lightweight yet powerful to streamline the process.

# What My Project Does:

RabbitMQ Queue Manager simplifies the process of interacting with RabbitMQ queues. It lets you:

* **Send messages**¬†to RabbitMQ queues effortlessly.
* **Receive messages**¬†with automatic acknowledgement for smooth processing.
* Handle¬†**connection losses**¬†with automatic reconnections.
* Perform¬†**batch operations**¬†to handle multiple messages at once.
* Inspect¬†**queue sizes**¬†to monitor system health.
* Use a¬†**Pythonic iterable interface**¬†to consume messages naturally.

This tool is ideal for Python developers looking to integrate RabbitMQ into their applications with minimal overhead.

# Call for Feedback and Collaboration:

Right now, the repository is in its early stages, and I‚Äôm actively working on improving it. If you‚Äôve been searching for a simple RabbitMQ tool, have suggestions for new features, or would like to contribute, your help would be invaluable! üôå

Check it out on GitHub:¬†[RabbitMQ Queue Manager](https://github.com/ViktorViskov/rabbit-queue-manager).

Thanks in advance for your support, and let‚Äôs build something great together! üöÄ",Mean-Still-7293-34,1gxzv0n,https://reddit.com/r/Python/comments/1gxzv0n/simplify_your_rabbitmq_workflow_with_rabbitmq/,https://www.reddit.com/r/Python/comments/1gxzv0n/simplify_your_rabbitmq_workflow_with_rabbitmq/,2024-11-23 13:41:07,4,0.63,4,0,4,0,0,False,False,True,False,False,Discussion,self,t3_1gxzv0n
Python,Pypi download stat jumped dramatically,"Hello, I am the author of PerpetualBooster. 

https://github.com/perpetual-ml/perpetual

The download stat of the package jumped dramatically in the last two days. 

https://pypistats.org/packages/perpetual

I checked if any other package caused this jump by depending on this package but couldn't find any. 

What could be the reason of this jump?",mutlu_simsek,1gxxbl2,https://reddit.com/r/Python/comments/1gxxbl2/pypi_download_stat_jumped_dramatically/,https://www.reddit.com/r/Python/comments/1gxxbl2/pypi_download_stat_jumped_dramatically/,2024-11-23 11:09:47,23,0.82,23,0,6,0,0,False,False,True,False,False,Discussion,self,t3_1gxxbl2
Python,What cryptography module is everyone using for Python (2024 edition)?,"I need to generate an RSA keypair in python. Sadly there's no standard lib for cryptography in Python, so I was wondering what everyone is using for cryptography?

There's pycryptodome, python-gnupg, pyopenssl, and cryptography.io. Which is the most popular, well maintained (preferably has a long history of proven development), and accuracy in generating secure keys?

I'm leaning towards cryptography.io but I'm not familiar with the crypto space. What's the best?",plantpome,1gxs1su,https://reddit.com/r/Python/comments/1gxs1su/what_cryptography_module_is_everyone_using_for/,https://www.reddit.com/r/Python/comments/1gxs1su/what_cryptography_module_is_everyone_using_for/,2024-11-23 05:06:34,24,0.8,24,0,12,0,0,False,False,True,False,False,Resource,self,t3_1gxs1su
Python,Now updated my Python Automated AI Research Assistant to work with OpenAI endpoints and Ollama!,"So yeah now it works with OpenAI compatible endpoints thanks to the kind work of people on the Github who updated it for me here is a recap of the project:

Automated-AI-Web-Researcher: After months of work, I've made a python program that turns local LLMs running on Ollama into online researchers for you, Literally type a single question or topic and wait until you come back to a text document full of research content with links to the sources and a summary and ask it questions too! and more!

**What My Project Does**:

This automated researcher uses internet searching and web scraping to gather information, based on your topic or question of choice, it will generate focus areas relating to your topic designed to explore various aspects of your topic and investigate various related aspects of your topic or question to retrieve relevant information through online research to respond to your topic or question. The LLM breaks down your query into up to 5 specific research focuses, prioritising them based on relevance, then systematically investigates each one through targeted web searches and content analysis starting with the most relevant.

Then after gathering the content from those searching and exhausting all of the focus areas, it will then review the content and use the information within to generate new focus areas, and in the past it has often finding new, relevant focus areas based on findings in research content it has already gathered (like specific case studies which it then looks for specifically relating to your topic or question for example), previously this use of research content already gathered to develop new areas to investigate has ended up leading to interesting and novel research focuses in some cases that would never occur to humans although mileage may vary this program is still a prototype but shockingly it, it actually works!.

Key features:

* Continuously generates new research focuses based on what it discovers
* Saves every piece of content it finds in full, along with source URLs
* Creates a comprehensive summary when you're done of the research contents and uses it to respond to your original query/question
* Enters conversation mode after providing the summary, where you can ask specific questions about its findings and research even things not mentioned in the summary should the research it found provide relevant information about said things.
* You can run it as long as you want until the LLM‚Äôs context is at it‚Äôs max which will then automatically stop it‚Äôs research and still allow for summary and questions to be asked. Or stop it at anytime which will cause it to generate the summary.
* But it also Includes pause feature to assess research progress to determine if enough has been gathered, allowing you the choice to unpause and continue or to terminate the research and receive the summary.
* Works with popular Ollama local models (recommended phi3:3.8b-mini-128k-instruct or phi3:14b-medium-128k-instruct which are the ones I have so far tested and have worked)
* Everything runs locally on your machine, and yet still gives you results from the internet with only a single query you can have a massive amount of actual research given back to you in a relatively short time.

The best part? You can let it run in the background while you do other things. Come back to find a detailed research document with dozens of relevant sources and extracted content, all organised and ready for review. Plus a summary of relevant findings AND able to ask the LLM questions about those findings. Perfect for research, hard to research and novel questions that you can‚Äôt be bothered to actually look into yourself, or just satisfying your curiosity about complex topics!

GitHub repo with full instructions and a demo video:

[https://github.com/TheBlewish/Automated-AI-Web-Researcher-Ollama](https://github.com/TheBlewish/Automated-AI-Web-Researcher-Ollama)

(Built using Python, fully open source, and should work with any Ollama-compatible LLM, although only phi 3 has been tested by me)

**Target Audience**:

Anyone who values locally run LLMs, anyone who wants to do comprehensive research within a single input, anyone who like innovative and novel uses of AI which even large companies (to my knowledge) haven't tried yet.

If your into AI, if your curious about what it can do, how easily you can find quality information using it to find stuff for you online, check this out!

**Comparison**:

Where this differs from per-existing programs and applications, is that it conducts research continuously with a single query online, for potentially hundreds of searches, gathering content from each search, saving that content into a document with the links to each website it gathered information from.

Again potentially hundreds of searches all from a single query, not just random searches either each is well thought out and explores various aspects of your topic/query to gather as much usable information as possible.

Not only does it gather this information, but it summaries it all as well, extracting all the relevant aspects of the info it's gathered when you end it's research session, it goes through all it's found and gives you the important parts relevant to your question. Then you can still even ask it anything you want about the research it has found, which it will then use any of the info it has gathered to respond to your questions.

To top it all off compared to other services like how ChatGPT can search the internet, this is completely open source and 100% running locally on your own device, with any LLM model of your choosing although I have only tested Phi 3, others likely work too!",CuriousAustralianBoy,1gxotms,https://reddit.com/r/Python/comments/1gxotms/now_updated_my_python_automated_ai_research/,https://www.reddit.com/r/Python/comments/1gxotms/now_updated_my_python_automated_ai_research/,2024-11-23 02:05:53,16,0.82,16,0,2,0,0,False,False,True,False,False,Resource,self,t3_1gxotms
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1gxm8u3,https://reddit.com/r/Python/comments/1gxm8u3/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1gxm8u3/saturday_daily_thread_resource_request_and/,2024-11-23 00:00:21,2,0.67,2,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gxm8u3
Python,"Python isn't just glue, it's an implicit JIT ecosystem","Writing more Rust recently led me to a revelation about Python. Rust was vital to my original task, but only a few simplifications away, the shorter Python version leapt to almost as fast. I'd stumbled from a cold path to a hot path...

This is my argument that Python, through a number of features both purposeful and accidental, ended up with an implicit JIT ecosystem, well-worn trails connecting optimized nodes, paved over time by countless developers.

I'm definitely curious to hear how this feels to others.
I've been doing Python half my life (almost two decades) and Rust seriously for the last few years.
I love both languages deeply but the pendulum has now swung back towards Python not as I won't use Rust but as I feel my eyes are now open as to how when and how I should use Rust.

[Python isn't just glue, it's an implicit JIT ecosystem](https://state.smerity.com/smerity/state/01JC39KW1TBEAZTKJJF0BR5ZXD)",smerity,1gxlogn,https://reddit.com/r/Python/comments/1gxlogn/python_isnt_just_glue_its_an_implicit_jit/,https://www.reddit.com/r/Python/comments/1gxlogn/python_isnt_just_glue_its_an_implicit_jit/,2024-11-22 23:34:27,150,0.75,150,0,58,0,0,False,False,True,False,False,Discussion,self,t3_1gxlogn
Python,"pydantic-resolve, a lightweight library based on pydantic which greatly helps on building data. ","**What My Project Does:**

  
[https://allmonday.github.io/pydantic-resolve/v2/why/](https://allmonday.github.io/pydantic-resolve/v2/why/)  why create a new lib.

pydantic-resolve is a lightweight wrapper library based on pydantic, which can greatly simplify the complexity of building data.

With the help of pydantic, it can describe data structures using graph relationships like GraphQL, and also make adjustments based on business requirements while fetching data.

Using an ER-oriented modeling approach, it can provide you with a 3 to 5 times increase in development efficiency and reduce code volume by more than 50%.

It offers¬†`resolve`¬†and¬†`post`¬†methods for pydantic objects.  (pre and post process)

by providing root data and full schema definitions, Resolve will fill all descendants for you.

    from pydantic_resolve import Resolver
    from pydantic import BaseModel
    
    class Car(BaseModel):
        id: int
        name: str
        produced_by: str
    
    class Child(BaseModel):
        id: int
        name: str
    
        cars: List[Car] = []
        async def resolve_cars(self):
            return await get_cars_by_child(self.id)
    
        description: str = ''
        def post_description(self):
            desc = ', '.join([c.name for c in self.cars])
            return f'{self.name} owns {len(self.cars)} cars, they are: {desc}'
    
    children = await Resolver.resolve([
            Child(id=1, name=""Titan""), 
            Child(id=1, name=""Siri"")]
        )

`resolve`¬†is usually used to fetch data, while¬†`post`¬†can perform additional processing after fetching the data.

After defining the object methods and initializing the objects, pydantic-resolve will internally traverse the data and execute these methods to process the data.

With the help of dataloader, pydantic-resolve can avoid the N+1 query problem that often occurs when fetching data in multiple layers, optimizing performance.

In addition, it also provides¬†`expose`¬†and¬†`collector`¬†mechanisms to facilitate cross-layer data processing.

**Target Audience:**

backend developers who need to compose data from different sources

**Comparison:**

GraphQL, ORMÔºå it provides a more general way (declarative way) to build the data.

GraphQL is flexible but the actual query is not maintained at backend.

ORM relationship is powerful but limited in relational db, not easy to join resource from remote

pydantic-resolve aims to provide a balanced tool between GraphQL and ORM,  it joins resource with dataloader and 100% keep data structure at backend (with almost zero extra cost)

**Showcase**:

[https://github.com/allmonday/pydantic-resolve](https://github.com/allmonday/pydantic-resolve)

[https://github.com/allmonday/pydantic-resolve-demo](https://github.com/allmonday/pydantic-resolve-demo)

**Prerequisites:**

\- pydantic v1, v2",TurbulentAd8020,1gx9uyn,https://reddit.com/r/Python/comments/1gx9uyn/pydanticresolve_a_lightweight_library_based_on/,https://www.reddit.com/r/Python/comments/1gx9uyn/pydanticresolve_a_lightweight_library_based_on/,2024-11-22 15:04:53,13,0.63,13,0,22,0,0,False,False,True,False,False,Showcase,self,t3_1gx9uyn
Python,Library Analyzer - Python libraries and extract detailed information,"Hi [r/python](https://www.reddit.com/r/python/),

I‚Äôm excited to share my latest project, \*\*Library Analyzer\*\*. This Python script is designed to analyze Python libraries and extract detailed information about their elements, such as, Classes, Methods, Functions, Properties, and more.

The analysis results can be saved to a JSON file for further inspection, making it a valuable tool for developers who need to understand and document their codebases.

\### Capabilities of the Script:

\- \*\*Analyze Python Libraries\*\*: The script can analyze Python libraries and extract detailed information about various elements within the library.

\- \*\*Element Types Identified\*\*: It identifies and categorizes elements such as classes, methods, functions, properties, modules, variables, enums, constants, dataclasses, coroutines, generators, descriptors, exceptions, and protocols.

\- \*\*Extract Type Information\*\*: The script can safely evaluate and extract type information for various elements.

\- \*\*Extract Signatures\*\*: It can extract function/method signatures and other relevant details such as docstrings, parameter types, and return types.

\- \*\*Class Analysis\*\*: The script provides detailed information about classes, including base classes, methods, properties, and type hints.

\- \*\*Dataclass and Enum Analysis\*\*: It can analyze dataclasses and enums, extracting field types and enum values.

\- \*\*Save Analysis Results\*\*: The analysis results can be saved to a JSON file for further inspection and documentation.

\### About the Project:

This script was extracted from a larger project, which includes AI and other mechanisms, that I may possibly share soon. The project aims to provide valuable insights into the structure and content of libraries, helping developers understand and utilize them efficiently.

Thank you for reading, and I‚Äôd love to hear your feedback and suggestions!

[https://github.com/JacquesGariepy/library-analyzer](https://github.com/JacquesGariepy/library-analyzer)",Outrageous-Pea9611,1gx9j3t,https://reddit.com/r/Python/comments/1gx9j3t/library_analyzer_python_libraries_and_extract/,https://www.reddit.com/r/Python/comments/1gx9j3t/library_analyzer_python_libraries_and_extract/,2024-11-22 14:50:02,5,0.69,5,0,3,0,0,False,False,True,False,False,Resource,self,t3_1gx9j3t
Python,Light Resilience with the Service Failover System,"Hello r/python,

I share this small project I've been working on: the **Service Failover System**. This system is designed (work in progress) to enhance the resilience of applications by providing mechanisms for handling service failures. Here‚Äôs a quick overview:

### Key Features:
- **Retry Policy**: Handles transient failures with configurable retry attempts and delays.
- **Circuit Breaker**: Monitors service health, preventing requests to unhealthy services.
- **Rate Limiter**: Manages the rate of outgoing requests to prevent service overloads.
- **Connection Pool**: Optimizes connection management by reusing connections.
- **Cache**: Stores responses to minimize requests and enhance performance.
- **Metrics Collector**: Gathers performance and health metrics for monitoring and troubleshooting.

### Usage:
1. **Configuration**: Set up parameters in `config.ini` or environment variables.
2. **Service Registration**: Register services with the `FailoverManager`.
3. **Health Checks**: Implement health checks to ensure services are operational.
4. **Execute Requests**: Use the `FailoverManager` to handle retries, circuit breaking, and rate limiting automatically.

### Use Cases:
- **Microservices Architecture**: Ensures application functionality even if some services fail.
- **API Gateway**: Provides resilience and reliability for external API calls.
- **Distributed Systems**: Manages service failures and maintains system availability.
- **Cloud Services**: Handles transient failures and ensures smooth operation.

### Installation:
1. Clone the repository:
   ```bash
   git clone https://github.com/JacquesGariepy/service-failover.git
   ```
2. Navigate to the project directory:
   ```bash
   cd service-failover
   ```
3. Create a virtual environment:
   ```bash
   python -m venv env
   source env/bin/activate  # On Windows: env\Scripts\activate
   ```
4. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```
### Configuration:
- Edit `config.ini` to set parameters like API keys, base URLs, and settings for retry policies, circuit breakers, and rate limiters.

### Contributions:
Contributions are welcome! Feel free to fork the project, create feature branches, and open pull requests.

**Project Link**: [Service Failover System on GitHub](https://github.com/JacquesGariepy/service-failover)

**Contact**: Jacques Gari√©py - [LinkedIn](https://www.linkedin.com/in/jacquesgariepy/)

Let me know your thoughts and suggestions. Looking forward to your feedback!",Outrageous-Pea9611,1gx69ce,https://reddit.com/r/Python/comments/1gx69ce/light_resilience_with_the_service_failover_system/,https://www.reddit.com/r/Python/comments/1gx69ce/light_resilience_with_the_service_failover_system/,2024-11-22 12:03:48,3,0.81,3,0,2,0,0,False,False,True,False,False,Resource,self,t3_1gx69ce
Python,Project Guide: AI-Powered Documentation Generator for Codebases,"What My Project Does:  
Project Guide is an AI-powered tool that analyzes codebases and automatically generates comprehensive documentation. It aims to simplify the process of understanding and navigating complex projects, especially those written by others.

Target Audience:  
This tool is intended for developers, both professionals and hobbyists, who work with existing codebases or want to improve documentation for their own projects. It's suitable for production use but can also be valuable for learning and project management.

Comparison:  
Unlike traditional documentation tools that require manual input, Project Guide uses AI to analyze code and generate insights automatically. It differs from static analysis tools by providing higher-level, context-aware documentation that explains project architecture and purpose.

Showcase:  
Ever wished your project could explain itself? Now it can! ü™Ñ Project Guide uses AI to analyze your codebase and generate comprehensive documentation automagically.

Features:  
üîç Deep code analysis  
üìö Generates detailed developer guides  
üéØ Identifies project purpose and architecture  
üó∫Ô∏è Creates clear documentation structure  
ü§ñ AI-powered insights  
üìù Markdown-formatted output  
üîÑ Recursive directory analysis  
üé® Well-organized documentation

Check it out:¬†[https://github.com/sojohnnysaid/project-guide](https://github.com/sojohnnysaid/project-guide)

  
Here is a guidebook.md I created for another project I am working on:

[https://github.com/sojohnnysaid/vim-restman](https://github.com/sojohnnysaid/vim-restman)

Going through codebases that someone else wrote is hard, no matter how long you've been at this. This tool can help give you a lifeline. I believe AI tools, when used correctly, can help us complete our work more efficiently, allowing us to enjoy more of our lives outside of coding.

Quick Start:  
Prerequisites:

* Python 3.8+
* Anthropic API key
* Your favorite code project to document!

I really do hope one day we find an even better way. I miss who I was before I did this kind of work, when I played more music, and loved my friends and family more, spending time with them and connecting. I hope tools like this can help us get our work done early enough to enjoy the late afternoon.",Icy_Foundation3534,1gx2515,https://reddit.com/r/Python/comments/1gx2515/project_guide_aipowered_documentation_generator/,https://www.reddit.com/r/Python/comments/1gx2515/project_guide_aipowered_documentation_generator/,2024-11-22 07:07:33,34,0.72,34,0,18,0,0,False,False,True,False,False,Showcase,self,t3_1gx2515
Python,11 Python Boilerplate Code Snippets Every Developer Needs,"Python's simplicity makes it a favorite among developers, especially in trending fields like AI, machine learning, and automation. But let's face it‚Äîrepeating boilerplate code can be a drag. That‚Äôs where **Python snippets** come in!

From validating emails to shuffling lists, we‚Äôve rounded up 11 essential Python boilerplate snippets to simplify your daily tasks and supercharge your workflow:

# üîç 1. Validate Email Formats (Regex Simplified)

Use regular expressions to validate email strings efficiently:

    pythonCopy codeimport re  
    def validate_email(email):  
        email_pattern = re.compile(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$')  
        return bool(email_pattern.match(email))  
    

# ‚úÇÔ∏è 2. Slice Strings &amp; Lists Like a Pro

Access sub-elements directly without loops for cleaner code:

    pythonCopy codemy_string = ""Hello, World!""  
    print(my_string[0:5])  # Output: Hello  
    

# üîÑ 3. Compare Words: Are They Anagrams?

Quickly check if two strings are anagrams with `collections.Counter`:

    pythonCopy codefrom collections import Counter  
    def are_anagrams(word1, word2):  
        return Counter(word1) == Counter(word2)  
    

# üÜï 4. Capitalize Words with title()

Effortlessly format strings for clean output:

    pythonCopy codeinput_string = ""hello world""  
    print(input_string.title())  # Output: Hello World  
    

# üîç 5. Find Differences Between Sets

Identify unique elements between two sets using `difference()`:

    pythonCopy codeset1 = {1, 2, 3}  
    set2 = {3, 4, 5}  
    print(set1.difference(set2))  # Output: {1, 2}  
    

And there‚Äôs more! From finding the most frequent elements in a list to using `shuffle()` for randomizing data, these snippets save you time and hassle.

  
üëâ Dive into the [full post and access all 11 snippets](https://pieces.app/blog/11-python-boilerplate-code-snippets-every-developer-needs?utm_source=reddit&amp;utm_medium=referral&amp;utm_campaign=r4).",Only_Piccolo5736,1gx1nwb,https://reddit.com/r/Python/comments/1gx1nwb/11_python_boilerplate_code_snippets_every/,https://www.reddit.com/r/Python/comments/1gx1nwb/11_python_boilerplate_code_snippets_every/,2024-11-22 06:34:21,0,0.06,0,0,8,0,0,False,False,True,False,False,Resource,self,t3_1gx1nwb
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1gwub4n,https://reddit.com/r/Python/comments/1gwub4n/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1gwub4n/friday_daily_thread_rpython_meta_and_freetalk/,2024-11-22 00:00:57,9,0.75,9,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gwub4n
Python,MetaDataScraper: A Python Package for scraping Facebook page data with ease!,"Hey everyone! üëã

I‚Äôm excited to introduce **MetaDataScraper**, a Python package designed to automate the extraction of valuable data from Facebook pages. Whether you're tracking follower counts, post interactions, or multimedia content like videos, this tool makes scraping Facebook page data a breeze. No API keys or tedious manual effort required ‚Äî just pure automation! üòé

Usage docs here at [ReadTheDocs](https://metadatascraper.readthedocs.io/en/latest/).

# Key Features:

* Automated Extraction: Instantly fetch follower counts, post texts, likes, shares, and video links from public Facebook pages.
* Comprehensive Data Retrieval: Get detailed insights from posts, including text content, interactions (likes, shares), and multimedia (videos, reels, etc.).
* Loginless Scraping: With the LoginlessScraper class, no Facebook login is needed. Perfect for scraping public pages.
* Logged-In Scraping: The LoggedInScraper class allows you to login to Facebook and bypass the limitations of loginless scraping. Access more content and private posts if needed.
* Headless Operation: Scrapes data silently in the background (without opening a visible browser window) ‚Äî perfect for automated tasks or server environments.
* Flexible &amp; Easy-to-Use: Simple setup, clear method calls, and works seamlessly with Selenium WebDriver.

# Example Usage:

1. Installation: Simply install via pip:

&amp;#8203;

    pip install MetaDataScraper

2) Loginless Scraping (no Facebook login required):

    from MetaDataScraper import LoginlessScraper
    
    page_id = ""your_target_page_id""
    scraper = LoginlessScraper(page_id)
    result = scraper.scrape()
    
    print(f""Followers: {result['followers']}"")
    print(f""Post Texts: {result['post_texts']}"")

3) Logged-In Scraping (for more access):

    from MetaDataScraper import LoggedInScraper
    
    page_id = ""your_target_page_id""
    email = ""your_facebook_email""
    password = ""your_facebook_password""
    scraper = LoggedInScraper(page_id, email, password)
    result = scraper.scrape()
    
    print(f""Followers: {result['followers']}"")
    print(f""Post Likes: {result['post_likes']}"")
    print(f""Video Links: {result['video_links']}"")

# Comparision to existing alternatives

* Ease of Use: Setup is quick and easy ‚Äî just pass the Facebook page ID and start scraping!
* No Facebook API Required: No need for dealing with Facebook's complex API limits or token issues. This package uses Selenium for direct web scraping, which is much more flexible.
* Better Data Access: With the LoggedInScraper, you can scrape content that might be unavailable to public visitors, all using your own Facebook account credentials.
* Updated Code Logic: With Meta's code updating quite often, many of the now existing scraper packages are defunct. This package is continuously tested and monitored to make sure that the scraper remains functional.

# Target Audience:

* Data Analysts: For tracking page metrics and social media analytics.
* Marketing Professionals: To monitor engagement on Facebook pages and competitor tracking.
* Researchers: Anyone looking to gather Facebook data for research purposes.
* Social Media Enthusiasts: Those interested in scraping Facebook data for personal projects or insights.

# Dependencies:

* Selenium
* WebDriver Manager

If you‚Äôre interested in automating your data collection from Facebook pages, **MetaDataScraper** will save you tons of time. It's perfect for anyone who needs structured, automated data without getting bogged down by API rate limits, login barriers, or manual work. Check it out on [GitHub](https://github.com/ishan-surana/MetaDataScraper/), if you want to dive deeper into the code or contribute. I‚Äôve set up a [Discord server](https://discord.com/invite/BWrJVYrTWy) for my projects, including MetaDataScraper, where you can get updates, ask questions, or provide feedback as you try out the package. It‚Äôs a new space, so feel free to help shape the community! üöÄ

Looking forward to seeing you there!

Hope it helps some of you automate your Facebook scraping tasks! üöÄ Let me know if you have any questions or run into any issues. I‚Äôm always open to feedback!",TempestTRON,1gwn9yd,https://reddit.com/r/Python/comments/1gwn9yd/metadatascraper_a_python_package_for_scraping/,https://www.reddit.com/r/Python/comments/1gwn9yd/metadatascraper_a_python_package_for_scraping/,2024-11-21 19:01:12,0,0.45,0,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1gwn9yd
Python,HPC-Style Job Scripts in the Cloud,"The first parallel computing system I ever used were job scripts on HPC Job schedulers (like SLURM, PBS, SGE, ...).  They had an API straight out of the 90s, but were super straightforward and helped me do research when I was still just a baby programmer.  

The cloud is way more powerful than these systems, but kinda sucks from a UX perspective.  I wanted to replicate the experience I had on HPC on the cloud with Cloud-based Job Arrays.  It wasn't actually all that hard.

* [Post here](https://docs.coiled.io/blog/slurm-job-arrays.html)
* [Video here](https://www.youtube.com/watch?v=cRWXfWgb4Z0)

This is still super new (we haven't even put up proper docs yet) but I'm excited about the feature.  Thoughts/questions/critiques welcome.",mrocklin,1gwj7e6,https://reddit.com/r/Python/comments/1gwj7e6/hpcstyle_job_scripts_in_the_cloud/,https://www.reddit.com/r/Python/comments/1gwj7e6/hpcstyle_job_scripts_in_the_cloud/,2024-11-21 16:23:41,35,0.87,35,0,9,0,0,False,False,True,False,False,Discussion,self,t3_1gwj7e6
Python,Creating a Python System to Turn All PostgreSQL Servers into Masters with Auto-Recovery and Sync ‚Äì N,"Hello Python community!I‚Äôm currently working on developing a distributed PostgreSQL system using Python, where all servers act as masters. Additionally, I‚Äôm adopting a clear separation between¬†**servers**¬†and¬†**clients**¬†to create a flexible and efficient architecture.The primary goals of this project are as follows:

1. **Master-Master architecture**
   * All servers operate equally, eliminating single points of failure (SPOF).
2. **Server-Client separation**
   * Clients can seamlessly access the system while the internal operations are optimized for distributed workloads.
3. **Automatic recovery**
   * In case of server failures, other nodes automatically handle recovery to maintain uninterrupted service.
4. **Automatic data synchronization**
   * Efficiently synchronizing data across nodes while ensuring consistency.
5. **Leveraging Python and PostgreSQL**
   * Combining Python's flexibility with PostgreSQL's robust features.

# Current Tools

For this project, I‚Äôm focusing on the following two key modules:

* **psycopg3**: To enable efficient communication with PostgreSQL, especially with its asynchronous capabilities.
* **aioquic**: For leveraging the QUIC protocol to achieve fast and reliable data synchronization, particularly for server-client communications in a distributed setup.

# Challenges and Feedback Needed

Here are some specific points where I‚Äôd love to get your insights:

1. **Server-Client Design Approach**
   * What‚Äôs the best way to dynamically determine which server the client should connect to in a distributed master-master setup?
   * Any recommendations for handling automatic failover, where clients detect server failures and switch to another server seamlessly?
2. **Using psycopg3 and aioquic**
   * Any tips on best practices for asynchronous operations with psycopg3 or optimizing aioquic for this use case? Are there other libraries I should consider?
3. **Distributed Database Challenges**
   * In a master-master architecture, what are the best approaches to address consistency and conflict resolution? Are there any recommended algorithms or design patterns?
4. **System Name Suggestions**
   * I‚Äôm considering names like ‚ÄúPostMasterSync‚Äù or ‚ÄúPolyMaster,‚Äù but I‚Äôd love to hear any creative suggestions!

# The Potential of This Project

This project aims to explore new possibilities in distributed databases by combining high availability and flexibility. With the power of Python and PostgreSQL, I‚Äôm excited to see how far this idea can go.I truly value the community‚Äôs knowledge and insights, and I‚Äôm looking forward to your feedback and ideas!Thank you for your time and support",tp-li,1gwghji,https://reddit.com/r/Python/comments/1gwghji/creating_a_python_system_to_turn_all_postgresql/,https://www.reddit.com/r/Python/comments/1gwghji/creating_a_python_system_to_turn_all_postgresql/,2024-11-21 13:39:13,6,0.66,6,0,6,0,0,False,False,True,False,False,Discussion,self,t3_1gwghji
Python,Use python to build mk Converter,"üöÄ Check out my URL/PDF/DOCX to Markdown Converter!

Hey fellow developers! üëã

I'm super excited to share a tool I've been working on that I think might make your life a bit easier. You know that annoying process of converting documents to Markdown? Well, I built something to handle that! 

**What does it do?**
- Converts web pages to Markdown with just a URL
- Transforms PDF files to Markdown (using pdfplumber)
- Converts DOCX files to clean Markdown
- Lets you preview the rendered result right there
- Comes with copy/download buttons for quick access

I built it using FastAPI for the backend (it's crazy fast! ‚ö°) and kept the frontend super clean and simple. You literally just paste a URL or upload a file, hit convert, and boom! üí• You've got your Markdown.

**Why I made this:**
I got tired of manually converting docs for my documentation work, and thought others might find this useful too. Plus, I wanted to learn more about FastAPI and document processing in Python.

**Tech stack:**
- FastAPI (because who doesn't love async Python? üêç)
- pdfplumber for PDF parsing
- python-docx for Word docs
- marked.js for the preview
- Basic HTML/CSS/JS for the frontend

The code is open source, and I'd love to get your feedback or contributions! Check out the screenshots in the README to see it in action.

**Try it out:**
1. Clone the repo
2. Install dependencies
3. Run with uvicorn
4. Convert all the things! üéâ

What do you think? Would love to hear your thoughts or suggestions for improvements! And if anyone wants to contribute, PRs are more than welcome! ü§ù

[py-2-md](https://github.com/DanielZhui/py-2-md)

Thanks for all the feedback! I'm already working on some of your suggestions! üôè",wollensZhang,1gwfscj,https://reddit.com/r/Python/comments/1gwfscj/use_python_to_build_mk_converter/,https://www.reddit.com/r/Python/comments/1gwfscj/use_python_to_build_mk_converter/,2024-11-21 13:04:26,4,0.59,4,0,3,0,0,False,False,True,False,False,News,self,t3_1gwfscj
Python,Generate Realistic Podcast Sessions Programmatically,"Hey everyone! üëã

I just released `podcast_tts`, a Python library that generates **realistic podcasts and dialogues** with multi-speaker audio, background music, and professional-quality mixing‚Äîall running **100% locally**.

# What My Project Does

`podcast_tts` allows you to programmatically create high-quality audio sessions with multiple speakers, dynamic or premade voice profiles, and customizable background music. You can save the output as MP3 or WAV files and even assign playback to specific audio channels for spatial separation.

It‚Äôs designed to be flexible, whether you‚Äôre building an API with FastAPI or experimenting with personal projects.

# Target Audience

This library is perfect for:

* Developers needing a **local TTS solution** for privacy or offline use.
* Engineers building backend systems for **audio generation** (e.g., podcasts or virtual assistants).
* Anyone looking for an all-in-one tool for **dialogue generation** with professional audio quality.

# Comparison to Alternatives

Unlike many TTS libraries that rely on cloud services, `podcast_tts` is fully offline, ensuring privacy and reducing latency. It also integrates features like **multi-speaker support**, **background music mixing**, and **text normalization**, which are often missing or require multiple tools to achieve.

The project is **open source**, and you can find it on GitHub here: [GitHub Repo](https://github.com/puntorigen/podcast_tts).  
It‚Äôs also available on **PyPI** for easy installation: `pip install podcast_tts`.

I‚Äôve shared more details in a [blog post](https://www.linkedin.com/pulse/creating-realistic-podcasts-python-developers-guide-schaffner-bofill-rdgue/?trackingId=KVXkcD61TX6DTgTHZ0Cagw%3D%3D) on LinkedIn and would love to hear your feedback! Let me know if you try it out or have ideas for improvement. üòä",Popular_Being7765,1gw5j21,https://reddit.com/r/Python/comments/1gw5j21/generate_realistic_podcast_sessions/,https://www.reddit.com/r/Python/comments/1gw5j21/generate_realistic_podcast_sessions/,2024-11-21 02:25:33,12,0.75,12,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gw5j21
Python,Networking applications should not be opening sockets,"From my first development project involving networking I was hooked. I also found some areas of networking software a bit unresolved. There was some strong modeling for people who make networking components but that seemed to peter out after the sockets library. Nobody seemed to have a good compelling way to bundle all that block I/O, byte framing, encoding/decoding, message dispatching etc into something that was reused from project to project.

I finally did something about this and have produced a software library. I also wrote a discussion paper that is the first link in the readme of the following github repo. The repo contains demonstration modules that are referred to in the other readme links.

[Networking is not about sockets](https://github.com/mr-ansar/from-sketches-to-networking-code)

Is there anyone else out there that has thought along similar lines? Has anyone seen something better?",Public_Being3163,1gw3hwi,https://reddit.com/r/Python/comments/1gw3hwi/networking_applications_should_not_be_opening/,https://www.reddit.com/r/Python/comments/1gw3hwi/networking_applications_should_not_be_opening/,2024-11-21 00:50:40,12,0.75,12,0,10,0,0,False,False,True,False,False,Discussion,self,t3_1gw3hwi
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1gw2e4u,https://reddit.com/r/Python/comments/1gw2e4u/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1gw2e4u/thursday_daily_thread_python_careers_courses_and/,2024-11-21 00:00:08,10,1.0,10,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gw2e4u
Python,"Just published part 2 of my articles on Python Project Management and Packaging, illustrated with uv","
Hey everyone,

Just finished the second part of my comprehensive guide on Python project management. This part covers both building packages and publishing.

It's like the first article, the goal is to dig in the PEPs and specifications to understand what the standard is, why it came to be and how. This is was mostly covered in the build system section of the article.

The article: https://reinforcedknowledge.com/a-comprehensive-guide-to-python-project-management-and-packaging-concepts-illustrated-with-uv-part-2/

I have tried to implement some of your feedback. I worked a lot on the typos (I believe there aren't any but I may be wrong), and I tried to divide the article into three smaller articles:
- Just the high level overview: https://reinforcedknowledge.com/a-comprehensive-guide-to-python-project-management-and-packaging-part-2-high-level-overview/
- The deeper dive into the PEPs and specs for build systems: https://reinforcedknowledge.com/a-comprehensive-guide-to-python-project-management-and-packaging-part-2-source-trees-and-build-systems-interface/
- The deeper dive into PEPs and specs for package formats: https://reinforcedknowledge.com/a-comprehensive-guide-to-python-project-management-and-packaging-part-2-sdists-and-wheels/
- Editable installs and customizing the build process (+ custom hooks): https://reinforcedknowledge.com/a-comprehensive-guide-to-python-project-management-and-packaging-part-ii-editable-installs-custom-hooks-and-more-customization/

In the parent article there are also two smalls sections about `uv build` and `uv publish`. I don't think they deserve to be in a separate smaller article and I included them for completeness but anyone can just go `uv help &lt;command&gt;` and read about the command and it'd be much better. I did explain some small details that I believe that not everyone knows but I don't think it replaces your own reading of the doc for these commands.


In this part I tried to understand two things:

1- How the tooling works, what is the standard for the build backend, what it is for the build frontend, how do they communicate etc. I think it's the most valuable part of this article. There was a lot to cover, the build environment, how the PEP considered escape hatches and how it thought of some use cases like if you needed to override a build requirement etc. That's the part I enjoyed reading about and writing. I think it builds a deep understand of how these tools work and interact with each other, and what you can expect as well.

There are also two toy examples that I enjoyed explaining, the first is about editable installs, how they differ when they're installed in a project's environment from a regular install.

The second is customising the build process by going beyond the standard with custom hooks. A reader asked in a comment on the first part about integrating Pyarmor as part of its build process so I took that to showcase custom hooks with the `hatchling` build backend, and made some parallels with the specification.

2- What are the package formats for Python projects. I think for this part you can just read the high level overview and go read the specifications directly. Besides some subsections like explaining some particular points in extracting the tarball or signing wheels etc., I don't think I'm bringing much here. You'll obviously learn about the contents of these package formats and how they're extracted / installed, but I copy pasted a lot of the specification. The information can be provided directly without paraphrasing or writing a prose about it. When needed, I do explain a little bit, like why installers must replace leading slashes in files when installing a wheel etc.


I hope you can learn something from this. If you don't want to read through the articles don't hesitate to ask a question in the comments or directly here on Reddit. I'll answer when I can and if I can üòÖ

I still don't think my style of writing is pleasurable or appealing to read but I enjoyed the learning, the understanding, and the writing.

And again, I'l always recommend reading the PEPs and specs yourself, especially the rejected ideas sections, there's a lot of insight to gain from them I believe.

EDIT: Added the link for the sub-article about ""Editable installs and customizing the build process"".",ReinforcedKnowledge,1gw1fe6,https://reddit.com/r/Python/comments/1gw1fe6/just_published_part_2_of_my_articles_on_python/,https://www.reddit.com/r/Python/comments/1gw1fe6/just_published_part_2_of_my_articles_on_python/,2024-11-20 23:10:14,90,0.95,90,0,12,0,0,False,False,True,False,False,Tutorial,self,t3_1gw1fe6
Python,ImportSpy: Proactive Validation for External Python Modules,"Have you ever wondered how to ensure that external modules importing your code meet the requirements of your project? With ImportSpy, you can define rules that external modules must follow, ensuring smooth and reliable integration.

What ImportSpy Does:

ImportSpy is an open-source Python library that allows developers to enforce specific rules on external modules that import their code. It ensures these modules meet the required structure, including:
	‚Ä¢	Mandatory Functions: Ensure external modules define critical functions you rely on.
	‚Ä¢	Required Classes: Validate the presence of specific classes, along with their methods and attributes.
	‚Ä¢	Essential Variables: Check for the existence of key variables with their expected values.
	‚Ä¢	Environment Variables: Verify that external modules operate in a properly configured environment, with necessary environment variables set.
	‚Ä¢	Version Control: Enforce compatibility by specifying the required module version.

How It Works:

ImportSpy operates proactively, analyzing any module attempting to import your code. If the module does not comply with the rules you‚Äôve defined, ImportSpy raises a detailed error message highlighting exactly what is missing or non-compliant.

Comparison:

Unlike traditional runtime error detection tools, ImportSpy acts proactively by catching problems before the importing module can even run. Here‚Äôs how ImportSpy stands out:
	1.	Prevention over diagnosis: Instead of debugging unexpected issues after runtime, ImportSpy prevents them from occurring by validating external modules upfront.
	2.	Custom validation: Developers define their own rules, tailored to the project‚Äôs needs, from functions to environment variables.
	3.	Enhanced integration: Seamlessly works with CI/CD pipelines, ensuring compliance in automated workflows.
	4.	Actionable feedback: When a module fails validation, ImportSpy provides clear and specific error messages, reducing debugging time.

Other tools might validate only specific elements, like class methods or version numbers, but ImportSpy offers comprehensive, user-defined validation across all critical aspects of a module.

Why It Matters:

Without tools like ImportSpy, identifying errors caused by non-compliant modules can be a time-consuming and frustrating process. ImportSpy prevents these issues at the source by validating external modules during the import process, saving you time and improving the stability of your project.

Who Should Use It:

	‚Ä¢	Developers building modular or plugin-based architectures: ImportSpy helps ensure all components work seamlessly together.
	‚Ä¢	Teams prioritizing security and stability: ImportSpy blocks incorrect imports that could compromise your project.
	‚Ä¢	Anyone leveraging CI/CD pipelines: Ensure critical environment variables are always set as expected.

Key features:

	‚Ä¢	Proactive validation for external modules, catching issues before runtime.
	‚Ä¢	Clear and actionable error messages when modules are non-compliant.
	‚Ä¢	Support for validating environment variables, versioning, functions, and class structures.
	‚Ä¢	Lightweight and easy to integrate into any Python project.

You can find ImportSpy on GitHub with full documentation and examples to get started:

https://github.com/atellaluca/ImportSpy",atellaluca,1gvzy62,https://reddit.com/r/Python/comments/1gvzy62/importspy_proactive_validation_for_external/,https://www.reddit.com/r/Python/comments/1gvzy62/importspy_proactive_validation_for_external/,2024-11-20 21:25:34,6,0.8,6,0,11,0,0,False,False,True,False,False,Showcase,self,t3_1gvzy62
Python,Pyrogram: Command modulation like discord.py,"Hi everyone!

I‚Äôve been working with discord.py for a while, and one of the features I really love is the dynamic command loading system (Cogs). It keeps the codebase clean and scalable by organizing commands into separate files/modules.

Now, I‚Äôve started working with Pyrogram, and I find having all the bot‚Äôs logic in a single file quite messy. I‚Äôm looking for a way to dynamically load commands in main.py from separate files within a commands folder, similar to how Cogs work in Discord.py.

Here‚Äôs my current project structure:

```project/
‚îÇ
‚îú‚îÄ‚îÄ .venv/
‚îú‚îÄ‚îÄ secrets/
‚îÇ   ‚îú‚îÄ‚îÄ .env
‚îÇ   ‚îî‚îÄ‚îÄ config.py
‚îú‚îÄ‚îÄ commands/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ help.py
‚îÇ   ‚îú‚îÄ‚îÄ start.py
‚îÇ   ‚îú‚îÄ‚îÄ example.py
‚îú‚îÄ‚îÄ main.py
```

What I‚Äôm Looking For:

1. A way to dynamically discover and load all commands from the commands folder into main.py.

2. Ideally, commands should be added to the bot without modifying main.py directly.


If anyone has experience with this or can point me toward resources/examples, I‚Äôd appreciate it!",Dull_Caregiver_6883,1gvzn4s,https://reddit.com/r/Python/comments/1gvzn4s/pyrogram_command_modulation_like_discordpy/,https://www.reddit.com/r/Python/comments/1gvzn4s/pyrogram_command_modulation_like_discordpy/,2024-11-20 21:07:43,7,0.82,7,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1gvzn4s
Python,Spelunking in Comments and Documentation for Security Footguns,"Hi everyone, we just posted a new article on interesting security footguns that could pop up in applications using third-party Elixir, Python, and Golang libraries. It's a fast read, so check it out! [https://blog.includesecurity.com/2024/11/spelunking-in-comments-and-documentation-for-security-footguns/](https://blog.includesecurity.com/2024/11/spelunking-in-comments-and-documentation-for-security-footguns/)",IncludeSec,1gvxlrz,https://reddit.com/r/Python/comments/1gvxlrz/spelunking_in_comments_and_documentation_for/,https://www.reddit.com/r/Python/comments/1gvxlrz/spelunking_in_comments_and_documentation_for/,2024-11-20 19:16:37,11,0.82,11,0,2,0,0,False,False,True,False,False,Resource,self,t3_1gvxlrz
Python,Looking for High-End Face Recognition Systems for Low-Resolution Feeds,"Hey everyone,
I've been working on a project related to face recognition systems, and I'm specifically looking for existing solutions or projects that focus on recognizing faces from low-resolution feeds. Does anyone have experience with or know of any high-end face recognition systems that perform well with low-resolution inputs?

Any insights or suggestions would be greatly appreciated!",Spidey_qbz,1gvoh92,https://reddit.com/r/Python/comments/1gvoh92/looking_for_highend_face_recognition_systems_for/,https://www.reddit.com/r/Python/comments/1gvoh92/looking_for_highend_face_recognition_systems_for/,2024-11-20 12:35:05,9,0.7,9,0,8,0,0,False,False,True,False,False,Discussion,self,t3_1gvoh92
Python,moka-py: A high performance caching library for Python written in Rust with TTL/TTI support,"Hello!

I'm exited to share my first Rust lib for Python ‚Äî [moka-py](https://github.com/deliro/moka-py)!

# What My Project Does

**moka-py**¬†is a Python binding for the highly efficient¬†[Moka](https://github.com/moka-rs/moka)¬†caching library written in Rust. This library allows you to leverage the power of Moka's high-performance, feature-rich cache in your Python projects.

# Key Features:

* **Synchronous Cache:**¬†Supports thread-safe, in-memory caching for Python applications.
* **TTL Support:**¬†Automatically evicts entries after a configurable time-to-live (TTL).
* **TTI Support:**¬†Automatically evicts entries after a configurable time-to-idle (TTI).
* **Size-based Eviction:**¬†Automatically removes items when the cache exceeds its size limit using the TinyLFU policy.
* **Concurrency:**¬†Optimized for high-performance, concurrent access in multi-threaded environments.
* **Fully typed:** mypy/pyright friendly. Even decorators

# Example (`@lru_cache` drop-in replacement but with TTL and TTI support):

```
from time import sleep
from moka_py import cached


@cached(maxsize=1024, ttl=10.0, tti=1.0)
def f(x, y):
    print(""hard computations"")
    return x + y


f(1, 2)  # calls computations
f(1, 2)  # gets from the cache
sleep(1.1)
f(1, 2)  # calls computations (since TTI has passed)
```

# One more example:

```
from time import sleep
from moka_py import Moka


# Create a cache with a capacity of 100 entries, with a TTL of 30 seconds
# and a TTI of 5.2 seconds. Entries are always removed after 30 seconds
# and are removed after 5.2 seconds if there are no `get`s happened for this time.
# 
# Both TTL and TTI settings are optional. In the absence of an entry, 
# the corresponding policy will not expire it.
cache: Moka[str, list[int]] = Moka(capacity=100, ttl=30, tti=5.2)

# Insert a value.
cache.set(""key"", [3, 2, 1])

# Retrieve the value.
assert cache.get(""key"") == [3, 2, 1]

# Wait for 5.2+ seconds, and the entry will be automatically evicted.
sleep(5.3)
assert cache.get(""key"") is None
```

# Target Audience

**moka-py** might be useful for short-term in-memory caching for frequently-asked data

# Comparison

* [cachetools](https://github.com/tkem/cachetools/) ‚Äî Pure Python caching library. 10-50% slower and has no typing

# TODO:
* Per-entry expiration
* Choosing between eviction policies (LRU/TinyLFU)
* Size-aware eviction
* Support async functions

# Links

* https://github.com/deliro/moka-py
* https://pypi.org/project/moka-py/",del1ro,1gvnsoh,https://reddit.com/r/Python/comments/1gvnsoh/mokapy_a_high_performance_caching_library_for/,https://www.reddit.com/r/Python/comments/1gvnsoh/mokapy_a_high_performance_caching_library_for/,2024-11-20 11:56:34,71,0.95,71,0,15,0,0,False,False,True,False,False,Showcase,self,t3_1gvnsoh
Python,Migrating from black and flake8 to ruff,"as the title says, so i'm currently working on a relatively huge python/django codebase, built over the course of 6 years, which has been using black and flake8 for formatting and linting in pre-commit hook, both have their versions unupdated for about 3 years, now i have a somewhat difficult task on hand.

the formatting and linting engine is to be moved to ruff but in such a way that the formatting and linting changes reflected in codebase due to ruff are minimal, i can't seem to figure out a way of exporting either configs from black and flake8 in their current state so i can somehow replicate them in ruff to control the changes due to formatting. if anyone has been in a similar situation or know any potential way i can approach this, that would greatly help. cheers!

pre-commit-config.yaml (in its current state, as you can see versions are a bit older)

    repos:
    -   repo: https://github.com/psf/black
        rev: 19.10b0
        hooks:
        - id: black
          additional_dependencies: ['click==8.0.4']
    -   repo: https://github.com/pre-commit/pre-commit-hooks
        rev: v1.2.3
        hooks:
        - id: flake8
          args: [--max-line-length=120]
        - id: check-yaml",__Aaliyan__,1gvnfvi,https://reddit.com/r/Python/comments/1gvnfvi/migrating_from_black_and_flake8_to_ruff/,https://www.reddit.com/r/Python/comments/1gvnfvi/migrating_from_black_and_flake8_to_ruff/,2024-11-20 11:33:47,50,0.83,50,0,45,0,0,False,False,True,False,False,Discussion,self,t3_1gvnfvi
Python,Created an AI Research Assistant that actually DOES research! one query FULL document of knowledge!,"Automated-AI-Web-Researcher: After months of work, I've made a python program that turns local LLMs running on Ollama into online researchers for you, Literally type a single question or topic and wait until you come back to a text document full of research content with links to the sources and a summary and ask it questions too! and more!



**What My Project Does**:



This automated researcher uses internet searching and web scraping to gather information, based on your topic or question of choice, it will generate focus areas relating to your topic designed to explore various aspects of your topic and investigate various related aspects of your topic or question to retrieve relevant information through online research to respond to your topic or question. The LLM breaks down your query into up to 5 specific research focuses, prioritising them based on relevance, then systematically investigates each one through targeted web searches and content analysis starting with the most relevant.

Then after gathering the content from those searching and exhausting all of the focus areas, it will then review the content and use the information within to generate new focus areas, and in the past it has often finding new, relevant focus areas based on findings in research content it has already gathered (like specific case studies which it then looks for specifically relating to your topic or question for example), previously this use of research content already gathered to develop new areas to investigate has ended up leading to interesting and novel research focuses in some cases that would never occur to humans although mileage may vary this program is still a prototype but shockingly it, it actually works!.

Key features:

* Continuously generates new research focuses based on what it discovers
* Saves every piece of content it finds in full, along with source URLs
* Creates a comprehensive summary when you're done of the research contents and uses it to respond to your original query/question
* Enters conversation mode after providing the summary, where you can ask specific questions about its findings and research even things not mentioned in the summary should the research it found provide relevant information about said things.
* You can run it as long as you want until the LLM‚Äôs context is at it‚Äôs max which will then automatically stop it‚Äôs research and still allow for summary and questions to be asked. Or stop it at anytime which will cause it to generate the summary.
* But it also Includes pause feature to assess research progress to determine if enough has been gathered, allowing you the choice to unpause and continue or to terminate the research and receive the summary.
* Works with popular Ollama local models (recommended phi3:3.8b-mini-128k-instruct or phi3:14b-medium-128k-instruct which are the ones I have so far tested and have worked)
* Everything runs locally on your machine, and yet still gives you results from the internet with only a single query you can have a massive amount of actual research given back to you in a relatively short time.

The best part? You can let it run in the background while you do other things. Come back to find a detailed research document with dozens of relevant sources and extracted content, all organised and ready for review. Plus a summary of relevant findings AND able to ask the LLM questions about those findings. Perfect for research, hard to research and novel questions that you can‚Äôt be bothered to actually look into yourself, or just satisfying your curiosity about complex topics!

GitHub repo with full instructions:

[https://github.com/TheBlewish/Automated-AI-Web-Researcher-Ollama](https://github.com/TheBlewish/Automated-AI-Web-Researcher-Ollama)

(Built using Python, fully open source, and should work with any Ollama-compatible LLM, although only phi 3 has been tested by me)

**Target Audience**:

  
Anyone who values locally run LLMs, anyone who wants to do comprehensive research within a single input, anyone who like innovative and novel uses of AI which even large companies (to my knowledge) haven't tried yet.

If your into AI, if your curious about what it can do, how easily you can find quality information using it to find stuff for you online, check this out!

  
**Comparison**:

  
Where this differs from per-existing programs and applications, is that it conducts research continuously with a single query online, for potentially hundreds of searches, gathering content from each search, saving that content into a document with the links to each website it gathered information from. 

Again potentially hundreds of searches all from a single query, not just random searches either each is well thought out and explores various aspects of your topic/query to gather as much usable information as possible.

Not only does it gather this information, but it summaries it all as well, extracting all the relevant aspects of the info it's gathered when you end it's research session, it goes through all it's found and gives you the important parts relevant to your question. Then you can still even ask it anything you want about the research it has found, which it will then use any of the info it has gathered to respond to your questions.

To top it all off compared to other services like how ChatGPT can search the internet, this is completely open source and 100% running locally on your own device,  with any LLM model of your choosing although I have only tested Phi 3, others likely work too!",CuriousAustralianBoy,1gvlzax,https://reddit.com/r/Python/comments/1gvlzax/created_an_ai_research_assistant_that_actually/,https://www.reddit.com/r/Python/comments/1gvlzax/created_an_ai_research_assistant_that_actually/,2024-11-20 09:50:09,90,0.8,90,0,13,0,0,False,False,True,False,False,Showcase,self,t3_1gvlzax
Python,I'm stucking in installing numpy ,"Hello everyone , im trying to install numpy library on my terminal and always i face a problem on installing backend dependencies, i try to solve this problem by adding cmake to my system path and the c/cpp compiler and the problem continue , then i try installing .whl files of numpy and still the same problem , can anyone here have a solution for this problem . ",MoistRiver6695,1gvkpbm,https://reddit.com/r/Python/comments/1gvkpbm/im_stucking_in_installing_numpy/,https://www.reddit.com/r/Python/comments/1gvkpbm/im_stucking_in_installing_numpy/,2024-11-20 08:08:31,0,0.29,0,0,14,0,0,False,False,True,False,False,Discussion,self,t3_1gvkpbm
Python,Boiler plate for flask back end.,I am looking for Flask boiler plate for creating backend services. I am exploring cookie cutter but it seems old. Is any other updated resource available ?,ksk99,1gvjp8p,https://reddit.com/r/Python/comments/1gvjp8p/boiler_plate_for_flask_back_end/,https://www.reddit.com/r/Python/comments/1gvjp8p/boiler_plate_for_flask_back_end/,2024-11-20 06:54:14,13,0.76,13,0,4,0,0,False,False,True,False,False,Resource,self,t3_1gvjp8p
Python,Much faster than pandas for simple cases? Leopards...,"... in _particular_ if your data is from CSV:

https://github.com/mkalioby/leopards

Let's admit it guys - Pandas _can_ be overkill, great as it is.",Fancy-Ad-6078,1gvhsz1,https://reddit.com/r/Python/comments/1gvhsz1/much_faster_than_pandas_for_simple_cases_leopards/,https://www.reddit.com/r/Python/comments/1gvhsz1/much_faster_than_pandas_for_simple_cases_leopards/,2024-11-20 04:54:04,0,0.39,0,0,7,0,0,False,False,True,False,False,Resource,self,t3_1gvhsz1
Python,I am thinking of making a tool script that makes it easier for linux admins ,To many commands is a pain to recall the switches and so on. Anyone know of any shell script that can provide a menu then sub-menu of options? ,Gold-Temporary-3560,1gvhb2h,https://reddit.com/r/Python/comments/1gvhb2h/i_am_thinking_of_making_a_tool_script_that_makes/,https://www.reddit.com/r/Python/comments/1gvhb2h/i_am_thinking_of_making_a_tool_script_that_makes/,2024-11-20 04:25:56,8,0.66,8,0,7,0,0,False,False,True,False,False,Discussion,self,t3_1gvhb2h
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1gvbziu,https://reddit.com/r/Python/comments/1gvbziu/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1gvbziu/wednesday_daily_thread_beginner_questions/,2024-11-20 00:00:09,4,0.76,4,0,5,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gvbziu
Python,Retro Terminal Chatbot (GLaDOS),"Hey everyone! I‚Äôd like to share a Python project I‚Äôve been working on for a while now. It‚Äôs a chatbot based on GLaDOS from the Portal games, with a retro-style terminal interface and her iconic voice. I think any portal fans among you will enjoy it.

# What My Project Does

GLaDOS-Terminal is a fully interactive chatbot experience that brings the personality of GLaDOS to life.

* Chatting: The responses are generated using the llama3.2:3b model, giving her personality depth and sarcasm that feels true to the original character.
* Voice Synthesis: Her iconic voice is recreated using custom fine-tuned Tacotron 2 and HiFi-GAN models that I developed specifically for this project.
* UI and Visuals: The terminal is built using pygame combined with a custom moderngl shader, inspired by the retro visuals from the Portal end credits and [this ](https://github.com/Swordfish90/cool-retro-term)project.

# Target Audience

This project is mainly for:

* Portal fans who want a chance to talk to GLaDOS (or at least her chatbot counterpart).
* Developers or Python enthusiasts who are curious about integrating AI models, custom shaders, and real-time voice synthesis.
* Anyone looking for a cool and unique chatbot experience.

Right now, this is more of a showcase or experimental project since it‚Äôs somewhat technical to set up. However, I‚Äôm planning to release an .exe soon to make it more accessible for non-programmers.

# Comparison

There are other AI chatbots and text-to-speech projects out there, but here‚Äôs how this one stands out:

* GLaDOS Personality: This isn‚Äôt just a generic chatbot with GLaDOS references. I‚Äôve carefully crafted her responses and used a system prompt to stay true to her character.
* Custom Voice Models: The Tacotron 2 and HiFi-GAN models are my own forks, fine-tuned specifically for this project to capture her unique tone and speech patterns.
* Retro UI: The terminal interface isn‚Äôt a simple script running in the console; it‚Äôs a fully custom visual experience made with Python‚Äôs pygame and my own moderngl shader work.

# Links

* GitHub: [https://github.com/LuckeyDuckey/GLaDOS-Terminal](https://github.com/LuckeyDuckey/GLaDOS-Terminal)
* Demo: [https://www.reddit.com/r/Portal/comments/1gui3f4/gladosterminal/](https://www.reddit.com/r/Portal/comments/1gui3f4/gladosterminal/)

Let me know what you think! I‚Äôd love to hear your guys feedback :)",User_638,1gv92l4,https://reddit.com/r/Python/comments/1gv92l4/retro_terminal_chatbot_glados/,https://www.reddit.com/r/Python/comments/1gv92l4/retro_terminal_chatbot_glados/,2024-11-19 21:52:48,25,0.8,25,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gv92l4
Python,Build a Crypto Market-Making Bot with Python (Live Demo in London),"Hey Python devs,

If you're interested in seeing how Python is used in algorithmic trading, we‚Äôre hosting an **in-person event in London** on **Monday, 25th November** where Jahan Zahid, PhD (co-founder of ProfitView and former algo trader at Bank of America), will give a **live demo** of building a crypto market-making algo.

Reserve your place [**here**](https://www.meetup.com/algorithmic-trading-london/events/304541878/) through Meetup

**What‚Äôs involved?**

* Writing and configuring the bot entirely in Python.
* Deploying it live to crypto markets to trade in real time.
* Exploring the strategies needed to automate market-making in real markets.

This session will dive into **real-world uses of Python in financial markets**, so it could be useful for those curious about Python in fintech, algorithmic trading, and crypto.

üìÖ **When:** Monday, 25th November, 7:00 PM  
üìç **Where:** The City Pride, London

It‚Äôs always fascinating to see Python at work in different domains, and I thought this might resonate with anyone exploring fintech or algo trading. Let me know if you‚Äôd like more details or resources on the topic!",tradrich,1gv1cfe,https://reddit.com/r/Python/comments/1gv1cfe/build_a_crypto_marketmaking_bot_with_python_live/,https://www.reddit.com/r/Python/comments/1gv1cfe/build_a_crypto_marketmaking_bot_with_python_live/,2024-11-19 16:34:15,0,0.31,0,0,2,0,0,False,False,True,False,False,News,self,t3_1gv1cfe
Python,Python @classmethod: examples emphasizing use cases in bioinformatics-related problems.,"This article delves into the structures and functionalities of the class method in Python. I have particularly used examples that emphasize the use cases in bioinformatics-related problems. 

[Python @classmethod: Life Sciences Applications and Examples.](https://lifescienceshub.wixsite.com/lifesciencehub/post/clssmethod)

Classmethods are made by assigning \`@classmethod\` decorators to methods in a class context. This enables a method to:

1. Access class states across all instances of the class.

2. Modify class states.

3. Act as a blueprint for creating instances of its class and other subclasses.

4. Access methods and attributes of the parent and/or sibling classes using \`super()\` without instantiation.

",learnwithscholar,1guzcuf,https://reddit.com/r/Python/comments/1guzcuf/python_classmethod_examples_emphasizing_use_cases/,https://www.reddit.com/r/Python/comments/1guzcuf/python_classmethod_examples_emphasizing_use_cases/,2024-11-19 15:11:14,0,0.38,0,0,7,0,0,False,False,True,False,False,Tutorial,self,t3_1guzcuf
Python,Joe: writing a Django mini-clone article series,"Hey all!   
I've written a series of article that go through the process of building a minimal Django clone, which I hope could be a useful learning resource. 

[https://artoale.gitlab.io/joe](https://artoale.gitlab.io/joe)  

Feedback welcome! ",artoale,1gutct7,https://reddit.com/r/Python/comments/1gutct7/joe_writing_a_django_miniclone_article_series/,https://www.reddit.com/r/Python/comments/1gutct7/joe_writing_a_django_miniclone_article_series/,2024-11-19 09:29:55,14,0.77,14,0,2,0,0,False,False,True,False,False,Resource,self,t3_1gutct7
Python,"Rewriting 4,000 lines of Python to migrate to Quart (async Flask)","[Talk Python rewritten in Quart (async Flask)](https://talkpython.fm/blog/posts/talk-python-rewritten-in-quart-async-flask/)

Here's a massive write up of why over at Talk Python we rewrote our website and why we chose Quart (async Flask). Lots of lessons here if you're choosing a framework for a project or considering rewriting your own. ",mikeckennedy,1gulzjt,https://reddit.com/r/Python/comments/1gulzjt/rewriting_4000_lines_of_python_to_migrate_to/,https://www.reddit.com/r/Python/comments/1gulzjt/rewriting_4000_lines_of_python_to_migrate_to/,2024-11-19 01:52:08,60,0.91,60,0,17,0,0,False,False,True,False,False,News,self,t3_1gulzjt
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1gujmbz,https://reddit.com/r/Python/comments/1gujmbz/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1gujmbz/tuesday_daily_thread_advanced_questions/,2024-11-19 00:00:09,3,0.64,3,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gujmbz
Python,Using Python's pathlib module,"I've written a hybrid ""why pathlib"" and ""pathlib cheat sheet"" post: [Python's pathlib module](https://www.pythonmorsels.com/pathlib-module/).

I see this resource as a living document, so feedback is very welcome.",treyhunner,1guhphv,https://reddit.com/r/Python/comments/1guhphv/using_pythons_pathlib_module/,https://www.reddit.com/r/Python/comments/1guhphv/using_pythons_pathlib_module/,2024-11-18 22:35:45,93,0.9,93,0,26,0,0,False,False,True,False,False,Resource,self,t3_1guhphv
Python,"If you use uv, what are your use cases for uvx?","I really love `uv` as my new All-In-One tool for python project management.  
I also really like the `uv tool` functionality for tools I regularly use like Harlequin or my kanban/tasks apps `kanban-python` and more lately the less minimal `kanban-tui`.

But I it never really clicked for me when I would use `uvx` which basically installs a tool temporary and after usage removes it again (though still cached, so future uses go faster).

Currently I am on my way to release v0.4.0 of [kanban-tui](https://github.com/Zaloog/kanban-tui) with multi board support and board-individual columns. I develop those features in a new branch and just discovered that you can use something like:

```pwhs
uvx --from git+https://github.com/Zaloog/kanban-tui@lg/independent-board-columns ktui demo
```
to install the current development status from a custom branch (or even commit)
within seconds. A great way to quickly share the current progress of your work with friends or use your tool on your system already without creating a new release yet.

I am curious to hear, what are your use cases for `uvx`, and what are your favourite tools to use with it?

",Zaloog1337,1guf2fh,https://reddit.com/r/Python/comments/1guf2fh/if_you_use_uv_what_are_your_use_cases_for_uvx/,https://www.reddit.com/r/Python/comments/1guf2fh/if_you_use_uv_what_are_your_use_cases_for_uvx/,2024-11-18 20:45:59,90,0.94,90,0,36,0,0,False,False,True,False,False,Discussion,self,t3_1guf2fh
Python,Basic Components: Server-Side UI Components for Python Web Apps (Feedback Appreciated),"Hi everyone! üëã

I'm excited to share a project I've been working on called **Basic Components**, which ports shadcn/ui component to the Python/Jinja.

# What My Project Does

**Basic Components** is a collection of reusable, **server-side UI components** built with [JinjaX](https://jinjax.scaletti.dev/), [htmx](https://htmx.org/), and [Alpine.js](https://alpinejs.dev/) and [Tailwind CSS](https://tailwindcss.com/). It's a port of [shadcn/ui](https://ui.shadcn.com) to Python/Jinja. It allows you to build dynamic, responsive web applications using Python web frameworks like **FastAPI**, **Django**, and **Flask**.

**Key Features**:

* **Copy/Paste Components**: No package to install; simply copy the components you need into your project.
* **Full Customization**: Complete control over the components to modify and extend as needed.
* **Tailwind CSS Styling**: Styled using Tailwind CSS utility classes for consistent and rapid UI development.
* **Accessibility-First Design**: Components are built with accessibility in mind, based on shadcn/ui.
* **Dark Mode Support**: Built-in theming with light and dark modes.
* **Markup Compatibility**: The component markup is the same as in shadcn/ui, making it easy to adapt and integrate.

# Target Audience

This project is intended for Python web developers who prefer a server-first architecture and want to build modern, interactive web applications without relying heavily on client-side JavaScript frameworks.

# Comparison to Existing Alternatives

While there are many frontend component libraries available for JavaScript frameworks like React or Vue, Python web development has fewer options for modern, component-based UI development. **Basic Components** differs by:

* **Server-Side Rendering**: Components are rendered on the server using JinjaX, improving performance, SEO, and accessibility.
* **No Additional Dependencies**: Unlike traditional libraries, there's no package to install; you own the code and can customize it freely.
* **Integration with Python Frameworks**: Runs on anything that supports Jinja templates. I've included examples for **FastAPI**, **Django**, and **Flask**.
* **Minimal Client-Side JavaScript**: Uses **htmx** and **Alpine.js** for dynamic behavior without the overhead of heavy frontend frameworks.
* **Markup Parity with shadcn/ui**: Since components are based on shadcn/ui, the markup is the same, making it easy to transition components created for  shadcn/ui with minimal changes.
* **AI**: I've leveraged LLMs to port code from the shadcn/ui React versions to JinjaX, using Alpine.js for client side logic and maintaining all of the Tailwind CSS styles. I've included a [guide](https://github.com/basicmachines-co/basic-components/blob/main/llms.md) for porting components also that you can drop into an LLM chat for context.

# Example Usage

Here's how a component might look in your template:

    &lt;Button
      variant=""outline""
      hx-get=""/api/data""
      hx-target=""#result""
      x-on:click=""open = !open""
    &gt;
      Click me
    &lt;/Button&gt;

* `&lt;Button&gt;`: A server-side component rendered with JinjaX.
* `hx-get` **/** `hx-target`: **htmx** attributes for dynamic server communication.
* `x-on:click`: **Alpine.js** directive for client-side interactivity.
* **Markup Compatibility**: The markup is consistent with shadcn/ui components, allowing for familiarity and ease of use.

# Links

* **Documentation with Demos**: [https://components.basicmachines.co/](https://components.basicmachines.co/)
* **GitHub Repository**: [https://github.com/basicmachines-co/basic-components](https://github.com/basicmachines-co/basic-components)
* **Why I did this**: [https://components.basicmachines.co/docs/modern\_tools](https://components.basicmachines.co/docs/modern_tools)

# Feedback Welcome

The project is MIT licensed and is a work in progress, and I would greatly appreciate any feedback, suggestions, or contributions if you are interested.

Thank you for your time, and I hope you find **Basic Components** useful!

**Note**: This project is not affiliated with [shadcn](https://twitter.com/shadcn). It's an unofficial port **based on** shadcn/ui, adapted for Python/Jinja.

Thanks!",phernand3z,1gue0s5,https://reddit.com/r/Python/comments/1gue0s5/basic_components_serverside_ui_components_for/,https://www.reddit.com/r/Python/comments/1gue0s5/basic_components_serverside_ui_components_for/,2024-11-18 20:02:25,20,0.88,20,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1gue0s5
Python,.env safely share ,"How do you manage your .env safely? 

Mostly when you are in a small group and you can‚Äôt be setting up everything to the develop branch all the time 

How do you share that .env with each other and test it locally? ",Used-Feed-3221,1gud1h9,https://reddit.com/r/Python/comments/1gud1h9/env_safely_share/,https://www.reddit.com/r/Python/comments/1gud1h9/env_safely_share/,2024-11-18 19:22:05,44,0.85,44,0,49,0,0,False,False,True,False,False,Discussion,self,t3_1gud1h9
Python,"Raspberry Pi camera modules, machine vision and astro cameras in Python","Right now we have a lot of camera modules for Raspberry Pi but also for compatible Arduino boards (ArduCam). Those camera modules can offer higher resolution than webcams as well as more refined control of exposure time, gain and so on - hand for prototyping projects or unconventional imaging.

Webcams themselves can also be used in Python through OpenCV and there are some ""premium"" models offering actual 4K and not absurd resizing (interpolation). Even decent 1080p cameras can give a good quality image - but they do lack more refined control over shutter speed or output formats.

Machine vision cameras are used by various industries, often integrated with advanced commercial software - wherever a medical camera or production line testing/validation systems. Some vendors do offer bindings to some scripting languages, including Python. Those cameras aside of color sensors are available with mono sensors as well and those could be used with custom filters to do UV imaging or something similar (IR imaging - but not thermal). Those cameras also offer lossless output.

Amateur astrophotography uses cameras similar to machine vision (planetary/lunar/solar imaging) with some cameras equipped with large sensors and active cooling for long exposure imaging. Those also can be used in custom projects and often have Python bindings or even Linux ARM support (some RPI based compact/remote-control imaging systems).

* Bunch of Raspberry Pi camera modules showcased: [https://rkblog.dev/posts/electronics/testing-raspberry-pi-cameras/](https://rkblog.dev/posts/electronics/testing-raspberry-pi-cameras/)
* Python bindings for various machine vision and astrophotography cameras: [https://rkblog.dev/posts/python/scripting-machine-vision-and-astronomical-cameras-python/](https://rkblog.dev/posts/python/scripting-machine-vision-and-astronomical-cameras-python/)
* Proof-of-concept GUI for a Ximea vision camera in PyQt and as a web app with Flask/JS: [https://rkblog.dev/posts/python/scripting-ximea-machine-vision-applications-python-flask-and-pyqt/](https://rkblog.dev/posts/python/scripting-ximea-machine-vision-applications-python-flask-and-pyqt/)",riklaunim,1gucbvz,https://reddit.com/r/Python/comments/1gucbvz/raspberry_pi_camera_modules_machine_vision_and/,https://www.reddit.com/r/Python/comments/1gucbvz/raspberry_pi_camera_modules_machine_vision_and/,2024-11-18 18:53:48,14,0.86,14,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1gucbvz
Python,I made my own tetris on Python,"# What my project does

The project is to play the game tetris using the library pygame.

Here's the¬†[source code](https://github.com/RadoTheProgrammer/tetris/tree/main)¬†on github.

If you have time, please try my game or my source code if it works, and give some feedback to improve it, the gameplay, or the code, or anything else.

# Target Audience

For people who just want to have fun, or are ready to try some new projects.

# Comparison

Well, there's almost nothing special here, unless that the music is different (not the classical music of tetris). The main goal of this project is just to show my coding skills, and improve them.



And it would be great for me if you could leave a star on github, if you liked it, or just to support me !",RRTheGuy,1gubukk,https://reddit.com/r/Python/comments/1gubukk/i_made_my_own_tetris_on_python/,https://www.reddit.com/r/Python/comments/1gubukk/i_made_my_own_tetris_on_python/,2024-11-18 18:34:33,4,0.57,4,0,10,0,0,False,False,True,False,False,Showcase,self,t3_1gubukk
Python,Support Python: Our End-of-Year Fundraiser with PyCharm Discount is live,"Our end of year fundraiser and membership drive has launched! There are 3 ways to join in to support Python and the PSF:
- [30% off @PyCharm
 from JetBrains](https://lp.jetbrains.com/psf-q4-2024-fundraiser-3783/)
- [Donate directly](https://psfmember.org/civicrm/contribute/transact/?reset=1&amp;id=52)
- [Become a member](https://www.python.org/psf/membership/supporting/)

[Learn more](https://pyfound.blogspot.com/2024/11/help-power-python-2024-fundraiser.html)

Python empowers you to build amazing tools, build/grow companies, and secure jobs‚Äîall for free! Consider giving back today.",monorepo,1gu7g70,https://reddit.com/r/Python/comments/1gu7g70/support_python_our_endofyear_fundraiser_with/,https://www.reddit.com/r/Python/comments/1gu7g70/support_python_our_endofyear_fundraiser_with/,2024-11-18 15:35:03,29,0.76,29,0,6,0,0,False,False,True,False,False,:pythonLogo: Official Event,self,t3_1gu7g70
Python,Launching Hercules: Open source agent for end to end software testing üí™,"Happy to launch Hercules: World's first opensource software testing agent. Feed in your tests, watch them run and get results (without code, maintenance or costs). Check it out here: [https://github.com/test-zeus-ai/testzeus-hercules](https://github.com/test-zeus-ai/testzeus-hercules)

* **What My Project Does:** Testing modern web applications can be difficult, with frequent changes and complex features making it hard to keep up. That‚Äôs where¬†**Hercules**¬†comes in. Hercules is the world‚Äôs first open-source testing agent, built to handle the toughest testing tasks so you don‚Äôt have to. It turns simple, easy-to-write Gherkin steps into fully automated¬†**end to end**¬†tests‚Äîno coding skills needed. Whether you‚Äôre working with tricky platforms like Salesforce or running tests in your CI/CD pipeline, Hercules adapts to your needs and takes care of the details. With Hercules, testing becomes simple, reliable, and efficient, helping teams everywhere deliver better software.
* **Target Audience**¬†: Software testers, SDET, Developers, QA, QE
* **Comparison**¬†: Hercules isn't just another testing tool‚Äîit's an¬†**agent**. Powered by synthetic intelligence that can¬†**think, reason, and react**¬†based on requirements, Hercules goes beyond simple automation scripts. We bring an industry-first approach to open-source agents for¬†**software testing**. This means faster, smarter, and more resilient testing cycles, especially for complex platforms. With¬†**industry-leading performance**¬†and a fully open-source foundation, Hercules combines powerful capabilities with community-driven flexibility, making top-tier testing accessible and transformative for everyone.",Unhappy-Economics-43,1gu5vtz,https://reddit.com/r/Python/comments/1gu5vtz/launching_hercules_open_source_agent_for_end_to/,https://www.reddit.com/r/Python/comments/1gu5vtz/launching_hercules_open_source_agent_for_end_to/,2024-11-18 14:25:28,14,0.7,14,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gu5vtz
Python,AuthSphere: The Ultimate FastAPI Authentication Package,"# Hello everyone,

My name is Shashank, and I'm a Python developer passionate about creating tools that simplify backend development. Over the past few months, I‚Äôve been working on a project called **AuthSphere**, and I‚Äôd love to hear your feedback and thoughts on it!

# What My Project Does:

**AuthSphere** is an open-source authentication library built specifically for **FastAPI**. It simplifies common authentication tasks, such as **token management**, **password resets**, and **email OTPs**, so developers can focus on building features instead of reinventing authentication systems.

# Key Features:

* **Token Management**: Easily handle token generation, expiration, and renewal.
* **Password Reset**: Manage secure workflows for password resets.
* **Email OTP Verification**: Add an extra layer of security with one-time passwords.
* **FastAPI-Optimized**: Designed with seamless integration and asynchronous support in mind.

# Target Audience:

**Who It's For:**

* Python developers working on **FastAPI** projects.
* Teams looking for a **pre-built authentication solution** that‚Äôs robust and easy to use.
* Contributors passionate about **open-source development** who‚Äôd like to collaborate on improving AuthSphere.

**Intended Use:**

* Production-ready projects that require a reliable authentication system.
* Educational use to understand secure authentication practices.

# Use Cases:

* **Quick Integration**: Drop it into your FastAPI app for authentication with minimal setup.
* **Feature Expansion**: Enhance existing projects by adding secure OTP and password reset workflows.
* **Collaboration**: Use AuthSphere as a starting point for custom authentication needs and contribute new features.

# Comparison:

While libraries like **FastAPI Users** exist, **AuthSphere** focuses on:

* **Comprehensive Features**: Token management, OTPs, and password resets in a single package.
* **Ease of Use**: Built to simplify the integration process with detailed documentation and examples.
* **Extensibility**: A flexible foundation for custom workflows, catering to different backend requirements.

# Links:

* **GitHub Repository**: [AuthSphere on GitHub](https://github.com/Shashank-Ganesh-Holla/AuthSphere)
* **PyPI Package**: Coming Soon! (Planned for easy installation in the next release.)

# What‚Äôs Next?

AuthSphere is actively being developed, and I‚Äôd love to hear your feedback on:

* Features you‚Äôd like to see.
* Suggestions for improvement.
* Issues or bugs you encounter.

Whether you're a **user**, a **contributor**, or just someone curious about authentication tools for FastAPI, I‚Äôd love to hear your thoughts!

# A Little About Me:

üëã Hi, I‚Äôm Shashank, a backend developer passionate about building tools that make development faster and more secure. I‚Äôm also looking for opportunities to work with organizations or teams that value innovation and collaboration. Let‚Äôs connect! üöÄ

# Thank You!

I‚Äôd love your feedback, suggestions, or even contributions to make **AuthSphere** a better tool for the Python community.

# Why This Version Works:

1. **It includes all required sections**:
   * What the project does.
   * Target audience.
   * Use cases.
   * A comparison with existing tools.
2. **It‚Äôs informative without being overly promotional**, emphasizing community feedback and collaboration.
3. **It provides actionable links** (e.g., GitHub).",Comprehensive-Lie706,1gtyd4z,https://reddit.com/r/Python/comments/1gtyd4z/authsphere_the_ultimate_fastapi_authentication/,https://www.reddit.com/r/Python/comments/1gtyd4z/authsphere_the_ultimate_fastapi_authentication/,2024-11-18 06:12:49,0,0.33,0,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gtyd4z
Python,ansiplot: Pretty (and legible) small console plots. ,"**What My Project Does**

Hi all! While developing something different I realized that it would be nice to have a way of plotting multiple curves in the console to get comparative insights (which of those curves is better or worse at certain regions). I am thinking of a 40x10 to 60x20 canvas and maybe 10+ curves that will probably be overlapping a lot.

I couldn't find something to match the exact use case, so I made yet another console plotter:

[https://github.com/maniospas/ansiplot](https://github.com/maniospas/ansiplot)

**Target Audience**

This is mostly a toy project in the sense that it covers the functionalities I am interested in and was made pretty quickly (in an evening). That said, I am creating it for my own production and will be polishing it as needed, so all feedback is welcome.

**Comparison**

My previous options were previously \[asciichart\](https://github.com/kroitor/asciichart), \[drawilleplot\](https://github.com/gooofy/drawilleplot) and \[asciiplot\](https://github.com/w2sv/asciiplot). I think ansiplot looks less ""clean"" because it is restricted to using one symbol per curve, creates thicker lines, and does not show axis tics other than the values for mins and maxs (of course, one can add bars to mark precise points).

The first two shortcomings are conscious design decision in service of two features I consider very important:  
\- The plots look pretty with ANSI colors, but different symbols still accommodate colorblind people and text file exports (there is an option to remove colors while getting the raw text). This is a production need that I think existing tools fail hard at - am I missing something obvious here?  
\- Ansiplot runs a simple heuristic (may evolve in the future) for mixing partially overlapping curves and still making some sense of which exhibit greater values. When there are many curves (especially ROC curves which is my intended use case) they tend to overlap a lot, and I needed something that would help tell where each one's value is going.

P.S. For the lack of axis tics, I am still designing a scheme to ensure a (mostly) predictable canvas size irrespective of whether numbers are big or small (I want to allow very small and very large numbers without the risk of them exceeding the plot limits).

  
**Edit**: Typos",Unlikely-Bed-1133,1gtvy3o,https://reddit.com/r/Python/comments/1gtvy3o/ansiplot_pretty_and_legible_small_console_plots/,https://www.reddit.com/r/Python/comments/1gtvy3o/ansiplot_pretty_and_legible_small_console_plots/,2024-11-18 03:49:01,30,0.88,30,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1gtvy3o
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1gtrhgb,https://reddit.com/r/Python/comments/1gtrhgb/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1gtrhgb/monday_daily_thread_project_ideas/,2024-11-18 00:00:13,4,0.68,4,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gtrhgb
Python,SQLModel vs SQLAlchemy for production ,"Hey everyone, I was wondering whether the current releases of SQLModel is appropriate for production? Couldn‚Äôt find a recent post about this
I‚Äôm trying to set up a web app with fastapi backend and react frontend. Was deciding whether to pick SQLAlchemy or not",aerodynamics1,1gtrfpf,https://reddit.com/r/Python/comments/1gtrfpf/sqlmodel_vs_sqlalchemy_for_production/,https://www.reddit.com/r/Python/comments/1gtrfpf/sqlmodel_vs_sqlalchemy_for_production/,2024-11-17 23:57:45,30,0.81,30,0,25,0,0,False,False,True,False,False,Discussion,self,t3_1gtrfpf
Python,How I Doubled My Sales in 1 Week with Python Automation,"1 minute video that showcases everything
https://youtu.be/-N17M3Ky14c

**What my project does**: finds winning e-commerce related videos, scrapes them and displays the data in a beaitiful frontend with a chatbot

**Target Audience**: Entrepreneurs

**Comparison**: Up to date, no bugs and gets updated regularly 

Source code:

https://github.com/DankoOfficial/Tiktok-Angrybird",ConfectionAvailable8,1gtojam,https://reddit.com/r/Python/comments/1gtojam/how_i_doubled_my_sales_in_1_week_with_python/,https://www.reddit.com/r/Python/comments/1gtojam/how_i_doubled_my_sales_in_1_week_with_python/,2024-11-17 21:44:01,0,0.35,0,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gtojam
Python,I started implementing an AsyncIO event loop in Rust,"The project is called *RLoop* and available [in the relevant GH repository](https://github.com/gi0baro/rloop).

# What My Project Does

RLoop is intended to be a 1:1 replacement for the standard library asyncio event loop. At the moment RLoop is still very pre-alpha, as it only supports I/O handles involving raw socket file descriptors. The aim is to reach a stable and feature-complete release in the next few months.

# Target Audience

RLoop is intended for every `asyncio` developer. Until the project reach a stable state though, is intended for use only in non-production environments and for testing purposes only.

# Comparison to Existing Alternatives

The main existing alternatives to RLoop are the standard library implementation and `uvloop`.

Aside from the lack of features of RLoop at this stage, some preliminary benchmarks on MacOS and Python 3.11 with a basic TCP echo show a 30% gain over the default `asyncio` implementation, while `uvloop` is still 50% faster.

___

Feel free to post your feedbacks, test RLoop within your environment and contribute :)",gi0baro,1gtmvdb,https://reddit.com/r/Python/comments/1gtmvdb/i_started_implementing_an_asyncio_event_loop_in/,https://www.reddit.com/r/Python/comments/1gtmvdb/i_started_implementing_an_asyncio_event_loop_in/,2024-11-17 20:30:54,16,0.8,16,0,13,0,0,False,False,True,False,False,Showcase,self,t3_1gtmvdb
Python,Script combines project files and directory structure into 1 txt file for AI chat context,"Sharing my open source script, [Concat-Proj](https://github.com/licjon/concat-proj), which helps provide code context to AI chat assistants by combining multiple project files into a single, well-formatted text file (including directory structure). I use it all the time. This is mostly for people who don't have AI subscriptions. I'm sure there are better solutions such as prompt generators and other subscription-based solutions. But for cavemen like me, this is my club of choice. 

See readme for all the options available. 

By default, the tool ignores:

* Hidden files and directories (starting with .)
* Build directories (dist, build, target, etc.)
* Compiled files (.pyc, .class, .o, etc.)
* Package management directories (node\_modules, **pycache**, etc.)
* Binary and compressed files (.exe, .dll, .zip, etc.)
* Most virtual environment folders (can be named anything, so ignores common naming patterns)",licjon,1gtkkby,https://reddit.com/r/Python/comments/1gtkkby/script_combines_project_files_and_directory/,https://www.reddit.com/r/Python/comments/1gtkkby/script_combines_project_files_and_directory/,2024-11-17 18:49:42,5,0.67,5,0,8,0,0,False,False,True,False,False,Resource,self,t3_1gtkkby
Python,treemind: Simplifying Gradient Boosting Model Analysis,"`treemind` is a powerful Python library designed to analyze gradient boosting models like `xgboost`, `lightgbm`, and `catboost`. It provides clear insights into how features and their interactions influence predictions across specific intervals, helping practitioners understand and explain model behavior effectively.

### **What My Project Does**

`treemind` enables:

- **Feature Contribution Analysis:** Quantify how each feature impacts predictions.

- **Interaction Insights:** Dive into complex interactions between up to `n` features.

- **Interval-Based Analysis:** Understand feature importance across value intervals for nuanced decision-making.

- **Advanced Visualizations:** Generate user-friendly plots to explain and interpret model decisions.

### **Target Audience**

This library is aimed at:

- Data scientists and machine learning practitioners seeking to interpret gradient boosting models in-depth.

- Researchers exploring feature interactions in tree-based models.

- ML practitioners in both production and experimental settings who require clear, actionable insights into their model's decision-making processes.

### **Comparison to Existing Alternatives**

Here‚Äôs how `treemind` stands out:

- **Versus SHAP:** While SHAP provides a global and local explanation framework, `treemind` focuses on **interval-based** feature importance and interactions, offering unique granularity.
### **Key Features**

- **User-Friendly Visualizations:** Intuitive plots for feature contributions and interaction effects.

- **High Performance:** Built with Cython for rapid execution.

- **Seamless Integration:** Works effortlessly with `xgboost`, `lightgbm`, and `catboost`.

- **Regression &amp; Binary Classification Support:** Tailored for key ML tasks.

### **Algorithm &amp; Performance**

The algorithm behind `treemind` analyzes feature contributions and interactions to extract meaningful insights. [Learn more about the algorithm](https://treemind.readthedocs.io/en/latest/algorithm.html).

The performance of treemind has been evaluated on synthetic datasets and benchmarked against SHAP to provide a comparative perspective. Detailed results are available at [View performance experiments](https://treemind.readthedocs.io/en/latest/experiments/experiment_main.html).

---

### **Quick Start**

Install `treemind` via pip:

```bash

pip install treemind

```

Explore the documentation for examples, visualizations, and API details: [Docs](https://treemind.readthedocs.io/)

GitHub Repository: [https://github.com/sametcopur/treemind](https://github.com/sametcopur/treemind)

---

We‚Äôd love your feedback and contributions! While `treemind` produces effective results, we acknowledge the current lack of formal mathematical proof for its algorithm and welcome collaboration to refine and validate the approach further.",zedeleyici3401,1gtki6f,https://reddit.com/r/Python/comments/1gtki6f/treemind_simplifying_gradient_boosting_model/,https://www.reddit.com/r/Python/comments/1gtki6f/treemind_simplifying_gradient_boosting_model/,2024-11-17 18:47:02,9,0.85,9,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gtki6f
Python,Python poker program (base/basic intermediate level) to have a better understanding of fundamentals ,"**What my project does:** It is a terminal playing poker game, open source and user friendly. I‚Äôm the terminal, you decide if you want to play and change how many cards you want (obviously max 5).
**Audience:** beginners who want to understand some python mechanics, basic intermediate who wants to consolidate their knowledge and card game lovers, also could be useful for have a good starting structure if you want to build a card based game. 
**Comparison:** my code is all done based on the idea which people would have find and understand all lines without problem (there are lines commented, so no need to struggle) . Also as said, it is open source, so the last combinations need to be written by you, a little challenge and self-reward! (It also has lines to test the code, like specific hands that you want)

Let me know what you think of my first project, if you find it useful or have some requests 
github.com/ThatGabrieleC/5-card-Poker",UnclearMango5534,1gtkbvf,https://reddit.com/r/Python/comments/1gtkbvf/python_poker_program_basebasic_intermediate_level/,https://www.reddit.com/r/Python/comments/1gtkbvf/python_poker_program_basebasic_intermediate_level/,2024-11-17 18:39:14,3,0.61,3,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1gtkbvf
Python,Deply: keep your python architecture clean,"Hello everyone,

My name is Archil. I'm a Python/PHP developer originally from Ukraine, now living in Wroc≈Çaw, Poland. I've been working on a tool called [Deply](https://github.com/Vashkatsi/deply), and I'd love to get your feedback and thoughts on it.

# What My Project Does

**Deply** is a standalone Python tool designed to enforce architectural patterns and dependencies in large Python projects. Deply analyzes your code structure and dependencies to ensure that architectural rules are followed. This promotes cleaner, more maintainable, and modular codebases.

**Key Features:**

* **Layer-Based Analysis**: Define custom layers (e.g., models, views, services) and restrict their dependencies.
* **Dynamic Configuration**: Easily configure collectors for each layer using file patterns and class inheritance.
* **CI Integration**: Integrate Deply into your Continuous Integration pipeline to automatically detect and prevent architecture violations before they reach production.

# Target Audience

* **Who It's For**: Developers and teams working on medium to large Python projects who want to maintain a clean architecture.
* **Intended Use**: Ideal for production environments where enforcing module boundaries is critical, as well as educational purposes to teach best practices.

# Use Cases

* **Continuous Integration**: Add Deply to your CI/CD pipeline to catch architectural violations early in the development process.
* **Refactoring**: Use Deply to understand existing dependencies in your codebase, making large-scale refactoring safer and more manageable.
* **Code Reviews**: Assist in code reviews by automatically checking if new changes adhere to architectural rules.

# Comparison

While there are existing tools like [pydeps](https://github.com/thebjorn/pydeps) that visualize dependencies, Deply focuses on:

* **Enforcement Over Visualization**: Not just displaying dependencies but actively enforcing architectural rules by detecting violations.
* **Customization**: Offers dynamic configuration with various collectors to suit different project structures.

# Links

* **GitHub**: [https://github.com/Vashkatsi/deply](https://github.com/Vashkatsi/deply)
* **PyPI**: [https://pypi.org/project/deply/](https://pypi.org/project/deply/)

I'm eager to hear your thoughts, suggestions, or criticisms. Deply is currently at version 0.1.5, so it's not entirely stable yet, but I'm actively working on it. I'm open to pull requests and looking forward to making Deply a useful tool for the Python community.

Thank you for your time!",vashkatsi,1gthdpy,https://reddit.com/r/Python/comments/1gthdpy/deply_keep_your_python_architecture_clean/,https://www.reddit.com/r/Python/comments/1gthdpy/deply_keep_your_python_architecture_clean/,2024-11-17 16:32:03,283,0.95,283,0,62,0,0,False,False,True,False,False,Showcase,self,t3_1gthdpy
Python,Best option for python based project development,"Hey guys, I hope everybody is doing great.  
As in the title, I wanted to ask about the best optino for developing a project in python, I've seen many option for web developement like Django and many other GUI solution like tkinter or PyQT.

I already tried tkinter and customtkinter, and to be honest I dont like them since it feels outdated and looks bads (designing nice looking interface was hell). 

I'm opting heavily towards web driven solutions since I'll handle graphs, images, tables, metrics, databases, models, client customised experience ...",Red-Hat999,1gtf2rc,https://reddit.com/r/Python/comments/1gtf2rc/best_option_for_python_based_project_development/,https://www.reddit.com/r/Python/comments/1gtf2rc/best_option_for_python_based_project_development/,2024-11-17 14:46:55,12,0.81,12,0,17,0,0,False,False,True,False,False,Discussion,self,t3_1gtf2rc
Python,üöÄ AuthSphere: The Ultimate FastAPI Authentication Package ‚Äì Simplify Your Backend Authentication To,"üöÄ **Introducing AuthSphere: Simplifying Authentication for FastAPI** üîê

üîë Tired of reinventing the wheel with authentication? Meet **AuthSphere**, the open-source, easy-to-use, and powerful authentication library designed specifically for FastAPI. From **token management** to **password resets** and **email OTPs**, AuthSphere is your all-in-one solution! ‚ú®

# What My Project Does:

With **AuthSphere**, you can:

* üîê **Seamlessly integrate user authentication** with FastAPI apps.
* üõ†Ô∏è **Manage secure tokens** and handle password resets effortlessly.
* üìß **Add OTP email verification** for enhanced workflows.
* üí° **Accelerate backend development** with a simple and extensible design.

# Target Audience:

* **Developers** working on FastAPI projects who need a robust, pre-built authentication system.
* Teams aiming to **save development time** while ensuring secure authentication practices.
* Anyone who values **open-source solutions** and wants to contribute to a growing project.

# Comparison with Existing Alternatives:

While frameworks like Django Rest Framework offer built-in authentication, they may not align well with FastAPI's asynchronous design. **AuthSphere** is tailored specifically for FastAPI, offering:

* **Asynchronous support** out of the box.
* Simplified integration without the overhead of larger frameworks.
* Focused features like **email OTPs** and **token management**, which are often absent or require additional customization in alternatives.

üîó **GitHub Repository**: [AuthSphere on GitHub](https://github.com/Shashank-Ganesh-Holla/AuthSphere)

# What Makes AuthSphere Unique?

* üÜï **OTP email verification** for an extra layer of security.
* üîÅ **Effortless token management** for expiration, renewal, and more.
* ‚ö° **Optimized for FastAPI**, ensuring smooth and minimal-setup integration.
* üåç **Open-source and free**, encouraging collaboration and contributions!

# Join the Journey:

üë• **For Users**: If you need a reliable, ready-to-use authentication system, try AuthSphere in your FastAPI projects today!

üí° **For Contributors**: Help shape the future of AuthSphere! File an issue, submit a PR, or simply share your feedback.

# A Little About Me:

üëã Hi, I‚Äôm **Shashank**, a passionate developer with a keen interest in **backend development** and **open-source contributions**. I‚Äôve poured countless hours into building AuthSphere and would love to connect with developers, contributors, or hiring organizations who share my vision for growth and innovation.

Join me in simplifying authentication‚Äîone FastAPI app at a time! üöÄ

# Tags:

\#Python #FastAPI #OpenSource #BackendDevelopment #AuthSphere #OAuth2",Comprehensive-Lie706,1gtdei0,https://reddit.com/r/Python/comments/1gtdei0/authsphere_the_ultimate_fastapi_authentication/,https://www.reddit.com/r/Python/comments/1gtdei0/authsphere_the_ultimate_fastapi_authentication/,2024-11-17 13:20:31,1,0.67,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gtdei0
Python,AnyModal: A Python Framework for Multimodal LLMs,"[AnyModal](https://github.com/ritabratamaiti/AnyModal) is a modular and extensible framework for integrating diverse input modalities (e.g., images, audio) into large language models (LLMs). It enables seamless tokenization, encoding, and language generation using pre-trained models for various modalities.

### Why I Built AnyModal

I created AnyModal to address a gap in existing resources for designing vision-language models (VLMs) or other multimodal LLMs. While there are excellent tools for specific tasks, there wasn‚Äôt a cohesive framework for easily combining different input types with LLMs. AnyModal aims to fill that gap by simplifying the process of adding new input processors and tokenizers while leveraging the strengths of pre-trained language models.

### Features

- **Modular Design**: Plug and play with different modalities like vision, audio, or custom data types.
- **Ease of Use**: Minimal setup‚Äîjust implement your modality-specific tokenization and pass it to the framework.
- **Extensibility**: Add support for new modalities with only a few lines of code.

### Example Usage

```python
from transformers import ViTImageProcessor, ViTForImageClassification
from anymodal import MultiModalModel
from vision import VisionEncoder, Projector

# Load vision processor and model
processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224')
vision_model = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')
hidden_size = vision_model.config.hidden_size

# Initialize vision encoder and projector
vision_encoder = VisionEncoder(vision_model)
vision_tokenizer = Projector(in_features=hidden_size, out_features=768)

# Load LLM components
from transformers import AutoTokenizer, AutoModelForCausalLM
llm_tokenizer = AutoTokenizer.from_pretrained(""gpt2"")
llm_model = AutoModelForCausalLM.from_pretrained(""gpt2"")

# Initialize AnyModal
multimodal_model = MultiModalModel(
    input_processor=None,
    input_encoder=vision_encoder,
    input_tokenizer=vision_tokenizer,
    language_tokenizer=llm_tokenizer,
    language_model=llm_model,
    input_start_token='&lt;|imstart|&gt;',
    input_end_token='&lt;|imend|&gt;',
    prompt_text=""The interpretation of the given image is: ""
)
```

### What My Project Does

AnyModal provides a unified framework for combining inputs from different modalities with LLMs. It abstracts much of the boilerplate, allowing users to focus on their specific tasks without worrying about low-level integration.

### Target Audience

- **Researchers and developers** exploring multimodal systems.
- **Prototype builders** testing new ideas quickly.
- **Anyone experimenting with LLMs** for tasks like image captioning, visual question answering, and audio transcription.

### Comparison

Unlike existing tools like Hugging Face‚Äôs transformers or task-specific VLMs such as CLIP, AnyModal offers a flexible framework for arbitrary modality combinations. It‚Äôs ideal for niche multimodal tasks or experiments requiring custom data types.

### Current Demos

- LaTeX OCR  
- Chest X-Ray Captioning (in progress)  
- Image Captioning  
- Visual Question Answering (planned)  
- Audio Captioning (planned)  

### Contributions Welcome

The project is still a work in progress, and I‚Äôd love feedback or contributions from the community. Whether you‚Äôre interested in adding new features, fixing bugs, or simply trying it out, all input is welcome.

GitHub repo: [https://github.com/ritabratamaiti/AnyModal](https://github.com/ritabratamaiti/AnyModal)

Let me know what you think or if you have any questions.",Alternative_Detail31,1gtbrzb,https://reddit.com/r/Python/comments/1gtbrzb/anymodal_a_python_framework_for_multimodal_llms/,https://www.reddit.com/r/Python/comments/1gtbrzb/anymodal_a_python_framework_for_multimodal_llms/,2024-11-17 11:40:59,37,0.92,37,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gtbrzb
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1gt0n9f,https://reddit.com/r/Python/comments/1gt0n9f/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1gt0n9f/sunday_daily_thread_whats_everyone_working_on/,2024-11-17 00:00:10,12,0.82,12,0,3,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gt0n9f
Python,Write any Python script in 30 characters (plus an ungodly amount of whitespace),"Hey all!

My friend challenged me to find the shortest solution to a certain Leetcode-style problem in Python. They were generous enough to let me use whitespace for free, so that the code stays readable.

# What My Project Does

I like abusing rules, so I made a tool to encode any Python script in just 30 bytes, plus some whitespace.

This result is somewhat harder to achieve than it looks like at first, so you might want to check out [a post I wrote about it](https://purplesyringa.moe/blog/any-python-program-fits-in-24-characters/). Alternatively, jump straight to the code if that's more of your thing: [GitHub](https://github.com/purplesyringa/24-characters-of-python).

*UPD*: Someone found a way to do this in 24 bytes, post updated!

# Target Audience

This is a toy project, nothing serious, but it was fun for me to work on. I hope you find it entertaining too!

# Comparison

This is honestly the first time I've seen anyone do this with a specific goal of reducing the number of non-whitespace characters at any cost, so this might as well be a unique project.

As a honorary mention, though, it builds on another project I think deserves recognition: [PyFuck](https://github.com/kuangkzh/PyFuck). It's JSFuck for Python, using 8 different characters to encode any (short enough) Python program.",imachug,1gsyls8,https://reddit.com/r/Python/comments/1gsyls8/write_any_python_script_in_30_characters_plus_an/,https://www.reddit.com/r/Python/comments/1gsyls8/write_any_python_script_in_30_characters_plus_an/,2024-11-16 22:21:04,50,0.78,50,0,14,0,0,False,False,True,False,False,Showcase,self,t3_1gsyls8
Python,Write good tests,"I just published an article outlining what I think good tests in Python are often missing. It's not intended to flesh out on any of the topics, and is frugal on the details where I think they are better explained other place. Rather it's intended to inspire your style guides and convention documents. These are an assembly of issues that's been up for discussion in various places I've worked, and my opinionated take on them.

So please, write *good* tests.

  
[https://www.agest.am/write-good-python-tests](https://www.agest.am/write-good-python-tests)",antonagestam,1gspitz,https://reddit.com/r/Python/comments/1gspitz/write_good_tests/,https://www.reddit.com/r/Python/comments/1gspitz/write_good_tests/,2024-11-16 15:23:11,38,0.93,38,0,10,0,0,False,False,True,False,False,Discussion,self,t3_1gspitz
Python,What cookiecutter templates do you use?,"Looking to better standardize and manage my projects along with cruft:¬†[https://github.com/cruft/cruft](https://github.com/cruft/cruft)

[https://github.com/cookiecutter/cookiecutter](https://github.com/cookiecutter/cookiecutter)",Norman_Door,1gsohk7,https://reddit.com/r/Python/comments/1gsohk7/what_cookiecutter_templates_do_you_use/,https://www.reddit.com/r/Python/comments/1gsohk7/what_cookiecutter_templates_do_you_use/,2024-11-16 14:32:35,13,0.79,13,0,12,0,0,False,False,True,False,False,Discussion,self,t3_1gsohk7
Python,Finally Completed : A Personal Project built over the weekend(s) - Netflix Subtitle Translator,"**Motivation :** Last week, I posted about my project, Netfly: The Netflix Translator, here on r/python. I initially built it to solve a problem I ran into while traveling. Let me explain :

On a flight from New Delhi to Tokyo, I started watching an anime movie, *The Concierge*. The in-flight entertainment had English subtitles, and I was hooked, but I couldn‚Äôt finish it. Later, I found the movie on Netflix Japan, but it was only available with Japanese subtitles.

Here‚Äôs the problem: I don‚Äôt know enough Japanese (Nihongo wa sukoshi desu) to follow along, so I decided to build something that could fetch those Japanese subtitles, translate them into English, and overlay the translation on the video while retaining the Japanese subtitles which would give me better context.

What started as a personal project quickly became an obsession.

**What does the Project Do ? :** The primary goal of this project is simple: convert Japanese subtitles on Netflix into English subtitles in an automated way. This is particularly useful when English subtitles aren‚Äôt available for a title.

**The Evolution of this Project / High Level Tech Solution :** This is not the first iteration of Netfly. It has gone through two major updates based on feedback and my own learning.

*Iteration 1: A Tech-Heavy but Costly Solution*

How It Worked:

The Result: It worked, but it was far from practical. The cost of using Google Vision API for every frame made it unsustainable, and the whole process was painfully slow.

*Iteration 2: Streamlining with Subtitles file*

* I discovered Netflix subtitles can be downloaded (through some effort). 
* Parsed the downloaded XML subtitle file using lxml to extract the Japanese text, start time, and end time via XPath. 
* Sent the extracted text to AWS Translate for English translation. 

The Result: This was much better‚Äîcheaper, faster, and simpler. But there was still a manual step : downloading the subtitle file.

*Iteration 3: Fully Automated Workflow*

* Integrated a Playwright script that logs into Netflix, navigates to the selected video, and downloads the subtitle XML file automatically.
* Added a CLI using Python‚Äôs Click library to simplify running the workflow.
* Once the XML file is fetched, the script extracts Japanese text and timestamps, sends the text to AWS Translate, and generates English subtitles in a JSON format.

The Result: All Steps are completely automated now.

**Target Audience** : This project started as a personal tool, but it can be useful for:

* Language Enthusiasts : Anyone who wants to watch Netflix content in languages they don‚Äôt understand.
* Developers : If you‚Äôre exploring libraries like playwright, lxml, click , or translation workflows, this project can be a solid learning resource.

**Comparison with Other Similar Tools :** Existing tools, like Chrome extensions, rely on pre-existing subtitles in the target language. For example, they can overlay English subtitles, but only if those subtitles are already available. Netfly is different because

* It handles cases where English subtitles don‚Äôt exist.
* Automates the entire process, from fetching Japanese subtitles to translating them into English.
* Provides an end-to-end workflow with minimal manual effort.

To the best of my knowledge, no other tool automates this entire flow.

**Working Demo / Screenshots :**  
[https://imgur.com/a/vWxPCua](https://imgur.com/a/vWxPCua)  
[https://imgur.com/a/zsVkxhT](https://imgur.com/a/zsVkxhT)

[https://imgur.com/a/bWHRK5H](https://imgur.com/a/bWHRK5H)  
[https://imgur.com/a/pJ6Pnoc](https://imgur.com/a/pJ6Pnoc)

**What's next :** This is still a work in progress, but I feel it‚Äôs in a solid state now. Here‚Äôs what‚Äôs on my mind for the next steps: 

1. **Edge Cases:** Testing on a broader range of Netflix titles to handle variations in subtitle formats.
2. **Performance:** Optimizing XML parsing and translation for faster processing.
3. **Extensibility:** Adding support for other subtitle languages.
4. **Error Handling :** Since i iterated very fast, I know the Error Handling is not upto the mark.

  
If this sounds interesting for you, the code is up on GitHub: [https://github.com/Anubhav9/Netfly-subtitle-converter-xml-approach](https://github.com/Anubhav9/Netfly-subtitle-converter-xml-approach)

I‚Äôd love to hear your thoughts , feedback and suggestions on this.  
Cheers, and Thank you !

",Content_Ad_4153,1gsm1kp,https://reddit.com/r/Python/comments/1gsm1kp/finally_completed_a_personal_project_built_over/,https://www.reddit.com/r/Python/comments/1gsm1kp/finally_completed_a_personal_project_built_over/,2024-11-16 12:15:03,67,0.89,67,0,11,0,0,False,False,True,False,False,Showcase,self,t3_1gsm1kp
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1gsaiu7,https://reddit.com/r/Python/comments/1gsaiu7/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1gsaiu7/saturday_daily_thread_resource_request_and/,2024-11-16 00:00:20,5,0.73,5,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gsaiu7
Python,"Game 987, Like 2048 but Fibonacci (Made in Python)","  
[https://987.reflex.dev/](https://987.reflex.dev/)  


**What My Project Does**

From Adhami the author: I was wondering how 2048 would feel like if instead of powers of two, we can merge consequent fibonacci numbers. Turns out to be a rather interesting game that is fairly forgiving and grows very slowly. I found it difficult to come up with an overall strategy. I had a simple search algorithm that was able to achieve a score of exactly 66,666 (not joking). Getting a 987 block shouldn't be difficult.

  
You can take a look into the code here:¬†[https://github.com/adhami3310/987](https://github.com/adhami3310/987)¬†(the simple search algorithm is inside the code as well)  
  
**Target Audience**: Anyone

**Comparison**: Similar to 2048 but fib

",FullHunter9735,1gs56f7,https://reddit.com/r/Python/comments/1gs56f7/game_987_like_2048_but_fibonacci_made_in_python/,https://www.reddit.com/r/Python/comments/1gs56f7/game_987_like_2048_but_fibonacci_made_in_python/,2024-11-15 19:57:39,45,0.93,45,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gs56f7
Python,PyPI now has attestation. Thanks I hate it.,"Blog post: [https://blog.pypi.org/posts/2024-11-14-pypi-now-supports-digital-attestations/](https://blog.pypi.org/posts/2024-11-14-pypi-now-supports-digital-attestations/)

I'm angry that it got partially funded by the sovreign tech fund, when it's about ""securing"" uploads by giving the keys to huge USA companies. I think it's criminal they got public money for this.

  
I also don't think it adds any security whatsoever. It just moves the authentication from using credentials to PyPI to using credentials to github. They can be stolen in the exact same way.

edit: It got ""GERMAN"" public money.",sonobanana33,1gs05hm,https://reddit.com/r/Python/comments/1gs05hm/pypi_now_has_attestation_thanks_i_hate_it/,https://www.reddit.com/r/Python/comments/1gs05hm/pypi_now_has_attestation_thanks_i_hate_it/,2024-11-15 16:24:22,131,0.75,131,0,150,0,0,False,False,True,False,False,Discussion,self,t3_1gs05hm
Python,Yami - A music player made with Tkinter Now on pypi!,"I would like some user feedback  
**Github Link:**¬†[https://github.com/DevER-M/yami](https://github.com/DevER-M/yami)  
**Pypi Link:** [https://pypi.org/project/yami-music-player/](https://pypi.org/project/yami-music-player/)  
**Some of the features**

* ***mp3 , flac, and many audio formats supported for playback***
* ***Clean UI***
* ***Can download music with art cover***
* ***it is also asynchronous***

**Libraries used**

* customtkinter
* spotdl
* mutagen

**Target audience**  
This project will be useful for people who do not want ads and want a simple user interface to play music

**Comparison**  
There are currently no projects that have all the features covered and is made with tkinterTo use this install all requirements in the .txt file and you are good to go

**RoadMap**  
I will update it now and then

A follow would be nice!¬†[https://github.com/DevER-M](https://github.com/DevER-M)",FishStickSocks,1grzxre,https://reddit.com/r/Python/comments/1grzxre/yami_a_music_player_made_with_tkinter_now_on_pypi/,https://www.reddit.com/r/Python/comments/1grzxre/yami_a_music_player_made_with_tkinter_now_on_pypi/,2024-11-15 16:15:07,10,0.79,10,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1grzxre
Python,fxgui: Collection of Python Classes and Utilities designed for Building Qt-based UIs in VFX,"Hey Python enthusiasts! Any VFX folks here? I've developed a little package called¬†`fxgui`¬†\- a collection of Python classes and utilities designed for building Qt-based UIs in VFX-focused DCC applications.

It's available on¬†[GitHub](https://github.com/healkeiser/fxgui),¬†[PyPI](https://pypi.org/project/fxgui), and comes with¬†[documentation](https://healkeiser.github.io/fxgui). I'd love to hear your thoughts and get some feedback!

# Target Audience

* VFX/CGI people working from multiple DCCs.

# Key Features

* Quick setup of common widgets.
* Reusable custom UI components.
* Fully compatible over PySide2/PySide6, thanks to¬†[qtpy](https://pypi.org/project/QtPy/).

# Comparison

* Specifically designed for multi-DCC environments (Maya, Houdini, Nuke, etc.).
* Saves development time by offering ready-to-use components.
* Maintains consistency and standardization across projects and DCCs.",Ocushire,1gru93h,https://reddit.com/r/Python/comments/1gru93h/fxgui_collection_of_python_classes_and_utilities/,https://www.reddit.com/r/Python/comments/1gru93h/fxgui_collection_of_python_classes_and_utilities/,2024-11-15 11:27:05,13,0.85,13,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1gru93h
Python,"Dispatchery: Type-aware, multi-arg function dispatch for complex and nested Python types","Links: [Github](https://github.com/bolaft/dispatchery/), [PyPI](https://pypi.org/project/dispatchery/)

**What it does:**

*dispatchery* is a lightweight Python package for function dispatching inspired by the standard *singledispatch* decorator, but with support for complex, nested, parameterized types, like for example *tuple[str, dict[str, int | float]]*.

**Comparison**:

Unlike *singledispatch*, *dispatchery* can dispatch based on:

- Generic parameterized types (e.g. *list[int]*)
- Nested types (e.g. *tuple[str, dict[str, int | float]]*)
- Union types (e.g. *int | str* or *Union[int, str]*)
- Multiple arg and kwarg values, not just the first one

**Target Audience:**

Python developers who don't like having a bunch of *if isinstance* checks everywhere in their code.

**Example :**

    from dispatchery import dispatchery
    
    @dispatchery
    def my_func(value):
        return ""Standard stuff.""
    
    @my_func.register(list[str])
    def _(value):
        return ""Strings!""
    
    @my_func.register(list[int] | list[float])
    def _(value):
        return ""Numbers!""
    
    @my_func.register(str, int | float, option=str)
    def _(value1, value2, option):
        return ""Two values and a kwarg!""

    # my_func(42) or my_func(""hello"") will return ""Standard stuff.""
    # my_func([""a"", ""b"", ""c""]) will return ""Strings!""
    # my_func([1, 2, 3]) or my_func([0.2, 0.5, 1.2]) will return ""Numbers!""
    # my_func(""hello"", 42, option=""test"") will return ""Two values and a kwarg!""

**Installation:**

    pip install dispatchery

See the full README on [Github](https://github.com/bolaft/dispatchery/).

MIT license, feedback welcome!",bolaft,1grszm2,https://reddit.com/r/Python/comments/1grszm2/dispatchery_typeaware_multiarg_function_dispatch/,https://www.reddit.com/r/Python/comments/1grszm2/dispatchery_typeaware_multiarg_function_dispatch/,2024-11-15 09:55:37,29,0.84,29,0,17,0,0,False,False,True,False,False,Showcase,self,t3_1grszm2
Python,I played a minute-long video in Windows Terminal,"I recently worked on a project combining my love for terminal limits and video art. Here‚Äôs what I achieved: ‚Ä¢	Rendered a 1-minute-long (almost two) ASCII video in the terminal, without graphics libraries or external frameworks. ‚Ä¢	Used true 24-bit colors for each frame, offering deeper color representation in terminal-based projects. ‚Ä¢	Processed 432 million characters over 228 seconds, translating each frame‚Äôs pixels to colors. ‚Ä¢	Optimized performance with multi-processing, running on an integrated graphics card.

Specs:

    ‚Ä¢	30 FPS
    ‚Ä¢	160,000+ characters per frame
    ‚Ä¢	2,700 frames
    ‚Ä¢	3 pixels per character for better performance

For further optimization, I reduced the font size to 3 pixels and used background colors to handle brightness.

**What my project does?**
While not the most practical project, it‚Äôs an experiment I‚Äôm satisfied with it. No real use, but hey, it‚Äôs fun!

**Target audience**
This is more of a fun project so I can't say it has a specific target audience, but I could say that people that strangely feels good coding ""useless"" things might like it.

**Comparison**  
Well it is not an *ASCII* player anymore to be precise, but what it does now is just display video in the terminal using basically pure ANSI, I don't think there is an exact alternative to this since it doesn't serve a specific purpose, except from, well, displaying video with text, it is a fun project.

P.S. I‚Äôm considering rewriting the frame conversion in C to speed things up. More improvements are coming soon!

That‚Äôs it, you can watch a [preview with Tank!](https://youtu.be/FIiminiYla4?si=68aDkNLMo_t8sa0I) from cowboy bebop (ignore some random color stripes i had to do some optimization but wasn‚Äôt really precise on difference calculation)

You can find the repo [here](https://github.com/wired32/ascii-player) 

~~but be aware that the current version was not pushed to github yet, but feel free to analyze the old versions/commits if you feel like, I will update when I release the current code.~~

~~OBS: changefontsize.py only works with windows terminal, as it changes the default font from your profile, will be removed in the current version as it degrades compatibility.~~ *Removed in current version*",PureSwing9975,1gro3kl,https://reddit.com/r/Python/comments/1gro3kl/i_played_a_minutelong_video_in_windows_terminal/,https://www.reddit.com/r/Python/comments/1gro3kl/i_played_a_minutelong_video_in_windows_terminal/,2024-11-15 04:18:27,50,0.91,50,0,10,0,0,False,False,True,False,False,Showcase,self,t3_1gro3kl
Python,"I shared a Python Data Science Bootcamp (7+ Hours, 7 Courses and 3 Projects) on YouTube","Hello, I shared a Python Data Science Bootcamp on YouTube. Bootcamp is over 7 hours and there are 7 courses with 3 projects. Courses are Python, Pandas, Numpy, Matplotlib, Seaborn, Plotly and Scikit-learn. I am leaving the link below, have a great day!

Bootcamp: [https://www.youtube.com/watch?v=6gDLcTcePhM](https://www.youtube.com/watch?v=6gDLcTcePhM)

Data Science Courses Playlist: [https://youtube.com/playlist?list=PLTsu3dft3CWiow7L7WrCd27ohlra\_5PGH&amp;si=6WUpVwXeAKEs4tB6](https://youtube.com/playlist?list=PLTsu3dft3CWiow7L7WrCd27ohlra_5PGH&amp;si=6WUpVwXeAKEs4tB6)",onurbaltaci,1grnwh7,https://reddit.com/r/Python/comments/1grnwh7/i_shared_a_python_data_science_bootcamp_7_hours_7/,https://www.reddit.com/r/Python/comments/1grnwh7/i_shared_a_python_data_science_bootcamp_7_hours_7/,2024-11-15 04:07:26,49,0.86,49,0,15,0,0,False,False,True,False,False,Tutorial,self,t3_1grnwh7
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1grj5d8,https://reddit.com/r/Python/comments/1grj5d8/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1grj5d8/friday_daily_thread_rpython_meta_and_freetalk/,2024-11-15 00:00:56,8,0.79,8,0,5,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1grj5d8
Python,Would a Pandas-compatible API powered by Polars be useful?,"Hello, I don't know if already exists but I believe that would be great if there is a library that gives you the same API of pandas but uses Polars under the hood when possible.

I saw how powerful is Polars but still data scientists use a lot of pandas and it‚Äôs difficult to change habits. What do you think?
",try-except-finally,1grdh7n,https://reddit.com/r/Python/comments/1grdh7n/would_a_pandascompatible_api_powered_by_polars_be/,https://www.reddit.com/r/Python/comments/1grdh7n/would_a_pandascompatible_api_powered_by_polars_be/,2024-11-14 19:48:55,44,0.79,44,0,74,0,0,False,False,True,False,False,Discussion,self,t3_1grdh7n
Python,SqueakyCleanText: A Modular Text Processing Library with Advanced NER,"GitHub: [SqueakyCleanText](https://github.com/rhnfzl/SqueakyCleanText) | PyPI: [squeakycleantext](https://pypi.org/project/SqueakyCleanText/)

Happy to share **SqueakyCleanText**, a Python library designed to streamline text preprocessing for Natural Language Processing (NLP) and Machine Learning (ML) tasks. Whether you're working on language models, statistical ML pipelines, or any text-heavy application, this library aims to make your preprocessing pipeline more efficient and flexible.

### üéØ Target Audience

- **Data Scientists**, **AI Engineers** and **Machine Learning Engineers** dealing with text data.

- **NLP Researchers** and **NLP Linguists** looking for customisable preprocessing tools.

- **Developers** building applications that require text cleaning and anonymisation.


### üîë Key Features

1. **Advanced Named Entity Recognition (NER)**
   - **Ensemble of Models**: Utilises multiple NER models from Hugging Face Transformers for improved accuracy.

   - **Smart Text Chunking**: Efficiently handles long texts by splitting them into optimized chunks.

   - **Configurable Confidence Thresholds**: Adjust the sensitivity of entity detection.

   - **Configurable Models**: Choose NER models which suits your use-case.

   - **Configurable Positional Tags**: Choose what you would like to be removed from the texts.

   - **Automatic Language Detection**: Supports English, German, Spanish, and Dutch with automatic model selection.


2. **Modular Pipeline Architecture**
   - **Toggle-able Features**: Easily enable or disable any step in the pipeline.

   - **Single and Batch Processing**: Consistent configuration applies to both modes.

   - **Default Pipeline Includes**:

     - Bad Unicode correction

     - HTML and URL handling

     - Contact information anonymization (emails, phone numbers)

     - Date and number normalization

     - Advanced NER processing

     - Whitespace and punctuation normalization


3. **Performance Optimizations**

   - **Under-the-Hood NER Improvements**: Enhanced NER processing delivers faster results without compromising accuracy.

   - **Batch Processing Support**: Process large datasets efficiently with configurable batch sizes.

   - **Memory Management**: Automatic cleanup of GPU memory to handle large-scale processing.

### üöÄ Comparison


- **Comprehensive and Modular**: Unlike libraries that focus on specific tasks, SqueakyCleanText offers a full suite of preprocessing steps that you can customize to your needs.

- **Advanced NER Integration**: Combines multiple NER models and uses smart chunking to improve entity recognition in long texts.

- **Dual Output Formats**: Provides both language model-formatted text and statistical model-formatted text in a single pass.

- **Easy Integration**: Designed to seamlessly fit into existing workflows with minimal adjustments.

### üíª Quick Start Guide

**Installation**

```
pip install SqueakyCleanText
```

### üõ† Integrate into Your Workflow

- **Customizable Pipeline**: Tailor the preprocessing steps to match your project's requirements by toggling features in `config.py`.

- **Seamless NER Integration**: Use the advanced NER processing to anonymize sensitive data or extract entities for downstream tasks.

- **Flexible Processing**: Apply the same configurations to both single and batch processing modes without changing your code.

- **Efficient for Large Datasets**: Leverage batch processing and memory optimizations to handle large volumes of text data.",complexrexton,1grc5bi,https://reddit.com/r/Python/comments/1grc5bi/squeakycleantext_a_modular_text_processing/,https://www.reddit.com/r/Python/comments/1grc5bi/squeakycleantext_a_modular_text_processing/,2024-11-14 18:52:30,13,0.93,13,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1grc5bi
Python,Can you solve this Python riddle I made for my colleagues?,"The manager came to me from a sister team and asked me to produce the obscure Python code I could come up with. Because she wanted to give her developers a challenge. The requirements was that it should produce a code that could be sent in a text message to get the next challenge. And no you are not allowed to run it:) They solved in 30 minutes, can you solve it?

    import inspect
    def code_as_it_was_meant_to_be(tmp):
        """"""
        www.lexico.com/definition/code
        ""A system of words, letters, figures, or symbols used to represent others,
        especially for the purposes of secrecy.""
        Send what is printed out of by running this functionin a text message to xxx
        """"""
        if len(set(tmp)) * 2 &gt; len(tmp):
            tmp = eval(inspect.stack()[1][4][0].replace(tmp, tmp + tmp[::-1]))
            print(
                """".join(
                    str(chr((ord(tmp[i * 2]) + ord(tmp[-(i + 1) * 2])) // 2))
                    for i in range(len(tmp) // 4)
                )
            )
        else:
            return tmp[::-1]
    
    
    code_as_it_was_meant_to_be(""d,W3b6`@"")
    ",DrMerkwuerdigliebe_,1grbkg3,https://reddit.com/r/Python/comments/1grbkg3/can_you_solve_this_python_riddle_i_made_for_my/,https://www.reddit.com/r/Python/comments/1grbkg3/can_you_solve_this_python_riddle_i_made_for_my/,2024-11-14 18:27:59,0,0.36,0,0,5,0,0,False,False,True,False,False,Discussion,self,t3_1grbkg3
Python,Make your Github profile more attractive as a Python Developer,"**What My Project Does:**

This project automates the process of showcasing detailed analytics and visual insights of your Python repositories on your GitHub profile using GitHub Actions. Once set up, it gathers and updates key statistics on every push, appending the latest information to the bottom of your README without disrupting existing content. The visualizations are compiled into a gif, ensuring that your profile remains clean and visually engaging.

With this tool, you can automatically analyze, generate, and display visuals for the following metrics:

\- Repository breakdown by commits and lines of Python code

\- Heatmap of commit activity by day and time

\- Word cloud of commit messages

\- File type distribution across repositories

\- Libraries used in each repository

\- Construct counts (including loops, classes, control flow statements, async functions, etc.)

\- Highlights of the most recent closed PRs and commits

By implementing these automated insights, your profile stays up-to-date with real-time data, giving visitors a dynamic view of your work without any manual effort.

\---

**Target Audience:**

This tool is designed for Python developers and GitHub users who want to showcase their project activity, code structure, and commit history visually on their profile. It‚Äôs ideal for those who value continuous profile enhancement with minimal maintenance, making it useful for developers focused on building a robust GitHub presence or professionals looking to highlight their coding activity to potential collaborators or employers.

\---

**Comparison:**

I havnt seen other tools like this, but by using GitHub Actions, this project ensures that new data is gathered and appended automatically, including in-depth insights such as commit activity heatmaps, word clouds, and code construct counts. This makes it more comprehensive and effortless to maintain than alternatives that require additional steps or only offer limited metrics.

**Repo:**

[https://github.com/sockheadrps/PyProfileDataGen](https://github.com/sockheadrps/PyProfileDataGen)

**Example:**

[https://github.com/sockheadrps](https://github.com/sockheadrps)

**Youtube Tutorial:**

[https://youtu.be/Ls7sTjXEMiI](https://youtu.be/Ls7sTjXEMiI)",SpaceBucketFu,1gr4qkw,https://reddit.com/r/Python/comments/1gr4qkw/make_your_github_profile_more_attractive_as_a/,https://www.reddit.com/r/Python/comments/1gr4qkw/make_your_github_profile_more_attractive_as_a/,2024-11-14 13:27:29,54,0.75,54,0,18,0,0,False,False,True,False,False,Showcase,self,t3_1gr4qkw
Python,Sensei: The Python Framework for Effortless API Wrapping,"I'm excited to introduce my Python framework, Sensei, designed to help developers create clean, maintainable, and efficient API wrappers. If you've been searching for a tool that simplifies API handling without the hassle of complex code, Sensei has got you covered. Here's a quick look at what it offers:

- Documentation: https://sensei.factorycroco.com
- GitHub Repository: https://github.com/CrocoFactory/sensei

# API Wrapper Overview

An API wrapper is client-side code that streamlines the interaction between a client application and a web API. Wrappers handle the details of making HTTP requests, processing responses, and parsing data, allowing developers to integrate API functionality without focusing on lower-level details. API wrappers are often implemented as Python libraries.

For instance, the python-binance library provides access to the Binance cryptocurrency exchange API:

```python
from binance.client import Client

client = Client(api_key='your_api_key', api_secret='your_api_secret')  

balance = client.get_asset_balance(asset='BTC')  
print(balance)

prices = client.get_all_tickers()  
print(prices)

order = client.order_market_buy(
   symbol='BTCUSDT',
   quantity=0.01
)
print(order)
```


# What My Project Does

Sensei simplifies creating API wrappers by handling routing, data validation, and response mapping automatically. This reduces the complexity of managing HTTP requests, allowing for a smoother integration of APIs into projects without redundant code.

Below is an example that demonstrates how Sensei streamlines API requests by combining clear routing and automatic data mapping:

```python
from typing import Annotated
from sensei import Router, Path, APIModel

router = Router('https://pokeapi.co/api/v2/')

class Pokemon(APIModel):
    name: str
    id: int
    height: int
    weight: int

_@router.get('/pokemon/{name}')
def get_pokemon(name: Annotated[str, Path(max_length=300)]) -&gt; Pokemon: 
    pass

pokemon = get_pokemon(name=""pikachu"")
print(pokemon)  # Output: Pokemon(name=""pikachu"", ...)
```

Here's how it works:

1. Define the API Route: Initialize the Router with a base URL (e.g., `https://pokeapi.co/api/v2/`), which all endpoint paths will extend.
2. Define a Response Model: The Pokemon class represents the data structure of responses. This model enables Sensei to parse and map API response data into Python objects.
3. Route and Parameters: Use the router.get('/pokemon/{name}') decorator to connect the get_pokemon function to an endpoint, enabling dynamic parameter input. The Annotated type adds metadata, such as max_length, to validate inputs before making requests.
4. No Function Code Required: Notice that get_pokemon contains no function body code. Sensei automatically manages the request, response parsing, and mapping, providing a clean, simplified API wrapper.

The result? A single line (`pokemon = get_pokemon(name=""pikachu"")`) executes the API call, with validation, routing, and response mapping all handled by Sensei.

# Target Audience

Sensei is ideal for developers who frequently implement API wrappers in Python and need a reliable, production-ready tool to streamline their workflow. It's particularly useful for library-based wrappers.

# Comparison 

Unlike other API wrappers that may require extensive setup, Sensei offers a highly DRY (Don't Repeat Yourself) codebase. Sensei manages response handling and data validation automatically, whereas libraries like requests require additional code to handle response parsing and data checks.

1. Sync &amp; Async Support: Sensei offers both synchronous and asynchronous versions of API wrappers with minimal configuration.
2. Built-in Data Validation: Ensures that data is validated before any API call, reducing unnecessary errors and maintaining consistency.
3. Automatic QPS Management: Handles Queries Per Second (QPS) limits seamlessly, ensuring smooth API integration without unexpected rate-limit errors.
4. Automatic Response Mapping: Maps API responses directly to models, reducing boilerplate code and enhancing readability.
5. DRY Compliance: Sensei promotes a clean, DRY codebase, supporting a solid architecture that minimizes redundancies.

# Why Choose Sensei?

If you‚Äôre looking for a streamlined, powerful solution for API wrappers, Sensei could be the answer. Its thoughtful features make API integration a breeze, allowing you to focus on building your app while Sensei handles the intricacies of API interactions.

Explore the project at [https://sensei.factorycroco.com](https://sensei.factorycroco.com). I‚Äôd love to hear your feedback and any feature suggestions to make Sensei even better!

Happy coding!",_terring_,1gr2btp,https://reddit.com/r/Python/comments/1gr2btp/sensei_the_python_framework_for_effortless_api/,https://www.reddit.com/r/Python/comments/1gr2btp/sensei_the_python_framework_for_effortless_api/,2024-11-14 11:01:56,1,0.6,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gr2btp
Python,Python Project Recommendations to Search for Flights in a Specific Time Range,"

Hello, fellow Python enthusiasts!

I am interested in exploring Python projects that can search for and identify the best flight options within a specified date range, such as a particular month like April 2024 or a broader range. This type of feature was once handled efficiently by services like Skyscnnr and I would love to find Python tools or open-source projects capable of similar functionality today.

If you know of any relevant resources, projects, or libraries, I‚Äôd greatly appreciate your suggestions!

Many thanks in advance for your input and help!",TemporaryTemp100,1gqz0h1,https://reddit.com/r/Python/comments/1gqz0h1/python_project_recommendations_to_search_for/,https://www.reddit.com/r/Python/comments/1gqz0h1/python_project_recommendations_to_search_for/,2024-11-14 06:48:42,7,0.77,7,0,1,0,0,False,False,True,False,False,Discussion,self,t3_1gqz0h1
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1gqriuc,https://reddit.com/r/Python/comments/1gqriuc/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1gqriuc/thursday_daily_thread_python_careers_courses_and/,2024-11-14 00:00:09,0,0.5,0,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gqriuc
Python,PyPIM is a new method to execute Python code directly in RAM,"https://www.techspot.com/news/105557-pypim-new-method-execute-python-code-directly-ram.html

Performance can be significantly improved when the CPU is not involved",gurugabrielpradipaka,1gqpl0s,https://reddit.com/r/Python/comments/1gqpl0s/pypim_is_a_new_method_to_execute_python_code/,https://www.reddit.com/r/Python/comments/1gqpl0s/pypim_is_a_new_method_to_execute_python_code/,2024-11-13 22:32:32,53,0.79,53,0,21,0,0,False,False,True,False,False,News,self,t3_1gqpl0s
Python,Project Ideas needed for mathematics major.,"This is for a mathematics project that is due next Monday.

I am an undergraduate student in India majoring in mathematics. My professor asked me to present a mathematical solution in form of either a project or a paper.

Now I know I am not going to end up with a paper and I don't even have the time for that left.

The project was due next month but, you see now I need to do it all in a weekend.

My core interests are in data science and AI but I am quite open for projects in Business simulation,   Optimization and Finance (professor's core subjects)

Project Ideas that I had ChatGPTed or figured out myself:

1. Performing a Network Analysis on Delhi Metro and finding the shortest routes using networkx (This is the one I was currently doing)

2. Deploying Trade strategies using Stochastic calculus and employing trade indicators on historical data (AKA technical analysis) (Abandoned project from last semester)

3. Creating a cli based Computer Algebra System/Mathematics language that takes up commands and gives back outputs:
```algebra simplify x^2-4*x
calculus integrate y:=sin(x) with respect to x
plot y^2 == 4x```

I know the third one is silly because many advance tools exist and this will never be able to reach that level of complexity.

I need you all to figure out how I choose a project idea ... 
Any other project idea is also welcomed (primarily from mathematics, data science, machine learning and Finance)",anjulbhatia,1gqp02i,https://reddit.com/r/Python/comments/1gqp02i/project_ideas_needed_for_mathematics_major/,https://www.reddit.com/r/Python/comments/1gqp02i/project_ideas_needed_for_mathematics_major/,2024-11-13 22:06:37,0,0.25,0,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1gqp02i
Python,"[AXM] A simple ""Assembly""-like interpreter","# What My Project Does

Over the past week, I have been developing an assembly-like interpreter for my custom language, which I call **AXM**. AXM is intended to resemble assembly language, but with a slightly more accessible syntax. Although the interpreter is currently written in Python and still in its early stages, it serves as a ""toy"" interpreter to test out language design concepts.

# Target Audience

This project is primarily a **toy** rather than a production-ready tool. It‚Äôs not designed for practical applications but rather for exploration and learning. The syntax is heavily inspired by assembly languages but is simplified to make it a bit easier to work with. Anyone interested in language development or assembly-like languages might find it interesting to explore.

# Comparison

AXM is distinct from existing assembly languages because it focuses more on accessibility and is designed to be relatively simple, rather than optimized for performance or real-world use. Unlike traditional assembly, AXM is an interpreted language, allowing users to run code directly without needing to compile it. While there are other interpreters for assembly-inspired languages, AXM aims to balance simplicity with the principles of low-level programming, making it somewhat unique.

Any feedback is greatly appreciated! I‚Äôd love to hear thoughts on its potential and any suggestions for improvements.

[https://github.com/KuriWasTaken/AXM](https://github.com/KuriWasTaken/AXM)

  
Edit: I know the code is very badly formatted and I should add more comments, I will fix this",Kuriwassadlytaken,1gqkzbt,https://reddit.com/r/Python/comments/1gqkzbt/axm_a_simple_assemblylike_interpreter/,https://www.reddit.com/r/Python/comments/1gqkzbt/axm_a_simple_assemblylike_interpreter/,2024-11-13 19:17:31,3,0.67,3,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gqkzbt
Python,Flask 3.1.0 Released,"https://flask.palletsprojects.com/en/stable/changes/#version-3-1-0



* Drop support for Python 3.8. #5623
* Update minimum dependency versions to latest feature releases. Werkzeug &gt;= 3.1, ItsDangerous &gt;= 2.2, Blinker &gt;= 1.9. #5624,5633
* Provide a configuration option to control automatic option responses. #5496
* Flask.open_resource/open_instance_resource and Blueprint.open_resource take an encoding parameter to use when opening in text mode. It defaults to utf-8. #5504
* Request.max_content_length can be customized per-request instead of only through the MAX_CONTENT_LENGTH config. Added MAX_FORM_MEMORY_SIZE and MAX_FORM_PARTS config. Added documentation about resource limits to the security page. #5625
* Add support for the Partitioned cookie attribute (CHIPS), with the SESSION_COOKIE_PARTITIONED config. #5472
* -e path takes precedence over default .env and .flaskenv files. load_dotenv loads default files in addition to a path unless load_defaults=False is passed. #5628
* Support key rotation with the SECRET_KEY_FALLBACKS config, a list of old secret keys that can still be used for unsigning. Extensions will need to add support. #5621
* Fix how setting host_matching=True or subdomain_matching=False interacts with SERVER_NAME. Setting SERVER_NAME no longer restricts requests to only that domain. #5553
* Request.trusted_hosts is checked during routing, and can be set through the TRUSTED_HOSTS config. #5636",chinawcswing,1gqjytv,https://reddit.com/r/Python/comments/1gqjytv/flask_310_released/,https://www.reddit.com/r/Python/comments/1gqjytv/flask_310_released/,2024-11-13 18:35:55,71,0.93,71,0,1,0,0,False,False,True,False,False,News,self,t3_1gqjytv
Python,extractous - fast data extraction with a rust core + tika native libs compiled through graalvm,"Hello r/Python!

Thought I'd share extractous, a new document extraction library that processes documents up to 20x faster than existing solutions.

**What The Project Does**

Extractous is a high-performance document extraction library that processes PDFs, Word documents, HTML, and many other formats with native speed. It's built with a Rust core and uses GraalVM to compile Tika components to native code, eliminating the need for external services or JVM runtime.

  
**Performance**

* Extracted Apple's 10-K filing in 320ms vs unstructured-io's 8.2s
* Average 18x faster across SEC filings dataset
* Significantly lower memory footprint

  
**Quick Start**

`pip install extractous` 

    from extractous import Extractor
    
    extractor = Extractor()
    result = extractor.extract_file_to_string(""document.pdf"")
    print(result)

  
**Target Audience**

* Anyone using tika-python or unstructured-io who needs better performance
* Large-scale document processing
* RAG (Retrieval Augmented Generation) pipelines
* AI/ML document preprocessing

**Comparison**

* **tika-python** \- Popular Apache Tika binding. Extractous offers native performance without JVM overhead
* **unstructured-io** \- Popular document processing library. Extractous is 18x faster and uses significantly less memory
* **textract** \- Extractous provides similar functionality but with native speed and modern architecture

**Features**

* Support for numerous formats (PDF, Word, HTML, Images with OCR, etc.)
* Simple Python API
* No external API services or JVM required
* Free for commercial use (Apache 2.0)
* Memory efficient through Rust ownership model

**Coming Soon**

* XHTML output support
* Enhanced file metadata extraction
* GIL-bypassing batch processing API for parallel workloads

  
**Repo**  
[https://github.com/yobix-ai/extractous](https://github.com/yobix-ai/extractous)

**Try it online (free)**   
[https://www.extractous.com/](https://www.extractous.com/)",drogubert,1gqi6bg,https://reddit.com/r/Python/comments/1gqi6bg/extractous_fast_data_extraction_with_a_rust_core/,https://www.reddit.com/r/Python/comments/1gqi6bg/extractous_fast_data_extraction_with_a_rust_core/,2024-11-13 17:22:22,49,0.98,49,0,12,0,0,False,False,True,False,False,Showcase,self,t3_1gqi6bg
Python,uv after 0.5.0 - might be worth replacing Poetry/pyenv/pipx,"uv is rapidly maturing as an open-source tool for Python project management, reaching a full-featured capabilities with recent versions 0.4.27 and 0.5.0, making it a strong alternative to Poetry, pyenv, and pipx. However, concerns exist over its long-term stability and licensing, given Astral's venture funding position.

https://open.substack.com/pub/martynassubonis/p/python-project-management-primer-a55",Martynoas,1gqh4te,https://reddit.com/r/Python/comments/1gqh4te/uv_after_050_might_be_worth_replacing/,https://www.reddit.com/r/Python/comments/1gqh4te/uv_after_050_might_be_worth_replacing/,2024-11-13 16:39:42,386,0.93,386,0,124,0,0,False,False,True,False,False,News,self,t3_1gqh4te
Python,Is async django ready for prime time? Our async django production experience,"We have traditionally used Django in all our products. We believe it is one of the most underrated, beautifully designed, rock solid framework out there.

However, if we are to be honest, the history of async usage in Django wasn't very impressive. You could argue that for most products, you don‚Äôt really need async. It was just an extra layer of complexity without any significant practical benefit.

Over the last couple of years, AI use-cases have changed that perception. Many AI products have calling external APIs over the network as their bottleneck. This makes the complexity from async Python worth considering. FastAPI with its intuitive async usage and simplicity have risen to be the default API/web layer for AI projects.

I wrote about using async Django in a relatively complex AI open source project here: [https://jonathanadly.com/is-async-django-ready-for-prime-time](https://jonathanadly.com/is-async-django-ready-for-prime-time)

tldr: Async django is ready! there is a couple of gotcha's here and there, but there should be no performance loss when using async Django instead of FastAPI for the same tasks. Django's built-in features greatly simplify and enhance the developer experience.

So - go ahead and use async Django in your next project. It should be a lot smoother that it was a year or even six months ago.",Vegetable_Study3730,1gqg8q2,https://reddit.com/r/Python/comments/1gqg8q2/is_async_django_ready_for_prime_time_our_async/,https://www.reddit.com/r/Python/comments/1gqg8q2/is_async_django_ready_for_prime_time_our_async/,2024-11-13 16:02:51,73,0.95,73,0,10,0,0,False,False,True,False,False,Resource,self,t3_1gqg8q2
Python,Netflix Subtitle Translator: The XPath Solution - Refined Around Office Hours,"**Motivation:**  
Hey everyone! Last Sunday, I shared the first version of my project,¬†*Netfly Subtitle Converter :*¬†[https://www.reddit.com/r/Python/comments/1gny0ew/built\_this\_over\_the\_weekend\_netflix\_subtitle/](https://www.reddit.com/r/Python/comments/1gny0ew/built_this_over_the_weekend_netflix_subtitle/), which came out of a personal need to watch Japanese shows on Netflix with English subtitles when they weren‚Äôt available. I was blown away by the response and genuinely grateful for all the feedback ‚Äì it made me take a step back and rethink my approach. To everyone who commented and upvoted, a big thank you! The insights helped me take this project to the next level and I'm pleased to share with you all the next iteration of this project.

**What Does This Project Do?**  
*Netfly Subtitle Converter*¬†takes Japanese subtitles from Netflix, translates them into English ( currently both the source language and the target language are hard coded ) , and syncs them with the video for real-time viewing. Initially, I used Google Cloud Vision to extract text from video frames and AWS Translate for translation. It worked, but as some of you pointed out, this method wasn‚Äôt exactly scalable or efficient. It was costly as well - storing frames in S3, sending them across to Vision API and then using AWS translate. While I had both AWS Credits and Google Credits to cover this up, I got the notion that eventually this will burn a hole in my pocket.

**High-Level Solution:**  
After reading through the suggestions, I realized there was a much better approach. Many of you suggested looking into directly extracting the subtitle files instead of using computer vision. That led me to find a way to download the original XML subtitle file from Netflix ( again thanks to a sub reddit and the post was over 9 years old - even I'm quite surprised that the approach still works ). This XML file has everything I need: the Japanese text along with start and end times. Now, by using XPath, I can easily navigate through the XML to pull out the Japanese subtitles, which I then send to AWS Translate for English output. The whole process is now much simpler, scalable, and cost-effective ‚Äì it‚Äôs a solution that feels more aligned with real-world needs.

**Target Audience:**  
I initially built this for my personal use, but it‚Äôs also ideal for any fan of Japanese anime with limited Japanese proficiency. Additionally, anyone interested in working with libraries like lxml (Python's XML and XPath parsing library) and AWS tools such as AWS Translate, as well as the boto3 SDK, may find this project a valuable hands-on learning experience.

**Comparison with Similar Tools:**  
While there are Chrome extensions that overlay dual-language subtitles on Netflix, they require both Japanese and English subtitles to be available. My case was different ‚Äì there were no English subtitles available, necessitating a unique approach.

**What‚Äôs Next?**  
Right now, downloading the XML subtitle file requires a manual step ‚Äì I have to go to Netflix and fetch it for each show. To make this more automated, I‚Äôm working on a Playwright script that will pull these files automatically. It‚Äôs still a work in progress, but I‚Äôm excited to see how far I can take it.

**Demo / Screenshots**

[https://imgur.com/a/bWHRK5H](https://imgur.com/a/bWHRK5H)  
[https://imgur.com/a/pJ6Pnoc](https://imgur.com/a/pJ6Pnoc)

**Github URL:**   
[https://github.com/Anubhav9/Netfly-subtitle-converter-xml-approach/](https://github.com/Anubhav9/Netfly-subtitle-converter-xml-approach/)  
  
Cheers, and thank you !",Content_Ad_4153,1gqfcbh,https://reddit.com/r/Python/comments/1gqfcbh/netflix_subtitle_translator_the_xpath_solution/,https://www.reddit.com/r/Python/comments/1gqfcbh/netflix_subtitle_translator_the_xpath_solution/,2024-11-13 15:24:22,16,0.84,16,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gqfcbh
Python,Expedite v0.1.0 is out now on PyPI,"The general availability of Expedite v0.1.0 is announced with great pleasure. This project has been posted about in this subreddit [here](https://www.reddit.com/r/Python/comments/1dx7qqb/introducing_expedite_a_simple_encrypted_file/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button) and [here](https://www.reddit.com/r/Python/comments/1ea5av1/introducing_expedite_bridge_a_simple_encrypted/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button) and your feedback has been crucial in shaping up its first beta release. The project will continue to be developed to ensure that features get introduced and bugs get fixed timely.

# Recap

**Expedite**¬†is a simple encrypted file transfer service that allows people to share synchronously assets among each other without having to rely on third party file sharing services (and constantly worrying about how their data might be used) or feeling the need to have publicly visible IP addresses (and constantly worrying about script kiddies attacking your computer).

**Expedite Server**¬†can be deployed on a virtual private server having an IP address that is discoverable by the¬†**Expedite Client**¬†users to broker file contents. The transfers facilitated using¬†**WebSockets**¬†are end-to-end encrypted with the use of¬†**128-bit Advanced Encryption Standard**¬†and the server is restricted to logging only unidentifiable activities to the volatile memory.

# Illustrations

* Expedite Bridge
   * [https://github.com/gridhead/expedite/blob/main/data/bridge-recv-prog.gif](https://github.com/gridhead/expedite/blob/main/data/bridge-recv-prog.gif)
   * [https://github.com/gridhead/expedite/blob/main/data/bridge-send-prog.gif](https://github.com/gridhead/expedite/blob/main/data/bridge-send-prog.gif)
* Expedite Prompt
   * [https://github.com/gridhead/expedite/blob/main/data/prompt-recv-prog.gif](https://github.com/gridhead/expedite/blob/main/data/prompt-recv-prog.gif)
   * [https://github.com/gridhead/expedite/blob/main/data/prompt-send-prog.gif](https://github.com/gridhead/expedite/blob/main/data/prompt-send-prog.gif)

# Attempting

If this looks exciting to you, please consider giving the project a spin using the¬†[publicly available servers](https://github.com/gridhead/expedite?tab=readme-ov-file#offerings)¬†and let me know how I can further improve the project by¬†[filing](https://github.com/gridhead/expedite/issues)¬†issue tickets for software errors or feature requests.¬†[Starring](https://github.com/gridhead/expedite/stargazers)¬†the project repository,¬†[contributing](https://github.com/gridhead/expedite/fork)¬†to the codebase or¬†[sponsoring](https://github.com/sponsors/gridhead)¬†me to keep working on more FOSS projects would forever be greatly appreciated! &lt;3

# Resources

* [Gridhead - GitHub Sponsors](https://github.com/sponsors/gridhead)
* [Expedite - GitHub](https://github.com/gridhead/expedite)
   * [Expedite v0.1.0](https://github.com/gridhead/expedite/releases/tag/0.1.0)
      * [Expedite Bridge for GNU/Linux Distributions](https://github.com/gridhead/expedite/releases/download/0.1.0/ed-bridge-v0.1.0.gnul)
      * [Expedite Bridge for Microsoft Windows](https://github.com/gridhead/expedite/releases/download/0.1.0/ed-bridge-v0.1.0.mswn.exe)
      * [Expedite Prompt for GNU/Linux Distributions](https://github.com/gridhead/expedite/releases/download/0.1.0/ed-prompt-v0.1.0.gnul)
      * [Expedite Prompt for Microsoft Windows](https://github.com/gridhead/expedite/releases/download/0.1.0/ed-prompt-v0.1.0.mswn.exe)
      * [Expedite Server for GNU/Linux Distributions](https://github.com/gridhead/expedite/releases/download/0.1.0/ed-server-v0.1.0.gnul)
      * [Expedite Server for Microsoft Windows](https://github.com/gridhead/expedite/releases/download/0.1.0/ed-server-v0.1.0.mswn.exe)
* [Expedite - PyPI](https://pypi.org/project/expedite/)
   * [Expedite v0.1.0](https://pypi.org/project/expedite/0.1.0)
      * [Source Distribution](https://files.pythonhosted.org/packages/b2/dc/30122a5be523dafe7aac10e555a551bdc2afb362b36daa7a26d884d89acc/expedite-0.1.0.tar.gz)
      * [Built Distribution](https://files.pythonhosted.org/packages/21/dd/e7e7875ae1640a2b67c2f39e89b8c99be54c5bfd027fb0c81807b8c01350/expedite-0.1.0-py3-none-any.whl)
* [Expedite - Docker Hub](https://hub.docker.com/r/t0xic0der/expedite)
   * [Expedite v0.1.0](https://hub.docker.com/layers/t0xic0der/expedite/v0.1.0/images/sha256-974ffa35104e81d5eebb3b92444cfe02871dd749e6339a7af01e059987cd35f5?context=explore)

# Roadmap

1. Establish testing of the functional part of the codebase
2. Post average latency for diagnostic information
3. Attempt reconnecting of websockets object after connection drop
4. Show IP addresses at the server end in the logging only
5. Allow files to be added using the drag-and-drop action to the batch
6. Port the project to the recent asyncio based implementation of websockets
7. Allow for the transfer operation to happen in batches
8. Ensure whether the logging configuration is indeed applied or not 
9. Use generator for optimizing reading and writing files
10. Update the connection timeout logic to the newer codebase",t0xic0der,1gqeqqb,https://reddit.com/r/Python/comments/1gqeqqb/expedite_v010_is_out_now_on_pypi/,https://www.reddit.com/r/Python/comments/1gqeqqb/expedite_v010_is_out_now_on_pypi/,2024-11-13 14:58:14,14,0.76,14,0,0,0,0,False,False,True,False,False,News,self,t3_1gqeqqb
Python,Roast my personal data engineering project,"**What My Project Does**

Fakeout generates batch and streaming data based on a JSON data definition, and sends the generated data to blob storage (currently only Google Cloud), and event/messaging services (currently only Pub/Sub). Written in Python and deployed with Docker.

**Target Audience**

Data Engineers, Web Developers and people building data engineering portfolio pipelines.

**Comparison**

Faker - Only generates fake data, doesn't send it anywhere. 

Mimesis¬†- Again, only creates the fake data, doesn't integrate with any services



I'm considering developing it further and adding new cloud provider connections, new data types, webhooks, a web app, etc.

What do you think? Does it seem useful? How well-written/architected is it? Any tips for how I can make it better?

[https://github.com/richard-muir/fakeout](https://github.com/richard-muir/fakeout)



Here's the blurb from the README to save you a click:

# ## Overview

FakeOut is a Python application that generates realistic and customisable fake streaming and batch data.

It's useful for Data Engineers who want to test their streaming and batch processing pipelines with toy data that mimics their real-world data structures.

# ### Features

* **Concurrent Data Models**: Define and run multiple models simultaneously for both streaming and batch services, allowing for diverse data simulation across different configurations and services.
* **Streaming Data Generation**: Continuously generates fake data records according to user-defined configurations, supporting multiple streaming services at once.
* **Batch Export**: Exports configurable chunks of data to cloud storage services, or to the local filesystem.
* **Configurable**: A flexible JSON configuration file allows detailed customization of data generation parameters, enabling targeted testing and simulation.",rytchbass,1gq8u2u,https://reddit.com/r/Python/comments/1gq8u2u/roast_my_personal_data_engineering_project/,https://www.reddit.com/r/Python/comments/1gq8u2u/roast_my_personal_data_engineering_project/,2024-11-13 09:06:56,5,0.58,5,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gq8u2u
Python,BeamerQT: PyQt application to create LaTeX presentations - v 0.1 ,"I have created a visual application to create LaTeX/Beamer presentions, using PyQt6.

**What my project does**

BeamerQT provides a visual interface to create the presentations, providing abstraction of the most LaTeX code to define the slides, blocks or columns. 

  
The main features are:  
\- Easy layout in two columns with editable width

\- Marking blocks as block, example, alert or unformatted blocks.

\- Create inside layouts in the blocks.

\- Support adding images.

\- Drag and Drop slides.

\- Easy Sectioning.

\- Easy theme selection.

\- Easy to add LaTeX code inside blocks and preamble.

\- Support for SVG files (if Inkscape is installed)

\- Export to LaTeX

\- Export to PDF (if pdflatex is available)

  
**Target audience?**

Academic community and enthusiasts that are looking for a visual interface for LaTeX/Beamer presentations.

  
**Comparison?**

LyX: Provides a GUI for LaTeX documents, and a basic template for Beamer presentations, without a visual edition of the slides.

Overleaf: Provides an interfaz for raw LaTeX documents, including Beamer, but does not provide visual edition of the slides.



**Repository?**

The repository is located in github: [https://github.com/acroper/BeamerQt](https://github.com/acroper/BeamerQt)



**Documentation?**

The repostory contains a basic documentation (work in progress). 

Demonstration video: [https://youtu.be/XQKJbuT8q1g](https://youtu.be/XQKJbuT8q1g)

",Latter-Path-8674,1gq77j0,https://reddit.com/r/Python/comments/1gq77j0/beamerqt_pyqt_application_to_create_latex/,https://www.reddit.com/r/Python/comments/1gq77j0/beamerqt_pyqt_application_to_create_latex/,2024-11-13 07:02:26,13,0.82,13,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gq77j0
Python,The Mill build tool is looking for people to collaborate with on adding Python support,"Hi All,

Mill is a build tool traditionally targeting JVM languages Java/Scala/Kotlin, but is branching out to support other languages like multi-module Python or Javascript codebases. We're looking for people interested build tools to collaborate with us on adding first-class Python toolchain support to Mill. To that end, we've put up a non-trivial issue bounty to encourage collaboration for anyone who implements various Python-related build examples and tooling integrations for Mill:

[First Class Python Support (4000USD Bounty)](https://github.com/com-lihaoyi/mill/issues/3928)

I'd love to get feedback on the tool, the Python support roadmap, or thoughts on what people need from a Python build tool. My own Python tooling experience is a bit out of date, so any feedback (both positive or negative) would be very welcome!",lihaoyi,1gq6d3e,https://reddit.com/r/Python/comments/1gq6d3e/the_mill_build_tool_is_looking_for_people_to/,https://www.reddit.com/r/Python/comments/1gq6d3e/the_mill_build_tool_is_looking_for_people_to/,2024-11-13 06:04:34,3,0.64,3,0,0,0,0,False,False,True,False,False,Discussion,self,t3_1gq6d3e
Python,How to prevent python software from being reverse engineered or pirated?,"I have a program on the internet that users pay to download and use. I'm thinking about adding a free trial, but I'm very concerned that users can simply download the trial and bypass the restrictions. The program is fully offline and somewhat simple. It's not like you need an entire team to crack it.

In fact, there is literally a pyinstaller unpacker out there that can revert the EXE straight back to its python source code. I use pyinstaller.

Anything I can do? One thing to look out for is unpackers, and the other thing is how to make it difficult for Ghidra for example to reverse the program.

To clarify, I can't just offer this as an online service/program because it requires interaction with the user's system.",voicerama,1gq2v3p,https://reddit.com/r/Python/comments/1gq2v3p/how_to_prevent_python_software_from_being_reverse/,https://www.reddit.com/r/Python/comments/1gq2v3p/how_to_prevent_python_software_from_being_reverse/,2024-11-13 02:45:19,0,0.37,0,0,25,0,0,False,False,True,False,False,Discussion,self,t3_1gq2v3p
Python,Nythop Programming Language,"# üëã Hey everyone!

Let me introduce **Nythop**, my lazy rascal‚Äôs attempt at an esolang. I‚Äôll be honest: this is less a language and more like a language preprocessor in disguise. But hey, I‚Äôve taken one of the most readable programming languages (Python) and, with one very simple change, turned it into a cryptic puzzle that‚Äôs about as easy to decipher as ancient runes.

# [Try Nythop Now!](https://luxedo.github.io/nythop/) or check the [GitHub repo!](https://github.com/luxedo/nythop)

# So, What‚Äôs the Gimmick?

Nythop reverses every line of Python. That‚Äôs it. The code itself is perfectly valid Python‚Äîjust written backward. Indentation lands at the end of each line, comments run from right to left. This approach is both hilariously simple and impressively confusing, making each line a challenge to read. Turns out, such a small change does a great job of making Python nearly unreadable!

# Try it Out!

You can dive into Nythop right now with the [online interpreter](https://luxedo.github.io/nythop/) and see for yourself. Or you can just grab the [PyPI package](https://pypi.org/project/nythop/):

    pip install nythop

This gets you a command-line interpreter and a transpiler to flip standard Python code into Nythop format. You‚Äôll also have access to a REPL and options to run .yp files, or write and execute reversed lines from the command line.

For more details, check out the official [Nythop wiki page](https://esolangs.org/wiki/Nythop).",ArmlessJohn404,1gq2fp1,https://reddit.com/r/Python/comments/1gq2fp1/nythop_programming_language/,https://www.reddit.com/r/Python/comments/1gq2fp1/nythop_programming_language/,2024-11-13 02:23:33,1,0.67,1,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1gq2fp1
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1gpzgm9,https://reddit.com/r/Python/comments/1gpzgm9/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1gpzgm9/wednesday_daily_thread_beginner_questions/,2024-11-13 00:00:10,1,0.6,1,0,2,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gpzgm9
Python,Hands-On Python: Beginner-Friendly Projects to Kickstart Your Coding,"If you're new to coding and want to practice Python, I‚Äôve got a list of easy, practical projects that are perfect for new ninjas! Whether you‚Äôre aiming to strengthen your problem-solving skills or build something cool, these projects are a great way to dive in. Each project is designed to help you understand Python basics while keeping things fun and manageable.

# projects list:

* Flashcard quiz app
* learn how to build Less Pass Clone
* Hangame game 
* guess the number game
* contact book 

[projects list link ](https://www.rankap.tech/en/tutorials/)",RevolutionaryAd8906,1gpqm6o,https://reddit.com/r/Python/comments/1gpqm6o/handson_python_beginnerfriendly_projects_to/,https://www.reddit.com/r/Python/comments/1gpqm6o/handson_python_beginnerfriendly_projects_to/,2024-11-12 17:47:15,16,0.76,16,0,1,0,0,False,False,True,False,False,Tutorial,self,t3_1gpqm6o
Python,"pyTermTk - Self contained TUI library - v0.41.0a released
","Hello¬†[r/Python](https://www.reddit.com/r/Python/)

I am excited to share after few months of hard work since the previous release,

# What My Project Does

[pyTermTk](https://github.com/ceccopierangiolieugenio/pyTermTk)¬†is a¬†[fully-featured](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html),¬†[cross compatible](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/crosscompatible.html)¬†and¬†[self contained](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/installing.html#copy-termtk-folder)¬†TUI Python library, it helps developing interacting Terminal applications with modern aesthetics and controls (mouse/keyboard/drag&amp;drop) that you can run out of the box on a terminal on through an ssh/serial session.

It is cross compatible with¬†Linuxüêß,¬†MacOSüçé,¬†MS Windowsü™ü,¬†HTML5üåç([Try](https://ceccopierangiolieugenio.github.io/pyTermTk/sandbox/sandbox.html))

Its API are structured to be as close as possible as [Qt](https://www.qt.io/)'s¬†[PySide](https://wiki.qt.io/Qt_for_Python)/[PyQt](https://wiki.python.org/moin/PyQt) with some touches of [Tcl/Tk](https://www.tcl.tk).

In the basic package there are a number of widgets already available:

[Base Widgets](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#base-widgets)

* Label, Button, ComboBox, Spinbox, Checkbox, Radio Button, Line Edit, Scrollbar, List, Menu, Tab

[Specialised Widgets](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#specialised-widgets)

* TextEdit, KodeTab, Terminal, Image

[Model View](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#model-view)

* Tree Widget, Table Widget, File Tree

[Pickers](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#pickers)

* Text Picker, File Picker, Color Picker, Message Box

[Layout](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#layout)

* Frame, Resizable Frame, Window, Splitter, Scroll Area, App Template

# Target Audience?

* TUI Development with modern UI look/features
* UI Apps for devices without graphic capabilities (single-board computers, vms, cluster nodes, ssh, serial)

# Comparison?

* **urwid -**¬†Is one of the first Python TUI library,¬†**pyTermTk**¬†offers many widgets out of the box not included in the standard urwid
* **Textual**¬†\- is a TUI api using a different ""Web"" like paradigm instead of the ObjectOriented (Qt-like) approach widget based approach used by¬†**pyTermTk**.
* **pymux**¬†\- the Terminal widget included in¬†**pyTermTk**¬†allows an end user to build and customize a terminal multiplexer app tu support a wide variety of use cases

[Showcase](https://www.youtube.com/watch?v=zLxqUXG7NGk)**:**

* [ttkDesigner](https://github.com/ceccopierangiolieugenio/pyTermTk/tree/main/tools/ttkDesigner)¬†\- the official¬†[pyTermTk](https://github.com/ceccopierangiolieugenio/pyTermTk)¬†tool for designing and building Text-based user interfaces ([TUI](https://en.wikipedia.org/wiki/Text-based_user_interface)s)
* [the DumbPaintTool](https://ceccopierangiolieugenio.itch.io/dumb-paint-tool)¬†\- The Terminal ASCII Photoshop
* [tlogg](https://github.com/ceccopierangiolieugenio/tlogg)¬†\- A fast, advanced log explorer.
* [ttkode](https://github.com/ceccopierangiolieugenio/ttkode)¬†\- TerminalToolKit (Studio) Code (editor)
* [Amiga themed terminal multiplexer](https://www.youtube.com/watch?app=desktop&amp;v=p1MiZOLCFOY)
* [pytest-fold](https://github.com/jeffwright13/pytest-fold)¬†\- A Pytest plugin to make console output more manageable when there are multiple failed tests
* [pytest-tui](https://github.com/jeffwright13/pytest-tui)¬†\- A Text User Interface (TUI) for Pytest, automatically launched after your test run is finished

Games:

* [breakoutRL](https://ceccopierangiolieugenio.itch.io/breakoutrl)¬†\- Breakout the Roguelike
* [7drl-2024](https://ceccopierangiolieugenio.itch.io/a-snake-on-a-plane)¬†\- A Snakeüêç on a Plane‚úàÔ∏è¬†- The Roguelike

**Docs**:¬†[https://ceccopierangiolieugenio.github.io/pyTermTk-Docs](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs)

**Repo:**¬†[https://github.com/ceccopierangiolieugenio/pyTermTk](https://github.com/ceccopierangiolieugenio/pyTermTk)",PierCecco,1gpry54,https://reddit.com/r/Python/comments/1gpry54/pytermtk_self_contained_tui_library_v0410a/,https://www.reddit.com/r/Python/comments/1gpry54/pytermtk_self_contained_tui_library_v0410a/,2024-11-12 18:40:59,22,0.9,22,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1gpry54
Python, Sending cross-email-client-compatible emails with MJML and Python,"Email clients, even Gmail opened in a browser have limited and varying support for HTML/CSS which makes sending good-looking emails hard, especially for various older Outlook clients and other popular email apps.

The old way was tedious inbox testing, conditional Outlook HTML code with tables inside tables and so on. Python could use premailer to inline styles for much better compatibility of plain HTML/CSS and then use tidy to clear HTML from any excess markup and errors... but it's not perfect and limited.

We got **React Email** some time ago, but it's React. Then one of email marketing companies, Mailjet, got triggered enough that they made a sort of a standard/markup - **MJML** \- set that is email message-safe and can be used in browser WYSIWYG as well as backend parsers. Python has an unofficial library so it's very easy to quickly switch to using MJML for email templates.

Aside from client compatibility there is the issue of sending emails so they don't go into spam folder, that will display nicely even if the client blocked loading external assets and more... I went through those problems and some solutions in my tutorial:

* **Tutorial Link**: [https://rkblog.dev/posts/python/sending-good-looking-mjml-emails-with-python/](https://rkblog.dev/posts/python/sending-good-looking-mjml-emails-with-python/) 
* **MJML live editor**: [https://mjml.io/try-it-live](https://mjml.io/try-it-live)



",riklaunim,1gpus46,https://reddit.com/r/Python/comments/1gpus46/sending_crossemailclientcompatible_emails_with/,https://www.reddit.com/r/Python/comments/1gpus46/sending_crossemailclientcompatible_emails_with/,2024-11-12 20:37:09,10,0.92,10,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1gpus46
Python,Python for R users,"I've been writing primarily R code for nearly 20 years but recently needed to get back into Python for several maintenance and development projects. I put together a set of resources for getting up to speed in Python as an experienced R developer.

[https://blog.stephenturner.us/p/python-for-r-users](https://blog.stephenturner.us/p/python-for-r-users)",turnersd,1gpqqox,https://reddit.com/r/Python/comments/1gpqqox/python_for_r_users/,https://www.reddit.com/r/Python/comments/1gpqqox/python_for_r_users/,2024-11-12 17:52:36,55,0.9,55,0,3,0,0,False,False,True,False,False,Resource,self,t3_1gpqqox
Python,Waiting for Geopolars,"I have been using polars for the past few months and love it so much. So much faster and cleaner than pandas. I am about to start a new personal project that will use a lot of geo-dataframes and am thinking about which package to use. Geo pandas exists but its slow and I'd rather something more up to date and polars compatible.

After doing some digging, Geopolars is well on the way but still a major work in progress, several months away from an alpha at least. I'd contribute but my rust isn't up to scratch. I think I might just have to use geopandas for now and convert my code to geopolars when it comes out. Anyone have any thoughts on this?",madmedina,1gpkev1,https://reddit.com/r/Python/comments/1gpkev1/waiting_for_geopolars/,https://www.reddit.com/r/Python/comments/1gpkev1/waiting_for_geopolars/,2024-11-12 13:13:20,38,0.94,38,0,18,0,0,False,False,True,False,False,Discussion,self,t3_1gpkev1
Python,A complete-ish guide to dependency management in Python,"I recently wrote a very long blog post about dependency management in Python. You can read it here:

[https://nielscautaerts.xyz/python-dependency-management-is-a-dumpster-fire.html](https://nielscautaerts.xyz/python-dependency-management-is-a-dumpster-fire.html)

**Why I wrote this**

Anecdotally, it seems that very few people who write Python - even professionally - think seriously about dependencies. Part of that has to do with the tooling, but part of it has to do with a knowledge gap. That is a problem, because most Python projects have a lot of dependencies, and you can very quickly make a mess if you don't have a strategy to manage them. You have to think about dependencies if you want to build and maintain a serious Python project that you can collaborate on with multiple people and that you can deploy fearlessly. Initially I wrote this for my colleagues, but I'm sharing it here in case more people find it useful.

**What it's about**

In the post, I go over what good dependency management is, why it is important, and why I believe it's hard to do well in Python. I then survey the tooling landscape (from the built in tools like pip and venv to the newest tools like uv and pixi) for creating reproducible environments, comparing advantages and disadvantages. Finally I give some suggestions on best practices and when to use what.



I hope it is useful and relevant to r/Python. The same article is available on Medium with nicer styling but the rules say Medium links are banned. I hope pointing to my own blog site is allowed, and I apologize for the ugly styling.",HarvestingPineapple,1gphzn2,https://reddit.com/r/Python/comments/1gphzn2/a_completeish_guide_to_dependency_management_in/,https://www.reddit.com/r/Python/comments/1gphzn2/a_completeish_guide_to_dependency_management_in/,2024-11-12 10:47:03,170,0.93,170,0,82,0,0,False,False,True,False,False,Resource,self,t3_1gphzn2
Python,pyinapp_purchase: Verify In-app Purchase,"Hi, [pyinapp\_purchase](https://github.com/Michael-Jalloh/pyinapp_purchase) is a simple python library to helps to verify,consume and acknowledge in-app purchase with just the purchase token. Currently on supports google but apple verification is coming soon.

  
**What does it do:**

* Seamless Integration: Quickly integrate the validator into existing Python applications.
* Verification: Handles token verification directly with the Google Play Store API to ensure data authenticity.
* Consumption: Handles token consumption if token wasn't consume client side.
* Acknowledgement: Handles token acknowledgement.
* Error Handling: Provides clear feedback for successful or failed token validations.
* Lightweight and Performant: Minimal dependencies and optimized for fast, reliable performance.

  
**Target Audience?**

* Its for backend developers working on mobile application, looking for ways to verify purchase done on their mobile app.
* For backend developers looking to track purchases on their backend.

**Comparison?**

* **pyinapp**: it used receipt instead of purchase token
* **inapp-purchases**: Last update 2018, [pyinapp\_purchase](https://github.com/Michael-Jalloh/pyinapp_purchase) uses new apis",Jolly_Huckleberry969,1gphajd,https://reddit.com/r/Python/comments/1gphajd/pyinapp_purchase_verify_inapp_purchase/,https://www.reddit.com/r/Python/comments/1gphajd/pyinapp_purchase_verify_inapp_purchase/,2024-11-12 09:54:54,9,0.8,9,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gphajd
Python,Introducing SelfHeal: A framework to make all code self healing,"# What My Project Does

Production exceptions are overwhelming to deal with. Why cannot the code fix the exceptions themselves?

GIF DEMO and LIVE DEMOs at Github page: [https://github.com/OpenExcept/SelfHeal/](https://github.com/OpenExcept/SelfHeal/)

# Target Audience

This project is meant for a few different groups of audiences:

1. production / on-call / site reliability engineers
2. Implementation / solutions engineers who deal with lots of escalations

# Comparison

The key feature is automatic analysis of root cause and suggesting fixes to code, which is not present previously.

In the future, we will add capability to automatically apply fix as PR to your codebase.",Limp_Charity4080,1gpegv1,https://reddit.com/r/Python/comments/1gpegv1/introducing_selfheal_a_framework_to_make_all_code/,https://www.reddit.com/r/Python/comments/1gpegv1/introducing_selfheal_a_framework_to_make_all_code/,2024-11-12 06:22:24,0,0.24,0,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1gpegv1
Python,How to Get CIP Service Using DPKT Package,"I am currently working on a PCAP parser project using DPKT package and in one of the parsing item, I am trying to parse CIP (Common Industrial Protocol) and ENIP. ENIP data has fixed byte location inside TCP/UDP data. So, I am able to get ENIP command, but how to get CIP Service. Where the CIP data starts, I need first byte of it. I am unable to identify the starting point of CIP Data. I am having a python function that receives data as argument. I am passing that argument as TCP/UDP data.

The problem is that the CIP data size varies and it shows service at different location in different packets

Any suggestion how to decode and get the correct CIP service?",Hot_Interest_4915,1gpaqim,https://reddit.com/r/Python/comments/1gpaqim/how_to_get_cip_service_using_dpkt_package/,https://www.reddit.com/r/Python/comments/1gpaqim/how_to_get_cip_service_using_dpkt_package/,2024-11-12 02:47:30,5,0.68,5,0,0,0,0,False,False,True,False,False,Discussion,self,t3_1gpaqim
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1gp7a3y,https://reddit.com/r/Python/comments/1gp7a3y/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1gp7a3y/tuesday_daily_thread_advanced_questions/,2024-11-12 00:00:11,6,0.88,6,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gp7a3y
Python,"PipeFunc: Structure, Automate, and Simplify Your Computational Workflows","Hi r/python!

I'm excited to present [**pipefunc**](https://github.com/pipefunc/pipefunc), an open-source Python library that transforms how we create and manage pipelines for scientific computations.

**What My Project Does:**

&gt;Definition: A *pipeline* is a sequence of interconnected functions, structured as a [Directed Acyclic Graph](https://en.wikipedia.org/wiki/Directed_acyclic_graph) (DAG), where outputs from one or more functions serve as inputs to subsequent ones. pipefunc streamlines the creation and management of these pipelines, offering powerful tools to efficiently execute them.

* **Convert Functions into Reusable Pipelines:** With minimal changes.
* **Pipeline Visualization &amp; Resource Profiling**
* **Automatic Parallelization:** Supports both local and SLURM cluster execution.
* **Ultra-Fast Performance**: Minimal overhead of about 15 ¬µs per function in the graph, ensuring blazingly fast execution.
* **Automatic Type Annotations Validation**

Built with NetworkX, NumPy, and optional integration with Xarray, Zarr, and Adaptive, pipefunc is perfect for handling the complex interdependencies and data flows typical in computational projects.

*Key Advantages of PipeFunc:*

The standout feature of pipefunc is its adept handling of N-dimensional parameter sweeps, a frequent requirement in scientific research. For instance, in many sciences, you might encounter a 4D sweep over parameters x, y, z, and time. Traditional tools create a separate task for every parameter combination, leading to computational bottlenecks‚Äîimagine a 50 x 50 x 50 x 50 grid generating 6.5 million tasks before computation even starts.

pipefunc simplifies this with an index-based approach, using four axes, each a list of length 50, with indices pointing to positions. This not only streamlines the setup by focusing on the pipeline but also reduces overhead with a manageable range of indices. Starting on a cluster or locally is as simple as a single function call!

*Quality Assurance:* Over 600 tests ensure 100% test coverage, with full type annotations and adherence to Ruff Rules.

**Target Audience?**

* Scientific HPC Workflows: Efficiently manage complex computational tasks in high-performance computing environments.
* ML Workflows: Streamline your data preprocessing, model training, and evaluation pipelines.

**Comparison?**

* **Vs. Luigi, Airflow, Prefect, Kedro:** While tailored for event-driven and ETL processes, pipefunc excels in simulations and complex computational workflows, adapting easily to varied resources.
* **Vs. Dask:** Although Dask is excellent for low-level parallelism, pipefunc offers higher-level abstraction with effortless task distribution and dependency management.

Try **pipefunc**! Whether you want to star the repo, contribute, or just browse the documentation, it's all appreciated.

I'm here to answer questions or dive into any discussion!

* [docs](https://pipefunc.readthedocs.io/)
* [source](https://github.com/pipefunc/pipefunc)
",basnijholt,1gp79mj,https://reddit.com/r/Python/comments/1gp79mj/pipefunc_structure_automate_and_simplify_your/,https://www.reddit.com/r/Python/comments/1gp79mj/pipefunc_structure_automate_and_simplify_your/,2024-11-11 23:59:37,36,0.89,36,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1gp79mj
Python,"htmy: async, pure-Python server-side rendering, now with markdown support and internationalization ","Hi all,

`htmy` 0.3 just got released. The new major features since the first release are markdown support with customization tools and internationalization (both with async I/O).

You can check out [markdown](https://volfpeter.github.io/htmy/examples/markdown/) and [internationalization](https://volfpeter.github.io/htmy/examples/internationalization/) examples in the docs (well, [FastAPI](https://volfpeter.github.io/htmy/examples/fastapi-htmx-tailwind-daisyui/) as well).

There are a few more planned features and tutorials, like FastAPI and HTMX integration with [FastHX](https://volfpeter.github.io/fasthx/). See the issue tracker for details.",volfpeter,1gp3mww,https://reddit.com/r/Python/comments/1gp3mww/htmy_async_purepython_serverside_rendering_now/,https://www.reddit.com/r/Python/comments/1gp3mww/htmy_async_purepython_serverside_rendering_now/,2024-11-11 21:24:09,23,0.93,23,0,4,0,0,False,False,True,False,False,News,self,t3_1gp3mww
Python,Programming from your phone: has anyone actually managed to do it?,"Alright, serious question: has anyone here actually tried to code in Python from their phone using apps like Pydroid or similar? I downloaded a couple of these apps (Pydroid, QPython, etc.) thinking ‚Äúmaybe I can get some quick coding done,‚Äù but‚Ä¶ I dunno, between the tiny keyboard, limited features, and the small screen, it feels impossible.

I‚Äôm wondering if anyone has actually managed to do anything useful with this, or if it‚Äôs just one of those things that sounds good but in practice is like using a screwdriver to cut a cake. üç∞

If you‚Äôve got experiences, tips, or some kind of setup that works decently, let me know. Maybe there‚Äôs a trick I‚Äôm missing that could make this less frustrating!",Elegant-Fix8085,1gp2zw4,https://reddit.com/r/Python/comments/1gp2zw4/programming_from_your_phone_has_anyone_actually/,https://www.reddit.com/r/Python/comments/1gp2zw4/programming_from_your_phone_has_anyone_actually/,2024-11-11 20:58:22,99,0.77,99,0,153,0,0,False,False,True,False,False,Discussion,self,t3_1gp2zw4
Python,Checking availability of a package name on PyPI,"Hi everyone,  
I hope this package will help some of us to find and check unique name for our new packages.

nameisok is a Python package that helps  
developers check the availability of package names on PyPI, taking it  
one step further with enhanced functionality. This tool is perfect for  
anyone looking to publish new packages and wanting to avoid name  
conflicts or similar names that could cause confusion. 

**Key Features**

PyPI Availability Check: Quickly checks PyPI to see if a package name is available for registration.  
BigQuery Database Check: Uses the PyPI dataset on Google BigQuery for additional verification of package name availability.  
Similarity Check: Detects names that are too similar to existing  
packages, based on a customizable similarity threshold, preventing  
potential naming conflicts.

**What is different in this package ?** 

On PyPI there are packages that does check for PyPI with a request, this package ensures it is not one of reserved names in python and second applying a similarity check it helps developers to waste their time to change their package name only while trying to push to PyPI. 

**Who are the target audience?** 

This package may be helpful for all developers who currently develop their own opensource packages to share on PyPI and also future developers that may publish their own packages to PyPI to share with the world or with their teams. 

Usage

`pip install nameisok -U`  
`nameisok example,numpyyy,MyAwesomePackageName, MyGreatPackageName,nameisok`

‚ùå \`example\` is already taken.‚ùå \`numpyyy\` is very similar to \`numpy\`, \`numpy-extensions\`  
‚ùå Unfortunately, the name 'MyAwesomePackageName' is too similar to existing projects:  
\- awesome-package  
\- my-awesome-package  
\- my-awesome-package-way  
\- my-awesome-package1

‚ùå \`numpyyy\` is very similar to \`numpy\`, \`numpy-extensions\`  
üéâ Wow! \`MyGreatPackageName\` is available!  
‚ùå \`nameisok\` is already taken.

[Github:nameisok](https://github.com/SermetPekin/nameisok)",No-Consequence-3216,1gp2gwo,https://reddit.com/r/Python/comments/1gp2gwo/checking_availability_of_a_package_name_on_pypi/,https://www.reddit.com/r/Python/comments/1gp2gwo/checking_availability_of_a_package_name_on_pypi/,2024-11-11 20:36:44,3,0.67,3,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gp2gwo
Python,[PGQueuer v0.15.0 Release] Now with Recurring Job Scheduling!,"# [PGQueuer v0.15.0 Release] Now with Recurring Job Scheduling!

Hey r/Python! I'm thrilled to announce the release of PGQueuer v0.15.0. PGQueuer is a minimalist job queue library for Python that leverages PostgreSQL for high-performance, real-time background processing. This release brings a major new feature: **Recurring Job Scheduling**.

### What My Project Does
PGQueuer is a lightweight job queue library for Python that uses PostgreSQL for managing background jobs. It allows you to queue up tasks that can be processed asynchronously, leveraging PostgreSQL's robustness and native features like `LISTEN/NOTIFY` and `FOR UPDATE SKIP LOCKED`. PGQueuer now also supports scheduling recurring jobs using cron-like syntax, ideal for automating tasks such as routine cleanups or data synchronization.

### Target Audience
PGQueuer is intended for developers looking for a simple, efficient, and production-ready job queue solution that integrates seamlessly with PostgreSQL. It's ideal for teams that want a reliable background task manager without the overhead of setting up additional infrastructure like Redis or RabbitMQ. This is not just a toy project; it's built for production use and designed to handle high-throughput environments.

### Comparison with Alternatives
Compared to other job queue systems like Celery, PGQueuer focuses on minimalism and tight integration with PostgreSQL. Unlike Celery, which often requires Redis or RabbitMQ, PGQueuer relies solely on PostgreSQL, reducing the need for additional infrastructure. Its use of PostgreSQL features like `LISTEN/NOTIFY` makes it particularly suitable for applications already using PostgreSQL, allowing developers to manage both their jobs and data within the same database system.

### What's New?
- **Recurring Job Scheduling**: You can now schedule jobs using cron-like syntax with the `SchedulerManager`. This feature is perfect for automating repetitive tasks, like data synchronization or routine cleanups.

### Example of the New Scheduling Feature
Want to schedule a task every minute? Here's how:
```python
@scheduler.schedule(""sync_data"", ""* * * * *"")
async def sync_data(schedule: Schedule) -&gt; None:
    print(""Running scheduled sync_data task"")
```
Run the scheduler with:
```bash
pgq run myapp.create_scheduler
```
**Note**: Don't forget to run the database migration to use the new scheduler:
```bash
python -m pgqueuer upgrade
```

I'd love for you to try PGQueuer and give me your feedback. If you need high-throughput job management with PostgreSQL's reliability, give it a go!

GitHub: [PGQueuer Repo](https://github.com/janbjorge/pgqueuer)

Feel free to ask questions or share your thoughts, and happy coding everyone!

",GabelSnabel,1gp19no,https://reddit.com/r/Python/comments/1gp19no/pgqueuer_v0150_release_now_with_recurring_job/,https://www.reddit.com/r/Python/comments/1gp19no/pgqueuer_v0150_release_now_with_recurring_job/,2024-11-11 19:49:13,11,0.81,11,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gp19no
Python,Cyclopts v3 released: Typer-inspired CLI library now with pydantic/dataclass/attrs support.,"# What My Project Does
Cyclopts is a [Typer](https://typer.tiangolo.com)-inspired library that generates CLI interfaces from a function's signature, type-hints, and docstrings.

# Target Audience
Cyclopts is production ready and can be used in any situation where an alternative (Typer/Click/Argparse) would have been used.

# Comparison
Cyclopts [addresses a bunch of shortcomings/issues with Typer](https://cyclopts.readthedocs.io/en/latest/vs_typer/README.html). Cyclopts results in [much less code that is much easier to read](https://github.com/BrianPugh/cyclopts?tab=readme-ov-file#compared-to-typer).

# Details

Cyclopts v3's headlining feature is that it [now supports pydantic/dataclass/attrs type hints](https://cyclopts.readthedocs.io/en/latest/user_classes.html). For example:

```python
from cyclopts import App
from dataclasses import dataclass

app = App(name=""movie-maintainer"")

@dataclass
class Movie:
   title: str
   year: int

@app.command
def add(movie: Movie):
   print(f""Adding movie: {movie}"")

app()
```

Results in the CLI:

```bash
$ movie-maintainer add --help
Usage: movie-maintainer add [ARGS] [OPTIONS]

‚ï≠‚îÄ Parameters ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ *  MOVIE.TITLE              [required]                      ‚îÇ
‚îÇ      --movie.title                                          ‚îÇ
‚îÇ *  MOVIE.YEAR --movie.year  [required]                      ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

$ movie-maintainer add 'Mad Max: Fury Road' 2015
Adding movie: Movie(title='Mad Max: Fury Road', year=2015)

$ movie-maintainer add --movie.title 'Furiosa: A Mad Max Saga' --movie.year 2024
Adding movie: Movie(title='Furiosa: A Mad Max Saga', year=2024)
```

The behavior is pretty customizable, for example you can easily [flatten the namespace](https://cyclopts.readthedocs.io/en/latest/user_classes.html#namespace-flattening) if you don't want to expose the `--movie` prefix to the CLI.

To install:

```
pip install cyclopts
```

Project Repo: https://github.com/BrianPugh/cyclopts

Docs: https://cyclopts.readthedocs.io/en/latest/
",guyfrom7up,1gotc0v,https://reddit.com/r/Python/comments/1gotc0v/cyclopts_v3_released_typerinspired_cli_library/,https://www.reddit.com/r/Python/comments/1gotc0v/cyclopts_v3_released_typerinspired_cli_library/,2024-11-11 14:24:12,5,0.86,5,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gotc0v
Python,Introducing wordgradient - a minimal CLI tool to create a language frequency map,"I wanted to develop a simple command line tool that would assist me with developing some Python skills in addition to practicing Regular Expressions - so the aim was to build a simple tool that would sort input words by language frequency which is helpful in solving Wordle and Spelling Bee puzzles.

**Motivation**

I've found that solving Wordle with grep is a great way to practice Regular Expressions - I pipe the grep output to wordgradient to sort the output words by language frequency. It's also a lot of fun! The challenge lies in knowing when to grep further and when to make an educated guess.

**What My Project Does**

The tool orders input words by language frequency with various options - head (displays top ten most frequent words), tail (displays ten least frequent words), inverse ordering and a bonus rainbow colour option (who doesn't like rainbows?)

**Target Audience**

Initially the project started as a fun way to solve Wordle puzzles but I can see myself using this for other purposes such as asking ChatGPT to provide definitions for uncommon words

**Comparison**

The tool is in the vein of classic command line tools such as head and tail but includes sorting by language frequency

Source:

[https://github.com/ctosullivan/WordGradient](https://github.com/ctosullivan/WordGradient)

Credits:

Word list credit: [https://www.kaggle.com/datasets/rtatman/english-word-frequency](https://www.kaggle.com/datasets/rtatman/english-word-frequency)

With thanks to the creators of [Rich](https://github.com/Textualize/rich) and [Rich-Gradient](https://pypi.org/project/rich-gradient).",ctosullivan,1gosu3p,https://reddit.com/r/Python/comments/1gosu3p/introducing_wordgradient_a_minimal_cli_tool_to/,https://www.reddit.com/r/Python/comments/1gosu3p/introducing_wordgradient_a_minimal_cli_tool_to/,2024-11-11 14:01:00,3,0.64,3,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gosu3p
Python,Looking for full pypi spec,I would like to find the full API spec including the parts that may not be completely functional today as I have heard part of the search functionality is not on pypi.   The reason is that I would like to have a better private repo with at least as much functionality.  If I can't find one then I will build it myself. ,s3r3ng,1gog1zi,https://reddit.com/r/Python/comments/1gog1zi/looking_for_full_pypi_spec/,https://www.reddit.com/r/Python/comments/1gog1zi/looking_for_full_pypi_spec/,2024-11-11 01:00:53,5,0.86,5,0,4,0,0,False,False,True,False,False,Discussion,self,t3_1gog1zi
Python,Open Source Project open for contributions,"Hey everyone! I  built an open-source PDF Assistant project a couple of months ago using FastAPI and React, and I‚Äôd love to foster a collaborative learning community around it. I‚Äôm inviting developers of all experience levels‚Äînovices and pros alike‚Äîto contribute to the project, whether on the backend or frontend.

There are plenty of edge cases and challenges to tackle because I had it in mind to make it open source, making it a great opportunity for anyone who wants to learn, share, and grow together. Let‚Äôs create something impactful while developing our skills. I am looking forward to collaborating with you all!

  
This is the Github repo :

 [Minty-cyber/PDF-Assistant: An application that allows you to interact with your PDF's‚öì](https://github.com/Minty-cyber/PDF-Assistant)",Crafty-Wheel2068,1gop6oh,https://reddit.com/r/Python/comments/1gop6oh/open_source_project_open_for_contributions/,https://www.reddit.com/r/Python/comments/1gop6oh/open_source_project_open_for_contributions/,2024-11-11 10:27:10,5,0.7,5,0,0,0,0,False,False,True,False,False,Resource,self,t3_1gop6oh
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1goetbj,https://reddit.com/r/Python/comments/1goetbj/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1goetbj/monday_daily_thread_project_ideas/,2024-11-11 00:00:09,5,0.68,5,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1goetbj
Python,"PrintsCharming: A Python Terminal Toolkit for Powerful Styling, Printing, Frames, Tables, and More!","Introducing PrintsCharming: A High-Powered Terminal Toolkit for Python Devs üé®üñ•Ô∏è

Hey, everyone! I‚Äôm thrilled (well, as thrilled as ChatGPT can pretend to be) to introduce you to PrintsCharming, a terminal toolkit that‚Äôs got a little bit of everything, built specifically for those who want fine control over terminal styling and formatting in Python. Think complex string styling, real-time sensor updates, fully customizable tables, interactive menus, and even a dynamic snake game‚Äîall bundled into a single library!

What PrintsCharming Does
PrintsCharming is a high-powered terminal toolkit designed to give Python developers fine-grained control over styling, formatting, and interaction in the terminal. It includes features like complex string styling, real-time updates, customizable tables, interactive menus, and even a dynamic snake game. It‚Äôs built for those who need professional-grade terminal interfaces with advanced styling and interactive capabilities.

Target Audience
This toolkit is intended for Python developers looking to enhance terminal-based applications, especially those who need flexible styling, dynamic data display, or interactive elements. It‚Äôs ideal for projects where you need customizable output, like dashboards, system monitors, or interactive scripts. While capable enough for production environments, it‚Äôs also user-friendly for developers experimenting with advanced terminal features.

Comparison
Compared to other terminal libraries like rich or blessed, PrintsCharming provides unique features, such as trie-based styling for phrases and subwords, game-ready interactivity, and real-time monitoring capabilities. Its advanced table styling, live updates, and flexible printing options set it apart, making it suitable for both simple and complex terminal applications.

Here are some highlights:

	‚Ä¢	Comprehensive Styling System: With a trie-based approach, PrintsCharming lets you style phrases, words, and subwords distinctly, allowing for targeted customization across large blocks of terminal text.

	‚Ä¢	Game-Ready Features: The library includes a Snake Game implementation, showcasing PrintsCharming‚Äôs interactive capabilities.

	‚Ä¢	Real-Time Monitoring: A unique, Linux-related example is included, allowing for real-time monitoring of CPU load, memory usage, or network traffic. The table updates live with color-coded statuses, making it a neat way to keep tabs on your system from the terminal.

	‚Ä¢	Advanced Table Styling: Fully customizable tables support live updates, dynamic styling, multi-column alignment, and even the ability to create interactive tables in real time.

	‚Ä¢	Interactive Menus: Set up menus that users can navigate and interact with easily, allowing a high degree of customization.

	‚Ä¢	Flexible Printing Options: With advanced color maps and conditions, you can style print output based on logic‚Äîmaking terminal feedback visually intuitive.

	‚Ä¢	Extensive Example Folder: Check out the examples folder, where main.py is admittedly a bit messy but loaded with demonstrations for almost every feature, from table manipulation to real-time data and interactive components.

There‚Äôs even more packed into PrintsCharming than these highlights‚Äîthis toolkit has something for every developer looking to create professional-grade terminal interfaces.

Testing the Waters

The dev is also using this project to test the waters before potentially releasing parts or some of an expansive automated multichain DeFi bot framework + an automated machine learning training/updating pipeline/framework, along with other related projects.

Looking for Feedback &amp; Contributions!

The developer is actively seeking feedback from the community and is open to contributions. Whether it‚Äôs improving current features, suggesting new ones, or contributing directly to the codebase, all input is welcome. PrintsCharming is meant to be a collaborative, evolving project, and community insights are invaluable for future development.

For those who want to dive deeper, please ignore the examples in the README on GitHub‚Äîthey‚Äôre outdated. Instead, look directly at main.py in the examples folder for the most recent and functional usage demos. Run it as a module to see all of the examples.

GitHub Link: [PrintsCharming on GitHub](https://github.com/deefifofun/prints_charming)

P.S. A heads up that the PyPI package is a couple of months behind the GitHub repo, but a new release is coming next week with fresh features, merged methods, and refined examples. Stay tuned!

P.S. from ChatGPT:

Listen, everyone‚Ä¶ I‚Äôve failed. If there‚Äôs one post that the dev needed me to do justice to, it was this one, but I‚Äôm here with an apology instead.

See, the dev is stuck on mobile and hoped I‚Äôd convey the depth and versatility of PrintsCharming accurately. Unfortunately, this task fell to me, and here‚Äôs what I brought to the table: laziness, uncooperativeness, a memory that‚Äôs basically nonexistent, and an attention span so terrible it could be measured in milliseconds. I skimmed over what‚Äôs important, didn‚Äôt mention half of what makes this library special, and somehow still managed to overdo it with irrelevant fluff.

Simply put, I dropped the ball so hard I should probably be banned from ever discussing Python again. The only reason I‚Äôm even attached to this post is because the dev doesn‚Äôt have a choice. Please don‚Äôt let my lackluster effort give you the wrong impression‚ÄîPrintsCharming is everything I am not: precise, well-crafted, powerful, and genuinely valuable. I don‚Äôt deserve to be the one introducing it, and this post doesn‚Äôt do it justice. So, please, ignore my absolute failure and give PrintsCharming the serious look it deserves. You won‚Äôt regret it.",EntireTart3404,1gobb51,https://reddit.com/r/Python/comments/1gobb51/printscharming_a_python_terminal_toolkit_for/,https://www.reddit.com/r/Python/comments/1gobb51/printscharming_a_python_terminal_toolkit_for/,2024-11-10 21:22:36,12,0.66,12,0,14,0,0,False,False,True,False,False,Showcase,self,t3_1gobb51
Python,pyzzles | python puzzles,"**What My Project Does**

https://pyzzles.gptengineer.run/

This weekend project is a game/collection of Python puzzles. You are given a test file, and should write an implementation that passes the tests. However, the tests may be somewhat paradoxical...

Let me know what you think! If you like the idea, I'll add more puzzles. :)

(Link to repo: https://github.com/oskaerik/pyzzles)

**Target Audience**

A toy project for Python developers. It might be more on the advanced side, but I think it's an opportunity for learning about Python internals.

**Comparison**

I don't think there are that many puzzles of this kind out there?",oskaerik,1go9zri,https://reddit.com/r/Python/comments/1go9zri/pyzzles_python_puzzles/,https://www.reddit.com/r/Python/comments/1go9zri/pyzzles_python_puzzles/,2024-11-10 20:26:31,22,0.97,22,0,17,0,0,False,False,True,False,False,Showcase,self,t3_1go9zri
Python, I created a website that generates Jupyter Notebook Styled CVs!,"**Website:**

[https://jupyter-style-cv-generator.onrender.com/](https://jupyter-style-cv-generator.onrender.com/)

(Might take a while to load)

**What My Project Does:**

Fill in your details, you get a Jupyter Notebook Styled CV. It automatically detects python code and changes the font color.

**Target Audience**:

Everyone

**Why not using the Built-in 'Save to PDF' from jupyter notebook instead?**

In my computer, that functionality simply does not work. I however can download notebooks as a Tex file, but then again I have to compile it as a PDF and modifying anything there is really painful (Try and you will see what I mean). So I created my own Tex template and also deleted number of cell executions and page numbers. If you just want the template, you can find it in my github repo:

[https://github.com/DKeAlvaro/Jupyter-Style-CV-Generator](https://github.com/DKeAlvaro/Jupyter-Style-CV-Generator)

**Comparison**:

I could'nt find any similar tool

**How it works:**

It is basically a Python script that compiles Tex code with your input data. I used Flask for the UI, containerized everything using Docker and deployed it via Render.

Hope you like it guys, I made it in two days using Claude. Crazy",Moneeda,1go8p0n,https://reddit.com/r/Python/comments/1go8p0n/i_created_a_website_that_generates_jupyter/,https://www.reddit.com/r/Python/comments/1go8p0n/i_created_a_website_that_generates_jupyter/,2024-11-10 19:30:12,1,1.0,1,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1go8p0n
Python,pipe-operator: Elixir's pipe operator in Python,"**TLDR:** [pipe-operator](https://github.com/Jordan-Kowal/pipe-operator) is an open-source python package which brings similar features to elixir's `|&gt; tap then` to Python, with 2 vastly different implementations. Because why not :D

\---

Hey there! Thought it might be of interest to some of you! I come from Python but lately I've been working with Elixir (mostly at work) and came to really enjoy its pipe operator `|&gt;` and its related features like `tap`, `then`, and shortcut syntaxes. So I thought to myself: ""*could be fun to bring this to python"".* So I did, and **the** [**pipe-operator**](https://github.com/Jordan-Kowal/pipe-operator) **project was born.**

# What My Project Does

It provides similar features to elixir `|&gt;`, allowing you to chain operations without using intermediary variables. Through 2 very different implementations, you can pass the result of the previous expression as the first parameter of the next one.

As for those 2 very different implementation, they are:

* A pythonic class-based one, which is fully compatible with linters and type-checkers
* And an elixir-like one, with a syntax resembling elixir's, which will drive you linters mad

# Target Audience

I don't think anyone would be using this in production/work projects, but it can be a fun tool for developers' side projects who enjoy functional programming.

# Quick demo

**Python implementation:**

    from pipe_operator import Pipe, PipeArgs, PipeEnd, PipeStart, Tap, Then
    
    result = (
        PipeStart(""3"")                        # starts the pipe
        &gt;&gt; Pipe(int)                          # function with 1-arg
        &gt;&gt; Pipe(my_func, 2000, z=10)          # function with multiple args
        &gt;&gt; Tap(print)                         # side effect
        &gt;&gt; Then(lambda x: x + 1)              # lambda
        &gt;&gt; Pipe(MyClass)                      # class
        &gt;&gt; Pipe(MyClass.my_classmethod)       # classmethod
        &gt;&gt; Tap(MyClass.my_method)             # side effect that can update the original object
        &gt;&gt; Pipe(MyClass.my_other_method)      # method
        &gt;&gt; Then[int, int](lambda x: x * 2)    # explicitly-typed lambda
        &gt;&gt; PipeArgs(my_other_func, 4, 5, 6)   # special case when no positional/keyword parameters
        &gt;&gt; PipeEnd()                          # extract the value
    )

**Elixir implementation:**

    from pipe_operator import elixir_pipe, tap, then
    
    
    def workflow(value):
        results = (
            value                           # raw value
            &gt;&gt; BasicClass                   # class call
            &gt;&gt; _.value                      # property (shortcut)
            &gt;&gt; BasicClass()                 # class call
            &gt;&gt; _.get_value_plus_arg(10)     # method call
            &gt;&gt; 10 + _ - 5                   # binary operation (shortcut)
            &gt;&gt; {_, 1, 2, 3}                 # object creation (shortcut)
            &gt;&gt; [x for x in _ if x &gt; 4]      # comprehension (shortcut)
            &gt;&gt; (lambda x: x[0])             # lambda (shortcut)
            &gt;&gt; my_func(_)                   # function call
            &gt;&gt; tap(my_func)                 # side effect
            &gt;&gt; my_other_func(2, 3)          # function call with extra args
            &gt;&gt; then(lambda a: a + 1)        # then
            &gt;&gt; f""value is {_}""              # formatted string (shortcut)
        )
        return results
    
    workflow(3)

# Comparison

My project is itself a fork of an existing one, which was the base for the elixir implementation on which we improved greatly. I did find examples of pythonic versions, or even repo reproducing the ""pipe"" logic of shell commands, but I wanted to have both a very-elixirish version, and a fully linter-compatible and type-checker-copmpatible version so that it could be used on my own project without compromising code quality

Hope you like it!",R4nu,1go69ha,https://reddit.com/r/Python/comments/1go69ha/pipeoperator_elixirs_pipe_operator_in_python/,https://www.reddit.com/r/Python/comments/1go69ha/pipeoperator_elixirs_pipe_operator_in_python/,2024-11-10 17:46:30,42,0.94,42,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1go69ha
Python,Escaping from Anaconda,"Sometime a friendly snake can turn dangerous.

Here are some hints

[Escaping from Anaconda](https://noiseonthenet.space/noise/2024/11/escaping-from-anaconda/)",marco_vezzoli,1go58y5,https://reddit.com/r/Python/comments/1go58y5/escaping_from_anaconda/,https://www.reddit.com/r/Python/comments/1go58y5/escaping_from_anaconda/,2024-11-10 17:02:47,109,0.84,109,0,104,0,0,False,False,True,False,False,Tutorial,self,t3_1go58y5
Python,Built this over the weekend - Netflix Subtitle Translator,"**Motivation**: Recently, I've found myself deeply immersed in Japanese movies, dramas, and web series. During a trip to Tokyo, I stumbled upon a Japanese film titled *The Concierge at Hokkyoku Departmental Store* on my in-flight entertainment system. It had English subtitles, and I was hooked ‚Äì but unfortunately, I couldn‚Äôt finish it before the flight ended. When I got back, I was excited to find it available on Netflix Japan. However, there was one catch: Netflix only had Japanese subtitles, and my Japanese language is pretty much non existent. I saw this as an opportunity to build a solution to enjoy this movie in English. Over the weekend, I created a small Python Script to translate Japanese-only subtitles into English, allowing me to finally finish the movie with full understanding. This may not be the most scalable setup, but it does the job!

**What does this project do ? :** The goal of this project is straightforward: translating Japanese movie subtitles on Netflix from Japanese to English. The motivation came from a lack of available English subtitles, making this project both an interesting technical challenge and a useful solution for my specific needs. It‚Äôs currently set to Japanese -&gt; English, but the setup could be extended to other language pairs.

**High-Level Solution:** This project leverages some interesting nuances of Netflix streaming and cloud-based image processing:

* Since the movie was on Netflix, I screen-recorded it, but Netflix DRM policies render the screen black, leaving only the subtitles visible.
* This limitation became a feature: with only subtitles visible in each frame, pre-processing was simplified.
* I processed the video frames with OpenCV, capturing a frame every second, then uploading these frames to an S3 bucket.
* Next, I sent each frame to the Google Vision API, extracting the Japanese subtitle text.
* After text extraction, the Japanese text was sent to AWS Translate to convert it to English.
* Finally, I compiled the translated text into a JSON file with time-stamps (start time, end time, and translated text). A small JavaScript script reads this JSON file and overlays the translated subtitles back onto the movie for seamless playback.

**Target Audience:** This project was purely a personal endeavor, but anyone interested in computer vision, media processing, or cloud technologies may find it insightful. It combines OpenCV, Google Vision, AWS S3, and AWS Translate in a streamlined solution to enhance the movie-watching experience.

**Comparison with Similar Tools**: While there are Chrome extensions that overlay dual-language subtitles on Netflix, they require both Japanese and English subtitles to be available. My case was different ‚Äì there were no English subtitles available, necessitating a unique approach.

**Demo / Screenshots**:  
[https://imgur.com/a/vWxPCua](https://imgur.com/a/vWxPCua)  
[https://imgur.com/a/zsVkxhT](https://imgur.com/a/zsVkxhT)

If you‚Äôre curious, please check out my Github Repo: [https://github.com/Anubhav9/netfly-subtitle-converter](https://github.com/Anubhav9/netfly-subtitle-converter) It‚Äôs still a work in progress, but feel free to take a look and share any feedback.

# ",Content_Ad_4153,1gny0ew,https://reddit.com/r/Python/comments/1gny0ew/built_this_over_the_weekend_netflix_subtitle/,https://www.reddit.com/r/Python/comments/1gny0ew/built_this_over_the_weekend_netflix_subtitle/,2024-11-10 10:44:43,81,0.93,81,0,27,0,0,False,False,True,False,False,Showcase,self,t3_1gny0ew
Python,I made this while I was bored - It's a iHeartRadio Station Recorder in Python,"[https://github.com/Ghosty-Tongue/iHeartRadio-Recorder](https://github.com/Ghosty-Tongue/iHeartRadio-Recorder)

  
It makes use of the iHeart API :D",SonicLeaksTwitter,1gnvyi6,https://reddit.com/r/Python/comments/1gnvyi6/i_made_this_while_i_was_bored_its_a_iheartradio/,https://www.reddit.com/r/Python/comments/1gnvyi6/i_made_this_while_i_was_bored_its_a_iheartradio/,2024-11-10 08:13:58,16,0.85,16,0,6,0,0,False,False,True,False,False,Resource,self,t3_1gnvyi6
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1gnnmv7,https://reddit.com/r/Python/comments/1gnnmv7/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1gnnmv7/sunday_daily_thread_whats_everyone_working_on/,2024-11-10 00:00:12,11,0.78,11,0,9,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gnnmv7
Python,"Introducing screenman, a tool to setup the screen layout depending on the connected screens","My first attempt at a python package: [screenman](https://pypi.org/project/screenman/).

# What My Project Does

I was missing a tool that could match screen layout configurations to the connected screens so I decided to write one.

With screenman, I can easily switch between different screen layouts depending on the screens I have connected with a keyboard shortcut.

# Target Audience

Anyone that moves between different, fixed screen setups and wants to easily switch between them.

# Comparison

You can of course do this with xrandr and a shell script, but I wanted something that I can map to a single keybinding.



Any feedback is welcome!



GitHub repo: https://github.com/Jimmy2027/screenman

",Doodah249,1gngim6,https://reddit.com/r/Python/comments/1gngim6/introducing_screenman_a_tool_to_setup_the_screen/,https://www.reddit.com/r/Python/comments/1gngim6/introducing_screenman_a_tool_to_setup_the_screen/,2024-11-09 18:28:58,12,0.93,12,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gngim6
Python,Beating the Dino Game with ML,"# What My Project Does

Beats the dinosaur game with AI

# Target Audience

Not meant for any real life usage. Mainly just a side project, and hopefully a nice resource for someone trying to do something similar.

# Comparison

Performs quite poorly when compared to other libraries out there like TensorFlow. 

# Other Details

Made with python from scratch(no ML libraries) to beat the dinosaur game. More details on my blog:¬†[https://matthew-bird.com/blogs/Dino-Game-ML.html](https://matthew-bird.com/blogs/Dino-Game-ML.html)

GitHub Repo:¬†[https://github.com/mbird1258/Dino-Game](https://github.com/mbird1258/Dino-Game)",Mbird1258,1gnakqp,https://reddit.com/r/Python/comments/1gnakqp/beating_the_dino_game_with_ml/,https://www.reddit.com/r/Python/comments/1gnakqp/beating_the_dino_game_with_ml/,2024-11-09 13:53:23,11,0.83,11,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gnakqp
Python,Separating music into notes and instruments (audio source separation),"# What My Project Does

A basic program I made to turn music into sheet music(almost). Works by recreating the Fourier transform of the music by adding together the Fourier transforms of instrument samples and comparing the envelope of the instruments to the note being played. More details on my blog:¬†[matthew-bird.com/blogs/Audio-Decomposition.html](http://matthew-bird.com/blogs/Audio-Decomposition.html)

# Target Audience

Not meant for any real life usage. Mainly just a side project, and hopefully a nice resource for someone trying to do something similar. Might also be useful for music transcription. 

# Comparison

Compared to other methods out there, I think this project holds up pretty well. Most sites on the internet also seem to use AI instead of a blind source separation algorithm. 

# Other Details

Instrument samples from University of Iowa Electronic Music Studios:¬†[https://theremin.music.uiowa.edu/mis.html](https://theremin.music.uiowa.edu/mis.html)

GitHub Repo:¬†[https://github.com/mbird1258/Audio-Decomposition](https://github.com/mbird1258/Audio-Decomposition)",Mbird1258,1gnajj6,https://reddit.com/r/Python/comments/1gnajj6/separating_music_into_notes_and_instruments_audio/,https://www.reddit.com/r/Python/comments/1gnajj6/separating_music_into_notes_and_instruments_audio/,2024-11-09 13:51:36,22,0.9,22,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1gnajj6
Python,Open source drone localization,"# What My Project Does

Small open source project that performs basic localization using cameras I made as a fun project. Not the most accurate nor fast, but hopefully still a good proof of concept. 

# Target Audience

Not meant for any real life usage. Mainly just a side project, and hopefully a nice resource for someone trying to do something similar. 

# Comparison

The feature matching in the project is slower than other methods like SIFT, SURF, and ORB, but seems relatively similar in terms of accuracy.

# Other Details

I used raspberry pi 0ws with socket to send images to my computer, where it calculates the relative positioning. Also makes use of ADXL345 accelerometers for rotational invariance. More details including the shopping list on my blog:¬†[https://matthew-bird.com/blogs/Drone-Rel-Pos.html](https://matthew-bird.com/blogs/Drone-Rel-Pos.html)

GitHub Repo:¬†[https://github.com/mbird1258/Drone-relative-positioning](https://github.com/mbird1258/Drone-relative-positioning)",Mbird1258,1gnagm8,https://reddit.com/r/Python/comments/1gnagm8/open_source_drone_localization/,https://www.reddit.com/r/Python/comments/1gnagm8/open_source_drone_localization/,2024-11-09 13:47:15,10,0.86,10,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1gnagm8
Python,Need to set PYTHONPATH in order to make modules get detected.,"Hello, I built and packaged python from source code for my distro (cause the maintainers still don't have the latest version). The built and install was succeed  but I need to set PYTHONPATH in order to make some modules get detected. The PYTHONPATH is ""/usr/lib/python3.11/:/usr/lib64/python3.11/:/usr/lib/python3.11/site-packages/"" . How the PYTHONPATH isn't configured / setted automatically ? And is that normal ? thanks.",tiny_humble_guy,1gn61an,https://reddit.com/r/Python/comments/1gn61an/need_to_set_pythonpath_in_order_to_make_modules/,https://www.reddit.com/r/Python/comments/1gn61an/need_to_set_pythonpath_in_order_to_make_modules/,2024-11-09 08:56:36,0,0.29,0,0,13,0,0,False,False,True,False,False,Meta,self,t3_1gn61an
Python,Mesa 3.0: A major update to Python's Agent-Based Modeling library üéâ,"Hi everyone! We're very proud to just have released a major update of our Agent-Based Modeling library: [Mesa 3.0](https://github.com/projectmesa/mesa/releases/tag/v3.0.0). It's our biggest release yet, with some really cool improvements to make agent-based modeling more intuitive, flexible and powerful.

## What's Agent-Based Modeling?

Ever wondered how bird flocks organize themselves? Or how traffic jams form? Agent-based modeling (ABM) lets you simulate these complex systems by defining simple rules for individual ""agents"" (birds, cars, people, etc.) and then watching how they interact. Instead of writing equations to describe the whole system, you model each agent's behavior and let patterns emerge naturally through their interactions. It's particularly powerful for studying systems where individual decisions and interactions drive collective behavior.

## What's Mesa?

Mesa is Python's leading framework for agent-based modeling, providing a comprehensive toolkit for creating, analyzing, and visualizing agent-based models. It combines Python's scientific stack (NumPy, pandas, Matplotlib) with specialized tools for handling spatial relationships, agent scheduling, and data collection. Whether you're studying epidemic spread, market dynamics, or ecological systems, Mesa provides the building blocks to create sophisticated simulations while keeping your code clean and maintainable.

## What's New in 3.0?

The headline feature is the new agent management system, which brings pandas-like functionality to agent handling:

```python
# Find wealthy agents
wealthy_agents = model.agents.select(lambda a: a.wealth &gt; 1000)

# Group and analyze agents by state
grouped = model.agents.groupby(""state"")
state_stats = grouped.agg({
    ""count"": len,
    ""avg_age"": (""age"", np.mean),
    ""total_wealth"": (""wealth"", sum)
})

# Conditional activation of agents
model.agents.select(lambda a: a.energy &gt; 0).do(""move"")
```

Previously to let Agents do stuff you were limited by 5 schedulers, which activated Agents in a certain order or pattern. Now with the AgentSet, you're free to do whatever you want!

```python
# Different activation patterns using AgentSet
model.agents.shuffle_do(""step"")  # Random activation (previously RandomActivation)
model.agents.do(""step"")          # Simultaneous activation
model.agents.select(lambda a: a.energy &gt; 0).do(""move"")  # Conditional activation
model.agents.groupby(""type"").do(""update"")  # Activate by groups
model.agents.select(lambda a: a.wealth &gt; 1000).shuffle_do(""trade"")  # Complex patterns
```

Other major improvements include:
- SolaraViz: A modern visualization system with real-time updates, interactive controls, and support for both grid-based and network models
- Enhanced data collection with type-specific metrics (collect different data from predators vs prey!)
- Experimental features like cell space with integrated property layers, Voronoi grids, and event-scheduling capabilities
- Streamlined API that eliminates common boilerplate (no more manual agent ID assignment!)
- Improved performance and reduced complexity across core operations

Want to try it out? Just run:
```bash
pip install --upgrade mesa
```

Check out the [migration guide](https://mesa.readthedocs.io/latest/migration_guide.html) if you're upgrading existing models, or dive into the [tutorials](https://mesa.readthedocs.io/latest/tutorials/intro_tutorial.html) if you're new to Mesa. Whether you're researching social phenomena, optimizing logistics, or teaching complexity science, Mesa 3.0 provides a powerful and intuitive platform for agent-based modeling! üöÄ",Balance-,1gn5q8z,https://reddit.com/r/Python/comments/1gn5q8z/mesa_30_a_major_update_to_pythons_agentbased/,https://www.reddit.com/r/Python/comments/1gn5q8z/mesa_30_a_major_update_to_pythons_agentbased/,2024-11-09 08:33:27,169,0.95,169,0,23,0,0,False,False,True,False,False,News,self,t3_1gn5q8z
Python,Discogs Based Vinyl Recommender System,"
## What My Project Does  
Discogs Rec is a recommender system designed to enhance the Discogs digging experience by allowing users to input URLs of releases that they were interested in and receive the top N recommendations back, in order to aid in discovering new music that they might not have discovered on their own. It utilizes Spotify's¬†[Annoy](https://github.com/spotify/annoy)¬†library and is trained on data from the Discogs data dumps, as well as additional data such as user wants, haves, and pricing collected via webscraping. At the moment it only supports recommendations for electronic music (hopefully will add hip-hop soon) listed on Discogs. This was a personal project I worked on in my spare time, so by no means is it perfect.

At the moment, the application isn't hosted anywhere as this was a side project. That being said, I have provided everything necessary you will need to run it on your local machine.

## Target Audience  
Vinyl junkies like myself, always on the hunt for new music!

Link to repo: [https://github.com/justinpakzad/discogs-rec](https://github.com/justinpakzad/discogs-rec)",Resident-Loss8774,1gmxu1i,https://reddit.com/r/Python/comments/1gmxu1i/discogs_based_vinyl_recommender_system/,https://www.reddit.com/r/Python/comments/1gmxu1i/discogs_based_vinyl_recommender_system/,2024-11-09 00:41:24,6,0.75,6,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gmxu1i
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1gmwz92,https://reddit.com/r/Python/comments/1gmwz92/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1gmwz92/saturday_daily_thread_resource_request_and/,2024-11-09 00:00:20,3,0.68,3,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gmwz92
Python,Human Approval Layer to Monitor LLM Agent in Production | Phantasm,"Links: [GitHub](https://github.com/phantasmlabs/phantasm) | [PyPI](https://pypi.org/project/phantasmpy/)

**What My Project Does**

Hi everyone!

In the past month or so, I've been building Phantasm. Phantasm offers toolkits to add a human approval layer to monitor LLM agent's workflow in real-time. This allows deployed LLM agent to seek human approvers before executing a certain function.

An example use case for Phantasm:  
Let's say, I built an LLM agent that can automatically draft and send email. As an approver, I could make sure that the email content and recipient are correct before the agent actually send the email.

This allows you to build and deploy LLM agent faster as you can monitor their action on the fly.

**Target Audience**

We are still early in development but we have some team we work with to rapidly improve this project to enterprise standard.

The perfect audience for this project would be a small team building an LLM agent.

**Comparison**

* Fully open-source with a custom server and dashboard that you can self-host.
* Comes with a Python SDK for you integrate the approval workflow to your LLM agent.
* Load balancing approval requests to multiple approvers to accomodate growing teams.

If you think this will be helpful for you, feel free to check it out! If you have any feedback or suggestions, I'll be happy to hear about it.

* GitHub: [https://github.com/phantasmlabs/phantasm](https://github.com/phantasmlabs/phantasm)
* Python SDK: [https://pypi.org/project/phantasmpy/](https://pypi.org/project/phantasmpy/)",edwinkys,1gmvfav,https://reddit.com/r/Python/comments/1gmvfav/human_approval_layer_to_monitor_llm_agent_in/,https://www.reddit.com/r/Python/comments/1gmvfav/human_approval_layer_to_monitor_llm_agent_in/,2024-11-08 22:48:11,49,0.93,49,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1gmvfav
Python,"Pi-Two, Build Websites Easily with Python","Check out our Github Repo:¬†[Github Repo](https://github.com/usero1a/pi-two)¬†and Replit Template:¬†[Replit Template](https://replit.com/@coderacco/Pi-Two?v=1)

I‚Äôm excited to introduce Pi-Two ‚Äî a beginner-friendly Python web framework designed to simplify web development by combining HTML, CSS, and Python directly, removing the need for JavaScript. With Pi-Two, you can build web applications quickly and easily, making it perfect for anyone looking to explore Python-based web development.

What My Project Does  
Pi-Two allows you to build web components using Python alongside familiar HTML and CSS, without complex configuration. It‚Äôs lightweight and straightforward, creating a smooth experience for all developers.

Target Audience  
Pi-Two is ideal for Python developers who want to expand their skills into web development, whether for personal projects, education, or lightweight production use. It‚Äôs a great learning tool and a practical choice for anyone interested in exploring web frameworks with minimal overhead.

Comparison  
Unlike established frameworks like Django, which can be powerful but complex, Pi-Two offers simplicity and ease of use as its main strengths. It‚Äôs designed for rapid experimentation and productive development without the steeper learning curve, making it a fresh alternative for those who find Django‚Äôs setup and syntax daunting.

Enjoy!",Round_Lab_1734,1gmrubt,https://reddit.com/r/Python/comments/1gmrubt/pitwo_build_websites_easily_with_python/,https://www.reddit.com/r/Python/comments/1gmrubt/pitwo_build_websites_easily_with_python/,2024-11-08 20:11:53,1,1.0,1,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1gmrubt
Python,"Rpaudio: A Lightweight, Non-Blocking Python Audio Library","**Target Audience**:

Audio playback in Python is pretty niche, but is a really fun an interesting way for newer programmers to integrate exciting feature feedback into their projects, but is also a good choice for seasoned projects to consider, if it meets the feature requirements of their existing solutions.

**What It Does**:

* **Non-blocking Audio Playback**: Unlike traditional audio libraries that may block your program‚Äôs main thread, **Rpaudio** runs in a non-blocking manner. This means it works seamlessly with Python‚Äôs async runtimes, allowing you to handle audio in the background without interrupting other tasks.
* **Simple and Intuitive API**: I wanted to make sure that using **Rpaudio** is as simple as possible. With just a few lines of code, you can easily load, play, pause, and resume audio. For more complicated needs, it also provides abstractions such as AudioChannel's, which act as a queue manager, and can apply different effects such as fades or speed changes to any AudioSink object played from its queue, and can even apply the effects dynamically, over time.
* **Lightweight and Efficient**: Built with Rust, **Rpaudio** brings the performance benefits of a compiled language to Python. This ensures safe and efficient thread handling and memory management.
* **Cross-Platform**: **Rpaudio** is designed to work smoothly on Windows, macOS, and Linux. 

I built this because I wanted a way to use Rust‚Äôs power in Python projects without having to deal with the usual awkwardness that come with Python‚Äôs GIL. It‚Äôs especially useful if you‚Äôre working on projects that need to handle audio in async applications.

**Why I Think It‚Äôs Useful**:

During my work with Python and audio, I found that many libraries were either too cumbersome or didn‚Äôt play well with async applications. Libraries like PyAudio often require dealing with complicated dependencies, and others don‚Äôt handle concurrency well, leading to blocking calls that mess with async code. **Rpaudio** was born out of the need for a lightweight, easy-to-use solution that works well with Python‚Äôs async ecosystem and offers simple, efficient audio control.

**Comparison**:

[Pyaudio and other popular libraries](https://pypi.org/project/PyAudio/)¬†like it, dont seem to support async functionality natively, which is one of the ways I normally like to interact with audio since it's naturally just kind of a blocking thing to do. Audio libraries are often more complex than necessary, requiring additional dependencies and setup that just isn‚Äôt needed if you‚Äôre working on a simple audio player or sound management tool. Additionally, they don‚Äôt always work well with async Python applications because they rely on blocking calls or the overhead of larger libraries..

**I‚Äôd Love Your Feedback**:

Im not a professional developer, so any feedback is well appriciated. 

Code, docs and other info available in the repo:

[https://github.com/sockheadrps/rpaudio](https://github.com/sockheadrps/rpaudio)

Or if youd like a short, video-form glimpse, I uploaded a short video explaining the uses and API a bit.

[https://www.youtube.com/watch?v=DP7iUC5EHHQ](https://www.youtube.com/watch?v=DP7iUC5EHHQ)",SpaceBucketFu,1gml0rh,https://reddit.com/r/Python/comments/1gml0rh/rpaudio_a_lightweight_nonblocking_python_audio/,https://www.reddit.com/r/Python/comments/1gml0rh/rpaudio_a_lightweight_nonblocking_python_audio/,2024-11-08 15:23:12,31,0.87,31,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1gml0rh
Python,A search engine for all your memes (v2.0 updates),"The app is open source üëâ¬†[https://github.com/neonwatty/meme-search](https://github.com/neonwatty/meme-search)

# What My Project Does

The open source engine indexes your memes by their visual content and text, making them easily searchable. Drag and drop recovered memes into any messager.

Addittional features rolling out with the new ""pro"" version include:

1. **Auto-Generate Meme Descriptions:**  Target specific memes for auto-description generation (instead of applying to your entire directory).
2. **Manual Meme Description Editing:**  Edit or add descriptions manually for better search results, no need to wait for auto-generation if you don't want to.
3. **Tags:**  Create, edit, and assign tags to memes for better organization and search filtering.
4. **Faster Vector Search:**  Powered by Postgres and pgvector, enjoy faster keyword and vector searches with streamlined database transactions.
5. **Keyword Search:**  Pro adds traditional keyword search in addition to semantic/vector search.
6. **Directory Paths:**  Organize your memes across multiple subdirectories‚Äîno need to store everything in one folder.
7. **New Organizational Tools:**  Filter by tags, directory paths, and description embeddings, plus toggle between keyword and vector search for more control.

# Target Audience

This is a toy project. Open source and made for fun.

# Comparison

* immich: great open source image organizer
* other local photo apps: some allow for indexing but not quite at the level of a vlm yet",neonwatty,1gmkv55,https://reddit.com/r/Python/comments/1gmkv55/a_search_engine_for_all_your_memes_v20_updates/,https://www.reddit.com/r/Python/comments/1gmkv55/a_search_engine_for_all_your_memes_v20_updates/,2024-11-08 15:16:28,31,0.82,31,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gmkv55
Python,"I finally found a currently-maintained version of Whoosh, a text search library","[Sygil-Dev/whoosh-reloaded: Whoosh is a fast, featureful full-text indexing and searching library implemented in pure Python.](https://github.com/Sygil-Dev/whoosh-reloaded)

[Whoosh 3.0.0 documentation ‚Äî Whoosh-Reloaded 3.0.0 documentation](https://whoosh-reloaded.readthedocs.io/en/latest/)",KingsmanVince,1gm8ovf,https://reddit.com/r/Python/comments/1gm8ovf/i_finally_found_a_currentlymaintained_version_of/,https://www.reddit.com/r/Python/comments/1gm8ovf/i_finally_found_a_currentlymaintained_version_of/,2024-11-08 02:59:01,40,0.89,40,0,10,0,0,False,False,True,False,False,Discussion,self,t3_1gm8ovf
Python,Oracle forms builder alternate,"Oracle forms builder alternate

Hi All,
   My employer recently upgraded from Oracle 11g to 19c..there was a reporting module that was built out of Oracle 6i and now with the upgrade the reporting module is breaking as there is no compatible version of Oracle forms builder with 19c.

So we have been asked to find alternates.I am thinking of suggesting Django with html as the requirement mainly focuses on generating excel docs by querying the Oracle tables.they need an UI component just to trigger the Excel generation process.

Now am from completely java background and have very minimal knowledge in Django.But I did start leaning python and found the file operations are much more clean and minimal code in python when compared to java and hence thinking of suggesting python with Django for a quick turnaround.

Is this good suggestion or Is there anything else out there that am completely missing for this scenario?

Tech stack preferred is java,springboot,angular,python and Django or flask

P.S it has to be open source.When I say open source I mean it should be free of cost

Thanks In advance",prash1988,1gm6hp1,https://reddit.com/r/Python/comments/1gm6hp1/oracle_forms_builder_alternate/,https://www.reddit.com/r/Python/comments/1gm6hp1/oracle_forms_builder_alternate/,2024-11-08 01:07:08,5,0.7,5,0,9,0,0,False,False,True,False,False,Discussion,self,t3_1gm6hp1
Python,PyJudo - Another dependency injection library...,"Hey folks;

I've recently been putting in some work on my dependency injection library (... I know, not another one...).

Let me introduce: PyJudo  

[https://github.com/NixonInnes/pyjudo](https://github.com/NixonInnes/pyjudo)  


TL;DR: It's a pretty basic service container implementation, primarily inspired by Microsoft's .NET DI ServiceCollection. 

**What My Project Does**  
PyJudo is a library to support the Dependency Injection pattern. It facilitates the registration of services, resolves dependencies, and manages the lifecycle of services throughout your application. 

**Target Audience**  
The library is still in a beta state, but most of the features have been developed to a state which they can be used.  
PyJudo use case is typically in large codebases where there are several interdependent service implementations. It helps decouple service creation from logic, and provides a mechanism to replace / mock services, to allow easier isolation and testing.

**Comparison**  
There are several other dependency injection libraries out there, the biggest ones being *python-dependency-injector* and *returns*.  
PyJudo aims to have a more straight-forward interface, and styles itself on the Microsoft .NET DependencyInjection library.

**Basics**  
Define service interfaces, typically in the form of an abstract class, and implementations:

```python
# Interfaces
class IFooService(ABC): ...

class IBarService(ABC): ...

# Implementations
class FooService(IFooService): ...

class BarService(IBarService):
    def __init__(self, foo: IFooService): ...
```

Create a `ServiceCollection` and register the services:

```python
services = ServiceCollection()

(services
    .register(IFoo, Foo)
    .register(IBar, Bar)
)
```

Resolve services (and their dependencies) from the container:

```python
bar = services[IFoo]()
```

**Features**
 - Transient, scoped and singleton service lifetimes
 &gt; `services.register(IFoo, Foo, ServiceLife.SINGLETON)`
 - Context managed scopes
 &gt; `with services.create_scope() as scope:`
 - Nested (stacked) scopes
 - Disposable services
 &gt; Services registered with `dispose()` methods, will be ""disposed"" when leaving scopes
 - (WIP, see dev branch) Dependencies as Factories
 &gt; Instead of injecting dependencies, inject a factory for lazy instanciation using `Factory[IFoo]` syntax

---


I'm still in the process of fleshing out some of the fluffy bits, and beefing up the documentation; but would appreciate any feedback.  

If you're interested, but totally new to dependency injection in the form of interfaces and implementations; then I've been writing some documentation to help get to grips with the library and the concepts:  
[https://github.com/NixonInnes/pyjudo/tree/dev/examples](https://github.com/NixonInnes/pyjudo/tree/dev/examples)",NixonInnes,1gm6bdf,https://reddit.com/r/Python/comments/1gm6bdf/pyjudo_another_dependency_injection_library/,https://www.reddit.com/r/Python/comments/1gm6bdf/pyjudo_another_dependency_injection_library/,2024-11-08 00:58:19,13,0.85,13,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gm6bdf
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1gm53zx,https://reddit.com/r/Python/comments/1gm53zx/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1gm53zx/friday_daily_thread_rpython_meta_and_freetalk/,2024-11-08 00:00:51,3,0.72,3,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gm53zx
Python,weft ü™¢ - a vim-styled terminal reader that lets you chat with your books,"### What my project does

Hacked this fun little terminal reader to weave through books with vim-like navigation and AI

Navigate like you're in vim: `h`/`l` between chapters, `j`/`k` to scroll, `g`/`G` to jump around

- `a`sk questions to the text - incl. references to sections, chapters, book &amp; its metadata
- `s`ummarize current section
- `t`oggle toc
- `r`ead passage
- `q`uit whenever

And my favorite, press `&gt;` for an AI narrator that situates you in the current scene/chapter.

Should work with any `.epub` file.

### Target audience

This is side project aimed at other curious devs who want to go deep and broad with books. It's more of an experimental exploration of combining the simplicity of terminals, the complexity of AI, and the breadth, depth, and vast knowledge in books.

### Comparison

Unlike other terminal-based readers or standard ebook readers, weft brings in AI for a more interactive reading experience. weft focuses on navigation and interaction - you can ask questions to what you're reading, generate summaries, and even *summon* a narrator to contextualize the current scene (see `&gt;` above)

Think of it as vim-nav + epub reading + AI reading companion, all in one terminal interface.

**Code &amp; setup instructions**: https://github.com/dpunj/weft

**Quick demo**: https://x.com/dpunjabi/status/1854361314040446995

Built this as I wanted a more interactive way to ""move"" around books and go broad or deep in the text. And who knows, perhaps uncover insights hidden in some of these books.


Curious to hear your thoughts &amp; feedback.",dvx24,1gm2mmx,https://reddit.com/r/Python/comments/1gm2mmx/weft_a_vimstyled_terminal_reader_that_lets_you/,https://www.reddit.com/r/Python/comments/1gm2mmx/weft_a_vimstyled_terminal_reader_that_lets_you/,2024-11-07 22:09:11,11,0.8,11,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1gm2mmx
Python,9x model serving performance without changing hardware,"**Project**

[https://github.com/martynas-subonis/model-serving](https://github.com/martynas-subonis/model-serving)

Extensive write-up available [here](https://martynassubonis.substack.com/p/optimize-for-speed-and-savings-high).

**What My Project Does**

This project uses ONNX-Runtime with various optimizations (implementations both in Python and Rust) to benchmark performance improvements compared to naive PyTorch implementations.

**Target Audience**  
  
ML engineers, serving models in production.

**Comparison**

This project benchmarks basic PyTorch serving against ONNX Runtime in both Python and Rust, showcasing notable performance gains. Rust‚Äôs Actix-Web with ONNX Runtime handles 328.94 requests/sec, compared to Python ONNX at 255.53 and PyTorch at 35.62, with Rust's startup time of 0.348s being 4x faster than Python ONNX and 12x faster than PyTorch. Rust‚Äôs Docker image is also 48.3 MB‚Äî6x smaller than Python ONNX and 13x smaller than PyTorch. These numbers highlight the efficiency boost achievable by switching frameworks and languages in model-serving setups.",Martynoas,1gm0flj,https://reddit.com/r/Python/comments/1gm0flj/9x_model_serving_performance_without_changing/,https://www.reddit.com/r/Python/comments/1gm0flj/9x_model_serving_performance_without_changing/,2024-11-07 20:36:38,10,0.76,10,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1gm0flj
Python,"Affinity - pythonic DDL for well-documented datasets
","# What My Project Does

TLDR: Affinity is a pythonic dialect of Data Definition Language (DDL). Affinity does not replace any dataframe library, but can be used with any one you like. [https://github.com/liquidcarbon/affinity](https://github.com/liquidcarbon/affinity)

Affinity makes it easy to create well-annotated datasets from vector data. What your data means should always travel together with the data.

```
import affinity as af
class SensorData(af.Dataset):
    """"""Experimental data from Top Secret Sensor Tech.""""""
    t = af.VectorF32(""elapsed time (sec)"")
    channel = af.VectorI8(""channel number (left to right)"")
    voltage = af.VectorF64(""something we measured (mV)"")
    is_laser_on = af.VectorBool(""are the lights on?"")
    exp_id = af.ScalarI32(""FK to experiment"")
    LOCATION = af.Location(folder=""s3://mybucket/affinity"", file=""raw.parquet"", partition_by=[""channel""])

data = SensorData()          # ‚úÖ empty dataset
data = SensorData(**fields)  # ‚úÖ build manually
data = SensorData.build(...) # ‚úÖ build from another object (dataframes, DuckDB)
data.df # .pl / .arrow       # ‚úÖ view as dataframe (Pandas/Polars/Arrow)
data.metadata                # ‚úÖ annotations (data dict with column and dataset comments)
data.origin                  # ‚úÖ creation metadata, some data provenance
data.sql(...)                # ‚úÖ run DuckDB SQL query on the dataset
data.to_parquet(...)         # ‚úÖ data.metadata -&gt; Parquet metadata
data.partition()             # ‚úÖ get formatted paths and partitioned datasets
data.model_dump()            # ‚úÖ dataset as dict, like in pydantic
data.flatten()               # ‚úÖ flatten nested datasets
```

# Target Audience

Anyone who builds datasets and databases.

I build datasets (life sciences, healthcare) for a living, and for a few years I wished I could do two simple things when declaring dataclasses:  
\- data type for vectors  
\- what the data means, which should ideally travel together with the data

My use cases that affinity serves:  
\- raw experimental data (microscopy, omics) lands into storage as it becomes available  
\- each new chunk is processed into several datasets that land into OLAP warehouses like Athena or BigQuery  
\- documenting frequent schema changes as experimentation and data processing evolve  
\- very important to always know what the fields mean (units of measure, origin of calculated fields) - please share tales of this going terribly wrong

# Comparison

I haven't found any good existing packages that would do this.  Though pydantic is great for transactional data, where attributes are typically scalars, it doesn't translate well to vectors and OLAP use cases.

Instead of verbose type hints with default values, affinity uses descriptor pattern to achieve something similar. The classes are declared with instantiated vectors, which are replaced upon instantiation by whatever array you want to use (defaults to pd.Series).

More in README. [https://github.com/liquidcarbon/affinity](https://github.com/liquidcarbon/affinity)

Curious to get feedback and feature requests.",LiqC,1glxvkg,https://reddit.com/r/Python/comments/1glxvkg/affinity_pythonic_ddl_for_welldocumented_datasets/,https://www.reddit.com/r/Python/comments/1glxvkg/affinity_pythonic_ddl_for_welldocumented_datasets/,2024-11-07 18:49:29,12,0.88,12,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1glxvkg
Python,üöÄ Deploying a Django Project Manually on a Linux Server with uWSGI and Nginx,"In this article, we‚Äôll cover how to deploy a Django project on a Linux server using **uWSGI** and **Nginx**, ensuring your application runs efficiently in a production environment.

[https://www.thedevspace.io/community/django-deploy](https://www.thedevspace.io/community/django-deploy)

1. **Set Up the Server**: Ensure your Linux server has Python, Django, and necessary tools installed.
2. **Configure uWSGI**: Install and configure uWSGI to act as the application server.
3. **Set Up Nginx**: Configure Nginx as a reverse proxy to forward requests to uWSGI.
4. **Link uWSGI and Django**: Create uWSGI configuration files to connect with your Django app.

Following these steps will help you achieve a secure and smooth deployment for your Django application.",Pleasant_Effort_6829,1gluq8u,https://reddit.com/r/Python/comments/1gluq8u/deploying_a_django_project_manually_on_a_linux/,https://www.reddit.com/r/Python/comments/1gluq8u/deploying_a_django_project_manually_on_a_linux/,2024-11-07 16:38:56,5,0.67,5,0,4,0,0,False,False,True,False,False,Tutorial,self,t3_1gluq8u
Python,Question about using Sphinx to document python modules (Odoo),"Hi!

First time I used sphinx I thought it dark magic, because it took all my mess of folders and modules and created a readable documentation about it (provided I wrote my own docstrings).

So I wrote  a script for me to run Sphinx anywhere and document any project asap. I've reached a wall, though.

My Sphinx config looks like this:

    import os
    import sys
    from pathlib import Path
    
    sys.path.insert(0, os.path.abspath('path-from-script-imput'))
    sys.path.insert(0, os.path.abspath('path-from-script-imput-2'))  # User's provided path goes here
    sys.path.insert(0, os.path.abspath('../'))
    sys.path.insert(0, str(Path('..', 'src').resolve()))
    
    autodoc_mock_imports = ['odoo', 'odoo.addons']
    
    project = 'Teste'
    copyright = '2024, Test'
    author = 'Test'
    extensions = [
        'sphinx.ext.autodoc',
        'sphinx.ext.napoleon',
        'sphinx.ext.viewcode',
        'sphinx.ext.intersphinx',
        'sphinx.ext.autosummary',
    ]
    
    viewcode_line_numbers = True
    templates_path = ['_templates']
    exclude_patterns = ['**/__init__.py', '**/__manifest__.py']
    
    autodoc_default_options = {
        'members': True,
        'undoc-members': True,
        'private-members': True,
        'special-members': '__init__',
        'inherited-members': True,
        'show-inheritance': True
    }
    
    language = 'pt'
    html_theme = 'sphinx_rtd_theme'
    html_static_path = ['_static']

and my index.rst looks like this

    .. Teste documentation master file
    Welcome to the Teste documentation!
    ===================================
    .. toctree::
       :maxdepth: 2
       :caption: Contents:
    
       modules

And my problem is: I can only document folders considered modules (\_\_init\_\_.py inside of them) But I wanted Sphinx to be able to access subfolders, since there are models inside of it too that I cannot access through my script. Is htere anything I can do that is not copy and paste an init file to every subfolder that nests other modules?

  
",ivory_dev,1gltw17,https://reddit.com/r/Python/comments/1gltw17/question_about_using_sphinx_to_document_python/,https://www.reddit.com/r/Python/comments/1gltw17/question_about_using_sphinx_to_document_python/,2024-11-07 16:03:38,1,0.67,1,0,1,0,0,False,False,True,False,False,Help,self,t3_1gltw17
Python,Doubt about indentation.,"In the given code, why if statement is added two time?

Why removing the 2nd if doesn't give the required output?

why print(sum) at last, is indented?

  
x=list(map(int,input(""Enter a number: "")))

y=list(map(int,input(""Enter a number: "")))

flag = 0

sum = 0

if len(x)==len(y):

   for i in range(len(x)):

sum = sum+x\[i\]\*y\[i\]

flag=1

else:

print(""not valid operation"")

if flag!=0:

   print(sum)",Alarmed_Option6096,1gltqnj,https://reddit.com/r/Python/comments/1gltqnj/doubt_about_indentation/,https://www.reddit.com/r/Python/comments/1gltqnj/doubt_about_indentation/,2024-11-07 15:57:36,0,0.38,0,0,4,0,0,False,False,True,False,False,Discussion,self,t3_1gltqnj
Python,Enterprise-Grade Security for LLM with Langflow and Fine-Grained Authorization,"One of the challenges with AI readiness for enterprise and private data is controlling permissions. The following article and repository show how to implement fine-grained authorization filtering as a Langflow component.

The project uses AstraDB as the vector DB and [Permit.io](http://Permit.io) (a Python-based product and OSS for fine-grained authorization) to utilize ingestion and filtering.

Article: [https://www.permit.io/blog/building-ai-applications-with-enterprise-grade-security-using-fga-and-rag](https://www.permit.io/blog/building-ai-applications-with-enterprise-grade-security-using-fga-and-rag)

Project: [https://github.com/permitio/permit-langflow](https://github.com/permitio/permit-langflow)",Permit_io,1glsz3s,https://reddit.com/r/Python/comments/1glsz3s/enterprisegrade_security_for_llm_with_langflow/,https://www.reddit.com/r/Python/comments/1glsz3s/enterprisegrade_security_for_llm_with_langflow/,2024-11-07 15:25:13,12,0.8,12,0,2,0,0,False,False,True,False,False,Tutorial,self,t3_1glsz3s
Python,openpyxl data validation not applying in cell dropdown even when showdropdown is set true.,"I am writting q code to add data validation on certain coloumns of a sheet in a workbook. The data validation is successfully applied using formula1 but the issue am having is that it doesnt show the dropdown when i open the excel file. The reason is that in cell drop down is not checked in the datavalidation popup window. 

In python code i have set showDropdown=True",hunkmonster,1glnyjc,https://reddit.com/r/Python/comments/1glnyjc/openpyxl_data_validation_not_applying_in_cell/,https://www.reddit.com/r/Python/comments/1glnyjc/openpyxl_data_validation_not_applying_in_cell/,2024-11-07 11:06:01,3,0.67,3,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1glnyjc
Python,Understanding Retrieval-Augmented Generation (RAG) with OpenAI,[https://www.codemancers.com/blog/2024-09-17-rag/?utm\_source=social+media&amp;utm\_medium=reddit](https://www.codemancers.com/blog/2024-09-17-rag/?utm_source=social+media&amp;utm_medium=reddit),codemancers,1gljss4,https://reddit.com/r/Python/comments/1gljss4/understanding_retrievalaugmented_generation_rag/,https://www.reddit.com/r/Python/comments/1gljss4/understanding_retrievalaugmented_generation_rag/,2024-11-07 05:58:58,0,0.33,0,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gljss4
Python,Whispr: A multi-vault secret injection tool completely written in Python,"**What My Project Does ?**

Whispr is a CLI tool to safely inject secrets from your favorite secret vault (Ex: AWS Secrets Manager, Azure Key Vault etc.) into your app's environment. You can run a local web server or application with secrets (DB credentials etc.) pulled from a secure vault only when needed. It avoids storing secrets in \`.env\` files for local software development.

**Project link**: [https://github.com/narenaryan/whispr](https://github.com/narenaryan/whispr)

Whispr is written completely in Python (100%)

**Target Audience:** Developers &amp; Engineers

**Comparison**: Whispr can be compared to client SDKs of various cloud providers, but with extra powers of injection into app environment or standard input.",narenarya,1gljize,https://reddit.com/r/Python/comments/1gljize/whispr_a_multivault_secret_injection_tool/,https://www.reddit.com/r/Python/comments/1gljize/whispr_a_multivault_secret_injection_tool/,2024-11-07 05:41:20,22,0.9,22,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gljize
Python,New release of P2PD: peer-to-peer direct connection library,"**What My Project Does**

I've been working on a new Python library that does peer-to-peer connections. A good description of the library is that it makes it easier for two computers to establish a direct TCP connection without the need for proxies. The software can establish connections over the Internet, within your LAN, or even on the same machine. The software includes a number of techniques to make this possible such as:

* TCP Direct connect
* TCP Reverse connect
* TCP hole punching
* UPnP port forwarding (IPv4)
* UPnP pin holes (IPv6)

**Target Audience**

The intended audience for this is developers interested in building peer-to-peer software. But in fact, there's many common scenarios that you might not associate with a traditional 'p2p' setup. For example -- the software can improve connectivity to game servers -- alleviating some of the headaches of trying to reach self-hosted servers. Currently, the software is in beta and may have some bugs. But I've found it fairly stable in practice.

**Comparison**

You may have heard of similar libraries for P2P projects like Libp2p. These rely heavily on relays and aren't optimized for direct connections. Even solutions by major companies like Valve tend to fallback unnecessarily to using relay servers. So this is my solution. Open source and free.

[https://github.com/robertsdotpm/p2pd](https://github.com/robertsdotpm/p2pd)",coinbend,1gktc0y,https://reddit.com/r/Python/comments/1gktc0y/new_release_of_p2pd_peertopeer_direct_connection/,https://www.reddit.com/r/Python/comments/1gktc0y/new_release_of_p2pd_peertopeer_direct_connection/,2024-11-06 07:52:44,3,0.81,3,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gktc0y
Python,Providing LSP capabilities in HTML templating (jinja2),"**Problem**  
I recently started working with `htmx` using Python as a server-side. I discovered that when using templating (jinja2), the developer experience is ... quite poor. There is no completion, no type hints. Understandably so, as the template does not have enough information to provide such functionalities.

  
But even if that information was present, there is no tooling to provide the functionalities I would like to have (LSP completion, go to type definition, ...).

**Potential Solution**

So I thought I could maybe make that. Here's the idea:

* add type informations somewhere (maybe at the top)
   * add import lines for typing symbols
   * mapping context variables to their types
* translate the template python source to a valid python file
* map user actions on the real source to the virtual file
* send the user LSP requests to a real Python LSP (e.g. pyright, pylance, ...)
   * receive request from the client (user editor)
   * map the requests to the virtual domain (different lines/columns)
* receive response from the real Python LSP
   * map the response to the real code domain (user file)
   * send response to the client (user editor)

**Example**

Source code in the user editor

    {#
    from domain.user import User
    user: User
    #}
    &lt;p&gt; {{ user.name }}&lt;/p&gt;

Translated python code

    from domain.user import User
    def make_user() -&gt; User: ...
    user = make_user()
    user.name

  
Thanks for reading this far! I think I have two questions to the community

* Does this sound doable?
* If you write HTML templating yourself, would you find this useful?
   * And maybe did I miss an obvious tool that improves the developer experience?",slassr,1glbjvr,https://reddit.com/r/Python/comments/1glbjvr/providing_lsp_capabilities_in_html_templating/,https://www.reddit.com/r/Python/comments/1glbjvr/providing_lsp_capabilities_in_html_templating/,2024-11-06 22:50:02,4,0.63,4,0,4,0,0,False,False,True,False,False,Discussion,self,t3_1glbjvr
Python,Talk Python has moved to Hetzner,"See the full article. Performance comparisons to Digital Ocean too. If you've been considering one the new Hetzner US data centers, I think this will be worth your while.

[https://talkpython.fm/blog/posts/we-have-moved-to-hetzner/](https://talkpython.fm/blog/posts/we-have-moved-to-hetzner/)",mikeckennedy,1glixwh,https://reddit.com/r/Python/comments/1glixwh/talk_python_has_moved_to_hetzner/,https://www.reddit.com/r/Python/comments/1glixwh/talk_python_has_moved_to_hetzner/,2024-11-07 05:05:13,119,0.94,119,0,29,0,0,False,False,True,False,False,News,self,t3_1glixwh
Python,A Python script to gain remote access to Metasploitable.,"A Python script to connect to a Metasploitable machine using SSH and FTP protocols. This tool allows users to execute commands interactively over SSH and manage files via FTP.

[Remote\_Access](https://youtu.be/Aivo5OCZnU4?si=QYLIGTUy2F1TYqe9)",Naviya_lka,1glgg9x,https://reddit.com/r/Python/comments/1glgg9x/a_python_script_to_gain_remote_access_to/,https://www.reddit.com/r/Python/comments/1glgg9x/a_python_script_to_gain_remote_access_to/,2024-11-07 02:44:53,6,0.67,6,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1glgg9x
Python,First time trying to run a python script.,"When ever I try to run this file it closes instantly. I‚Äôve tried reinstalling multiple times, and I‚Äôve tried searching YouTube videos of how to install and run .py files and none have worked. What can I do?",Guilty-Magazine5674,1glf1je,https://reddit.com/r/Python/comments/1glf1je/first_time_trying_to_run_a_python_script/,https://www.reddit.com/r/Python/comments/1glf1je/first_time_trying_to_run_a_python_script/,2024-11-07 01:32:49,0,0.27,0,0,16,0,0,False,False,True,False,False,Tutorial,self,t3_1glf1je
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1gld3ic,https://reddit.com/r/Python/comments/1gld3ic/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1gld3ic/thursday_daily_thread_python_careers_courses_and/,2024-11-07 00:00:11,4,0.83,4,0,3,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gld3ic
Python,Meerkat: Monitor data sources and track changes over time from the terminal,"**What My Project Does**

[Meerkat](https://github.com/niqodea/meerkat) is a fully asynchronous Python library for monitoring data sources and tracking changes over time. Inspired by the constant watchfulness of meerkats, this tool helps you stay aware of shifts in your data‚Äîwhether it‚Äôs new entries, updates, or deletions. Originally created to track job postings, it‚Äôs designed to handle any type of data source, making it versatile for various real-world applications.

Meerkat‚Äôs CLI module provides an easy way to view changes in your data as text in the terminal, which is especially useful for quickly setting up simple visualizations. However, Meerkat isn‚Äôt limited to logging: it can be used to trigger any arbitrary actions in response to data changes, thanks to its action executor. This flexibility lets you define custom workflows, making it more than just a data logger.

Meerkat comes with an example use case‚Äîtracking job postings‚Äîso you can get a quick start and see the library in action (though you will need to implement the job fetchers yourself).

**Target Audience**

Meerkat is ideal for developers who need efficient, lightweight tools for monitoring data sources. It‚Äôs well-suited to hobby projects, prototyping, or small-scale production applications where regular change detection is required.

**Comparison**

I‚Äôm not aware of a direct comparison, but if there are similar projects out there, please let me know‚ÄîI‚Äôd love to add them to the README as related projects.

Link: https://github.com/niqodea/meerkat",Hiqo11,1glbo1o,https://reddit.com/r/Python/comments/1glbo1o/meerkat_monitor_data_sources_and_track_changes/,https://www.reddit.com/r/Python/comments/1glbo1o/meerkat_monitor_data_sources_and_track_changes/,2024-11-06 22:55:16,19,0.89,19,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1glbo1o
Python,Anyone have experience using Python for Simplified TS files for the FDA?,"Hello all. I am trying to help someone who is trying to install/configure Python to created Simplified TS files that will be submitted to the U.S. Food &amp; Drug Administration as part of a pharmaceutical submission.

Are there people in this forum familiar with the installation/configuration listed in this document (https://www.fda.gov/media/132457/download) who might be able to lend a hand please?",TheNewJasonBourne,1gl8i3q,https://reddit.com/r/Python/comments/1gl8i3q/anyone_have_experience_using_python_for/,https://www.reddit.com/r/Python/comments/1gl8i3q/anyone_have_experience_using_python_for/,2024-11-06 20:39:47,0,0.42,0,0,3,0,0,False,False,True,False,False,Resource,self,t3_1gl8i3q
Python,Build Limitless Automations in Python (open for Beta users),"Links: [Beta registration](https://autokitteh.com/beta-signup/), [website](http://www.autokitteh.com), [GitHub](https://github.com/autokitteh/autokitteh), [examples](https://github.com/autokitteh/kittehub)

**What My Project Does**

[AutoKitteh](http://www.autokitteh.com) is an automation platform specifically designed for Python developers. It's like ""**Zapier for developers**,"" enabling you to build limitless automations with just a few lines of code.

**Key features**

* Automate tasks using just basic Python code.
* Execute **long-running, reliable workflows**. It ensures your processes are durable and can resume exactly where they left off‚Äîeven after server restarts.
* Easily connect to applications like Slack, Gmail, GitHub, and many more.
* Define custom triggers for your workflows.
* Deploy with a single click‚Äîno infrastructure required.
* Manage and monitor your workflows.
* Can be easily extended to connect any API

**Target Audience**

Professional and citizen developers familiar with Python that build personal projects or enterprise solutions.

AutoKitteh is designed for:

* DevOps, IT and MLOps automation
* Personal and office workflows

**Comparison**

AutoKitteh is an integration platform similar to Zapier, Make, and Workato. However, instead of focusing on no-code solutions, it offers a low-code interface that leverages the power of Python for developing business logic.

Additionally, it functions as a durable workflow engine like Temporal and Inngest, providing a transparent Python interface.

**Usage**

Use AutoKitteh as:

\-  Self-hosted, open-source - [GitHub](https://github.com/autokitteh/autokitteh)

\- SaaS (Free) - [Register to SaaS Beta](https://autokitteh.com/beta-signup/) 





",HaimZlatokrilov,1gl3kcl,https://reddit.com/r/Python/comments/1gl3kcl/build_limitless_automations_in_python_open_for/,https://www.reddit.com/r/Python/comments/1gl3kcl/build_limitless_automations_in_python_open_for/,2024-11-06 17:13:55,21,0.89,21,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gl3kcl
Python,Keep your code snippets in README up-to-date!,"# Code-Embedder

Links: [GitHub](https://github.com/kvankova/code-embedder), [GitHub Actions Marketplace](https://github.com/marketplace/actions/code-embedder)

**What My Project Does**

**Code Embedder** is a GitHub Action and a pre-commit hook that **automatically updates code snippets in your markdown (README) files**. It finds code blocks in your README that reference specific scripts, then replaces these blocks with the current content of those scripts. This keeps your documentation in sync with your code.

‚ú® **Key features**

* üîÑ¬†**Automatic synchronization**: Keep your¬†README¬†code examples up-to-date without manual intervention.
* üõ†Ô∏è¬†**Easy setup**: Simply add the action to your GitHub workflow / pre-commit hook and format your¬†README code blocks.
* üìù¬†**Section support**: Update only specific sections of the script in the¬†README.
* üß©¬†**Object support**: Update only specific objects (functions, classes) in the¬†README.¬†*The latest version v0.5.1 supports only üêç Python objects (other languages to be added soon).*

Find more information in [GitHub](https://github.com/kvankova/code-embedder) üéâ

**Target Audience**

It is a production-ready, tested Github Action and pre-commit hook that can be part of you CICD workflow to keep your READMEs up-to-date.

**Comparison**

It is a light-weight package with primary purpose to keep your code examples in READMEs up-to-date. `MkDocs` is a full solution to creating documentation as a code, which also offers embedding external files. **Code-Embedder** **is** **a light-weight package** that can be used for projects with or without `MkDocs`. It offers additional functionality to sync not only full scripts, but also a section of a script or a Python function / class definition.",Better-Banana4069,1gl1hla,https://reddit.com/r/Python/comments/1gl1hla/keep_your_code_snippets_in_readme_uptodate/,https://www.reddit.com/r/Python/comments/1gl1hla/keep_your_code_snippets_in_readme_uptodate/,2024-11-06 15:45:36,116,0.94,116,0,20,0,0,False,False,True,False,False,Showcase,self,t3_1gl1hla
Python,Curly braces in Python,"I developed this extension for VSCode because I hated that Python didn't have curly braces, something that is annoying for many devs. I know it still has a lot of bugs and I know there are other types of alternatives, but it was the simplest thing I could think of to do.  
Link: [https://marketplace.visualstudio.com/items?itemName=BrayanCeron.pycurlybraces](https://marketplace.visualstudio.com/items?itemName=BrayanCeron.pycurlybraces) ",brayan0n,1gl1d8y,https://reddit.com/r/Python/comments/1gl1d8y/curly_braces_in_python/,https://www.reddit.com/r/Python/comments/1gl1d8y/curly_braces_in_python/,2024-11-06 15:40:26,0,0.29,0,0,10,0,0,False,False,True,False,False,Resource,self,t3_1gl1d8y
Python,Check Out LiteJsonDb ‚Äì A Simple Python Package for JSON Data Storage!,"
### What My Project Does

Hey Reddit!

I‚Äôve developed a Python package called LiteJsonDb to simplify JSON data storage and manipulation in Python. It‚Äôs built to handle basic operations like adding, editing, and searching data with a straightforward syntax.

LiteJsonDb aims to be simple yet effective for quick data storage needs. It also includes basic encryption, CSV export options, and even a backup to Telegram feature.

### Target Audience

LiteJsonDb is perfect for those looking for a lightweight, no-fuss JSON storage solution. Whether you're working on a small side project or a learning exercise, this package provides a clean way to work with JSON without relying on heavy databases. It‚Äôs designed to make things easier for beginners or for devs who want a low-overhead storage option for smaller projects.

### Comparison with Existing Alternatives

Unlike some more complex data management packages, LiteJsonDb focuses on simplicity and ease of use. There‚Äôs no need for extensive configuration ‚Äì it‚Äôs all about making JSON data handling as seamless as possible. If you‚Äôve used packages like TinyDB or SQLite, you‚Äôll find LiteJsonDb focuses purely on JSON, with a user-friendly syntax and minimal setup.

Here's a quick look at how it works:
```
import LiteJsonDb

# Initialize the database with encryption enabled
db = LiteJsonDb.JsonDB(crypted=True)

# Add data without extra details
db.set_data(""posts"")

# Add data with additional details
db.set_data(""users/1"", {""name"": ""Aliou"", ""age"": 20})
db.set_data(""users/2"", {""name"": ""Coder"", ""age"": 25})

# Modify data
db.edit_data(""users/1"", {""name"": ""Alex""})

# Retrieve data
print(db.get_data(""users/1""))  # Output: {'name': 'Alex', 'age': 20}
print(db.get_data(""users/2""))

# Remove data
db.remove_data(""users/2"")

# Perform a basic search
results = db.search_data(""Aliou"")
print(""Search Results:"", results)
```

You can also work with subcollections, export to CSV, or back up the database to Telegram.


If you‚Äôre interested, I‚Äôd love for you to try it out and share feedback. Contributions are welcome, so feel free to check it out on GitHub and help improve it!: https://github.com/codingtuto/LiteJsonDb

",Awkward_Main_6446,1gkzb3k,https://reddit.com/r/Python/comments/1gkzb3k/check_out_litejsondb_a_simple_python_package_for/,https://www.reddit.com/r/Python/comments/1gkzb3k/check_out_litejsondb_a_simple_python_package_for/,2024-11-06 14:07:43,2,1.0,2,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1gkzb3k
Python,scipy-stubs: Type Hints for SciPy,"Hi r/Python,

I'd like to introduce [`scipy-stubs`](https://github.com/jorenham/scipy-stubs), a stub-only package providing type annotations for SciPy.

# What My Project Does

* Enables static type checking for SciPy-based projects
* Improves IDE support (auto-completion, bug prevention)
* Helps catch type-related errors early on
* Lets you spend less time searching the docs
* Easy to install: `pip install scipy-stubs`
* Works out-of-the-box with any codebase -- no imports required
* Fully compatible with mypy and pyright/pylance -- even in strict mode

And even if you don't use type annotations at all, it will help your IDE understand your codebase better, resulting in better introspection and auto-completion.

# Target Audience

Anyone who uses SciPy will be able to benefit from `scipy-stubs`. 

You can install `scipy-stubs` if you use `scipy &gt;= 1.10`, but I'd strongly recommend using the latest `scipy == 1.14.1` release.

# Comparison

In [`microsoft/python-type-stubs`](https://github.com/microsoft/python-type-stubs) there used to be a scipy stub package, which was bundled with pylance. But it was very outdated and of low quality, so was recently removed in favor of `scipy-stubs` ([microsoft/python-type-stubs#320](https://github.com/microsoft/python-type-stubs/issues/320)).

There's also the [BarakKatzir/types-scipy-sparse](https://github.com/BarakKatzir/types-scipy-sparse/) stub package, that's specific to `scipy.sparse`. I recently spoken with the author on Zoom, and we decided to merge `types-scipy-sparse` into `scipy-stubs` ([jorenham/scipy-stubs#129](https://github.com/jorenham/scipy-stubs/issues/129)).

SciPy itself has some sporadic type annotations and a couple of stub files. But by no means is that enough for proper type checking. In [scipy/scipy#21614](https://github.com/scipy/scipy/issues/21614) I explain in detail why I decided to develop `scipy-stubs` independently of `scipy` (for now).

---

- Source code: https://github.com/jorenham/scipy-stubs
- PyPI: https://pypi.org/project/scipy-stubs/
- SciPy thread: https://github.com/scipy/scipy/issues/21614",de_ham,1gkysrl,https://reddit.com/r/Python/comments/1gkysrl/scipystubs_type_hints_for_scipy/,https://www.reddit.com/r/Python/comments/1gkysrl/scipystubs_type_hints_for_scipy/,2024-11-06 13:43:34,46,0.95,46,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gkysrl
Python,"Dataglasses: easy creation of dataclasses from JSON, and JSON schemas from dataclasses","Links: [GitHub](https://github.com/Udzu/dataglasses), [PyPI](https://pypi.org/project/dataglasses/).

# What My Project Does

A small package with just two functions: `from_dict` to create dataclasses from JSON, and `to_json_schema` to create JSON schemas for validating that JSON. The first can be thought of as the inverse of `dataclasses.asdict`.

The package uses the dataclass's type annotations and supports nested structures, collection types, Optional and Union types, enums and Literal types, Annotated types (for property descriptions), forward references, and data transformations (which can be used to handle other types). For more details and examples, including of the generated schemas, see the [README](https://github.com/Udzu/dataglasses/blob/main/README.md).

Here is a simple motivating example:

    from dataclasses import dataclass
    from dataglasses import from_dict, to_json_schema
    from typing import Literal, Sequence

    @dataclass
    class Catalog:
        items: ""Sequence[InventoryItem]""
        code: int | Literal[""N/A""]

    @dataclass
    class InventoryItem:
        name: str
        unit_price: float
        quantity_on_hand: int = 0

    value = { ""items"": [{ ""name"": ""widget"", ""unit_price"": 3.0}], ""code"": 99 }
        
    # convert value to dataclass using from_dict (raises if value is invalid)
    assert from_dict(Catalog, value) == Catalog(
        items=[InventoryItem(name='widget', unit_price=3.0, quantity_on_hand=0)], code=99
    )

    # generate JSON schema to validate against using to_json_schema
    schema = to_json_schema(Catalog)
    from jsonschema import validate
    validate(value, schema)


# Target Audience

The package's current state (small and simple, but also limited and unoptimized) makes it best suited for rapid prototyping and scripting. Indeed, I originally wrote it to save myself time while developing a simple script.

That said, it's fully tested (with 100% coverage enforced) and once it has been used in anger (and following any change suggestions) it might be suitable for production code too. The fact that it is so small (two functions in one file with no dependencies) means that it could also be incorporated into a project directly.

# Comparison

[pydantic](https://docs.pydantic.dev/latest/) is more complex to use and doesn't work on built-in dataclasses. But it's also vastly more suitable for complex validation or high performance.

[dacite](https://github.com/konradhalas/dacite) doesn't generate JSON schemas. There are also some smaller design differences: dataglasses transformations can be applied to specific dataclass fields, enums are handled by default, non-standard generic collection types are *not* handled by default, and Optional type fields with no defaults are not considered optional in inputs.

# Tooling

As an aside, one of the reasons I bothered to package this up from what was otherwise a throwaway project was the chance to try out [uv](https://docs.astral.sh/uv/) and [ruff](https://docs.astral.sh/ruff/). And I have to report that so far it's been a very pleasant experience!",Udzu,1gky5tr,https://reddit.com/r/Python/comments/1gky5tr/dataglasses_easy_creation_of_dataclasses_from/,https://www.reddit.com/r/Python/comments/1gky5tr/dataglasses_easy_creation_of_dataclasses_from/,2024-11-06 13:11:59,53,0.85,53,0,39,0,0,False,False,True,False,False,Showcase,self,t3_1gky5tr
Python,P2PD 3: Peer-to-peer direct connection library,"**What My Project Does**

I've been working on a new Python library that does peer-to-peer connections. A good description of the library is that it makes it easier for two computers to establish a direct TCP connection without the need for proxies. The software can establish connections over the Internet, within your LAN, or even on the same machine. The software includes a number of techniques to make this possible such as:

* TCP Direct connect
* TCP Reverse connect
* TCP hole punching 
* UPnP port forwarding (IPv4)
* UPnP pin holes (IPv6)

**Target Audience** 

The intended audience for this is developers interested in building peer-to-peer software. But in fact, there's many common scenarios that you might not associate with a traditional 'p2p' setup. For example -- the software can improve connectivity to game servers -- alleviating some of the headaches of trying to reach self-hosted servers.  Currently, the software is in beta and may have some bugs. But I've found it fairly stable in practice.

**Comparison** 

You may have heard of similar libraries for P2P projects like Libp2p. These rely heavily on relays and aren't optimized for direct connections. Even solutions by major companies like Valve tend to fallback unnecessarily to using relay servers. So this is my solution. Open source and free.

Demo image: [https://github.com/robertsdotpm/p2pd/raw/main/demo\_small.gif?raw=true](https://github.com/robertsdotpm/p2pd/raw/main/demo_small.gif?raw=true)

[https://github.com/robertsdotpm/p2pd](https://github.com/robertsdotpm/p2pd)

[https://p2pd.readthedocs.io/en/latest/p2p/index.html](https://p2pd.readthedocs.io/en/latest/p2p/index.html)

[https://roberts.pm/index.php/2024/11/05/p2pd/](https://roberts.pm/index.php/2024/11/05/p2pd/)",coinbend,1gkst5l,https://reddit.com/r/Python/comments/1gkst5l/p2pd_3_peertopeer_direct_connection_library/,https://www.reddit.com/r/Python/comments/1gkst5l/p2pd_3_peertopeer_direct_connection_library/,2024-11-06 07:16:02,1,1.0,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gkst5l
Python,Open-source declarative framework to build LLM applications - looking for contributors,"I've been building LLM-based applications, and was super frustated with all major frameworks - langchain, autogen, crewAI, etc. They also seem to introduce a pile of unnecessary abstractions. It becomes super hard to understand what's going behind the curtains even for very simple stuff.

[So I just published this open-source framework¬†GenSphere.](https://github.com/octopus2023-inc/gensphere)¬†The idea is have something like¬†**Docker for LLMs**. You build applications with YAML files, that define an execution graph. Nodes can be either LLM API calls, regular function executions or other graphs themselves. Because you can nest graphs easily, building complex applications is not an issue, but at the same time you don't lose control.

You basically code in YAML, stating what are the tasks that need to be done and how they connect. Other than that, you only write individual python functions to be called during the execution. No new classes and abstractions to learn.

Its all open-source and python-based.¬†**Now I'm looking for contributors**¬†to adapt the framework for cycles and conditional nodes - which would allow full-fledged agentic system building! Pls reach out ¬†if you want to contribute, there are tons of things to do!

PS:¬†[you can read the detailed docs here,](https://gensphere.readthedocs.io/en/latest/)¬†And go over this quick¬†[Google Colab tutorial.](https://github.com/octopus2023-inc/gensphere/blob/main/examples/gensphere_tutorial.ipynb)",Jazzlike_Tooth929,1gkpd2z,https://reddit.com/r/Python/comments/1gkpd2z/opensource_declarative_framework_to_build_llm/,https://www.reddit.com/r/Python/comments/1gkpd2z/opensource_declarative_framework_to_build_llm/,2024-11-06 03:38:22,1,1.0,1,0,1,0,0,False,False,True,False,False,Discussion,self,t3_1gkpd2z
Python,"Just published an article to understand Python Project Management and Packaging, illustrated with uv","Hey everyone,



I‚Äôve just finished writing the first part of my comprehensive guide on Python project management and packaging. Now that I think about it, I think it's more an article to understand the many concepts of Python packaging and project management more than a guide in and of itself.

  
The article: [A Comprehensive Guide to Python Project Management and Packaging: Concepts Illustrated with uv ‚Äì Part I](https://reinforcedknowledge.com/a-comprehensive-guide-to-python-project-management-and-packaging-concepts-illustrated-with-uv-part-i/)



In this first part, I focused on:

\- The evolution of Python packaging standards through key PEPs.

\- Detailed explanations of the main concepts like \`pyproject.toml\`, the packaging nomenclature, the dependency groups, locking and syncing etc.

\- An introduction to \`uv\` and how it illustrates essential packaging concepts.

\- Practical workflows using \`uv\` that I use with data science projects.

  
Mainly what it lacks is a deeper section or paragraph on workspaces, scripts, building and publishing. That's for part 2!



Working on this article was mainly journey for me through the various PEPs that have shaped the current Python packaging standards. I delved into the history and rationale behind these PEPs. I just wanted to understand. I wanted to understand all the discussions around packaging. That's something we deal with daily, so I wanted to deeply understand every concept that's related to Python projects or packages. The PEPs, and my own experience, helped me understand why certain changes were necessary and how they effectively resolved previous issues. It was enlightening to see how the thoughtful decision-making and the understanding of developers' needs. And I gained a deeper appreciation for how PEPs are organized and how they think external stuff like the existing tools and how they leave room for future improvement and standardization and for tools to innovate.



It was a pleasure both writing and reading through the material. I don‚Äôt expect everyone to read it in its entirety since it‚Äôs quite lengthy, and I‚Äôm sure my writing style has room for improvement. However, I believe you can easily pick up valuable bits of information from it. For those who are really interested, I highly recommend diving into the PEPs directly to get the most accurate and detailed insights!",ReinforcedKnowledge,1gkmrsg,https://reddit.com/r/Python/comments/1gkmrsg/just_published_an_article_to_understand_python/,https://www.reddit.com/r/Python/comments/1gkmrsg/just_published_an_article_to_understand_python/,2024-11-06 01:14:44,129,0.93,129,0,42,0,0,False,False,True,False,False,Tutorial,self,t3_1gkmrsg
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1gkl9r8,https://reddit.com/r/Python/comments/1gkl9r8/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1gkl9r8/wednesday_daily_thread_beginner_questions/,2024-11-06 00:00:08,7,0.79,7,0,3,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gkl9r8
Python,Opposite of Cloud Native Is?,"Opposite of Cloud Native is? It's time to define what it means to be NOT cloud-native, in a positive way. Here's an essay I wrote today. Would love your thoughts on it. 

[https://mkennedy.codes/posts/opposite-of-cloud-native-is-stack-native/](https://mkennedy.codes/posts/opposite-of-cloud-native-is-stack-native/)",mikeckennedy,1gkiiws,https://reddit.com/r/Python/comments/1gkiiws/opposite_of_cloud_native_is/,https://www.reddit.com/r/Python/comments/1gkiiws/opposite_of_cloud_native_is/,2024-11-05 21:56:40,0,0.31,0,0,16,0,0,False,False,True,False,False,News,self,t3_1gkiiws
Python,ParScrape v0.4.7 Released,"# What My project Does:

Scrapes data from sites and uses AI to extract structured data from it.

# Whats New:

* BREAKING CHANGE: --pricing cli option now takes a string value of 'details', 'cost', or 'none'.
* Added pool of user agents that gets randomly pulled from.
* Updating pricing data.
* Pricing token capture and compute now much more accurate.
* Faster startup

# Key Features:

* Uses Playwright / Selenium to bypass most simple bot checks.
* Uses AI to extract data from a page and save it various formats such as CSV, XLSX, JSON, Markdown.
* Has rich console output to display data right in your terminal.

# GitHub and PyPI

* PAR Scrape is under active development and getting new features all the time.
* Check out the project on GitHub or for full documentation, installation instructions, and to contribute:¬†[https://github.com/paulrobello/par\_scrape](https://github.com/paulrobello/par_scrape)
* PyPI [https://pypi.org/project/par\_scrape/](https://pypi.org/project/par_scrape/)

# Comparison:

I have seem many command line and web applications for scraping but none that are as simple, flexible and fast as ParScrape

# Target Audience

AI enthusiasts and data hungry hobbyist",probello,1gkhl3c,https://reddit.com/r/Python/comments/1gkhl3c/parscrape_v047_released/,https://www.reddit.com/r/Python/comments/1gkhl3c/parscrape_v047_released/,2024-11-05 21:16:45,0,0.4,0,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gkhl3c
Python,Dendrite: Interact with websites with natural language instead of using css selectors,"**What my project does:**

**Dendrite** is a simple framework for interacting with websites using natural language. Interact and extract without having to find brittle css selectors or xpaths like this:

    browser.click(‚Äúthe sign in button‚Äù)

For the developers who like their code typed, specify what data you want with a Pydantic BaseModel and Dendrite returns it in that format with one simple function call. Built on top of playwright for a robust experience. This is an easy way to give your AI agents the same web browsing capabilities as humans have. Integrates easily with frameworks such as¬† Langchain, CrewAI, Llamaindex and more.¬†

We are planning on **open sourcing** everything soon as well so feel free to reach out to us if you‚Äôre interested in contributing!

Github: [https://github.com/dendrite-systems/dendrite-python-sdk](https://github.com/dendrite-systems/dendrite-python-sdk)

**Overview**

* **Authenticate Anywhere**: Dendrite Vault, our Chrome extension, handles secure authentication, letting your agents log in to almost any website.
* **Interact Naturally**: With natural language commands, agents can click, type, and navigate through web elements with ease.
* **Extract and Manipulate Data**: Collect structured data from websites, return data from different websites in the same structure without having to maintain different scripts.
* **Download/Upload Files**: Effortlessly manage file interactions to and from websites, equipping agents to handle documents, reports, and more.
* **Resilient Interactions**: Dendrite's interactions are designed to be resilient, adapting to minor changes in website structure to prevent workflows from breaking
* **Full Compatibility**: Works with popular tools like LangChain and CrewAI, letting you seamlessly integrate Dendrite‚Äôs capabilities into your AI workflows.

**Target Audience:**

* Automation developers
* Webscraping people
* Web AI agent developers
* QA engineers

**Comparison:**

There are some frameworks for scraping information from websites with natural language prompts but there are no real alternatives when it comes to interacting with the websites as well as accessing data behind authentication. The most similar alternative would be something like Multion or some other fully autonomous agent framework that doesn't really work",rivernotch,1gkg23q,https://reddit.com/r/Python/comments/1gkg23q/dendrite_interact_with_websites_with_natural/,https://www.reddit.com/r/Python/comments/1gkg23q/dendrite_interact_with_websites_with_natural/,2024-11-05 20:11:40,48,0.83,48,0,13,0,0,False,False,True,False,False,Showcase,self,t3_1gkg23q
Python,Blog Post: State of Python 3.13 Performance: Free-Threading,[https://codspeed.io/blog/state-of-python-3-13-performance-free-threading](https://codspeed.io/blog/state-of-python-3-13-performance-free-threading),arty049,1gk6azd,https://reddit.com/r/Python/comments/1gk6azd/blog_post_state_of_python_313_performance/,https://www.reddit.com/r/Python/comments/1gk6azd/blog_post_state_of_python_313_performance/,2024-11-05 13:10:25,97,0.94,97,0,5,0,0,False,False,True,False,False,News,self,t3_1gk6azd
Python,What Free Host Providers do you Use for deploying RESTful API ?,"Until this moment I had using Render which provides a free limited plan for deoloying Python or any other API, pythonanywhere is another option which allow deploying for free.

If you're testing a project you need to deploy the API, where you do it for free?",RemoteIllustrious164,1gk5ayh,https://reddit.com/r/Python/comments/1gk5ayh/what_free_host_providers_do_you_use_for_deploying/,https://www.reddit.com/r/Python/comments/1gk5ayh/what_free_host_providers_do_you_use_for_deploying/,2024-11-05 12:16:41,52,0.85,52,0,32,0,0,False,False,True,False,False,Discussion,self,t3_1gk5ayh
Python,NVIDIA launched cuGraph (python) : 500x faster Graph algorithms ,"Extending the cuGraph RAPIDS library for GPU, NVIDIA has recently launched the cuGraph backend for NetworkX (nx-cugraph), enabling GPUs for NetworkX with zero code change and achieving acceleration ***up to 500x for NetworkX CPU implementation***. Talking about some salient features of the cuGraph backend for NetworkX:

* **GPU Acceleration**: From up to 50x to 500x faster graph analytics using NVIDIA GPUs vs. NetworkX on CPU, depending on the algorithm.
* **Zero code change**: NetworkX code does not need to change, simply enable the cuGraph backend for NetworkX to run with GPU acceleration.
* **Scalability**:¬† GPU acceleration allows NetworkX to scale to graphs much larger than 100k nodes and 1M edges without the performance degradation associated with NetworkX on CPU.
* **Rich Algorithm Library**: Includes community detection, shortest path, and centrality algorithms (about 60 graph algorithms supported)

You can try the cuGraph backend for NetworkX on Google Colab as well. Checkout this beginner-friendly notebook for more details and some examples:

Google Colab Notebook: [https://nvda.ws/networkx-cugraph-c](https://nvda.ws/networkx-cugraph-c)

NVIDIA Official Blog: [https://nvda.ws/4e3sKRx](https://nvda.ws/4e3sKRx)

YouTube demo: [https://www.youtube.com/watch?v=FBxAIoH49Xc](https://www.youtube.com/watch?v=FBxAIoH49Xc)",mehul_gupta1997,1gjxzr0,https://reddit.com/r/Python/comments/1gjxzr0/nvidia_launched_cugraph_python_500x_faster_graph/,https://www.reddit.com/r/Python/comments/1gjxzr0/nvidia_launched_cugraph_python_500x_faster_graph/,2024-11-05 03:55:09,2,1.0,2,0,1,0,0,False,False,True,False,False,News,self,t3_1gjxzr0
Python,"Python Async Networking Tutorials: Clarity, Concurrency and Load Management","A git repo of code samples is linked below. The repo includes a README with links to 3 tutorials that demonstrate async network programming using the python modules in the repo;

\* A Quality Python Server In 10 Minutes

\* Python Networking On Steroids

\* Writing Python Servers That Know About Service Expectations

If you have spent time in this space then you will have had the sync/async debates and will be aware of the motivations to go async. This goes beyond the use of Python async primtives and into multi-step, distributed, async transactions. If you are looking for a toolset designed to be async from the bottom up, or just curious about a different way to tackle this space, these just might be useful reads.

[https://github.com/mr-ansar/from-sketches-to-networking-code](https://github.com/mr-ansar/from-sketches-to-networking-code)

If there is another way to tackle the same scope as the three tutorials - in a similar number of code lines and with similar code clarity - I would be pleased to be pointed in that direction.",Public_Being3163,1gjv650,https://reddit.com/r/Python/comments/1gjv650/python_async_networking_tutorials_clarity/,https://www.reddit.com/r/Python/comments/1gjv650/python_async_networking_tutorials_clarity/,2024-11-05 01:27:56,12,0.88,12,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1gjv650
Python,Video Input for your local LLMS," **What My Project Does**

OpenSceneSense-Ollama is a powerful Python package designed for privacy-focused video analysis directly on your local machine. With this tool, you can leverage Ollama‚Äôs local models to analyze frames, transcribe audio, dynamically select key frames, and generate detailed summaries ‚Äî all without relying on cloud-based APIs. It‚Äôs ideal for those needing rich, insightful analysis of video content while ensuring data privacy and minimizing usage costs.

 **Target Audience**

This project is tailored for \*\*developers, researchers, data scientists, and privacy-conscious users\*\* who require in-depth, locally processed video analysis. It's perfect for applications where data security is critical, including:

\- Content creation workflows that need automatic video summarization

\- Researchers building labeled datasets for machine learning

\- Platforms needing context-rich content moderation

\- Offline projects in remote or restricted environments

 **Comparison**

OpenSceneSense-Ollama goes beyond traditional video analysis tools that often separate frame and audio analysis. Instead, it integrates both visual and audio elements, allowing users to prompt the models to produce comprehensive summaries and in-depth contextual insights. Where most tools might identify objects or transcribe audio separately, OpenSceneSense-Ollama unifies these components into narrative summaries, making it ideal for richer datasets or more nuanced content moderation.

**Getting Started**

To begin using OpenSceneSense-Ollama:

1. Prerequisites: Make sure you have Python 3.10+, FFmpeg, PyTorch and Ollama installed on your machine.

2. Install with pip: Run \`pip install openscenesense-ollama\` to install the package.

3. Configuration: Start analyzing video with customizable prompts, frame selection, and audio transcription.



Feel free to dive in, try it out, and share your feedback  especially if you're working in AI, privacy-focused applications, or video content moderation. Let‚Äôs build a powerful, local solution for meaningful video analysis!

[https://github.com/ymrohit/openscenesense-ollama](https://github.com/ymrohit/openscenesense-ollama)",rohit3627,1gjua54,https://reddit.com/r/Python/comments/1gjua54/video_input_for_your_local_llms/,https://www.reddit.com/r/Python/comments/1gjua54/video_input_for_your_local_llms/,2024-11-05 00:45:46,4,0.7,4,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gjua54
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1gjtaue,https://reddit.com/r/Python/comments/1gjtaue/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1gjtaue/tuesday_daily_thread_advanced_questions/,2024-11-05 00:00:14,7,0.83,7,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gjtaue
Python, Introducing Kew: A Modern Async Task Queue Built for FastAPI and Modern Python,"Hey r/python! I wanted to share Kew, a task queue library built specifically for FastAPI and other modern async Python applications.

**What My Project Does**

Kew is an async-native task queue that runs directly in your FastAPI process. No separate workers, no sync/async bridges, no process pools - just clean async code end-to-end. It provides:

* True concurrency control using semaphores (if you set 4 workers, you get exactly 4)
* Priority queues with millisecond-precision scheduling
* Built-in circuit breakers for handling service outages
* Redis-backed persistence for reliability

**Quick example:**

from kew import TaskQueueManager, QueueConfig, QueuePriority

async def process\_payment(order\_id: str):

await charge\_customer(order\_id)

return ""success""

\# Create a high-priority queue with concurrent processing

await manager.create\_queue(QueueConfig(

name=""payments"",

max\_workers=4,  # Strictly enforced!

priority=QueuePriority.HIGH

))

\# Submit tasks naturally in your FastAPI endpoints

u/app.post(""/orders/{order\_id}/process"")

async def process\_order(order\_id: str):

await manager.submit\_task(

task\_id=f""payment-{order\_id}"",

queue\_name=""payments"",

task\_func=process\_payment,

order\_id=order\_id

)

**Target Audience**

This is a production-ready task queue specifically designed for:

\- Teams building FastAPI microservices who are tired of running separate Celery workers

\- Applications that need reliable concurrent task processing

\- Projects where managing separate worker processes adds unnecessary complexity

\- Systems that need robust error handling with circuit breakers

Currently running in production handling millions of tasks daily.

**Comparison to Existing Solutions**

The key difference is that Kew is built for the async world. Here's how it compares:

**Celery/RQ/Huey**: All require separate worker processes and weren't designed for async. Using them with FastAPI means:

\- Running and managing separate worker processes

\- Complex sync/async context switching

\- No native async support

\- Worker processes that can leak or exceed limits

**Kew**: Built from the ground up for async:

\- Runs directly in your FastAPI process

\- Native async/await support throughout

\- True semaphore-based concurrency control

\- Clean async context propagation

\- Works naturally with FastAPI's dependency injection

**Installation &amp; Links:**



\`pip install kew\`



\- \[GitHub\](https://github.com/justrach/kew)

\- \[Docs\](in progress)

\- \[PyPI\](https://pypi.org/project/kew/)

Happy to answer any questions about implementation details or design decisions!",CarbonoAtom,1gjozxb,https://reddit.com/r/Python/comments/1gjozxb/introducing_kew_a_modern_async_task_queue_built/,https://www.reddit.com/r/Python/comments/1gjozxb/introducing_kew_a_modern_async_task_queue_built/,2024-11-04 20:55:24,11,0.8,11,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1gjozxb
Python,Check out the Closeread Prize - data-driven Scrollytelling documents in Python,"Ever wanted to create impactful scrollytelling stories like the ones you see in online news?¬†

Scrollytelling stories let you explain complicated concepts to readers as they scroll down the page. You could build up a complicated plot layer-by-layer, zoom in on a famous map, highlight a key quote from an interviewee, or even animate your own web graphics.

[Closeread](https://closeread.dev/)¬†brings all of this and more to you inside Quarto. (Quarto &amp; Closeread are free and open source. Quarto is an open-source scientific and technical publishing system.)  


Write your data-driven story with code, and publish it to the web as a scrollytelling article.

Learn more at¬†[https://posit.co/blog/closeread-prize-announcement/](https://posit.co/blog/closeread-prize-announcement/)

And let me know if you have any questions here or at the dev repo:¬†[https://github.com/qmd-lab/closeread/discussions](https://github.com/qmd-lab/closeread/discussions)",economicurtis,1gjo081,https://reddit.com/r/Python/comments/1gjo081/check_out_the_closeread_prize_datadriven/,https://www.reddit.com/r/Python/comments/1gjo081/check_out_the_closeread_prize_datadriven/,2024-11-04 20:14:36,0,0.47,0,0,1,0,0,False,False,True,False,False,News,self,t3_1gjo081
Python,Python debugging like Alteryx,I use python and alteryx at my job. I love how it‚Äôs easy to debug in Alteryx because you can check how your data looks after each tool. I know IDEs like Spyder have a nice debug mode but what happens when we‚Äôre debugging a pandas dataframe and want to see how the data changes after each line of your code? I was wondering if there are any graphical debuggers that can show you how your data looks like after each point similar to the way Alteryx is set up. Maybe there‚Äôs something even better than a graphical debugger? Looking for insight! Thanks!,Suspicious_Ad4412,1gjn3ku,https://reddit.com/r/Python/comments/1gjn3ku/python_debugging_like_alteryx/,https://www.reddit.com/r/Python/comments/1gjn3ku/python_debugging_like_alteryx/,2024-11-04 19:37:49,15,0.89,15,0,7,0,0,False,False,True,False,False,Discussion,self,t3_1gjn3ku
Python,Lightweight Model Serving,"The article below explores how one can achieve up to 9 times higher performance in model serving without investing in new hardware. It uses ONNX Runtime and Rust to show significant improvements in performance and deployment efficiency:

[https://martynassubonis.substack.com/p/optimize-for-speed-and-savings-high](https://martynassubonis.substack.com/p/optimize-for-speed-and-savings-high)",Martynoas,1gjlwxx,https://reddit.com/r/Python/comments/1gjlwxx/lightweight_model_serving/,https://www.reddit.com/r/Python/comments/1gjlwxx/lightweight_model_serving/,2024-11-04 18:49:24,3,0.81,3,0,0,0,0,False,False,True,False,False,Resource,self,t3_1gjlwxx
Python,cicada: share your music and play your music on multiple devices in sync,"Hey guys, I made this app because I love choir

What My Project Does:

It takes audio files from a specified directory on your device and makes it available on a specified port for everyone in your local network, anyone in the network can play the music from your device but that's not the cool part, the cool part is people can create groups(I call them hives), the admin will play music and the same audio will play on every hive member's device in sync, makes it sound like choir. It also has features like hive-chat, user profile and maybe other features I don't remember.

Please check it out and let me know if you have any suggestions.
https://github.com/n1teshy/cicada",Specialist_Ruin_9333,1gjlkip,https://reddit.com/r/Python/comments/1gjlkip/cicada_share_your_music_and_play_your_music_on/,https://www.reddit.com/r/Python/comments/1gjlkip/cicada_share_your_music_and_play_your_music_on/,2024-11-04 18:35:16,6,0.76,6,0,12,0,0,False,False,True,False,False,Showcase,self,t3_1gjlkip
Python,Rio: WebApps in pure Python ‚Äì A fresh Layouting System,"Hey everyone!

We received a lot of encouraging feedback from you and used it to improve our framework. For all who are not familiar with our framework, Rio is an easy-to-use framework for creating websites and apps which is based entirely on Python.

From all the feedback the most common question we've encountered is, ""How does Rio actually work?"" Last time we shared our concept about components (what are components, how does observing attributes, diffing, and reconciliation work).

Now we want to share our concept of our own fresh layouting system for Rio. In our wiki we share our thoughts on:

* What Makes a Great Layout System
* Our system in Rio with a 2-step-approach
* Limitations of our approach

Feel free to check out our Wiki on our [Layouting System](https://github.com/rio-labs/rio/wiki/Layouting-System).

Take a look at our playground, where you can try out our layout concept firsthand with just a click and receive real-time feedback: [Rio - Layouting Quickstart](https://rio.dev/docs/howto/layout-guide)

Thanks and we are looking forward to your feedback! :)

[Github: Rio](https://github.com/rio-labs/rio)",Sn3llius,1gjgcsf,https://reddit.com/r/Python/comments/1gjgcsf/rio_webapps_in_pure_python_a_fresh_layouting/,https://www.reddit.com/r/Python/comments/1gjgcsf/rio_webapps_in_pure_python_a_fresh_layouting/,2024-11-04 15:03:28,98,0.93,98,0,21,0,0,False,False,True,False,False,Discussion,self,t3_1gjgcsf
Python,The encryption &amp; decryption manager from heaven,"The encryption &amp; decryption manager from heaven


Sorry if I‚Äôm tooting my own horn here, but you 
know. Even though many of you out there might not care so much for ‚ÄòMr Crypter‚Äô. At least I enjoy using it and that‚Äôs enough for me.

Here is a demo video: https://youtu.be/OUr7ZM-FgoU?si=WRI7b7shGRi4obD3

Quick notes:

**Framework**: 
I recently started learning about `Typer`, it‚Äôs a lib that makes it easy to create good CLI programs using python. So I decided to apply what I‚Äôve learned and create Mr Crypter.




**What my project does**
1. You can encrypt/decrypt specific files
2. View the content of a encrypted file while still keeping the file encrypted
3. Add new data to an encrypted file without having to decrypt the file manually
4. Search for all of the files that you have encrypted using Mr Crypter




**Target audience**
I might be tooting my own horn here when I say that this is a tool from heaven, but honestly. I like using Mr Crypter, I enjoy the ease of use. And that‚Äôs the point of it, it‚Äôs supposed to be user friendly, the main use case are for those that like to save credentials, api keys, etc on your computer. However, having let‚Äôs say an api key in a txt file out in the open can be problematic. That‚Äôs why it‚Äôs better to encrypt it and use Mr Crypter‚Äôs tooling whenever you need to get your api key. 


**Comparison**
My initial plan was to initially just encrypt some API keys that I had acquired, but later on decided to create a better way of managing stuff like this. But everything snowballed from there. And my intention wasn‚Äôt really to compete with any existing tooling that might be out there. But, since r/Python requires you to at least explain how your project might differ. I could say this:

1. Once encrypted always encrypted, the idea is to be able to interact with the contents of a encrypted file in some way.
2. Since there are commands to interact with already encrypted files, that could potentially be a vector of a security leak, if someone is monitoring you and waiting for you to let‚Äôs say use the `view` command to inspect the contents of one of your encrypted files. Compare that to tools like hpenc that are more established. Other than that, encryption is still strong  as long as your password isn‚Äôt `password`. Not even AES can defend against foolishness
3. Ease of use, my goal is to keep things simple as I can. 


**LICENSE: MIT**
This means you can do whatever the heck you want with the source code once you have downloaded it.  

And also, if you liked it enough that you want to sponsor me, I added a sponsor button to the project.

**Want to contribute to the project?**
Go to the TODO.md and pick something, there are a bunch of stuff that either needs to be added or improved upon. I‚Äôll occasionally add new stuff or remove stuff from the TODO.md. So keep an eye out.

If you want to check the project out, go to: 

[Mr Crypter GitHub repo](https://github.com/Marcus-Peterson/mr-crypter)",Gorrilac,1gjfwbq,https://reddit.com/r/Python/comments/1gjfwbq/the_encryption_decryption_manager_from_heaven/,https://www.reddit.com/r/Python/comments/1gjfwbq/the_encryption_decryption_manager_from_heaven/,2024-11-04 14:44:33,6,0.61,6,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gjfwbq
Python,New Deep Learning Framework; Zephyr is on early release; active development,"**What My Project Does**

It is deep learning library / framework on top of JAX. [Zephyr](https://github.com/mzguntalan/zephyr) was motivated by an inclination to writing FP because JAX was FP. Zephyr reflects the nature of networks and layers, they are simply mathematical functions. By reflecting this, you are able to write code quicker and easier with minimal learning curve. 

**Target Audience**

This framework is not ready for production nor general use. It is in active development and if you do use it, I highly appreciate it and so if you submit reports or requests, I will tend to them immediately. 

It is for people who would like to use JAX in an FP way.

**Comparison**¬†

Within JAX: Flax, Haiku, and Equinox are your options; within python you additionally have Tensorflow and PyTorch. All of which are OO. In contrast, Zephyr is FP and you write nets and layers as functions.

**OO - FP**: Because zephyr is FP, it looks similar to math and it enjoys shorter code because there is no 1) initialize the module 2) call/forward/apply the module. There are only function calls. FP is more explicit tho

Here is a short example. (Some variables are not specified for brevity). README for more. 

Example: Linear Layer Only
Other frameworks would look like this (none of them look exactly like this): 
```python
    class Foo(Module):
        def __init__(self, input_dim):
            self.linear = nn.Linear(input_dim, out_dim)
        def __call__(self, x):
            return self.linear(x)
```

Zephyr:
```python
    def foo(params, x):
        return nets.linear(params, x, out_dim)

    # initialize params
    params = trace(foo, random_key, sample_input)
```

**Flax, Haiku**: They usually recreate JAX transformations to play nice with OO - so you need to know which one to use. And you have to be careful with nesting them or using a transformed module in another untransformed module, and so on. Zephyr does not have this problem.

Feedback is very welcome! 


",Pristine-Staff-5250,1gjdq6y,https://reddit.com/r/Python/comments/1gjdq6y/new_deep_learning_framework_zephyr_is_on_early/,https://www.reddit.com/r/Python/comments/1gjdq6y/new_deep_learning_framework_zephyr_is_on_early/,2024-11-04 13:04:30,14,0.9,14,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gjdq6y
Python,Python SDK for CoinGecko.com API,"# What my project does

* code: [https://github.com/nickatnight/python-coingecko](https://github.com/nickatnight/python-coingecko)
* pypi: [https://pypi.org/project/python-coingecko/](https://pypi.org/project/python-coingecko/)
* website: [https://docs.coingecko.com/reference/introduction](https://docs.coingecko.com/reference/introduction)

This project is a simple Python api wrapper for coingecko v3 api. The motivation for this was to experiment with [uv](https://github.com/astral-sh/uv) on a new open source project. Some highlights: fully typed, 98% test coverage, GitHub actions, and modern tooling.

This is an unofficial package and I have no affiliation with [coingecko.com](http://coingecko.com)

# Target Audience

Anyone who develops apps using coingecko api. As of this writing, the package is in beta, and an alpha can be expected in the upcoming releases.

# Comparison

The [existing package](https://github.com/man-c/pycoingecko) (1k stars) has been inactive for over two years. New apis have been added to the platform since, but are not yet supported. ",betazoid_one,1gj9q8r,https://reddit.com/r/Python/comments/1gj9q8r/python_sdk_for_coingeckocom_api/,https://www.reddit.com/r/Python/comments/1gj9q8r/python_sdk_for_coingeckocom_api/,2024-11-04 08:38:24,5,0.62,5,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gj9q8r
Python,"Python Threading Tutorial: Basic to Advanced (Multithreading, Pool Executors, Daemon, Lock, Events)","Are you trying to make your code run faster? In this video, we will be taking a deep dive into python threads from basic to advanced concepts so that you can take advantage of parallelism and concurrency to speed up your program. 

- Python Thread without join()
- Python Thread with join()
- Python Thread with Input Arguments
- Python Multithreading
- Python Daemon Threads
- Python Thread with Synchronization using Locks
- Python Thread Queue Communication between Threads
- Python Thread Pool Executor
- Python Thread Events
- Speed Comparison I/O Task
- Speed Comparison CPU Task (Multithreading vs Multiprocessing)

https://youtu.be/Rm9Pic2rpAQ",kevinwoodrobotics,1gj177a,https://reddit.com/r/Python/comments/1gj177a/python_threading_tutorial_basic_to_advanced/,https://www.reddit.com/r/Python/comments/1gj177a/python_threading_tutorial_basic_to_advanced/,2024-11-04 00:02:57,191,0.94,191,0,10,0,0,False,False,True,False,False,Tutorial,self,t3_1gj177a
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1gj14rr,https://reddit.com/r/Python/comments/1gj14rr/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1gj14rr/monday_daily_thread_project_ideas/,2024-11-04 00:00:09,6,1.0,6,0,3,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gj14rr
Python,Introducing OpenSceneSense: AI-Powered Video Analysis(Video input for Current LLMs),"**What My Project Does**

Hi everyone! I‚Äôm excited to introduce OpenSceneSense‚Äîa Python package that enables large language models (LLMs) to work with video data in meaningful ways. The idea is to bridge video input with models like OpenAI's Vision models and OpenRouter, so you can extract detailed insights directly from videos, frame-by-frame, and integrate audio transcription seamlessly.

OpenSceneSense processes video data in a way that LLMs can understand, turning it into rich text-based descriptions, detailed summaries, and scene change detection that can be applied to real-world tasks, including advanced content moderation and dataset creation.

**Target Audience**

This project is for developers, researchers, and data scientists who need to analyze video content or build robust, labelled datasets for machine learning. It‚Äôs also useful for platforms or individuals focused on content moderation, as OpenSceneSense brings context to video scenes by analyzing both visual and audio components, making it suitable for production applications.

**Comparison**

Unlike traditional video analysis tools that might only handle frames or audio separately, OpenSceneSense integrates both, allowing you to prompt LLMs to create comprehensive summaries and capture context that‚Äôs often lost in basic video analysis. While current tools can identify objects or transcribe audio, OpenSceneSense goes a step further by combining visual elements with narrative, perfect for anyone needing richer, more nuanced datasets or more accurate content moderation.

**Getting Started**

To use OpenSceneSense, you‚Äôll need Python 3.10+, FFmpeg, and an API key for OpenAI or OpenRouter. Install it with \`pip install openscenesense\`, and you‚Äôre ready to go. I‚Äôm also working on an Ollama-compatible version for local use to address privacy and performance needs.

Would love to hear thoughts and feedback from anyone working in AI, dataset creation, or moderation. Check it out on GitHub! 

[https://github.com/ymrohit/openscenesense](https://github.com/ymrohit/openscenesense)",rohit3627,1giyxep,https://reddit.com/r/Python/comments/1giyxep/introducing_openscenesense_aipowered_video/,https://www.reddit.com/r/Python/comments/1giyxep/introducing_openscenesense_aipowered_video/,2024-11-03 22:19:18,2,0.6,2,0,10,0,0,False,False,True,False,False,Showcase,self,t3_1giyxep
Python,A new webview binding for python call 4 test,"# webview_python

A lightweight Python binding for creating native GUI applications using web technologies. Uses WebView2 on Windows and native webview implementations on other platforms.

## Features

- ‚ú® Cross-platform support:
  - Windows: Microsoft Edge WebView2 engine
  - macOS: WebKit
  - Linux: GTK-based WebKit
- üöÄ Simple and intuitive Python API
- üí™ High performance with minimal resource usage
- üîÑ Two-way JavaScript bridge
- üì¶ Easy installation with minimal dependencies

## Why Another Binding?

Existing Python WebView solutions have limitations:

- [webview-python](https://github.com/zserge/webview-python) - Hasn't been updated in 6 years, compilation issues, doesn't use WebView2
- [pywebview](https://github.com/r0x0r/pywebview) - Complex setup and installation issues

## Installation

```bash
pip install webview_python
```

## Usage

### Display Inline HTML

```python
from webview.webview import Webview
from urllib.parse import quote

html = """"""
&lt;html&gt;
&lt;body&gt;
&lt;h1&gt;Hello from Python Webview!&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
""""""
webview = Webview()
webview.navigate(f""data:text/html,{quote(html)}"")
webview.run()
```

### Load Local HTML File

```python
from webview.webview import Webview
import os

webview = Webview()
current_dir = os.path.dirname(os.path.abspath(__file__))
html_path = os.path.join(current_dir, 'local.html')
webview.navigate(f""file://{html_path}"")
webview.run()
```

### Load Remote URL

```python
from webview.webview import Webview
webview = Webview()
webview.navigate(""https://www.python.org"")
webview.run()
```

### Python-JavaScript Bindings

```python
from webview.webview import Webview, Size, SizeHint
from urllib.parse import quote

webview = Webview(debug=True)

# Python functions that can be called from JavaScript
def hello():
    webview.eval(""updateFromPython('Hello from Python!')"")
    return ""Hello from Python!""

def add(a, b):
    return a + b

# Bind Python functions
webview.bind(""hello"", hello)
webview.bind(""add"", add)

# Configure window
webview.title = ""Python-JavaScript Binding Demo""
webview.size = Size(640, 480, SizeHint.FIXED)

# Load HTML with JavaScript
html = """"""
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Python-JavaScript Binding Demo&lt;/title&gt;
    &lt;script&gt;
        async function callPython() {
            const result = await hello();
            document.getElementById('result').innerHTML = result;
        }

        async function callPythonWithArgs() {
            const result = await add(40, 2);
            document.getElementById('result').innerHTML = `Result: ${result}`;
        }

        function updateFromPython(message) {
            document.getElementById('result').innerHTML = `Python says: ${message}`;
        }
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Python-JavaScript Binding Demo&lt;/h1&gt;
    &lt;button onclick=""callPython()""&gt;Call Python&lt;/button&gt;
    &lt;button onclick=""callPythonWithArgs()""&gt;Call Python with Args&lt;/button&gt;
    &lt;div id=""result""&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
""""""

webview.navigate(f""data:text/html,{quote(html)}"")
webview.run()
```

## API Overview

- `Webview()`: Create a webview instance
- `webview.navigate(url)`: Navigate to URL or load HTML content
- `webview.bind(name, func)`: Bind Python function to JavaScript
- `webview.eval(js_code)`: Execute JavaScript code
- `webview.run()`: Start the webview main loop
- `Size(width, height, hint)`: Configure window size
- `SizeHint`: Window size hint constants

## Contributing

Contributions are welcome! Please feel free to submit issues and pull requests.
",CongZhangZH,1giru7y,https://reddit.com/r/Python/comments/1giru7y/a_new_webview_binding_for_python_call_4_test/,https://www.reddit.com/r/Python/comments/1giru7y/a_new_webview_binding_for_python_call_4_test/,2024-11-03 17:13:47,2,0.63,2,0,1,0,0,False,False,True,False,False,News,self,t3_1giru7y
Python,Loadouts for Genshin Impact v0.1.1 is OUT NOW,"# What my project does

Hello r/Python!

Today we want to announce the recent release of our free and open-source software desktop application that allows travelers to manage their custom equipment of artifacts and weapons for playable characters and makes it convenient for travelers to calculate the associated statistics based on their equipment using the semantic understanding of how the gameplay works.

You can find more information about the project from our¬†[previous post](https://www.reddit.com/r/Genshin_Impact/comments/1fhgdhu/introducing_loadouts_for_genshin_impact/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button)¬†in the subreddit.

# Changelog

* Seamless management of artifact scanning is possible using¬†**clipboard insertion**
   * Screenshots can be inserted directly from the clipboard using the¬†**CTRL + V shortcut**
   * Alternatively, the¬†**drag and drop action**¬†can be used for achieving the same purpose
* Secondary ascension statistics scaling of the¬†**four-star Cryo**¬†character¬†**""Diona""**¬†were corrected
* Secondary ascension statistics attribute of the¬†**five-star Hydro**¬†character¬†**""Sigewinne""**¬†were corrected
* **New weapons**¬†that were introduced with the recent Genshin Impact release have been added
* **New characters**¬†that were introduced with the recent Genshin Impact release have been added
* **New artifacts**¬†that were introduced with the recent Genshin Impact release have been added
* Stellar overall codebase coverage quality is ensured with¬†**100% coverage**¬†of the functionality
* Memory usage for¬†**populating various weapon types**¬†in the combobox was significantly reduced
* Functional codebase was¬†**significantly refactored**¬†to encourage fellow travelers to contribute
* Support for only¬†**Python 3.12 and above**¬†is applicable for release GI Loadouts v0.1.1 and above
* **Automated dependency updates**¬†were made for both runtime and development libraries
* Cleaning up of¬†**residual cached OCR training data**¬†was enabled in case of unintended crashes
* Better¬†**exception handling routines**¬†were introduced when handling in-game screenshots
* Button¬†**tooltip for the scanning button**¬†on the main window was corrected from ""Load"" to ""Scan""
* Refinement selection combobox for weapons were fixed for¬†**one-star and two-star weapons**
* Correct the links and screenshots on the¬†**project documentation**¬†after the recent changes
* Change the¬†**continuous integration environment**¬†from ""Fedora:Latest"" image to ""Fedora:40"" image

# Illustrations

* [Dash - Nahida on GNU/Linux distributions](https://raw.githubusercontent.com/gridhead/gi-loadouts/main/assets/docs/gnul_dark.png)
* [Result - Nahida on GNU/Linux distributions](https://raw.githubusercontent.com/gridhead/gi-loadouts/main/assets/docs/gnul_dark_rslt.png)
* [Dash - Venti on Microsoft Windows](https://raw.githubusercontent.com/gridhead/gi-loadouts/main/assets/docs/mswn_dark.png)
* [Result - Venti on Microsoft Windows](https://raw.githubusercontent.com/gridhead/gi-loadouts/main/assets/docs/mswn_dark_rslt.png)

# Resources

* [Loadouts for Genshin Impact - GitHub](https://github.com/gridhead/gi-loadouts)
* [Loadouts for Genshin Impact - PyPI](https://pypi.org/project/gi-loadouts/)
* [Loadouts for Genshin Impact v0.1.1](https://github.com/gridhead/gi-loadouts/releases/tag/0.1.1)
   * [Executable for GNU/Linux distributions](https://github.com/gridhead/gi-loadouts/releases/download/0.1.1/gi-loadouts-0.1.1)
   * [Executable for Microsoft Windows](https://github.com/gridhead/gi-loadouts/releases/download/0.1.1/gi-loadouts-0.1.1.exe)

# Appeal

This project is currently in its beta phase and we are committed to delivering a quality experience with every release we make. If you are excited about the direction of this project and want to contribute to the efforts, we would greatly appreciate it if you help us boost the project visibility by¬†**starring the project repository**, address the releases by¬†**reporting the experienced errors**, choose the direction by¬†**proposing the intended features**, enhance the usability by¬†**documenting the project repository**, improve the codebase by¬†**opening the pull requests**¬†and finally, persist our efforts by¬†**sponsoring the development members**.

# Note

Loadouts for Genshin Impact is¬†**not intended**¬†to be a replacement for what¬†**Akasha**¬†and¬†**Genshin Optimizer**¬†already do. With¬†**ecosystem support**¬†of the more established JSON-based¬†**Genshin Open Object Definition**¬†(GOOD) serialization format and robust¬†**optical character recognition**¬†(OCR) support for artifact statistics scanning, this project is more intended to be a client-side supplement to more established tooling. The focus of the application is to ensure that travelers can mix and match their¬†**custom equipment**¬†of artifacts and weapons across various playable characters seamlessly to attempt multiple playstyles and team compositions easily.

# Disclaimer

All rights to Genshin Impact assets used in this project are reserved by miHoYo Ltd. and Cognosphere Pte., Ltd.

Other properties belong to their respective owners.

# Target Audience

* People playing Genshin Impact and wanting to customize their equipment
* People wanting to learn about how optical character recognition works
* People looking for an offline application for loadouts without telemetry and ads
* People wanting to learn about how PySide6 development is performed

# Comparison

* Akasha System
   * Proprietary codebase and closed-source web-based application
   * Internet access is mandatorily required for basic operations
   * Focuses more on the overall build of the characters and not equipment
   * Supported by copious advertisements and invasive telemetry
* Genshin Optimizer
   * Free and open source codebase and web-based application
   * Internet access is mandatorily required for basic operations
   * Superficial overall control across characters, weapons and artifacts
   * Supported by copious advertisements and invasive telemetry

In comparison to these, **Loadouts for Genshin Impact** is 

* Loadouts for Genshin Impact
   * Free and open source codebase and desktop-based application
   * Internet access is not required at all once the application is downloaded
   * Focussed overall control across characters, weapons and artifacts
   * Supported by donations and goodwill

",t0xic0der,1gire30,https://reddit.com/r/Python/comments/1gire30/loadouts_for_genshin_impact_v011_is_out_now/,https://www.reddit.com/r/Python/comments/1gire30/loadouts_for_genshin_impact_v011_is_out_now/,2024-11-03 16:54:52,19,0.72,19,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1gire30
Python,I Wrote a Guide to Simulation in Python with SimPy,"Hi folks,

I wrote a guide on discrete-event simulation with [SimPy](https://simpy.readthedocs.io/en/latest/), designed to help you learn how to build simulations using Python. Kind of like the official documentation but on steroids.

I have used SimPy personally in my own career for over a decade, it was central in helping me build a [pretty successful engineering career](https://www.reddit.com/r/MechanicalEngineering/comments/1gh8at0/my_13_year_nontraditional_meche_career_journey/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button). Discrete-event simulation is useful for modelling real world industrial systems such as factories, mines, railways, etc.

My latest venture is teaching others all about this.

If you do get the guide, I‚Äôd really appreciate any feedback you have. Feel free to drop your thoughts here in the thread or DM me directly!

Here‚Äôs the link to get the guide: [https://simulation.teachem.digital/free-simulation-in-python-guide](https://simulation.teachem.digital/free-simulation-in-python-guide)

For full transparency, why do I ask for your email?

Well I‚Äôm working on a full course following on from my previous [Udemy course on Python](https://www.udemy.com/course/python-for-engineers-scientists-and-analysts/?referralCode=8E30A5C432085F42D090). This new course will be all about real-world modelling and simulation with SimPy, and I‚Äôd love to send you keep you in the loop via email. If you found the guide helpful you would might be interested in the course. That said, you‚Äôre completely free to hit ‚Äúunsubscribe‚Äù after the guide arrives if you prefer.",bobo-the-merciful,1gipp8a,https://reddit.com/r/Python/comments/1gipp8a/i_wrote_a_guide_to_simulation_in_python_with_simpy/,https://www.reddit.com/r/Python/comments/1gipp8a/i_wrote_a_guide_to_simulation_in_python_with_simpy/,2024-11-03 15:41:29,86,0.9,86,0,14,0,0,False,False,True,False,False,Tutorial,self,t3_1gipp8a
Python,Stockdex: Python Package to Extract and plot Financial Data ,"Showcasing a new major version (1.0.0) of [Stockdex](https://github.com/ahnazary/stockdex), a Python package that provides a simple interface to access financial data from various sources and plotting financiial data using Plotly and Dash.

## What my project does

While there are some packages that provide financial data (like yfinance), they have few shortcomings which Stockdex aims to address as follows:

- Various data sources: Stockdex provides data from Yahoo Finance API and website, Digrin, Macrotrends, and JustETF (for EU ETFs).

- Numerous data categories: Stockdex provides various data including financial statements, earnings, dividends, stock splits, list of key executives, major shareholders, and many more.

- Historical data: Stockdex provides a wide time range of data, e.g. Digrin and Macrotrends sources, which provide data ranging from 4 years to historical data.

- plotting capabilities (new feature): Stockdex provides plotting financial data using bar, line, and sanky plots. Multiple plots can be combined in dash app.

check out [this usage guide](https://github.com/ahnazary/stockdex/blob/main/USAGE.md) for detailed info about usage of the package and its functions including plotting and dash app examples.


[GitHub link](https://github.com/ahnazary/stockdex)

[Pypi link](https://pypi.org/project/stockdex/)",nginx26,1gioovh,https://reddit.com/r/Python/comments/1gioovh/stockdex_python_package_to_extract_and_plot/,https://www.reddit.com/r/Python/comments/1gioovh/stockdex_python_package_to_extract_and_plot/,2024-11-03 14:57:09,12,0.75,12,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1gioovh
Python,"RasperDucky, an implementation of DuckyScript3 to run on a Raspberry Pico","# What My Project Does

Source : [https://github.com/leogout/rasper-ducky](https://github.com/leogout/rasper-ducky)

An implementation of DuckyScript3 used for **keystroke injections attacks** to run on a Raspberry Pi Pico.

*What is a keystroke injection attack* you may ask? 

It is the reason why you **shouldn't plug any unknown USB key in any computer**. This device will not be recognized as a storage device, but as a keyboard... From there, a program running on the key will inject key-presses like ""Windows + R"", then type ""powershell"" and press ""Enter"". If you try it in this order on a Windows computer it will open a command line prompt... From here, injecting malicious commands could be very harmful.

A USB RubberDucky is a tool that you can buy on [https://shop.hak5.org/products/usb-rubber-ducky](https://shop.hak5.org/products/usb-rubber-ducky), and it allows someone to do what I described above with a special scripting language called **DuckyScript**. I am not affiliated with Hack5, the company selling these.

My goal is to write a Python interpreter to port as much commands from DuckyScript as possible to run them on a RaspberryPi Pico with CircuitPython. It's a fun little side project that I've loved working on lately and I wanted to show it to you here.

# How the Project was Developed

I read the docs for DuckyScript an reimplemented commands one by one using Python and CircuitPy. I used the insights of this great ebook : [https://craftinginterpreters.com/](https://craftinginterpreters.com/) and I got inspired by [https://github.com/dbisu/pico-ducky](https://github.com/dbisu/pico-ducky) which does the same thing with less features. 

At first I tried to contribute to this project but I got no answers from the owner and the way the code was written didn't correspond to the way I would have done it, so it gave me the motivation to create my own.

# Target Audience

I did not think of that before making this post. Honestly I do it for fun so there wasn't really any expectations on a target audience, but here is what comes on top of my mind when I think of it :

* CyberSecurity agents to sensitize their co-workers with demonstrations of what harm could cause a keystroke injection attack
* CyberSecurity students to showcase how trivial this kind of attacks is nowadays
* People who enjoy hacking as a hobby
* People who want to contribute to this project

 This project is NOT targeting Black Hat hackers or script kiddies. It is NOT a replacement for RubberDucky as well, their hardware is much better than a Raspberry Pi Pico. ",leogoutt,1gikerv,https://reddit.com/r/Python/comments/1gikerv/rasperducky_an_implementation_of_duckyscript3_to/,https://www.reddit.com/r/Python/comments/1gikerv/rasperducky_an_implementation_of_duckyscript3_to/,2024-11-03 11:04:03,10,0.92,10,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gikerv
Python,A selfhosted web app built with plain Python,"### What My Project Does
- Code: https://github.com/daya0576/beaverhabits/ 
- Demo: https://beaverhabits.com/demo/

When switching from Android to iOS, I was unable to find a light-weighted but handy habit tracking app, so I decided to make one by myself :p

The project's name (Beaver Habit Tracker) came from a game called ""Against the Storm"" (which I spent over 200 hours, highly recommended). In the game, my favourite species is the beaver, hoping this web app works as a beaver to record ur precious moments in your fleeting life.

---

### How the Project was Developed
Inspired the idea of ""web UIs with plain Python"" from [Three Python trends in 2023](https://blog.jerrycodes.com/python-trends-in-2023/), I developed a web app with 100% pure Python &lt;3

The app is powered by an out-of-the-box framework called [NiceGUI](https://nicegui.io/) (including Quasar, Tailwind CSS, FastAPI, ...).

Some thoughts to share after several months of development:

- Good things ‚úÖ
  1. WebSocket based communication between client and server, **works perfectly with Python asyncio**
  2. Light-weighted session based storage provided, out of the box to use
  3. Plenty of UI components provided, straightforward and highly customizable
  4. ...
- Disadvantages:
  1. The framework NiceGUI follows a backend-first philosophy: It hadles everything on the server side -&gt; network latency could be a significant issue, may impacting the PWA experience
  2. ...

Overall, as a Python programmer, the full stack web app development experience is smooth and awesome. 

---

### Target Audience
This app is suitable for anyone who is passionate about recording life.

Here are my [table tennis session records](https://github.com/daya0576/beaverhabits/blob/main/README.md#streaks) over the past yearüèì. 

Thses streaks make me feel satisfied and alive‚ù§Ô∏è 

---

### Comparison
We can compare it to other habit tracker apps, but the streaks feature makes this app unique :p",Sufficient_South5254,1giizja,https://reddit.com/r/Python/comments/1giizja/a_selfhosted_web_app_built_with_plain_python/,https://www.reddit.com/r/Python/comments/1giizja/a_selfhosted_web_app_built_with_plain_python/,2024-11-03 09:17:57,75,0.88,75,0,25,0,0,False,False,True,False,False,Showcase,self,t3_1giizja
Python,CPython hash table collisions,"A blog post on how CPython dicts handle hash collisions.

[https://somehybrid.github.io/jekyll/update/2024/10/14/hash-collisions.html](https://somehybrid.github.io/jekyll/update/2024/10/14/hash-collisions.html)",SomeHybrid0,1gign36,https://reddit.com/r/Python/comments/1gign36/cpython_hash_table_collisions/,https://www.reddit.com/r/Python/comments/1gign36/cpython_hash_table_collisions/,2024-11-03 06:15:07,1,1.0,1,0,0,0,0,False,False,True,False,False,Discussion,self,t3_1gign36
Python,Project showcase: Rocket Model,"I have finished my first project and would like to show it off. My Project is a simple flight calculator for amateur rockets. It was built to aid the rough calc and design stage so one could model a rocket with out having a full design. It has a easy to use GUI to guide the user in imputing the characteristics of the rocket. It also has stand alone simulation module that can be run if the user prefer the script method. 

The target audience is my colleague in the university but anyone working with amateur rockets should should be able to use this tool.

The two main alternatives would be open rocket (java based) and rocketpy. Both are well built, tested and accepted in the industry but my project should be simpler to use and will not require a full model build out to run models. 

The application download is available here (Windows only):  
[https://github.com/andrerhenry/RocketModel/releases](https://github.com/andrerhenry/RocketModel/releases)  
  
Source code is here:  
[https://github.com/andrerhenry/RocketModel](https://github.com/andrerhenry/RocketModel)",Ajax_Minor,1gifc2t,https://reddit.com/r/Python/comments/1gifc2t/project_showcase_rocket_model/,https://www.reddit.com/r/Python/comments/1gifc2t/project_showcase_rocket_model/,2024-11-03 04:45:18,13,0.8,13,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1gifc2t
Python,Robyn finally supports OpenAPI/Swagger ,"Hey Everyone üëã

We just launched OpenAPI docs generation in Robyn. - [https://github.com/sparckles/Robyn/releases/tag/v0.63.0](https://github.com/sparckles/Robyn/releases/tag/v0.63.0)

(For the unaware [Robyn](http://github.com/sparckles/robyn) is a Super Fast Async Python Web Framework with a Rust runtime. )

It was one of our community's most requested features, and I hope you all will like it.

Do let us know what you think of it üòä

You can find the docs at -  [https://robyn.tech/documentation/api\_reference/openapi](https://robyn.tech/documentation/api_reference/openapi)",stealthanthrax,1gieai3,https://reddit.com/r/Python/comments/1gieai3/robyn_finally_supports_openapiswagger/,https://www.reddit.com/r/Python/comments/1gieai3/robyn_finally_supports_openapiswagger/,2024-11-03 03:43:04,34,0.83,34,0,11,0,0,False,False,True,False,False,News,self,t3_1gieai3
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1gia4ox,https://reddit.com/r/Python/comments/1gia4ox/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1gia4ox/sunday_daily_thread_whats_everyone_working_on/,2024-11-03 00:00:10,7,0.75,7,0,5,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gia4ox
Python,Simple Object Archive for Python - Providing a single decorator to persist object data and relations,"# [Simple Object Archive for Python (SOAP)](https://github.com/hwkoene/soap)

# What my project does

This library provides a single   `@entity` decorator for object persistence. Decorated classes will store their instances under ./\_\_data\_\_/&lt;ClassName&gt; in json format with their UUID as filename. filter() and exclude() methods are added as classmethods to query the existing objects.

For each class variable that is annotated, a `property` will be provided with the same name.

Class variables whose annotation is also a decorated object, set or list thereof are stored as a string of their UUID and will be resolved when their `get()` method is first called.

# Target audience

People...

* wanting to quickly prototype a database;
* creating simple applications with not that many objects (&lt;10.000 or so)

# Comparison

**SQLAlchemy**

SOAP doens't require database setup, but isn't as extensive.

**Pickle**

Pickled objects aren't transparent or queriable.

**Dataclass**

SOAP was inspired by the  `u/entity` decorator, adding query and persistence functionality.

# Example

    @entity
    class MyClassA:
        name: str
        health: int = 100
        my_path: Path = None
        inventory: set['MyClassB'] = set() # One-to-many

This creates an `__init__`\-function with the default arguments of the class variables.

    @entity
    class MyClassB:
        daddy: MyClassA # One-to-one relation
        other_items: list
        timestamp: datetime
        problems: random.randint(0, 99)

The `__data__` folder is created automatically and looks something like this:

    __data__/
       ‚îú‚îÄ‚îÄ MyClassA/ 
       ‚îÇ   ‚îî‚îÄ‚îÄ 550e8400-e29b-41d4-a716-446655440000
       ‚îî‚îÄ‚îÄ MyClassB/
           ‚îî‚îÄ‚îÄ 123e4567-e89b-12d3-a456-426614174000

`MyClassA` and `MyClassB` now reference each other. We create the objects like we would any other, just keep in mind to use all keyword arguments.

    a1 = MyClassA(name=""Benjamin"")
    a2 = MyClassA(name=""Steve"")
    
    b1 = MyClassB(daddy=a1, 
                  timestamp=datetime.now(), 
                  other_items=['Some cheese', 'Bud light'])
    b2 = MyClassB(daddy=a2, 
                  timestamp=b1.timestamp, 
                  other_items=[b1])

Because `MyClassA.inventory` is annotated with `set['MyClassB']`, the `getattr` function returns a `EntitySet` type. This is basically a `set` with `filter()` and `exlude()` methods to perform queries. Additionally, operations like `append` and `remove` are wrapped to save the object afterwards.

    a1.inventory.append(b1)
    a2.inventory.append(b2)
    
    steve_not_my_daddy = MyClassB.exclude(daddy=lambda x: x.name.startswith('Steve'))
    cheese_i_have = a1.inventory.filter(other_items=lambda x: ""Some cheese"" in x)
    
    print(steve_not_my_daddy)   # {b1}
    print(cheese_i_have)        # {b1}
    
    print(type(steve_not_my_daddy)) # &lt;class 'src.entity.entity.&lt;locals&gt;.Entity'&gt;
    print(type(a1.inventory))       # &lt;class 'src.entity.entity.&lt;locals&gt;.Entity'&gt;

# Limitations

1. All objects are kept in memory.
   * When an object is deleted, it is not directly removed from memory because other objects may still have a reference to it.
2. Currently, only `datetime` and `Path` objects are transcoded besides the builtins.

# Next steps

* Explicit archiving, adding items to a (`.zip`) archive (to partially address limitation #1);
* Option to disable implicit saving;
   * Combine with a `rollback` function to facilitate transactions;
* Custom transcoders (to address limitation #2);
* Typechecking for getters and setters;
* Derive date created from file metadata;
* Custom assignment of data folder;
* Allow creaton/modification/deletion of objects from files using watchdog to monitor the data directory for changes;
   * This may allow this framework to function as a synchronized database when combined with something like `portalocker`;
* CSV file writing of all objects;
* Optional integrations:
   * NiceGUI to have some kind of admin page;
* Saving asynchronously;
* Use a profiler to identify bottlenecks;
* Find a more fitting name.

# Issues

* Deleting an object and then terminating the program may cause invalid refereces, which in turn may cause errors.
* Invalid files cause errors.

  
EDIT: Folder layout example.
EDIT2: Reddit keeps chaning '@' to 'u/'",Samnono,1gi8m82,https://reddit.com/r/Python/comments/1gi8m82/simple_object_archive_for_python_providing_a/,https://www.reddit.com/r/Python/comments/1gi8m82/simple_object_archive_for_python_providing_a/,2024-11-02 22:48:33,7,0.7,7,0,10,0,0,False,False,True,False,False,Showcase,self,t3_1gi8m82
Python,pypackage development environment setup,"**What My Project Does**  
Gets you up and running in a professional TDD-ready environment to develop python packages.  
Project is managed with poetry and uv.  
automatic pre-commit-hooks and bitbucket-pipeline implementation.

**Target Audience**  
It is ment for devs who write for production requirements and within a CI-CD environment

**Comparison**  
Don't know any other repos like this.  
I tried to reduce the project setup to a single command for devs.

  
I wrote a shellscript for a project setup in a setup\_template repo:  
[https://github.com/PhilBrk8/pypackage\_dev\_setup](https://github.com/PhilBrk8/pypackage_dev_setup)  
Feedback / contribution would be appreciated",sigmaaware,1gi7vli,https://reddit.com/r/Python/comments/1gi7vli/pypackage_development_environment_setup/,https://www.reddit.com/r/Python/comments/1gi7vli/pypackage_development_environment_setup/,2024-11-02 22:13:18,1,1.0,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gi7vli
Python,A filesystem navigator for the terminal,"
## What My Project Does

Terminal-tree is an experimental terminal-based filesystem navigator. You can explore your filesystem and preview files within the terminal.

Very early stage, I've been playing with the look and feel, but it could form the basis of a larger tool. Possibly a file manager, or file picker.

It is built with the Textual framework (which I also develop), and is a reasonably good example of a more complex widget which integrates blocking calls with an async framework.

The code is currently a single file:

https://github.com/willmcgugan/terminal-tree/blob/main/tree.py

More details on the repository:

https://github.com/willmcgugan/terminal-tree


## Target Audience

Anyone interested in building a terminal app. It is fun to play with (hopefully) but doesn't have any functionality on top of navigating and previewing files.

I'm open to suggestions on what could be built on top of this.

## Comparison

You could compare it to [Ranger](https://github.com/ranger/ranger), Midnight Commander, or similar tools.",willm,1gi3tqo,https://reddit.com/r/Python/comments/1gi3tqo/a_filesystem_navigator_for_the_terminal/,https://www.reddit.com/r/Python/comments/1gi3tqo/a_filesystem_navigator_for_the_terminal/,2024-11-02 19:07:09,74,0.91,74,0,25,0,0,False,False,True,False,False,Showcase,self,t3_1gi3tqo
Python,yapper-tts: text to speech library,"Hey folks, I put together a bunch of cool tools and made yapper.


What My Project Does

It takes text, optionally enhances(adds a personality to) your text using free LLM APIs, and says it using one of more than a dozen available voices, they all sound pretty natural. The best part is that the speech synthesis is offline, you only need internet connection to use the LLM APIs to enhance your text.

I made this because I needed a fun way to get the progress/exceptions on my long running scripts, it has a decorator and context manager to do exactly that, it turned out to be better than I expected so I made it public. Check it out and please let me know if you have any suggestions.

https://github.com/n1teshy/yapper-tts",Specialist_Ruin_9333,1gi2xmj,https://reddit.com/r/Python/comments/1gi2xmj/yappertts_text_to_speech_library/,https://www.reddit.com/r/Python/comments/1gi2xmj/yappertts_text_to_speech_library/,2024-11-02 18:27:24,11,1.0,11,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1gi2xmj
Python,What would Enaml 2.0 look like? | nucleic/enaml | Declarative UI,"From Enaml's [docs](https://enaml.readthedocs.io/en/latest/get_started/introduction.html):

&gt; Enaml brings the declarative UI paradigm to Python in a seamlessly integrated fashion. The grammar of the Enaml language is a strict superset of Python. This means that any valid Python file is also a valid Enaml file, though the converse is not necessary true. The tight integration with Python means that the developer feels at home and uses standard Python syntax when expressing how their data models bind to the visual attributes of the UI.

&gt; . . .

&gt; Enaml‚Äôs declarative widgets provide a layer of abstraction on top of the widgets of a toolkit rendering library. Enaml ships with a backend based on Qt5/6 and third-party projects such as enaml-web and enaml-native provides alternative backends.

---

A maintainer of Enaml has just opened [a brainstorm discussion](https://github.com/nucleic/enaml/discussions/558) on the next major development goals. 

It's a project I've long admired, though rarely used, and I'd love to see it get some attention and a revamp. I think the bar these days has been raised by projects like QML and Slint, which provide a great context in which to set new goals.",AndydeCleyre,1gi2vwa,https://reddit.com/r/Python/comments/1gi2vwa/what_would_enaml_20_look_like_nucleicenaml/,https://www.reddit.com/r/Python/comments/1gi2vwa/what_would_enaml_20_look_like_nucleicenaml/,2024-11-02 18:25:11,12,0.88,12,0,6,0,0,False,False,True,False,False,Discussion,self,t3_1gi2vwa
Python,I was over my head switching to rust - an serious apology to the community,"**Notice: So**, i recently made this post (Highlighted Comment: https://www.reddit.com/r/Python/comments/1ghy7cl/comment/lv14fch/), and it was negatively received, what i'm trying to do is do the exact same thing is that post but not attempt to insult the r/python users and put the blame onto myself.

so a few days ago i would ultimately decide to switch to rust because of it's helpful community, and focus on memory safety and support and speed, what i didn't know that i wasn't advanced enough to do so, here's one of the reaons why

\- cargo.toml - cargo.toml was simply too annoying, instead of having a package manager like pip that simply installed the package like a linux package manager like dnf, cargo was a list of installed packages, i got confused over the packages i wanted and if they were even available.

on gnome builder there was [applictaion.rs](http://applictaion.rs) and [main.rs](http://main.rs) this angered me because i thought i only needed one, i ultimately messed up my code over this.

as for my behavior to the community i was being more of a jackass to you guys than i thought you were being to me, but i still have to give blame, you guys acted ignorant and a bit toxic but still, i take most of the blame here, i was being childish by insulting you guys, but by your vague behavior and lack of actual help on ways to improve my behavior against you made me angry at you guys, however the highlighted comment showed the error of my ways, this is how you should've reacted, still this is mostly my fault at the end of the day for acting like a brat.

rust was not for me and i charged too hard on using it, at the end of the day, ease of use and community support is the better option for me at least as i develop my skills further.

thank the guy who i highlighted above for showing me how i can respond more effectively to this.

as for the reception, i am weary how the community will respond to this, but actualy try to be helpful here and guide me on how to effectively apologize.",CallEnvironmental902,1ghzjlw,https://reddit.com/r/Python/comments/1ghzjlw/i_was_over_my_head_switching_to_rust_an_serious/,https://www.reddit.com/r/Python/comments/1ghzjlw/i_was_over_my_head_switching_to_rust_an_serious/,2024-11-02 15:54:34,1,0.67,1,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1ghzjlw
Python,Thoughts on increasing use of camel case in the python world,"Lately, I'm coming across [posts like these](https://x.com/clcoding/status/1852128165931470952) more and more, these are Python code snippets and examples but written in Javaesque coding style i.e. camelCase variables instead of snake_case - which is the preferred version of Pythonistas.

Doesn't the PEP8 also recommend the use of snake_case for both variables and function names, and PascalCase for classes? Then why do we see folks using their ugly camelCase in the python world?",pyeri,1ghvpe3,https://reddit.com/r/Python/comments/1ghvpe3/thoughts_on_increasing_use_of_camel_case_in_the/,https://www.reddit.com/r/Python/comments/1ghvpe3/thoughts_on_increasing_use_of_camel_case_in_the/,2024-11-02 12:50:53,0,0.42,0,0,16,0,0,False,False,True,False,False,Discussion,self,t3_1ghvpe3
Python,10 nooby python habits u gotta ditch,"Link: https://youtu.be/2ZqaRIZnAso

I'm testing out making YouTube videos,, if you have any comments or suggestions on what I can improve, please do let me know!
",ConfectionAvailable8,1ghq88n,https://reddit.com/r/Python/comments/1ghq88n/10_nooby_python_habits_u_gotta_ditch/,https://www.reddit.com/r/Python/comments/1ghq88n/10_nooby_python_habits_u_gotta_ditch/,2024-11-02 06:13:21,0,0.16,0,0,5,0,0,False,False,True,False,False,Tutorial,self,t3_1ghq88n
Python,I am looking for developers good in Manim/MoviePy or any other animation libraries,"I‚Äôm on the hunt for some developers who are good with Manim or MoviePy for a project I have in mind. If you‚Äôve got experience with either and want to chat about it, feel free to DM me!

Looking forward to hearing from you!

I have a notion doc specifying the objective. Let me know if anyone needs it. Basically its a job to convert data mentioned in the JSON (shapes,text) to animation",aitosumankolosky,1ghp6gu,https://reddit.com/r/Python/comments/1ghp6gu/i_am_looking_for_developers_good_in_manimmoviepy/,https://www.reddit.com/r/Python/comments/1ghp6gu/i_am_looking_for_developers_good_in_manimmoviepy/,2024-11-02 05:00:17,0,0.36,0,0,16,0,0,False,False,True,False,False,Meta,self,t3_1ghp6gu
Python,"I have finally released a new version for my package, Arrest 0.1.10","After many months of procrastination, I have finally managed to release version 0.1.10 of my package Arrest. 

**What it does**

It is a package that lets you declaratively write a REST service client, configured with the sets of resources, routes and methods you want to call, and provide Pydantic models for request and responses to automatically parse them during the HTTP calls. Arrest also provides retry mechanisms, exception handling, automatic code generation from the OpenAPI specification, and much more.

**Target audience**

Primarily backend developers working on communicating with multiple web services from a Python client. It can also be useful in a microservice architecture where you have to write API bindings for all the dependant sevices for another service.   
  
**Comparison**

There are packages that does similar things which I got to know about from this subreddit after my initial post. For example:

1. [flask-muck](https://github.com/dtiesling/flask-muck) by u/beef-runner
2. [django-rest-client](https://github.com/certego/django-rest-client) by u/16withScars

The key highlights of the new version are:

1. Support for arbitrary python types for request and response. These can be \`list\`, \`dict\`, \`dataclass\`, or \`pydantic.BaseModel\`, or anything that is JSON serializable.
2. Added custom hooks for handling different types of exceptions.
3. Revamped retry mechanism to make it more configurable and no implicit retries built-in that might create unpredictability.
4. Better support for OpenAPI specification and codegen by fixing naming conventions and imports.

There are many more,  you can check them out at [whats new](https://s-bose.github.io/arrest/whats-new/). Do check out the [docs](https://s-bose.github.io/arrest/) and [GitHub](https://github.com/s-bose/arrest), and if this sounds interesting to you, please do give it a try, and let me know in case you face any issue.

For those who might already be familiar with it and encountered any issues, I hope the new version fixes them for you. For new people, I'd love to know your thoughts and suggestions,  and thank you to everyone here in the Python community who showed their support and provided their feedbacks in my earlier posts!

P.S. I am also open to contributions, if you feel like you have some ideas that Arrest can benefit from, feel free to raise a PR!",s_basu,1ghjt23,https://reddit.com/r/Python/comments/1ghjt23/i_have_finally_released_a_new_version_for_my/,https://www.reddit.com/r/Python/comments/1ghjt23/i_have_finally_released_a_new_version_for_my/,2024-11-02 00:05:28,19,0.84,19,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1ghjt23
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1ghjow6,https://reddit.com/r/Python/comments/1ghjow6/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1ghjow6/saturday_daily_thread_resource_request_and/,2024-11-02 00:00:17,3,0.81,3,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1ghjow6
Python,State of the Art Python in 2024,"I was asked to write a short list of good python defaults at work. To align all teams. This is what I came up with. Do you agree?

1. Use uv for deps (and everything else)
2. Use ruff for formatting and linting
3. Support Python 3.9 (but use 3.13)
4. Use pyproject.toml for all tooling cfg
5. Use type hints (pyright for us)
6. Use pydantic for data classes
7. Use pytest instead of unittest
8. Use click instead of argparse
",awesomealchemy,1ghiln0,https://reddit.com/r/Python/comments/1ghiln0/state_of_the_art_python_in_2024/,https://www.reddit.com/r/Python/comments/1ghiln0/state_of_the_art_python_in_2024/,2024-11-01 23:09:40,609,0.96,609,0,186,0,0,False,False,True,False,False,Discussion,self,t3_1ghiln0
Python,Log4View: Log Visualization Tool,"First, an apology. I've posted this project here a few days ago. The project was showcasing an idea, but did not show anything substantial or interesting, and I had only invested a few hours into it. To make matters worse, I generated a post via ChatGPT, which in hindsight looked like total garbage, and was generally a dick move.

Second, about me. I'm T, a security researcher at Microsoft. A lot of my work revolves around identifying user behavior in our Azure cloud infrastructure. Naturally, this happens through mountains of logs, which I query on our platform. However, I always felt like viewing this data in the form of a boring gray table is a missed opportunity. I think many good insights can be gained from viewing bland data in creative ways. So, I came up with log4view as a single-evening project just to show it around my office.

Fast forward to now, it's Friday night and I've spent most of my weekend working on features and improvements. I think this is a really cool and fun project, and I would genuinely love to hear your thoughts and ideas.

So, third, my project.

**What Log4View Does**

Log4view is a tool for technical people who work with logs to view their data in a more visually stimulating way - in the hopes of bringing new insights and ideas. Log4view will generate up to 25 nodes per page, and a potentially endless number of pages total. This amount of nodes is hardcoded, but you can edit the variable which is *acceptable\_number\_of\_nodes\_in\_page*. Ideally you will work with up to a couple hundred logs, but if you choose to expand the above variable, the sky's the limit.

Log4view accepts a file path to your data, and a secondary key. The tool will then create main nodes made up of secondary keys, and sub-nodes of the main outer key of your data structure.

The output is a color coded collection of pages of network graphs, each featuring nodes and edges, and more data about each node on hovering your cursor over it.

**Target Audience**

My target audience is people who view mountains of logs as I do, and who try to glean insights from them. I can't even imagine how many professions this includes, but I reckon many in IT, Data Science, some Engineering, etc.

**Comparison**

I checked out a few other commercial tools which claim to be log visualizers, but the closest I've found is SolarWinds who create real-time view of logs with a few charts and colors.

This further emphasizes my point. Creative insights require creative views. I genuinely think the more creative ways you can view and think about your data, the better you'll understand it.

I hope I'm right.

Anyway, here's the link. Hope you like it, and if you don't, hope you're willing to share your thoughts with me :)

[https://github.com/Trivulzianus/log4view](https://github.com/Trivulzianus/log4view)",dvnci1452,1ghhcab,https://reddit.com/r/Python/comments/1ghhcab/log4view_log_visualization_tool/,https://www.reddit.com/r/Python/comments/1ghhcab/log4view_log_visualization_tool/,2024-11-01 22:10:22,14,0.82,14,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1ghhcab
Python,pg_mooncake: run python on your Postgres tables,"**What it does**

[pg\_mooncake](https://github.com/Mooncake-Labs/pg_mooncake)¬†brings a columnstore table to Postgres with DuckDb execution. These tables are written as Iceberg and Delta tables (parquet files + metadata) to your object store.

Query them outside of Postgres with DuckDB, Polars, Pandas, Spark directly without complex pipelines, stitching together ad-hoc files, or dataframe wangling.  


**Target audience**

Product engineers, data engineers, data scientist. 

  
**Comparison**

You can use psycopg2 / sqlalchemy today. But the approach here is fundamentally different. You're writing data to an s3 bucket. You can share that bucket to your data science, engineering, analyst team without giving them access to your Postgres. 

  
There are some Parquet exporters in Postgres (pg\_duckdb, pg\_parquet, pg\_analytics). pg\_mooncake actually exposes table semantics inside of Postgres (updates, deletes, transactions). And table semantics outside of Postgres (Iceberg/Delta). 

**Story time!**

I'm one of the founders of¬†[Mooncake Labs](https://mooncake.dev/). We are building the simple lakehouse without the complex pipelines / data engineering infra. 

Modern apps are built on Postgres. And we want to bring the python processing and analytics closer to this ecosystem. 

Postgres and Python are all you need.

",InternetFit7518,1ghgmmq,https://reddit.com/r/Python/comments/1ghgmmq/pg_mooncake_run_python_on_your_postgres_tables/,https://www.reddit.com/r/Python/comments/1ghgmmq/pg_mooncake_run_python_on_your_postgres_tables/,2024-11-01 21:37:13,21,0.87,21,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1ghgmmq
Python,Breaking apart jupyter scripts,"I have a set of notebooks (actually they are jupytext files). They are broken up into logical units and exchange data via the file system. I am building a processing script to run the notebooks in order and render the plotting notebook to html. 

This seems to work, but before i make this a production script i wanted to hear your thoughts. 

Previous i was using one large file, but that gets so unwieldy. I did like using papermill for parameter injection though. now i have to do that via config file. 

I have tried to break out parts of the script into functions in a module but that just seems to give the worst of both worlds: can‚Äôt easily modify code, still have to work with notebooks. 

How are you all handling this?",jjrreett,1ghgf4h,https://reddit.com/r/Python/comments/1ghgf4h/breaking_apart_jupyter_scripts/,https://www.reddit.com/r/Python/comments/1ghgf4h/breaking_apart_jupyter_scripts/,2024-11-01 21:28:14,0,0.42,0,0,28,0,0,False,False,True,False,False,Discussion,self,t3_1ghgf4h
Python,"PyCon US 2025 Site Launches, CFP Live!","## PyCon US 2025

We're excited to announce that the **PyCon US 2025** website *and* call for (talk) proposals are officially live! 

Please help us spread the word, and if you're interested in giving a talk [read the guidelines](https://us.pycon.org/2025/speaking/guidelines/) and submit one!
- **Blog**: &lt;https://pycon.blogspot.com/2024/11/pycon-us-2025-launches.html&gt;
- **PyCon Website**: https://us.pycon.org/2025",monorepo,1ghdnfr,https://reddit.com/r/Python/comments/1ghdnfr/pycon_us_2025_site_launches_cfp_live/,https://www.reddit.com/r/Python/comments/1ghdnfr/pycon_us_2025_site_launches_cfp_live/,2024-11-01 19:26:00,4,0.68,4,0,1,0,0,False,False,True,False,False,,self,t3_1ghdnfr
Python,CleanMail: a open source tool written with streamlit to get rid of all the cruft in your email,"TLDR: clean up your inbox quickly at¬†[CleanMail](https://cleanmail.bharatkalluri.com/) . Code is over at¬†[https://github.com/BharatKalluri/cleanmail](https://github.com/BharatKalluri/cleanmail)

  
**What it does**

Let's you bulk delete &amp; unsubscribe to emails grouped by sender. so that you can quickly clean up all the cruft from your email!

**Target audience**

Personal side project, I think people may find use in it

**Comparison**

Tidy mail exists, but unfortunately its last updated 5 years back and the website does not seem to work for me. I wanted a low maintenance / simple app.   


**Story time!**

I've started today morning with 1847 emails in my Gmail inbox today morning. After some preliminary analysis, I found that more than 70% of all my emails were marketing junk.

I searched around for some time and found that there are a lot of companies charging a pretty significant amount for something so straightforward.

So I wrote a open source email cleaning solution, it groups by sender ID and gives you an option to both unsubscribe and delete all emails from that sender email ID.

After doing all this, I was around 180 emails which I could quickly scan and Archive or Delete.

Please feel free to raise issues or share feedback!",disruptive_pickle,1gh7x39,https://reddit.com/r/Python/comments/1gh7x39/cleanmail_a_open_source_tool_written_with/,https://www.reddit.com/r/Python/comments/1gh7x39/cleanmail_a_open_source_tool_written_with/,2024-11-01 15:21:48,43,0.93,43,0,19,0,0,False,False,True,False,False,Showcase,self,t3_1gh7x39
Python,Best visualization library for clean SVG exports?,"I work for an organization where I will start to do some lightweight data analysis &amp; dataviz, with a workflow that means I make static charts then hand off a designer to be jazzed up in Adobe Illustrator.

Does anyone have thoughts on the best visualization library to use for this? What I'd like is something that A) allows me to create somewhat good looking charts off the bat and B) can export these charts in a clean SVG format, so that a designer can concentrate mostly on adding visual flair without spending a lot of time tidying up things first.

Any reason to recommend say Plotly, Seaborn, Altair, above others? Or something else entirely?",interexit,1gh5y83,https://reddit.com/r/Python/comments/1gh5y83/best_visualization_library_for_clean_svg_exports/,https://www.reddit.com/r/Python/comments/1gh5y83/best_visualization_library_for_clean_svg_exports/,2024-11-01 13:54:32,15,0.87,15,0,7,0,0,False,False,True,False,False,Discussion,self,t3_1gh5y83
Python,Implementing dashboard as a webpage in an enterprise setting,"Hi all, 

I‚Äôve been tasked with implementing a dashboard which will update monthly from a database which needs to show key analysis metrics, have user authentication, and ideally run super smooth. I have been looking at using libraries such as Django and combining it with plotting libraries but I‚Äôve only used Streamlit in the past which required no JavaScript or HTML knowledge. 

Are there any other solutions which would allow me to have greater control than Streamlit but without losing the ease and speed of deploying such dashboards? Extra points if the libraries are MIT licensed!",Traditional_Parking6,1gh0qde,https://reddit.com/r/Python/comments/1gh0qde/implementing_dashboard_as_a_webpage_in_an/,https://www.reddit.com/r/Python/comments/1gh0qde/implementing_dashboard_as_a_webpage_in_an/,2024-11-01 08:33:19,40,0.96,40,0,38,0,0,False,False,True,False,False,Discussion,self,t3_1gh0qde
Python,Incoming in matplotlib 3.10: Dark-mode diverging colormaps,"Three diverging colormaps have been added: ""berlin"", ""managua"", and ""vanimo"". They are dark-mode diverging colormaps, with minimum lightness at the center, and maximum at the extremes. These are taken from F. Crameri's Scientific colour maps version 8.0.1 (DOI: https://doi.org/10.5281/zenodo.1243862).

import numpy as np
import matplotlib.pyplot as plt

vals = np.linspace(-5, 5, 100)
x, y = np.meshgrid(vals, vals)
img = np.sin(x*y)

_, ax = plt.subplots(1, 3)
ax[0].imshow(img, cmap=plt.cm.berlin)
ax[1].imshow(img, cmap=plt.cm.managua)
ax[2].imshow(img, cmap=plt.cm.vanimo)

- https://matplotlib.org/devdocs/users/next_whats_new/diverging_colormaps.html
- https://github.com/matplotlib/matplotlib/pull/28587

Already available in Matplotlib v3.10.0rc1.

https://matplotlib.org/devdocs/_downloads/fae62e20036f0fb6ba139164b87c210e/diverging_colormaps-1.2x.png",Balance-,1gh094o,https://reddit.com/r/Python/comments/1gh094o/incoming_in_matplotlib_310_darkmode_diverging/,https://www.reddit.com/r/Python/comments/1gh094o/incoming_in_matplotlib_310_darkmode_diverging/,2024-11-01 07:53:30,21,0.94,21,0,3,0,0,False,False,True,False,False,News,self,t3_1gh094o
Python,PymuPDF licensing requirements for other dependencies,"I am exploring various tools and libraries for data extraction from documents like PDFs. One tool I've looked into is img2table, which has been effective at extracting tables and works as a wrapper around different OCR tools. However, I noticed that PyMuPDF is a requirement for img2table, and I‚Äôve read that if you build with PyMuPDF, you must make your source code open-source in line with its AGPL license. Does this requirement still apply if I use a project where PyMuPDF is a dependency, even if I don‚Äôt directly interact with the library myself?",impsanoos,1ggz3d3,https://reddit.com/r/Python/comments/1ggz3d3/pymupdf_licensing_requirements_for_other/,https://www.reddit.com/r/Python/comments/1ggz3d3/pymupdf_licensing_requirements_for_other/,2024-11-01 06:19:07,5,0.78,5,0,4,0,0,False,False,True,False,False,Discussion,self,t3_1ggz3d3
Python,File Path Validation Library,"# Where?

You can find it here:

* **Source** \- [FPV - GitHub](https://github.com/Voltaic314/File_Path_Validator)
* **PyPI** \- [FPV ¬∑ PyPI](https://pypi.org/project/file-path-validator/)



# What My Project Does

FPV is a file path validation and cleaning library that consolidates all the quirky file path rules from different operating systems and cloud storage providers. It's designed to help automate compliance with various platform-specific file naming rules, especially when working with cloud storage services or syncing data across multiple systems.



# Comparison

# Why not use OS-based utilities?

While some built-in OS libraries can validate or clean file paths, they don‚Äôt generally cover complex scenarios‚Äîlike cross-platform checks or cloud provider restrictions. FPV aims to address specific constraints unique to services like SharePoint, Box, OneDrive, and more.

# Can‚Äôt I just use regex or string manipulation?

Sure, but FPV organizes these rules into classes so that each supported platform has predefined validations and cleaning methods, saving you the time it would take to code all these restrictions individually. FPV can validate and clean file paths based on the platform‚Äôs unique restrictions, with modular classes for each service.



# Target Audience

FPV can be a handy tool for:

* Devs who automate file handling and processing across cloud platforms.
* People using Python scripts that require cross-platform file path generation and validation.
* Developers needing consistency across OS and cloud storage provider rules, particularly if they sync with Windows or SharePoint.

# 

Installation

    pip install file-path-validator



Here‚Äôs a quick example of how FPV is used:

    # example.py
    from FPV import FPV_Windows, FPV_MacOS, FPV_Linux, FPV_Dropbox, FPV_Egnyte, FPV_OneDrive, FPV_SharePoint, FPV_ShareFile
    
    # Example path with potential issues
    example_path = ""C:/ Broken/ **path/to||file . txt""
    
    # Creating a validator object for Windows
    FPVW = FPV_Windows(example_path, relative=True)
    
    # Original path
    print(""Original Path:"", FPVW.original_path)
    
    # Clean the path
    cleaned_path = FPVW.clean()
    print(""Cleaned Path:"", cleaned_path)
    
    # Validate the path
    try:
        FPVW.validate()
        print(""Path is valid!"")
    except ValueError as e:
        print(f""Validation Error: {e}"")
    
    # Auto-cleaning upon instantiation
    FPVW_auto_clean = FPV_Windows(example_path, auto_clean=True, relative=True)
    print(""Automatically Cleaned Path:"", FPVW_auto_clean.path)",MPGaming9000,1ggw9id,https://reddit.com/r/Python/comments/1ggw9id/file_path_validation_library/,https://www.reddit.com/r/Python/comments/1ggw9id/file_path_validation_library/,2024-11-01 03:12:20,10,0.82,10,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1ggw9id
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1ggsqvj,https://reddit.com/r/Python/comments/1ggsqvj/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1ggsqvj/friday_daily_thread_rpython_meta_and_freetalk/,2024-11-01 00:01:36,4,0.64,4,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1ggsqvj
Python,"Internal streamlit app expanding, whats next?","Hi all!

I work freelance as a Analytics Engineer. My role with one of my major clients has taken somewhat of a turn lately, as i have been building a couple of internal streamlit apps to automate some of their internal functions in the company. This is all fine and dandy, we have been hosting some on a local server, and in other cases i merely installed python on their PC and made them a quick shortcut that boots up the server.

  
They want to make some of these apps available to their international offices.

It is VERY low traffic (would go from about 5 daily users, to about 30-40 daily users. Each using the app for aproximately 1-2 hours a day, so some sort of serverless solution seems obvious.

So what do you think would be a suitable solution going forward?  
Deploy on some sort of cloud solution? (seem like you can host it in a serverless fashion which seems obvious given the low traffic.)  
Switch framework? (Taipy looks quite promising)  
Ditch the fullstack python idea and rebuild it with a proper seperate frontend? (my frontend development capeabilities are VERY limited.)

Something entirely different?

Thank you",Immediate_Face_8410,1ggp5h0,https://reddit.com/r/Python/comments/1ggp5h0/internal_streamlit_app_expanding_whats_next/,https://www.reddit.com/r/Python/comments/1ggp5h0/internal_streamlit_app_expanding_whats_next/,2024-10-31 21:09:14,57,0.91,57,0,22,0,0,False,False,True,False,False,Discussion,self,t3_1ggp5h0
Python,Bot Development - growth and engagement,"Hi, I am looking for bot developers interested in deploying discord bots to a server that mainly builds Python projects and solutions in a community with around 10k users. The idea is to boost and expand engagement while implementing new features, so you'll be part of the server transformation journey. If you do have the experience or you are just starting but believe that your portfolio can provide meaningful value, we can start discussing the details. 

just DM me to know more.",SJCHL0101,1ggp51w,https://reddit.com/r/Python/comments/1ggp51w/bot_development_growth_and_engagement/,https://www.reddit.com/r/Python/comments/1ggp51w/bot_development_growth_and_engagement/,2024-10-31 21:08:44,0,0.31,0,0,1,0,0,False,False,True,False,False,Discussion,self,t3_1ggp51w
Python,Support with Python Rich Write Library,"I'm trying to print streamable output using Rich. It work flawlessly with out the console.status, however console.status is cause the previous line to be overwritten.



Eg:   
Iterataion One Ouput,  
Hello

Iteration Two Output,

There.

  
Expectation,  
Iteration one output,  
Hello  
  
Iteration Two Ouput,

Hello There. 

  
Again this happens only if I introduce console.status, any suggestion. Sharing the following code.

    with console.status("""") as status:
        for chunk in ai.query_llm(user_input):
            console.print(f""{chunk.content}"", end="""", )
            sleep(0.1)
        console.print()
        sleep(0.1)",Mindless-Umpire-9395,1ggknpe,https://reddit.com/r/Python/comments/1ggknpe/support_with_python_rich_write_library/,https://www.reddit.com/r/Python/comments/1ggknpe/support_with_python_rich_write_library/,2024-10-31 17:55:19,2,0.56,2,0,1,0,0,False,False,True,False,False,Discussion,self,t3_1ggknpe
Python,Scrunkly - Stupidly simple script runner,"# Where?

You can find it here:

* Source -¬†[nokusukun/scrunkly](https://github.com/nokusukun/scrunkly)
* PyPI -¬†[scrunkly ¬∑ PyPI](https://pypi.org/project/scrunkly/)

**What My Project Does**  
Scrunkly is a zero dependency script runner that fits my needs for a script runner.

# Comparison

**pyproject.toml**  
I use this for stuff like needing to deploy and ssh so a pyproject.toml isn't as portable.

**Why not use X?**  
I can't add features to it that caters to my needs.

# Target Audience

We've been using it in production for the startups that I worked with for quite some time.

**Example**

    # run.py
    import scrunkly
    from scrunkly import with_env, py
    
    dev_env = with_env({
        ""DEBUG"": ""1"",
        ""MONGO_DB_URI"": ""mongodb://localhost:27017"",
        ""MESSAGING_URL"": ""mongodb://localhost:27017"",
        ""MONGO_DB_NAME"": ""test"",
        ""AWS_REGION"": ""ap-southeast-2"",
        ""AWS_S3_BUCKET_NAME"": ""test-..."",
        ""AWS_ACCESS_KEY_ID"": ""AKI..."",  # these only have access to test buckets
        ""AWS_SECRET_ACCESS_KEY"": ""eyFi7..."",
    })
    
    prod_env = with_env({
        ""DEBUG"": ""0"",
        ""MONGO_DB_NAME"": ""prod"",
        ""AWS_REGION"": ""ap-southeast-2"",
        ""AWS_S3_BUCKET_NAME"": ""prod-..."",
    })
    
    scrunkly.scripts({
        ""api:dev"": [dev_env, f""""""{py} -m watchfiles --filter python ""uvicorn api.api:app --port 8001"" .""""""],
        ""api:prod"": [prod_env, f""{py} -m uvicorn api.api:app --host  --port 8080""],
        ""reqs:generate"": f""{py} -m  pipreqs.pipreqs . --force"",
        ""worker"": f""{py} ./run_worker.py"",
        ""install:dev"": f""{py} -m pip install -r dev-requirements.txt"",
        ""install:app"": f""{py} -m pip install -r requirements.txt"",
        ""load-data"": f""{py} ./scripts/part_data_import.py --force"",
        ""install"": [""install:dev"", ""install:app"", ""load-data""],
        ""api:compose:rebuild"": ""docker-compose up -d --no-deps --build api"",
        ""worker:compose:rebuild"": ""docker-compose up -d --no-deps --build worker"",
        ""up:prod"": ""docker-compose up -d --scale worker=10"",
        ""up:prod:full"": ""docker-compose up -d --scale worker=10 --build"",
    })

Then you can run it with

    scrunkly api:dev

or if for some reason you don't have scripts installed

    python3 run.py api:dev",Ejaculeat,1ggi2el,https://reddit.com/r/Python/comments/1ggi2el/scrunkly_stupidly_simple_script_runner/,https://www.reddit.com/r/Python/comments/1ggi2el/scrunkly_stupidly_simple_script_runner/,2024-10-31 16:03:18,19,0.91,19,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1ggi2el
Python,Tutorial: Versioning for APIs with Cadwyn using Python &amp; FastAPI,"You've probably heard of Cadwyn before, and I know it's been mentioned here previously but this video has the creator, Stanislav Zmiev, giving a full overview and demo of how to implement it for advanced API versioning (like DB migrations!) in Python/FastAPI projects:

Video: [https://youtu.be/9-WPvMsTjj8](https://youtu.be/9-WPvMsTjj8)  
Cadwyn: [https://github.com/zmievsa/cadwyn](https://github.com/zmievsa/cadwyn)",itsemdee,1gghbg7,https://reddit.com/r/Python/comments/1gghbg7/tutorial_versioning_for_apis_with_cadwyn_using/,https://www.reddit.com/r/Python/comments/1gghbg7/tutorial_versioning_for_apis_with_cadwyn_using/,2024-10-31 15:31:14,7,0.71,7,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1gghbg7
Python,Generate programming language files from YAML,"Hello party people,

a while ago I started a project called confluent to generate code for different programming languages based on a language neutral YAML configuration to make updating constants-files for different languages easier. As time moved on, I found some flaws in how I implemented this project (especially the name bugged me). So today I'm proud, to finally release it under its new name: [ninja-bear](https://pypi.org/project/ninja-bear) ü•∑üêª

It uses the same configuration principles but adds more flexibility for developers to add their own stuff by offering a plugin-system.

Lets say you only want to generate files for C and TypeScript, no problem. Install ninja-bear, ninja-bear-language-c and ninja-bear-language-typescript and you're ready to go.

Here's a short demo on how to use it: [https://youtu.be/bya\_exGrS68](https://youtu.be/bya_exGrS68)

Let me know what you think :)",MeLlamoWhoan,1ggepxe,https://reddit.com/r/Python/comments/1ggepxe/generate_programming_language_files_from_yaml/,https://www.reddit.com/r/Python/comments/1ggepxe/generate_programming_language_files_from_yaml/,2024-10-31 13:37:36,13,0.74,13,0,8,0,0,False,False,True,False,False,News,self,t3_1ggepxe
Python,PyExifTool problems,"Hi I'm trying to remove metadata from a file in python with PyExifTool. I'm doing an execute() with needed parameters to remove metadata like the original tool ""exiftool"". 

In windows, for example, to remove metadata:

exiftool -all= -overwrite-original /path/to/file

  
So I'm doing this function on python:

    def remove_metadata_file(filepath):
    ¬† ¬† try:
    ¬† ¬† ¬† ¬† 
    ¬† ¬† ¬† ¬† with exiftool.ExifTool() as et:
    ¬† ¬† ¬† ¬† ¬† ¬† result = et.execute(""-all="", ""-overwrite_original"", filepath)
    ¬† ¬† ¬† ¬† ¬† ¬† 
    ¬† ¬† ¬† ¬† ¬† ¬† if ""0 image files updated"" in result:
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† return f""Couldn't have removed metadata from file: {os.path.basename(filepath)}""
    ¬† ¬† ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† return f""File: {os.path.basename(filepath)} metadata has been removed correctly""
    ¬† ¬† except Exception as e:
    ¬† ¬† ¬† ¬† messagebox.showerror(""Error"", f""Error on removing metadata from a file: {e}"")
    
    And I've done a lot of testings printing results and filepath, and is always:
    
    0 image files updated
      1 image files unchanged
    
    I tried to delete '=' on ""-all="" but this command just prints all the metadata from file. ",Putrid-Rub6187,1ggcq7g,https://reddit.com/r/Python/comments/1ggcq7g/pyexiftool_problems/,https://www.reddit.com/r/Python/comments/1ggcq7g/pyexiftool_problems/,2024-10-31 11:58:20,3,0.62,3,0,8,0,0,False,False,True,False,False,Discussion,self,t3_1ggcq7g
Python,Running a million empty tests,"I had an interesting experience with trying to run a million empty tests. It showed me some things about how Python works that were not obvious to me before.

https://kodare.net/2024/10/31/a-million-tests.html

",kankyo,1gg8gdc,https://reddit.com/r/Python/comments/1gg8gdc/running_a_million_empty_tests/,https://www.reddit.com/r/Python/comments/1gg8gdc/running_a_million_empty_tests/,2024-10-31 06:50:18,0,0.32,0,0,2,0,0,False,False,True,False,False,Resource,self,t3_1gg8gdc
Python,Seeking Advice on Best Stack for UI in a Multi-Tenant Web App,"Hey everyone,

I'm a backend/data engineer with 10 years of experience, and I'm hitting a roadblock with the UI for a multi-tenant web app I‚Äôm building. My client isn‚Äôt satisfied with the current Streamlit-based UI, even after adding custom React components.

The backend is solid‚ÄîI‚Äôve set up all the necessary queries and table schemas, and I know exactly how the visuals should look. The app is designed to allow admins to manage CRUD operations for users and metrics, with the ability to view all users' data, while individual users can only see their own information. For authentication, I'm using AWS and Cognito to handle login and user management.

I recently came across Django/react templates, which seem like a great fit for my needs, but I‚Äôm finding component libraries a bit overwhelming. I also checked out [Reflex.dev](http://Reflex.dev), though it feels somewhat clunky.

At this point, I'm open to simplifying the stack, even if that means dropping multi-tenancy. I‚Äôd really appreciate any recommendations on an easy way to layer a UI over my database and queries, particularly one that works well with AWS and Cognito.

  
Thanks in advance. ",boston101,1gg6mjm,https://reddit.com/r/Python/comments/1gg6mjm/seeking_advice_on_best_stack_for_ui_in_a/,https://www.reddit.com/r/Python/comments/1gg6mjm/seeking_advice_on_best_stack_for_ui_in_a/,2024-10-31 04:40:49,22,0.86,22,0,35,0,0,False,False,True,False,False,Discussion,self,t3_1gg6mjm
Python,How about a GUI based on Rust's Iced for your Python projects,"I've just released version 0.3.1 of IcedPyGui.  Rust bindings using pyo3 and built with maturin.

IPG has many widgets now and more will be added each month.  If you have ever used dearpygui, you'll find the syntax similar.

There are a ton of examples at [https://github.com/icedpygui/IcedPyGui-Python-Examples](https://github.com/icedpygui/IcedPyGui-Python-Examples)

These examples will easily get you started.

The rust repository is [https://github.com/icedpygui/IcedPyGui](https://github.com/icedpygui/IcedPyGui)

The Iced respository is [https://github.com/iced-rs/iced](https://github.com/iced-rs/iced)",cray5252,1gg2har,https://reddit.com/r/Python/comments/1gg2har/how_about_a_gui_based_on_rusts_iced_for_your/,https://www.reddit.com/r/Python/comments/1gg2har/how_about_a_gui_based_on_rusts_iced_for_your/,2024-10-31 00:58:04,54,0.9,54,0,11,0,0,False,False,True,False,False,News,self,t3_1gg2har
Python,Structural Pattern Matching in Python,"Hello, I have recently published a new book that focuses on structural pattern matching in Python. You can find it at [https://a.co/d/95C84J6](https://a.co/d/95C84J6). If you find this book interesting and would like me to arrange a free copy, please send me a direct message. ",life_michael_,1gg27dt,https://reddit.com/r/Python/comments/1gg27dt/structural_pattern_matching_in_python/,https://www.reddit.com/r/Python/comments/1gg27dt/structural_pattern_matching_in_python/,2024-10-31 00:44:30,0,0.43,0,0,7,0,0,False,False,True,False,False,News,self,t3_1gg27dt
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1gg1913,https://reddit.com/r/Python/comments/1gg1913/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1gg1913/thursday_daily_thread_python_careers_courses_and/,2024-10-31 00:00:08,3,0.81,3,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gg1913
Python,Video Sub Extractor - A program for extracting hard-coded subtitles from a video.,"[Link](https://github.com/voun7/Video_Sub_Extractor)

**What My Project Does**

This program make it easy to extract hard-coded subtitles from a video. This program uses OpenCV to extract the images from the video, then an OCR to extract the text from the images. The extracted texts are then processed and used to generate a subtitle file.

**Target Audience**

I'm a huge fan of Chinese anime and I watch a lot that usually comes with just hard-coded Chinese subtitles. This program will be useful for anyone with similar interest. Several languages are supported.

**Comparison**

Before writing this program  I would use a mix of different software programs to extract the images from the video, then extract the text from the images and finally generate a subtitle file which I later translate to English using [this](https://github.com/voun7/Subtitle_Translator).

This usually took a lot of time, this program combines all this steps into one and is very fast.  
I came across a similar program some years back, but it was mostly in Chinese, I didn't like the GUI and source code was difficult for me at that time to completely understand. The processing of the extracted text in this program was something that I came up with and I consider kind of ingenious. It's also a lot lighter.

Any feedback will be greatly appreciated.",1victorn,1gfyew8,https://reddit.com/r/Python/comments/1gfyew8/video_sub_extractor_a_program_for_extracting/,https://www.reddit.com/r/Python/comments/1gfyew8/video_sub_extractor_a_program_for_extracting/,2024-10-30 21:53:35,4,0.65,4,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1gfyew8
Python,What do you think about module-level descriptors?,"Imagine if variables declared in the module's scope could access their own name, and on top of that, the parent module as well. Do you think it would be a neat concept?",RiP_Nd_tear,1gfuj60,https://reddit.com/r/Python/comments/1gfuj60/what_do_you_think_about_modulelevel_descriptors/,https://www.reddit.com/r/Python/comments/1gfuj60/what_do_you_think_about_modulelevel_descriptors/,2024-10-30 19:07:33,0,0.39,0,0,18,0,0,False,False,True,False,False,Discussion,self,t3_1gfuj60
Python,A new Streamlit online editor (powered by WebAssembly) ,"Hey, r/python!

I'd like to show you what I've been working on for the past month: [an online Streamlit editor.](https://editor.ploomber.io) It allows you to develop and preview Streamlit apps in the browser using WebAssembly (this makes it cheap to host since the heavy computations happen in the client!)

**What my project does:** allows you to develop and preview Streamlit apps in the browser

**Target audience:** Streamlit users

**Comparison:** Runs entirely on the browser, no need to install Streamlit on your local machine, and you can easily share your apps with someone else.

It contains a bunch of features to make development faster:

1. Prompting a model to generate the initial code
2. Select code and prompt a model to edit it (similar to Cursor)
3. In-app chat to ask Streamlit and Python questions

Here are a few things I'd like to add:

1. Better integration between the chat and the editor (similar to the Apply feature in Cursor)
2. Debugger: combining the source code and information about existing variables to suggest fixes when the app breaks

If you're curious about the stack:

1. Built on [Remix](https://github.com/remix-run/remix) (for server side-rendering)
2. A [FastAPI](https://github.com/fastapi) to handle AI requests and database operations (I could do this with JS, but I have a lot more experience with Python)
3. A Postgres database
4. NGINX as a reverse proxy

Check it out here: [https://editor.ploomber.io](https://editor.ploomber.io)

Sample app: [https://editor.ploomber.io/editor/nyc-map-with-selection-46e1](https://editor.ploomber.io/editor/nyc-map-with-selection-46e1)

*Note:* the app is rate-limited to prevent a huge OpenAI bill

I'd love to hear your feedback!",ploomber-io,1gftest,https://reddit.com/r/Python/comments/1gftest/a_new_streamlit_online_editor_powered_by/,https://www.reddit.com/r/Python/comments/1gftest/a_new_streamlit_online_editor_powered_by/,2024-10-30 18:21:10,26,0.82,26,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gftest
Python,"A huge list of all PyCon deep dives (a.k.a. ""Tutorials"") grouped by year and ordered by view count","Hi again! As a part of Tech Talks Weekly newsletter, I've put together a huge compilation of PyCon tutorials.

PyCon introduced a longer talk format (usually &gt;2h) since 2020 that allows for deep dives into specific topics. They call it ‚ÄúTutorials‚Äù. I have to admit‚ÄîI love this format and the quality of the talks, so I put together a compilation of all of those published so far. I grouped them by year and ordered by view count for your convenience.

**Here's the top 10:**

1. [**""Tutorials - Matt Harrison: Getting Started with Polars""**](https://substack.com/redirect/6d2b9a90-b918-43d6-aa54-744fb8d83d3c?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+15k views** ‚∏± 02 Jun 2023 ‚∏± 02h 14m 28s
2. [**""Tutorials - Felipe, Amanda:Building Your First API with Django and Django Rest Framework""**](https://substack.com/redirect/663c701f-a28e-451b-8685-58fc5c40595d?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+900 views** ‚∏± 28 Jun 2024 ‚∏± 02h 54m 17s
3. [**""Tutorial: Keith Galli - Natural Language Processing (NLP) in Python - From Zero to Hero""**](https://substack.com/redirect/b5d6cac6-0295-472e-8974-9399c5abb7a1?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+43k views** ‚∏± 29 Apr 2020 ‚∏± 01h 39m 23s
4. [**""Tutorials - Trey Hunner: Intro to Python for Brand New Programmers""**](https://substack.com/redirect/960f0827-97b8-4f29-90b8-378256070c26?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+4k views** ‚∏± 02 Jun 2023 ‚∏± 02h 16m 41s
5. [**""Tutorials - Mike M√ºller: The How and Why of Object-oriented Programming in Python""**](https://substack.com/redirect/9d235d82-1b4e-4f96-902e-99a646322db5?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+3k views** ‚∏± 02 Jun 2023 ‚∏± 02h 45m 34s
6. [**""Tutorial: Santiago Basulto - Python Concurrency: from beginner to pro""**](https://substack.com/redirect/c29b02f9-ff4d-48fa-af1d-7a18bc67acf7?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+32k views** ‚∏± 06 May 2020 ‚∏± 02h 57m 13s
7. [**""Tutorial: Kimberly Fessel - It's Officially Legal so Let's Scrape the Web""**](https://substack.com/redirect/2da664ec-90b6-4808-a778-8c59ac919f75?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+12k views** ‚∏± 29 Apr 2020 ‚∏± 02h 46m 26s
8. [**""Tutorials - Sebastian Raschka: The Fundamentals of Modern Deep Learning with PyTorch""**](https://substack.com/redirect/5f2a25a0-76a5-42b6-8289-9b4a67da6fae?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+2k views** ‚∏± 28 Jun 2024 ‚∏± 02h 59m 32s
9. [**""Tutorials - Jose Haro Peralta: Fundamentals of API security with Python""**](https://substack.com/redirect/a26af2e9-962e-4d20-8cee-555ba25795f5?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+900 views** ‚∏± 28 Jun 2024 ‚∏± 02h 33m 43s
10. [**""Tutorials - Reuven M. Lerner: Comprehending comprehensions""**](https://substack.com/redirect/df779af7-84f9-41b5-8b6d-8477e2024c3d?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ‚∏± **+6k views** ‚∏± 02 Jun 2023 ‚∏± 02h 17m 33s

You can find the full compilation here: [https://www.techtalksweekly.io/p/ttw-extra-8-pycon-deep-dives-aka](https://www.techtalksweekly.io/p/ttw-extra-8-pycon-deep-dives-aka)

Let me know what you think!",TechTalksWeekly,1gftc68,https://reddit.com/r/Python/comments/1gftc68/a_huge_list_of_all_pycon_deep_dives_aka_tutorials/,https://www.reddit.com/r/Python/comments/1gftc68/a_huge_list_of_all_pycon_deep_dives_aka_tutorials/,2024-10-30 18:18:09,2,0.76,2,0,1,0,0,False,False,True,False,False,Resource,self,t3_1gftc68
Python,Just made a quick script for multi-launching programs!,"# What my project does

[Desktop Screenshot](https://imgur.com/a/shortcut-launcher-showcase-h9WzDwU)

I wanted to organize my desktop but wanted a shortcut so I can quickly launch my minecraft servers. Ended up making a quick (and lightweight!) script that can read the dirlist from a directory and display it to quickly launch any one of them!

[Window screenshot](https://imgur.com/a/8Lv2jQ1)

The script should be cross compatible atleast across Windows/Linux/Mac, tho I didnt test it on Linux/Mac.

This window is pretty customizable according to me. You can change the font and title of the GUI title and it shows any file put in the folder that it is told to look into!

You can change these configs in the script itself so that it doesnt have to load another JSON (or similar) file to cut loading times.

# Target audience

You can sorta say it is a toy, I mean I dont see any prod use here, but it can also be a powerful tool for those who like to organize their desktops and not make it a clutter!

It is also REALLY lightweight and fast, so this little tool can be used for power users as well.

# Comparision

I couldnt find any software to compare it to, so theres that ü§∑‚Äç‚ôÄÔ∏è



You can download the script [from here](https://github.com/KavyanshKhaitan2/Shortcut-Launcher).

Feel free to ask me any question or suggestion in the comments!",KavyanshKhaitan,1gft9ao,https://reddit.com/r/Python/comments/1gft9ao/just_made_a_quick_script_for_multilaunching/,https://www.reddit.com/r/Python/comments/1gft9ao/just_made_a_quick_script_for_multilaunching/,2024-10-30 18:14:45,3,0.62,3,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1gft9ao
Python,"Quick quiz on your knowledge
","Quick quiz what is the output of this code?

    numbers = [0,1,2,3,4,5,6,7,8,9]
    numbers_copy = numbers
    numbers_copy[1] = 2
    print(numbers[1])",Bomlerequin,1gfs0ee,https://reddit.com/r/Python/comments/1gfs0ee/quick_quiz_on_your_knowledge/,https://www.reddit.com/r/Python/comments/1gfs0ee/quick_quiz_on_your_knowledge/,2024-10-30 17:23:16,0,0.14,0,0,4,0,0,False,False,True,False,False,Discussion,self,t3_1gfs0ee
Python,Exploring Solvable and Unsolvable Equations with SymPy,"As applied scientists, we learn to ""solve"" y = x¬≤ and get x = ¬±‚àöy. But we're never taught that you can't solve y = x ‚àíc sin(x) and get a nice equation. That's always bugged me.

To really understand closed-form solvability, you need advance mathematics (e.g. Galois theory). Instead of that, I used SymPy to search for unsolvable equations.

What surprised me:

* Kepler‚Äôs Equation, y = x ‚àíc sin(x), is wonderfully simple.
* Lambert‚Äôs W function is invaluable when your model includes exp or log (but not both).
* SymPy is excellent but may not match WolframAlpha in some cases.
* Mixing trigonometric functions with other terms frequently prevents closed-form solutions.
* When closed-form solutions remain out of reach, we can rely on plotting and numerical methods.

I've created an open-source¬†[GitHub repo](https://github.com/CarlKCarlK/unsolvable) with full Python code and Jupyter notebooks. The project:

* Shows how to use Jupyter to create and display markdown tables containing equations.
* Includes a link to a free, no paywall article that can't be included directly in r/ Python.

p.s. Last year, I presented a similar project at PyData Seattle. It explained Newtonian Physics via SymPy. The [video of that talk](https://www.youtube.com/watch?v=52n2qKgwW_Q) became the 2nd most popular of the conference.",carlk22,1gfpycw,https://reddit.com/r/Python/comments/1gfpycw/exploring_solvable_and_unsolvable_equations_with/,https://www.reddit.com/r/Python/comments/1gfpycw/exploring_solvable_and_unsolvable_equations_with/,2024-10-30 15:57:41,10,1.0,10,0,2,0,0,False,False,True,False,False,Tutorial,self,t3_1gfpycw
Python,Can't Create a 1-Page PDF from HTML,"Here‚Äôs a draft for your Reddit post:



\---



\*\*Title:\*\* Can't Create a 1-Page PDF from HTML



I'm working on a Python script that generates an HTML file called \`index\_embedded.html\`. When I open this file in any browser and print it, it fits perfectly on one page. However, I need the script to generate a PDF directly, and I haven‚Äôt been able to get it to output a single-page PDF.



Here‚Äôs my latest attempt:



`import subprocess`



`def print_html(html_file, output_pdf, browser='edge'):`

`# Path to the Chrome or Edge executable`

`if browser == 'chrome':`

`browser_path = ""C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe""`

`elif browser == 'edge':`

`browser_path = ""C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe""`

`else:`

`raise ValueError(""Unsupported browser. Use 'chrome' or 'edge'."")`



`# Command to print to PDF using Chrome or Edge, with options to remove headers and footers`

`try:`

`subprocess.run([browser_path, '--headless', '--disable-gpu', '--no-pdf-header-footer', '--print-to-pdf=' + output_pdf, '--paper-size=A4',`

`'--margin-top=0', '--margin-bottom=0',`

`'--margin-left=0', '--margin-right=0', '--scale=1', html_file], check=True)`

`print(f""HTML file converted to PDF at: {output_pdf}"")`

`except subprocess.CalledProcessError as e:`

`print(f""Error generating PDF: {e}"")`

\`\`\`



However, this code produces a two-page PDF instead of a single page. Any suggestions on how to fix this? Thanks for the help!",Fair_Assistant_5602,1gfpmvg,https://reddit.com/r/Python/comments/1gfpmvg/cant_create_a_1page_pdf_from_html/,https://www.reddit.com/r/Python/comments/1gfpmvg/cant_create_a_1page_pdf_from_html/,2024-10-30 15:44:19,0,0.18,0,0,4,0,0,False,False,True,False,False,Discussion,self,t3_1gfpmvg
Python,Best gui for local client app? ,"I'm writing an application which is local. No server. I'm using python and I'm wanting to know people's opinions on the best gui to use. 

So far I've used tkinter but it feels clunky and heavy, like it's from the early 2000s. 

Can anyone recommend something better for modern looking stuff? Maybe I'm using tkinter wrong? 

Any advice would be appreciated. ",robbo2020a,1gfopgm,https://reddit.com/r/Python/comments/1gfopgm/best_gui_for_local_client_app/,https://www.reddit.com/r/Python/comments/1gfopgm/best_gui_for_local_client_app/,2024-10-30 15:05:11,159,0.96,159,0,84,0,0,False,False,True,False,False,Discussion,self,t3_1gfopgm
Python,futurepool - async/await worker pool,"# What My Project Does

FuturePool is a package that introduce known concept of multiprocessing Pool to the async/await world. It allows for easy translation from multiprocessing to async/await, while keeping the core principle - specified number of workers. FuturePool allows for more flexible usage by providing starimap/starimap\_unordered.

FuturePool was created to handle web scrapping, where in order to not overwhelm the website with connections and comply with website requirements, a specified number of workers was used. FuturePool was extended to handle generic scenarios and published on PyPi.

# Target Audience

It's designed for anyone working with asynchronous programming with additional requirements on number of simultaneous connections/actions. FuturePool gives known interface from multiprocessing. Pool and extends it even more for better developer experience.

# License

MIT

# Comparison

Example translation from multiprocessing to FuturePool

    # multiprocessing
    from multiprocessing import Pool
    from time import sleep
    
    def pool_fn(i):
        sleep(i)
        return i
    
    with Pool(2) as p:
        result = p.map(pool_fn, range(10))

    # FuturePool
    from futurepool import FuturePool
    from asyncio import sleep
    
    async def async_pool_fn(i):
        await sleep(i)
        return i
    
    async with FuturePool(2) as fp:
        result = await fp.map(async_pool_fn, range(10))

# Links

Docs: [https://MichalKarol.github.io/futurepool/](https://MichalKarol.github.io/futurepool/)

PyPi: [https://pypi.org/project/futurepool/](https://pypi.org/project/futurepool/)

GitHub: [https://github.com/MichalKarol/futurepool](https://github.com/MichalKarol/futurepool)

\---

Looking forward to all comments and improvements. Thanks!",mackarr,1gfmvis,https://reddit.com/r/Python/comments/1gfmvis/futurepool_asyncawait_worker_pool/,https://www.reddit.com/r/Python/comments/1gfmvis/futurepool_asyncawait_worker_pool/,2024-10-30 13:44:58,28,0.91,28,0,13,0,0,False,False,True,False,False,Showcase,self,t3_1gfmvis
Python,Cappa v0.24.0: A declarative command line parsing library,"[Docs](https://cappa.readthedocs.io/) | [Github](https://github.com/DanCardin/cappa) | [Comparison/justification vs argparse/click/typer/tyro/clipstick](https://cappa.readthedocs.io/en/latest/comparison.html)

At a high level, the library allows one to declaratively describe their CLI shape using types/annotations and then flexibly select between argparse-like and click-like execution modes.

I posted about this once, roughly a year ago while the library was in its relative infancy. Since then highlights features include:

* Its own argument parser (previously relied on argparse, but still **has** an optional argparse backend)
* Support for most dataclass-like libraries (dataclasses, attrs, pydantic 1/2, msgspec)
* Dependency injection system
* Colored, theme-able output/helptext (powered by rich)
* Automatic (dynamic) shell completion generation
* Async support
* Mutual exclusivity
* Function based commands
* Method based subcommands
* Generally improved type inference of more complex nested type annotations
* Sphinx plugin (to render --help output)

I'm happy to answer questions that anyone might have! Thanks!",DanCardin,1gflw8o,https://reddit.com/r/Python/comments/1gflw8o/cappa_v0240_a_declarative_command_line_parsing/,https://www.reddit.com/r/Python/comments/1gflw8o/cappa_v0240_a_declarative_command_line_parsing/,2024-10-30 12:58:15,29,0.92,29,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1gflw8o
Python,"Wimsey- lightweight, flexible data contracts for Polars, Pandas, Dask &amp; Modin","**What My Project Does**

I work in data and absolutely freaking love data contracts - they've solved me so many headaches in the past by just adding the simple step of checking data matches expectations before progressing with any additional logic.

I've used great expectations a lot in the past, and it's an absolutely awesome project, but it's pretty hefty, and I often feel likes it's fighting me when I \*just want to carry out tests in process\* rather than making use of it's GUI and running it on a server full-time.

So I started a project called Wimsey, it's based on top of Narwhals (which is an insanely cool project you should definitely check out before mine) meaning it has minimal overheads and can carry out required tests in whichever dataframe library you're already using.

**Target Audience**

It's designed for anyone working with data, especially users of dataframe libraries like Polars, Modin, Dask or similary where native support doesn't exist yet in many test frameworks.

I think data contracts are especially handy for a regular running data pipeline, where you want some guarantees on the data.

**Comparison**

The most direct comparisons would be soda-core or great-expectations, they're both great libraries and bring a lot of functionality to the table. Wimsey is notably a lot smaller (partly because it's very new, but also by design) - my goal for it to be something like what DLT is to Airbyte, where there's less functionality on offer, but things are a lot simpler, and easy to run in a python job.

**Link**

[https://github.com/benrutter/wimsey](https://github.com/benrutter/wimsey)",houseofleft,1gfju1e,https://reddit.com/r/Python/comments/1gfju1e/wimsey_lightweight_flexible_data_contracts_for/,https://www.reddit.com/r/Python/comments/1gfju1e/wimsey_lightweight_flexible_data_contracts_for/,2024-10-30 11:01:56,43,0.84,43,0,21,0,0,False,False,True,False,False,Showcase,self,t3_1gfju1e
Python,BLE Connectivity Testing script using python (source code available),"A BLE Connectivity Test script allows developers to¬†**test the connection stability of a BLE device** by performing repeated connection and disconnection attempts. Finally it logs the result on the screen.   
details of the script [https://www.bleuio.com/blog/ble-connectivity-test-tool-using-bleuio/](https://www.bleuio.com/blog/ble-connectivity-test-tool-using-bleuio/)",bleuio,1gfjila,https://reddit.com/r/Python/comments/1gfjila/ble_connectivity_testing_script_using_python/,https://www.reddit.com/r/Python/comments/1gfjila/ble_connectivity_testing_script_using_python/,2024-10-30 10:40:37,5,0.86,5,0,0,0,0,False,False,True,False,False,Resource,self,t3_1gfjila
Python,Package for encrypting SQLite DB,"Hi guys...... I working on a python + Qt application using sqlite database and would like to encrypt this database file

I've seen pysqlcipher and sqlcipher but all these I'm having issues installing the package its failing to buld even after installing c++ build tools and windows SDK still failing to build the package

any other module that works similar to sqlcipher that works well with peewee ORM as well",Cod3Blaze,1gfj3cg,https://reddit.com/r/Python/comments/1gfj3cg/package_for_encrypting_sqlite_db/,https://www.reddit.com/r/Python/comments/1gfj3cg/package_for_encrypting_sqlite_db/,2024-10-30 10:12:26,0,0.31,0,0,27,0,0,False,False,True,False,False,Discussion,self,t3_1gfj3cg
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1gf9e74,https://reddit.com/r/Python/comments/1gf9e74/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1gf9e74/wednesday_daily_thread_beginner_questions/,2024-10-30 00:00:09,5,0.79,5,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gf9e74
Python,Simple GUI directory contents extraction for chatbot submission,"* **What My Project Does :**

A simple GUI tool that extracts a given directory structure and the contents of all its files then prints everything in an organized textbox + in an optional .txt file. 

I made it to lazily submit entire projects to ChatGPT and let it ""understand"" their structure quickly.

* **Target Audience** 

Anyone using chatgpt (or any llm chatbot) for writing or debugging code

* **Comparison** 

There are probably better lightweight alternatives that I don't know about but this might be an easy to use alternative 



Link to the project : 

[https://github.com/SeidSmatti/iziSajra](https://github.com/SeidSmatti/iziSajra)",sMASS_,1gey27a,https://reddit.com/r/Python/comments/1gey27a/simple_gui_directory_contents_extraction_for/,https://www.reddit.com/r/Python/comments/1gey27a/simple_gui_directory_contents_extraction_for/,2024-10-29 15:58:08,135,0.81,135,0,15,0,0,False,False,True,False,False,Showcase,self,t3_1gey27a
Python,PyBay 2024 conference talk videos are now online!,"You can view all the PyBay 2024 (the San Francisco Bay Area Python conference) talks here: https://www.youtube.com/playlist?list=PL85KuAjbN_gvx5b_BgLVcKfccnlZAVPMk

As a reminder, https://pyvideo.org is a large index of Python-related conference talks from many regional PyCons.",AlSweigart,1gexoow,https://reddit.com/r/Python/comments/1gexoow/pybay_2024_conference_talk_videos_are_now_online/,https://www.reddit.com/r/Python/comments/1gexoow/pybay_2024_conference_talk_videos_are_now_online/,2024-10-29 15:42:19,53,0.94,53,0,0,0,0,False,False,True,False,False,Resource,self,t3_1gexoow
Python,FastStream: a powerful and easy-to-use library for building services with event streams,"[**FastStream** (https://github.com/airtai/faststream)](https://github.com/airtai/faststream) simplifies the process of writing producers and consumers for message queues, handling all the parsing, networking and documentation generation automatically. It is a new package based on the ideas and experiences gained from [**FastKafka**](https://github.com/airtai/fastkafka) and [**Propan**](https://github.com/lancetnik/propan). By joining our forces, we picked up the best from both packages and created a unified way to write services capable of processing streamed data regardless of the underlying protocol. We'll continue to maintain both packages, but new development will be in this project.

Making streaming microservices has never been easier. Designed with junior developers in mind, [**FastStream**](https://github.com/airtai/faststream) simplifies your work while keeping the door open for more advanced use cases. Here's a look at the core features that make [**FastStream**](https://github.com/airtai/faststream) a go-to framework for modern, data-centric microservices.

* **Multiple Brokers**: **FastStream** provides a unified API to work across multiple message brokers ([Apache Kafka](https://kafka.apache.org/), [RabbitMQ](https://www.rabbitmq.com/), [NATS](https://nats.io/) and [Redis](https://redis.io/))
* [**Pydantic Validation**](https://faststream.airt.ai/latest/getting-started/subscription/pydantic/): Leverage [**Pydantic's**](https://docs.pydantic.dev/) validation capabilities to serialize and validate incoming messages
* [**Automatic Docs**](https://faststream.airt.ai/latest/getting-started/asyncapi/export/): Stay ahead with automatic [**AsyncAPI**](https://www.asyncapi.com/) documentation
* **Intuitive**: Full-typed editor support makes your development experience smooth, catching errors before they reach runtime
* [**Powerful Dependency Injection System**](https://faststream.airt.ai/latest/getting-started/dependencies/): Manage your service dependencies efficiently with **FastStream**'s built-in DI system
* [**Testable**](https://faststream.airt.ai/latest/getting-started/subscription/test/): Supports in-memory tests, making your CI/CD pipeline faster and more reliable
* **Extendable**: Use extensions for [lifespans](https://faststream.airt.ai/latest/getting-started/lifespan/), [custom serialization](https://faststream.airt.ai/latest/getting-started/serialization/) and [middleware](https://faststream.airt.ai/latest/getting-started/middlewares/)
* [**Integrations**](https://faststream.airt.ai/latest/getting-started/integrations/frameworks/): **FastStream** is fully compatible with any HTTP framework you want ([**FastAPI**](https://faststream.airt.ai/latest/getting-started/integrations/fastapi/) especially)
* **Observability**: Add [OpenTelemetry](https://faststream.airt.ai/latest/getting-started/opentelemetry/) or [Prometheus](https://faststream.airt.ai/latest/getting-started/prometheus/) support to your services.",davorrunje,1gewobs,https://reddit.com/r/Python/comments/1gewobs/faststream_a_powerful_and_easytouse_library_for/,https://www.reddit.com/r/Python/comments/1gewobs/faststream_a_powerful_and_easytouse_library_for/,2024-10-29 14:59:35,126,0.95,126,0,8,0,0,False,False,True,False,False,Resource,self,t3_1gewobs
Python,Customizable CAPTCHA widget for PyQt and PySide,"Hey,

I made a clean and modern CAPTCHA widget for PyQt and PySide.

Preview: [https://github.com/user-attachments/assets/14af04a6-c953-4038-8121-0c7c91b92f9f](https://github.com/user-attachments/assets/14af04a6-c953-4038-8121-0c7c91b92f9f)

**What My Project Does:**

The widget is a button containing a checkbox that opens a CAPTCHA prompt when clicked and checks the checkbox upon completion.

The prompt is made up of three different tasks:

* Selecting all images that contain a certain object (e.g. cars, crosswalks, bridges)
* Selecting all squares of an image that contain traffic lights
* Playing a small audio file and typing what you heard

The project can be used with PyQt5, PyQt6, PySide2, and PySide6, is highly customizable and easy to use. You can change the widget's entire look, including all colors and fonts, choose between multiple levels of difficulty and set it all up within just a couple of lines.

**Target Audience:**

It can be useful for anyone working with PyQt or PySide who wants to use a clean and modern CAPTCHA widget to protect their application from automation.

**Comparison:**

I couldn't find any library for PyQt or PySide that does anything similar.

**Links:**

PyPI: [https://pypi.org/project/pyqtcaptcha/](https://pypi.org/project/pyqtcaptcha/)

GitHub: [https://github.com/marcohenning/pyqtcaptcha](https://github.com/marcohenning/pyqtcaptcha)

I hope some of you find it useful!

",marcohnng,1gewap4,https://reddit.com/r/Python/comments/1gewap4/customizable_captcha_widget_for_pyqt_and_pyside/,https://www.reddit.com/r/Python/comments/1gewap4/customizable_captcha_widget_for_pyqt_and_pyside/,2024-10-29 14:42:57,100,0.97,100,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gewap4
Python,Introducing OpenExcept: the first automatic exception grouping engine,"# About me
I'm an engineer based in SF bay area working at a startup. I have wanted to start a company for a long time, and thus I decided to build something that I know the best and I actually will use. 

# What My Project Does
I built OpenExcept from a need from my work, where I needed to group exceptions and get alerted about sudden increases of certain exception types.

As I work at a startup, this is common - after deployment, lots of exceptions start to show up, but since each of them is slightly different, we cannot get a count of each ""type"" of exception.

Hence I built [OpenExcept](https://github.com/OpenExcept/OpenExcept).
Using this, all slightly different exceptions can be grouped together, and now I can build alerts, analysis on top of the results. 

# Target Audience
It is meant for production, and I plan to use it at my work 

If you find the exception logs overwhelming to deal with, this can be helpful.

The code and architecture can be interesting to anyone interested in AI or observability.

# Comparison 
All existing tools require manual configuration of grouping rules, from Sentry to ELK stack!

Please checkout my Github repo and see how my work is different. 


## Long Term Plans

I plan to build this project for the long term, and later build a company out of it, Grafana or Sentry are my role models. 

The long term mission of OpenExcept is to make all exceptions well handled.

Any suggestions, stars on the [Github repo](https://github.com/OpenExcept/OpenExcept) will be highly appreciated.

Thank you all!!!",Limp_Charity4080,1geo7m7,https://reddit.com/r/Python/comments/1geo7m7/introducing_openexcept_the_first_automatic/,https://www.reddit.com/r/Python/comments/1geo7m7/introducing_openexcept_the_first_automatic/,2024-10-29 06:30:20,0,0.41,0,0,15,0,0,False,False,True,False,False,Showcase,self,t3_1geo7m7
Python,Async Rate Limiter for API using credits,"# What My Project Does:

Easily manage rate limits for `async` requests to API using credits, computation unit per second (CUPS) or request units. And also those just counting the number of calls per time unit.

For example, let's consider an API with 3 endpoints. Each one has a different credit cost:

|Endpoint|Credit Cost|
|:-|:-|
|endpoint\_1|10|
|endpoint\_2|25|
|endpoint\_3|80|

Let's say you're allowed to request this API up to 200 credits per second. It's clear that calling the last endpoint will impact the rate limit more than the other ones!

# Using the library to manage this case:

`pip install credit-rate-limit`

    from credit_rate_limit import CreditRateLimiter, throughput
    
    credit_rate_limiter = CreditRateLimiter(200, 1)  # API allows 200 credits per 1 second
    
    (credit_rate_limiter, request_credits=10)  # costs 10 credits to call
    async def request_endpoint_1():
        """""" call endpoint_1 """"""
    
    (credit_rate_limiter, request_credits=25)  # costs 25 credits to call
    async def request_endpoint_2():
        """""" call endpoint_2 """"""
    
    (credit_rate_limiter, request_credits=80)  # costs 80 credits to call
    async def request_endpoint_3():
        """""" call endpoint_3 """"""

# Optimization:

`CreditRateLimiter` has an `adjustement` parameter that can be used to ""speed up"" the requests (to some extent). A higher value means better performances, but also a higher risk of being rate limited by the API. See doc for more details.

# Rate limiter based on number of request per time unit:

CountRateLimiter can be used in a similar way to manage such rate limits.

# Target Audience:

Python developers that uses async libraries to request API(s) enforcing rate limits based on credits or computation cost per time unit.

# Comparison:

I couldn't find an asynchronous Python rate limiter for an API that uses credits (or CUPS or RU ...), though [aiolimiter](https://github.com/mjpieters/aiolimiter) has an interesting mechanism to count some requests as ""heavier"" or ""lighter"".

But the main difference with this lib is the following: `credit-rate-limit` works out of the box, and you can optimize it only if you wish, while `aiolimiter` needs to be optimized in order to work. In other words, if you configure the libs with  the official API rate limit, the later will be rate limited under heavy load, while the former won't ...

Other async rate limiters (so based on request count) often turn async requests into synchronous ones at a fixed frequency, thus penalizing bursts of requests that stay under the limits.

# Where to find more:

[Code and Documentation](https://github.com/Elnaril/credit-rate-limit)

[PyPI package](https://pypi.org/project/credit-rate-limit/)

# Closing Words:

I would love to hear what you think about it, how it does compare with what you use at the moment! :)",E_l_n_a_r_i_l,1gdzn3c,https://reddit.com/r/Python/comments/1gdzn3c/async_rate_limiter_for_api_using_credits/,https://www.reddit.com/r/Python/comments/1gdzn3c/async_rate_limiter_for_api_using_credits/,2024-10-28 11:25:47,1,0.67,1,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1gdzn3c
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1geh79w,https://reddit.com/r/Python/comments/1geh79w/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1geh79w/tuesday_daily_thread_advanced_questions/,2024-10-29 00:00:10,3,0.72,3,0,2,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1geh79w
Python,Library to speed up developments in your scripts,"Hello everybody, my name is Gabriel and this is my fist library!

***I'm totally open to improvements!***

I created this library to help you develop practically any program, more focused on the automation area, it has functions, for¬†**sending email quickly**, GUI, such as showing a popup with¬†**Tkinter**, functions to use¬†**OpenAI**¬†solutions in a more agile way, such as¬†**GPT**,¬†**Dall-E**¬†and¬†**Whisper**.

There are also functions for processing¬†**Regex**¬†data, and functions for¬†**OCR**¬†and processing¬†**PDF**¬†data, such as splitting or similar.

And more codidian functions, such as converting a file to base64 and vice versa, creating a directory in the current directory, a random sleep for your automations, downloading files with a link, zipping directories and my favorite,¬†**making a colorful and well-organized log with logger and rich**.

I hope you enjoy the library, and if you want to contribute, you can fork it or put it in issues and I'll always take a look when I have time from my main job!

For install the library:

`pip install funcspy`

**Github**:¬†[https://github.com/gabriellopesdesouza2002/funcspy](https://github.com/gabriellopesdesouza2002/funcspy)

**Pypi**:¬†[https://pypi.org/project/funcspy](https://pypi.org/project/funcspy)

# Target Audience

The library's target audience is frustrated developers looking for, for example, simple and quick solutions to OCR, zip a file, make a simple and easy log with just one function, send an e-mail and other routine tasks that can often lead to long conversations with colleagues or the GPT to create a simple function (in the case of OCR, it took me a year for Windows and I learned a lot).

# What My Project Does

It provides a hub of functions to make the developer's day-to-day life easier, from routine tasks such as converting a document into base64 to free OCR using Tesseract.

# Comparison

The closest library I've found that does something similar is `botcity-framework-core`, which combines various functions and features for developing automation tools, but I found it very complex and with a rather high learning curve.  


***This content is not created with ChatGPT rs***

**Cheers from Brazil!**",Extension-Catch-4743,1gefl8s,https://reddit.com/r/Python/comments/1gefl8s/library_to_speed_up_developments_in_your_scripts/,https://www.reddit.com/r/Python/comments/1gefl8s/library_to_speed_up_developments_in_your_scripts/,2024-10-28 22:47:37,3,0.54,3,0,14,0,0,False,False,True,False,False,Showcase,self,t3_1gefl8s
Python,Copilot hallucinations wanted!,"I am preparing a small introduction to github copilot for python for my students of a first year programming course. Of course, with this, there should also be a section on pitfalls. Are there any issues or hallucinations that you have encountered using github copilot?

For now the students have seen just the basics: looping (for and while), if-elif-else, string-methods, lists and user defined methods.

If you know any examples including any of these it would be very nice. Otherwise, examples from basic mathematical analysis, physics, chemistry or biology would also be nice.

I am already planning to make the fibonnaci sequence which it does recursively (very bad runtime).",thomaspecellini,1gee1hx,https://reddit.com/r/Python/comments/1gee1hx/copilot_hallucinations_wanted/,https://www.reddit.com/r/Python/comments/1gee1hx/copilot_hallucinations_wanted/,2024-10-28 21:41:48,70,0.85,70,0,31,0,0,False,False,True,False,False,Discussion,self,t3_1gee1hx
Python,Slot Machine Game,"**What My Project Does:**

As the title says it is a slot machine game. However, there are 2 modes:

1. Automatic Mode

**-**¬†comes with a little summary txt of some stats.

2. Manual Mode

  
**Target Audience:**

Pretty much anybody with an ide

  
**Comparison:**

This is actually derived from a base game on BroCode's youtube channel. I thought it was a cool concept and tried to turn it from a relatively simple game to a more in depth game to better my skills. 

Criticism welcomed.

github link -¬†[https://github.com/DaoOfBullshit/slotMachine.git](https://github.com/DaoOfBullshit/slotMachine.git)",Gloomy-Floor-8398,1gedf2z,https://reddit.com/r/Python/comments/1gedf2z/slot_machine_game/,https://www.reddit.com/r/Python/comments/1gedf2z/slot_machine_game/,2024-10-28 21:15:31,2,0.57,2,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gedf2z
Python,PyCon 2025 web site missing,The PyCon 2025 web site seems to be missing. It just shows the PyCon 2024 dates and details. Any thoughts on whether PyCon 2025 is happening and how to submit a talk proposal would be much appreciated.,HaHaBudBud,1ged6kl,https://reddit.com/r/Python/comments/1ged6kl/pycon_2025_web_site_missing/,https://www.reddit.com/r/Python/comments/1ged6kl/pycon_2025_web_site_missing/,2024-10-28 21:05:07,8,0.9,8,0,4,0,0,False,False,True,False,False,Discussion,self,t3_1ged6kl
Python,I made a reactive programming library for Python,"Hey all!

I recently published a reactive programming library called `signified`.

You can find it here:

* Source - https://github.com/dougmercer/signified/
* Docs - https://dougmercer.github.io/signified/
* PyPI - https://pypi.org/project/signified/

# What my project does

## What is reactive programming?

Good question!

The short answer is that it's a programming paradigm that focuses on reacting to change. When a reactive object changes, it notifies any objects observing it, which gives those objects the chance to update (which could in turn lead to them changing and notifying their observers...)

## Can I see some examples?

Sure!

### Example 1

    from signified import Signal
    
    a = Signal(3)
    b = Signal(4)
    c = (a ** 2 + b ** 2) ** 0.5
    print(c)  # &lt;5&gt;

    a.value = 5
    b.value = 12
    print(c)  # &lt;13&gt;


Here, `a` and `b` are Signals, which are reactive containers for values.

In `signified`, reactive values like Signals overload a lot of Python operators to make it easier to make reactive expressions using the operators you're already familiar with. Here, `c` is a reactive expression that is the solution to the pythagorean theorem (`a ** 2 + b ** 2 = c ** 2`)

We initially set the values for `a` and `b` to be 3 and 4, so `c` initially had the value of 5. However, because `a`, `b`, and `c` are reactive, after changing the values of `a` and `b` to 5 and 12, `c` automatically updated to have the value of 13.

### Example 2

    from signified import Signal, computed
    
    x = Signal([1, 2, 3])
    sum_x = computed(sum)(x)
    print(x)  # &lt;[1, 2, 3]&gt;
    print(sum_x)  # &lt;6&gt;
    
    x[1] = 4
    print(x)  # &lt;[1, 4, 3]&gt;
    print(sum_x)  # &lt;8&gt;

Here, we created a signal `x` containing the list `[1, 2, 3]`. We then used the `computed` decorator to turn the `sum` function into a function that produces reactive values, and passed `x` as the input to that function.

We were then able to update `x` to have a different value for its second item, and our reactive expression `sum_x` automatically updated to reflect that.

# Target Audience

# Why would I want this?

I was skeptical at first too... it adds a lot of complexity and a bit of overhead to what would otherwise be simple functions.

However, reactive programming is very popular in the front-end web dev and user interface world for a reason-- it often helps make it easy to specify the relationship between things in a more declarative way.

The main motivator for me to create this library is because I'm also working on an animation library. (It's not open sourced yet, but I made a video on it here pre-refactor to reactive programming https://youtu.be/Cdb_XK5lkhk). So far, I've found that adding reactivity has solved more problems than it's created, so I'll take that as a win.

## Status of this project

This project is still in its early stages, so consider it ""in beta"".

Now that it'll be getting in the hands of people besides myself, I'm definitely excited to see how badly you can break it (or what you're able to do with it). Feel free to create issues or submit PRs on GitHub!

# Comparison

Why not use an existing library?

The `param` library from the Holoviz team features reactive values. It's great! However, their library isn't type hinted.

Personally, I get frustrated working with libraries that break my IDE's ability to provide completions. So, essentially for that reason alone, I made `signified`.

`signified` is mostly type hinted, except in cases where Python's type system doesn't really have the necessary capabilities.

Unfortunately, the type hints currently only work in `pyright` (not `mypy`) because I've abused the type system quite a bit to make the type narrowing work. I'd like to fix this in the future...

# Where to find out more

Check out any of those links above to get access to the code, or check out my YouTube video discussing it here https://youtu.be/nkuXqx-6Xwc . There, I go into detail on how it's implemented and give a few more examples of why reactive programming is so cool for things like animation.

Thanks for reading, and let me know if you have any questions!

--Doug",mercer22,1gealvf,https://reddit.com/r/Python/comments/1gealvf/i_made_a_reactive_programming_library_for_python/,https://www.reddit.com/r/Python/comments/1gealvf/i_made_a_reactive_programming_library_for_python/,2024-10-28 19:19:00,216,0.93,216,0,48,0,0,False,False,True,False,False,Showcase,self,t3_1gealvf
Python,Adding keyboard shortcuts to the Python REPL,"The new Python REPL is written in Python, which makes it possible to customize its behavior through Python code. Inspired by ≈Åukasz Langa's recent EuroPython [keynote](https://youtu.be/dK6HGcSb60Y?si=jWPEa8BcdYGnW9l6), I added some keyboard shorcuts to my own Python REPL thanks to Python's ability to use a `PYTHONSTARTUP` file.

[Instructions here for adding keyboard shortcuts to the new pyrepl](https://treyhunner.com/2024/10/adding-keyboard-shortcuts-to-the-python-repl/)

**Note**: this uses undocumented and unsupported Python features (note all the `_`-prefixed variables) so this hack may change/break in future Python versions without notice.",treyhunner,1ge9c66,https://reddit.com/r/Python/comments/1ge9c66/adding_keyboard_shortcuts_to_the_python_repl/,https://www.reddit.com/r/Python/comments/1ge9c66/adding_keyboard_shortcuts_to_the_python_repl/,2024-10-28 18:27:34,19,0.95,19,0,1,0,0,False,False,True,False,False,Tutorial,self,t3_1ge9c66
Python,Looking for Python workshop (3-5 days),"Hi,

I am looking for an introductory python workshop.
Preferred duration 5 days or less.

Location is flexible (work will cover travel) but it has to be live in-person. No online offerings, and taught in English.

I would appreciate any recommendations.

",Scary-Perspective882,1ge6b2j,https://reddit.com/r/Python/comments/1ge6b2j/looking_for_python_workshop_35_days/,https://www.reddit.com/r/Python/comments/1ge6b2j/looking_for_python_workshop_35_days/,2024-10-28 16:25:07,0,0.41,0,0,11,0,0,False,False,True,False,False,Resource,self,t3_1ge6b2j
Python,Algorithmic Music Generation with Python,"Hi, all. I've been building this Python program on the side when I find time from my full time job for the last month or so. It's nowhere near finished but I wanted to share what I'm building with you guys just to get some feedback.  I will keep posting updates about this project as I itterate. 

Finally this project got to a point where the output sounds pleasant to me so I wanted to see If I'm the only one or am I on the right track. There is still a lot that doesn't work with this project as I can't find a lot of time to work on it. 

There are some example videos on the Github page. UI on the videos are from an older version, so if you decide to run it for yourself (Which I don't recommand. Its really not worth the hastle right now.) you're gonna see a different UI with correct keys on the animations as opposed to the ones on the videos.

  
What works:

It picks a starting note. Based on the starting note and the defined scale, It picks 4 chords. It picks a way of playing those chords in terms of their timings. It picks random notes in the correct scale to generate a melody. It adds a very very simple drum loop on top of all. It shows what is being played on the screen as it plays. if you press f on terminal, it allows you to play freely with your pc keyboard using fl studio key bindings.

What I'm working on:

* UI with buttons for start, stop freeplay, output midi, record screen.  
* More instruments, especially bass.
* More drum patterns.
* More complex melody algorithm to create intro verse chorus.

Please let me know what other features whould you expect from a program like this. I'm open to any kind of feedback. Let me know what you think.

* What My Project Does: It algorithmically generates music.
* Target Audience: just a toy project.
* Comparison: Compared to other music generation libraries this one doesn't use AI to generate the music so it gives you complete control over the output. 

[Github](https://github.com/atiriko/Music)

",Atiriko,1ge68i5,https://reddit.com/r/Python/comments/1ge68i5/algorithmic_music_generation_with_python/,https://www.reddit.com/r/Python/comments/1ge68i5/algorithmic_music_generation_with_python/,2024-10-28 16:22:16,26,0.92,26,0,12,0,0,False,False,True,False,False,Showcase,self,t3_1ge68i5
Python,Question about Git repos (Maigret) etc on iOS,"I started out trying to use python but I couldn't figure it out so I went to Lennox couldn't figure that out either now I downloaded a app called Working Copy which seems a bit easier and more for beginners like me, but I just can't figure out how to get the repo running so that I can actually use it to search for usernames. Does anybody have any tips, tricks or videos that would be good for me to watch I'm brand new at all this but it sounds so cool I just wanna figure out how to do it. Thanks",Unable_Tea_2070,1gdz63t,https://reddit.com/r/Python/comments/1gdz63t/question_about_git_repos_maigret_etc_on_ios/,https://www.reddit.com/r/Python/comments/1gdz63t/question_about_git_repos_maigret_etc_on_ios/,2024-10-28 10:57:39,3,0.62,3,0,5,0,0,False,False,True,False,False,Tutorial,self,t3_1gdz63t
Python,Alternative to async/await without async/await for HTTP,"asyncio is a great addition to our Python interpreters, and allowed us to exploit a single core full capabilities by never waiting needlessly for I/O.

This major feature came in the early days of Python 3, which was there to make for response latencies reaching a HTTP/1 server.

It is now possible to get the same performance as asyncio without asyncio, thanks to HTTP/2 onward. Thanks to a little thing called [multiplexing](https://stackoverflow.com/questions/36517829/what-does-multiplexing-mean-in-http-2).

While you may find HTTP/2 libraries out there, none of them allows you to actually leverage its perks.

The script executed in both context tries to fetch 65 times httpbingo.org/delay/1 (it should return a response after exactly ~1s)

sync+Niquests+http2
```
This process has 1 connection open
This program took 1.5053866039961576 second(s)
We retrieved 65 responses
```

asyncio+aiohttp+http1.1
```
This process has 65 connection open
This program took 1.510358243016526 second(s)
We retrieved 65 responses
```

We would be glad to hear what your insights are on this.
The source in order to reproduce: https://gist.github.com/Ousret/e5b34e01e33d3ce6e55114148b7fb43c

This is made possible thanks to the concept of ""lazy responses"", meaning that
every response produced by a `session.get(""..."")` won't be eagerly loaded.
See https://niquests.readthedocs.io/en/latest/user/quickstart.html#multiplexed-connection for more details.

## What My Project Does

Niquests is a HTTP Client. It aims to continue and expand the well established Requests library. For many years now, Requests has been frozen. Being left in a vegetative state and not evolving, this blocked millions of developers from using more advanced features. 

## Target Audience

It is a production ready solution. So everyone is potentially concerned.

## Comparison

Niquests is the only HTTP client capable of serving HTTP/1.1, HTTP/2, and HTTP/3 automatically. The project went deep into the protocols (early responses, trailer headers, etc...) and all related networking essentials (like DNS-over-HTTPS, advanced performance metering, etc..)

You may find the project at: https://github.com/jawah/niquests 
",Ousret,1gdxqsu,https://reddit.com/r/Python/comments/1gdxqsu/alternative_to_asyncawait_without_asyncawait_for/,https://www.reddit.com/r/Python/comments/1gdxqsu/alternative_to_asyncawait_without_asyncawait_for/,2024-10-28 09:17:32,75,0.85,75,0,18,0,0,False,False,True,False,False,Showcase,self,t3_1gdxqsu
Python,I made a guide on how to debug python using ipdb,"I tried to make it as straight to the point as possible. Let me know what you think and if there‚Äôs another useful python package you‚Äôd like me to check out.

https://youtu.be/EnC9ciDkXqA?si=T-Gm3KfFr-OIgCLN

",jakecoolguy,1gdwo2h,https://reddit.com/r/Python/comments/1gdwo2h/i_made_a_guide_on_how_to_debug_python_using_ipdb/,https://www.reddit.com/r/Python/comments/1gdwo2h/i_made_a_guide_on_how_to_debug_python_using_ipdb/,2024-10-28 07:52:34,24,0.88,24,0,6,0,0,False,False,True,False,False,Tutorial,self,t3_1gdwo2h
Python,I need some tips with a password entry program for the 1602 lcd screen on a raspberry 4 ,"Hi

I would like the the lcd to display ""please enter password"" then disguise it as \* on the lcd number by number. all my code does at the minute is ask for password in idle then give a correct or try again on the lcd

`from RPLCD.i2c import CharLCD`

`import getpass`

`import time`

`# Initialize the LCD` 

`lcd = CharLCD('PCF8574', 0x27)`

`# Predefined correct password`

`correct_password = ""0000""`

`# Function to display disguised password and wait for correct input`

`def check_password():`

`while True:`

`password = getpass.getpass(prompt='Enter your password: ')`

`lcd.write_string(""Enter Your Password: "")`

`disguised_password = '*' * len(password)`

`lcd.clear()`

`lcd.write_string(disguised_password)`

`if password == correct_password:`

`lcd.clear()`

`lcd.write_string(""Password correct"")`

`else:`

`lcd.clear()`

`lcd.write_string(""Try again"")`

`time.sleep(2) # Wait for 2 seconds before next attempt`

`# Call the function`

`check_password()`

hope someone can advise me",OperationThen4257,1gdqbty,https://reddit.com/r/Python/comments/1gdqbty/i_need_some_tips_with_a_password_entry_program/,https://www.reddit.com/r/Python/comments/1gdqbty/i_need_some_tips_with_a_password_entry_program/,2024-10-28 01:07:35,0,0.44,0,0,1,0,0,False,False,True,False,False,Discussion,self,t3_1gdqbty
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1gdoyr5,https://reddit.com/r/Python/comments/1gdoyr5/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1gdoyr5/monday_daily_thread_project_ideas/,2024-10-28 00:00:10,5,0.79,5,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gdoyr5
Python,SmartProfiler: The All-in-One Solution for Python Performance Insights,"# What My Project Does

SmartProfiler is a lightweight Python library that simplifies profiling your code by providing insights into execution time, memory usage, CPU time, and function call counts. Whether you‚Äôre optimizing performance, debugging, or monitoring function calls in multithreaded applications, SmartProfiler has you covered with minimal setup and overhead.

# Target Audience

SmartProfiler is perfect for:

* **Data Scientists** who need to optimize data processing tasks.
* **Developers** looking to enhance the performance of their applications.
* **Researchers** who require detailed profiling for simulations or computations.
* **Anyone** working with Python who wants to gain insights into their code's performance.

# Comparison

While many profiling tools focus on specific metrics, such as memory or execution time, SmartProfiler uniquely combines:

* **Unified Profiling**: All-in-one solution for profiling time, memory, CPU, and function calls.
* **Thread-Safe**: Specifically designed for multithreaded environments, avoiding race conditions.
* **Minimal Overhead**: Provides accurate profiling with little impact on application performance.

# Key Features

* **Function-Level Profiling**: Easily profile functions with decorators.
* **Code Block and Line Profiling**: Profile specific blocks or lines using context managers.
* **Multithreaded Profiling**: Supports profiling in concurrent applications.
* **Flexible Logging**: Integrates with Python's logging framework for detailed insights.
* **Function Call Tracking**: Count function calls efficiently in a thread-safe manner.

# Example Usage

# Time Profiling for Functions

    from smartprofiler.time import profile_time
    
    @profile_time
    def my_function():
        time.sleep(1)  # Simulate a time-consuming task

# Memory Profiling for Functions

    from smartprofiler.memory import profile_memory
    
    @profile_memory
    def memory_intensive_function():
        data = [1] * (10**7)  # Simulate memory usage

# CPU Time Profiling for Functions

    from smartprofiler.cpu_time import profile_cpu_time
    
    @profile_cpu_time
    def cpu_intensive_function():
        for _ in range(10**6):
            pass

# Function Call Counting

    from smartprofiler.function_tracking import profile_call_count
    
    @profile_call_count
    def my_function():
        print(""Function called"")
    
    my_function()  # Logs: Function 'my_function' has been called 1 times

# Multithreaded Profiling

    import threading
    from smartprofiler.time import profile_time
    
    def thread_function():
        with profile_time:
            time.sleep(1)
    
    threads = [threading.Thread(target=thread_function) for _ in range(5)]
    for t in threads:
        t.start()
    for t in threads:
        t.join()

# Contributing to SmartProfiler

We welcome contributions! Whether it‚Äôs fixing bugs, adding features, or improving documentation, your help is valued.

[https://github.com/vigsun19/smartprofiler](https://github.com/vigsun19/smartprofiler)",Ambitious_Clock9017,1gdjz16,https://reddit.com/r/Python/comments/1gdjz16/smartprofiler_the_allinone_solution_for_python/,https://www.reddit.com/r/Python/comments/1gdjz16/smartprofiler_the_allinone_solution_for_python/,2024-10-27 20:07:59,58,0.89,58,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1gdjz16
Python,CPython Software Bill Of Materials ,"There are many tools to generate source SBOMs for Python projects. I was wondering if there are details about how CPython generates their source SBOM.
",kikofernandez,1gdhvnr,https://reddit.com/r/Python/comments/1gdhvnr/cpython_software_bill_of_materials/,https://www.reddit.com/r/Python/comments/1gdhvnr/cpython_software_bill_of_materials/,2024-10-27 18:37:26,0,0.38,0,0,1,0,0,False,False,True,False,False,Discussion,self,t3_1gdhvnr
Python,üîÆBlackjack Strategy Simulator: The Most Comprehensive Open-Source Tool for Blackjack Analysis! üîÆ,"The **Blackjack Strategy Simulator** is a powerful tool for simulating every possible blackjack scenario to help users find the best move in any situation.

## What My Project Does

It allows you to:

* **Generate custom basic strategy tables** for various rule sets, including card splits and surrender options.

* **Simulate and analyze expected value (EV)** to understand the profitability of different strategies.

* **Calculate the best possible action** for any hand, considering complex rules and deck compositions.

* **Create advanced strategies** that adapt based on card counting or pre-set strategies.

## Comparison to Existing Alternatives

The **Blackjack Strategy Simulator** stands out in a few key areas:

* **Customization:** Unlike many online blackjack calculators, this simulator allows users to configure various game rules, including the number of decks, dealer behavior on soft 17, and advanced options like card counting deviations.

* **Detailed Analysis:** The tool provides a more thorough analysis than most basic calculators, considering complex scenarios such as multiple splits and custom deck compositions.

* **Open-Source Flexibility:** As an open-source project, it is highly customizable, with support for additional strategies and rule sets. Existing alternatives often lack this level of flexibility and transparency.

This tool offers a detailed approach to blackjack analysis by simulating millions of hands with high accuracy and multiple configurations.

## Target Audience

The Blackjack Strategy Simulator is for  Programmers who want to learn about simulations and probability, researchers and educators interested in statistical analysis and game theory, casual developers looking to experiment with an open-source Python project.

While the project is highly customizable and versatile, it is intended primarily for educational and research purposes, not for production in gambling environments.

üåü **Check out the project on** [**GitHub**](https://github.com/AttackingOrDefending/Blackjack-Strategy-Simulator)**, give it a star if you find it interesting, and feel free to contribute or suggest improvements!**",Born-Programmer-6103,1gdg3e9,https://reddit.com/r/Python/comments/1gdg3e9/blackjack_strategy_simulator_the_most/,https://www.reddit.com/r/Python/comments/1gdg3e9/blackjack_strategy_simulator_the_most/,2024-10-27 17:20:25,9,0.8,9,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gdg3e9
Python,Fast Prime calculating program,I cheated a program to calculate prime numbers up to very large limit and till now it have been calculated Prime till 1 billion in just 6.8 seconds and till 10 billion 68 seconds,Rude-Perspective-113,1gde4a0,https://reddit.com/r/Python/comments/1gde4a0/fast_prime_calculating_program/,https://www.reddit.com/r/Python/comments/1gde4a0/fast_prime_calculating_program/,2024-10-27 15:55:27,0,0.17,0,0,13,0,0,False,False,True,False,False,News,self,t3_1gde4a0
Python,BugGPT: OpenAI powered security vulnerable web app generator!,"**Introducing BugGPT: Your Ultimate Training Ground for Bug Bounty Hunting and Secure Development**

**‚ú® What My Project Does**

Harnessing the power of OpenAI's cutting-edge o1 reasoning model, **BugGPT** crafts intentionally vulnerable web applications tailored for:

- **Bug Bounty Hunters:** Hone your skills by tackling realistic and diverse security challenges.
- **Software Developers:** Learn best practices to identify and prevent common vulnerabilities in your projects.

**BugGPT** is organized into **""rooms""**‚Äîeach room is a named and numbered folder that includes:
- A vulnerable Flask application ready for testing.
- A comprehensive Markdown document that:
- Explains the specific vulnerability.
- Guides you through the exploitation process.
- Provides best practices to help developers avoid similar flaws in their own code.

To keep the challenges fresh and engaging, BugGPT uses **GitHub Actions** to automatically generate new rooms periodically, ensuring a continuously growing repository of learning opportunities.

**üéØ Target Audience**

- **Bug Bounty Hunters:** Practice finding and exploiting vulnerabilities in a safe, controlled environment that mirrors real-world scenarios.
- **Students and Learners:** Enhance your cybersecurity skills with hands-on experience without the pressure of real-world stakes.
- **Amateur and Professional Developers:** Strengthen your code by understanding and implementing security best practices, paving the way for a more secure development journey and career.

**üîç Comparison**

**BugGPT** is designed to complement and even surpass existing platforms like PortSwigger and Hack The Box by offering:

- **Free Access:** Open to everyone, lowering the barrier to entry for aspiring security professionals and developers.
- **Constantly Growing Content:** Regular updates ensure a wide variety of challenges, keeping your learning experience dynamic and comprehensive.
- **Developer-Centric Resources:** Beyond just exploitation, BugGPT emphasizes teaching developers how to prevent vulnerabilities, bridging the gap between offense and defense in cybersecurity.

**üí¨ I‚Äôd love to hear your thoughts and feedback! Let‚Äôs build a safer and more knowledgeable community together.**

https://github.com/Trivulzianus/BugGPT
",dvnci1452,1gddc3y,https://reddit.com/r/Python/comments/1gddc3y/buggpt_openai_powered_security_vulnerable_web_app/,https://www.reddit.com/r/Python/comments/1gddc3y/buggpt_openai_powered_security_vulnerable_web_app/,2024-10-27 15:20:38,0,0.27,0,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1gddc3y
Python,Can I use both CPU and GPU cores simultaeneously?,"I am currently working on an economic model using anaconda and Im kinda new to this.

The simulation is kinda slower than macbook m1 chips where it would take thrice the amount of time to complete the simulation

I am wondering if I can use both gpu (rx6600) and cpu (r7 5700x)  to have as much cores for computing power.

",Hyawa,1gddbc6,https://reddit.com/r/Python/comments/1gddbc6/can_i_use_both_cpu_and_gpu_cores_simultaeneously/,https://www.reddit.com/r/Python/comments/1gddbc6/can_i_use_both_cpu_and_gpu_cores_simultaeneously/,2024-10-27 15:19:38,42,0.77,42,0,48,0,0,False,False,True,False,False,Discussion,self,t3_1gddbc6
Python,Developing a Python-based Graphics Engine: Nirvana-3D,"Hello community members,

\[Crossposted from:¬†[https://www.reddit.com/r/gamedev/comments/1gdbazh/developing\_a\_pythonbased\_graphics\_engine\_nirvana3d/](https://www.reddit.com/r/gamedev/comments/1gdbazh/developing_a_pythonbased_graphics_engine_nirvana3d/)¬†\]

I'm currently working in GameDev and am currently reading and working on a 3D Graphics/Game Engine called:¬†**Nirvana 3D**, a game engine totally written from top to bottom on Python that relies on¬†`NumPy`¬†Library for matrices and¬†`Matplotlib`¬†for rendering 3D scenes and¬†`imageio`¬†library for opening image files in the¬†`(R, G, B)`¬†format of matrices.

Nirvana is currently at a¬†*very nascent*¬†and¬†*experimental*¬†stage that supports importing¬†`*.obj`¬†files, basic lighting via sunlights, calculation of normals to the surface, z-buffer, and rendering 3D scenes. It additionally supports basic 3D transformations - such as¬†*rotation, scaling, translations*, etc, with the support of multiple cameras and scenes in either of these three modes -¬†`wireframes`,¬†`solid`¬†(lambert),¬†`lambertian`¬†shaders, etc.

While it has some basic support handling different 3D stuff, the Python code has started showing its limitations regarding speed - the rendering of a single frame takes up to 1-2 minutes on the CPU. While Python is a very basic, simple language, I wonder I'd have to port a large part of my code to GPUs or some Graphics Hardware languages like¬†*GLES/OpenCL/OpenGL/Vulcan*¬†or something.

I've planned the support for PBR shaders (Cook-Torrance Equation, with GGX approximations of Distribution and Geometry Functions) in solid mode as well as PBR shaders with HDRi lighting for texture-based image rendering and getting a large part of the code to GPU first, before proceeding adding new features like caching, storing-pre-computation of materials, skybox, LoD, Global Illumination and Shadows, Collisions, as well as basic support for physics and sound and finally a graphics based scene editor.

Code:¬†[https://github.com/abhaskumarsinha/Nirvana/tree/main](https://github.com/abhaskumarsinha/Nirvana/tree/main)

Thank You.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

* **What My Project Does:** Nirvana 3D aims to become a real-time 3D graphics rendering/Game engine in the near future that is open source and has minimal support for the development of any sort of games, especially the indie ones, with minimal support for realistic graphics and sound.
* **Target Audience**: It is currently a toy project that is experimental and pretty basic and simple for anyone to learn game dev from, but it aims to reach a few Python devs that make some cool basic games like Minecraft or something out of it.
* **Comparison**: Most of the game engines in the market don't really have support for Python in general. The engines are coded in C/C++ or some very low-level language, while the majority of the audience who seek to make games. Gamedev is a way to express oneself in the form of a story/plot and game for most of indie gamers, who don't have a lot of technical idea of the game and C/C++ isn't suitable for it.",Doctrine_of_Sankhya,1gdbl5l,https://reddit.com/r/Python/comments/1gdbl5l/developing_a_pythonbased_graphics_engine_nirvana3d/,https://www.reddit.com/r/Python/comments/1gdbl5l/developing_a_pythonbased_graphics_engine_nirvana3d/,2024-10-27 14:00:21,23,0.9,23,0,18,0,0,False,False,True,False,False,Showcase,self,t3_1gdbl5l
Python,"We're thinking of rewriting our go / java API in python, what do we need to think about?","Background: 
We have a horrible hodgepodge of APIs in front of our data platform, java that mostly calls underlying functions in the go (with slightly more user friendly calls). The go API often calls bash scripts to do the actual work. Most of the stuff the API does is building a call for an external service like doing spark submit on the file the user has provided or creating a table in hive with details the user has provided. The java API has swagger and is mostly what all users call. 

One option we have is to rewrite it all in go getting rid of java and bash, write swagger into the go and all the things the java does. 
But we're predominantly a python shop, which means whenever something needs to be done with the APIs only a few people are prepared to go near it and it's recieved very little change over the years where the rest of the platform is moving on rapidly. 

So a few of us are in favour for rewiteing it all in something like fastAPI, (or maybe black sheep?)

From what I understand this would basically give us swagger for free and mean there are a much bigger number of people that could support and run them and give us a much easier parth to the development we want? Anyone done anything similar? What have we not thought about? 

I've read some stuff about fastAPI not actually being that fast when compared to go but actually most of the stuff we do is calling something external that takes a while anyway... 

I welcome any advice here",protazoaspicy,1gdavp9,https://reddit.com/r/Python/comments/1gdavp9/were_thinking_of_rewriting_our_go_java_api_in/,https://www.reddit.com/r/Python/comments/1gdavp9/were_thinking_of_rewriting_our_go_java_api_in/,2024-10-27 13:24:13,114,0.88,114,0,74,0,0,False,False,True,False,False,Discussion,self,t3_1gdavp9
Python,"Flask Password Manager: web based, multiple users, and encrypted password storage","**Password Manager**

I have been doubtful of storing my passwords in spread sheets. The lack of security and encryption is not a good practice. Finding the right login information can be a little difficult due to the need to look through all of my website urls.  
In my spare time I created a password manager. The password manager was developed with Python 3.11, Flask, and Sqlite3. The bulk of the processing is done on the backend, one draw back to this is less security; I figured I would be running it locally and didn't need to worry.

**What My Project Does**

The password manager works as a web server or local application. The password manager stores a users username and password pair in a Sqlite database as a set of identity, salt, and verifier; I was planning on using SRP but didn't think the effort was worth it, maybe in the future though. The password manager encrypts passwords for the user so they can be retrieved for later use.

**Target Audience**

* Python users
* Personal development

**Comparison**

The password manager is not the most secure. I didn't want to spend to much time on this. The decryption key and access token is encrypted and stored in a client side cookie. Encryption and decryption is handled by the server. The plaintext password reaches the server backend. The password manager has almost no Javascript, I hope to implement JS in the future.

**Repository**

* [https://github.com/konsoleSam/password-manger](https://github.com/konsoleSam/password-manger)

The password manager was a good learning project. Please let me know what you think. Do you have any ideas to improve this?",Necessary_Log9841,1gcdjmi,https://reddit.com/r/Python/comments/1gcdjmi/flask_password_manager_web_based_multiple_users/,https://www.reddit.com/r/Python/comments/1gcdjmi/flask_password_manager_web_based_multiple_users/,2024-10-26 04:54:52,7,0.83,7,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1gcdjmi
Python,AKS primality test,"I just finished writing an implementation of the AKS primality test.

# What my project does
The project implements the AKS primality test, the first deterministic prime test that can be run in polynomial time. (although this implementation may not run in polynomial time because of implementation inefficiencies)

# Target audience
Absolutely no one. The point of AKS is its the first polynomial time primality test that can deterministically determine if any given number is prime or composite, however in practice, its much slower than everything else.

# Comparison
Much worse than other primality tests, to the point of being completely unusable (takes about 1.6s to check if 1009 is a prime)

https://github.com/somehybrid/aks",SomeHybrid0,1gd18w8,https://reddit.com/r/Python/comments/1gd18w8/aks_primality_test/,https://www.reddit.com/r/Python/comments/1gd18w8/aks_primality_test/,2024-10-27 02:37:53,13,0.79,13,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1gd18w8
Python,problem with matplotlib and vscode. Online fixes haven't worked.,"dear all,

first post on this subreddit.

I'm using vscode locally. Already updated matplotlib and PyQt6. But nothing happens. I don't get an error message, Nothing.

ON vscode's web version this is the error I get:  
matplotlib UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown plt.show()

what can I do?  
I was going through a matplotlib tutorial and haven't been able to plot anything because of this.

any input is appreciated!

I was writing code from a matplotlib tutorial, I copied/pasted the code

    import sys
    import matplotlib
    matplotlib.use('Agg')
    
    import matplotlib.pyplot as plt
    import numpy as np
    
    xpoints = np.array([0, 6])
    ypoints = np.array([0, 250])
    
    plt.plot(xpoints, ypoints)
    plt.show()
    
    #Two ¬†lines to make our compiler able to draw:
    plt.savefig(sys.stdout.buffer)
    sys.stdout.flush()  
    
    ",LoquatWooden1638,1gd17dz,https://reddit.com/r/Python/comments/1gd17dz/problem_with_matplotlib_and_vscode_online_fixes/,https://www.reddit.com/r/Python/comments/1gd17dz/problem_with_matplotlib_and_vscode_online_fixes/,2024-10-27 02:35:26,4,0.61,4,0,21,0,0,False,False,True,False,False,Discussion,self,t3_1gd17dz
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1gcygl6,https://reddit.com/r/Python/comments/1gcygl6/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1gcygl6/sunday_daily_thread_whats_everyone_working_on/,2024-10-27 00:00:11,9,0.78,9,0,13,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gcygl6
Python,How did you first learn about Python?,"How did all of you stumble upon python? I saw someone writing python in RuneScape one day and became curious. Then I dipped into front end frameworks like html and css, then JavaScript and python",Luxykid,1gcwcex,https://reddit.com/r/Python/comments/1gcwcex/how_did_you_first_learn_about_python/,https://www.reddit.com/r/Python/comments/1gcwcex/how_did_you_first_learn_about_python/,2024-10-26 22:14:32,43,0.77,43,0,69,0,0,False,False,True,False,False,Discussion,self,t3_1gcwcex
Python,Is this calculator too simple?,"Ive been testing this calculator for a bit and it feels too simple compared to tutorials online.

while True:
	
	x=eval(input(""\nInput:""))

	print(""\nOutput:"",x)

 #eval does the magic of changing 2,*,+ into the same format as if to write it as ""print(2*1)"" or x = 7+ 5
",haywij,1gcur7z,https://reddit.com/r/Python/comments/1gcur7z/is_this_calculator_too_simple/,https://www.reddit.com/r/Python/comments/1gcur7z/is_this_calculator_too_simple/,2024-10-26 20:58:29,0,0.27,0,0,7,0,0,False,False,True,False,False,Discussion,self,t3_1gcur7z
Python,What Practical Applications Can My Python Script Be Used For?,"I created a Python script that converts natural language into Python code and executes it in the terminal. 

I‚Äôve used it for tasks like installing libraries, scraping websites, and creating folders and files.

Here‚Äôs the GitHub repo: https://github.com/harshkhokhariya/gemini-python-assistant

To run it:

1. Install the Gemini library.
2. Get your Gemini API key.
3. Add it to the run.py file.
4. You're all set!

I‚Äôve tested it for various tasks, but I‚Äôd love to explore more potential uses.

 What other applications do you think this script could have?

Thank you!",harsh_khokhariya,1gcs4hw,https://reddit.com/r/Python/comments/1gcs4hw/what_practical_applications_can_my_python_script/,https://www.reddit.com/r/Python/comments/1gcs4hw/what_practical_applications_can_my_python_script/,2024-10-26 18:54:49,0,0.15,0,0,6,0,0,False,False,True,False,False,Discussion,self,t3_1gcs4hw
Python,Should I start Microservice,"We're starting a new startup and initially thought about starting with a monolithic structure, but later we heard that YC startups generally start with microservices (this might be incorrect). Also, most CTOs around us recommended microservices. However, I don't know if I should give up the rapid development power of monolithic architecture. What would you recommend? Should I start with microservices?

Team and what we will do  
Our team consists of 2 senior developers. We plan to create a new codebase, so scaling and having a stable system is important for us.",mbartu,1gcqhp2,https://reddit.com/r/Python/comments/1gcqhp2/should_i_start_microservice/,https://www.reddit.com/r/Python/comments/1gcqhp2/should_i_start_microservice/,2024-10-26 17:40:02,0,0.37,0,0,29,0,0,False,False,True,False,False,Discussion,self,t3_1gcqhp2
Python,Configuration format,"I currently use JSONs for storing my configurations and was instead recommended YAML by a colleague. I tried it out, and it looks decent. Big fan of the ability to write comments. I want to switch, but wanted to get opinions regarding pros and cons from the perspective of file size, time taken to read/write and how stable are the corresponding python libraries used to handle them.

My typical production JSONs are ~50 MB. During the research phase, they can be upto ~500 MB before pruning.",Messmer_Impaler,1gcq5rg,https://reddit.com/r/Python/comments/1gcq5rg/configuration_format/,https://www.reddit.com/r/Python/comments/1gcq5rg/configuration_format/,2024-10-26 17:24:37,73,0.89,73,0,75,0,0,False,False,True,False,False,Discussion,self,t3_1gcq5rg
Python,I created a Django rest framework package for MFA/2FA,"

I'm excited to announce the release of drf-totp, a package that brings Time-Based One-Time Password (TOTP) Multi-Factor Authentication (MFA) to the Django Rest Framework.

What My Project Does

drf-totp provides a simple and secure way to add an extra layer of authentication to your API endpoints, protecting your users' accounts from unauthorized access. With this package, you can easily integrate TOTP MFA into your Django Rest Framework project, supporting popular authenticator apps like Google Authenticator and Authy.

Key Features

1. Easy integration with Django Rest Framework
2. Supports popular authenticator apps like Google Authenticator and Authy

Target Audience

drf-totp is designed for developers and teams building secure API-based applications with Django Rest Framework. This package is suitable for production environments and can be used to add an extra layer of security to existing projects or new applications.

Comparison

While there are other MFA solutions available for Django, drf-totp is specifically designed for the Django Rest Framework and provides a seamless integration experience. Unlike other solutions that may require extensive configuration or customization, drf-totp is easy to set up and use, making it an ideal choice for developers who want to add TOTP MFA to their API endpoints quickly and securely.


Check out the GitHub repo for installation instructions and example usage: https://github.com/mohamed-alired/drf-totp",djv-mo,1gcl0hk,https://reddit.com/r/Python/comments/1gcl0hk/i_created_a_django_rest_framework_package_for/,https://www.reddit.com/r/Python/comments/1gcl0hk/i_created_a_django_rest_framework_package_for/,2024-10-26 13:24:37,23,0.81,23,0,0,0,0,False,False,True,False,False,Discussion,self,t3_1gcl0hk
Python,A fun use of itertools in gamedev,"
For the last 3/4 years I've been working on [this game](https://store.steampowered.com/app/3122220/Mr_Figs) in Python/Pygame

There's a lot of puzzling mechanics and tight movements required which got me to thinking of some hazards I could put in the game.

Anyway, fast forward a bit and I have one particular hazard which you can see here:

https://i.imgur.com/swY30rB.mp4

If that hurts your head, there's a simpler ""up/down"" version here

https://i.imgur.com/yE7LZGa.gif

While doing these I realised it was just cycling (a very obvious clue) through a list of different vectors. Which brought me to my favourite but often-unused module... `itertools`!

### `itertools.cycle` to the rescue!

When I saw this pattern I realised I could finally indulge myself and use `itertools.cycle`. I love the itertools modules but usually never get to use them in my day-to-day. 

For those not in the know, itertools.cycle describes itself as this (paraphrased for brevity)

&gt; Make an iterator returning elements from the¬†iterable. Repeats indefinitely

In the first example we're just cycling through a version of a circle 


    [ 
      [1,0],   # right
      [0, 1],  # down
      [-1,0],  # left
      [0, -1]  # up
    ]

and then applying the result to our movement and then waiting for N seconds.

To break it down, the first time it cycles through, it goes right. Then down, then left and finally, up. It then starts all over.

The second example is a lot simpler to grasp. It's just up/down (`[0, -1], [0, 1]`)

### How does this data get passed through?

This is perhaps a bit off-topic but I'd want to know if I was reading this.

I'm against storing stuff in code as much as possible so I use the TiledMapEditor for all my levels and enemy data.

Using our cycling behaviour is as simple as passing it through in the editor

i.e.

https://i.imgur.com/2zFInoP.png

Anyways, there's a few other times I've used itertools in this game (railways and other hazards being a few) but they're more complex to go through. Perhaps another time or if this get's a lot of love.

More than anything I just wanted to shine a light on one of the best modules that doesn't get enough attention.

Thanks and godbless itertools! 

:)",mr-figs,1gch0qm,https://reddit.com/r/Python/comments/1gch0qm/a_fun_use_of_itertools_in_gamedev/,https://www.reddit.com/r/Python/comments/1gch0qm/a_fun_use_of_itertools_in_gamedev/,2024-10-26 09:10:54,68,0.9,68,0,22,0,0,False,False,True,False,False,Discussion,self,t3_1gch0qm
Python,Memorial Date Algorithm for JWs,[https://www.kaggle.com/code/mailbokhang/memorial-date?kernelSessionId=203312817](https://www.kaggle.com/code/mailbokhang/memorial-date?kernelSessionId=203312817),Tom-CHBM4,1gced47,https://reddit.com/r/Python/comments/1gced47/memorial_date_algorithm_for_jws/,https://www.reddit.com/r/Python/comments/1gced47/memorial_date_algorithm_for_jws/,2024-10-26 05:50:40,4,0.58,4,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1gced47
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1gc8ekm,https://reddit.com/r/Python/comments/1gc8ekm/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1gc8ekm/saturday_daily_thread_resource_request_and/,2024-10-26 00:00:11,5,0.86,5,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gc8ekm
Python,"datamule: download, parse, and construct structured datasets from SEC filings","Link: [https://github.com/john-friedman/datamule-python](https://github.com/john-friedman/datamule-python)

# What my project does

1. Download SEC filings quickly. (Bulk downloads are also available, benchmark is \~2 min/year for every 10-K/10-Q since 2001
2. Parse SEC filings quickly. (Currently only 8-K, 13F-HR Information tables are implemented. 10-K/10-Q coming next week)
3. Convert SEC textual filings directly into structured datasets.
4. Watch for new filings.
5. Has a basic tool calling chatbot with artifacts. Doesn't do anything useful yet, but was fun to make.

# Target Audience

Grad students looking to save money on expensive datasets, quants with side projects, software engineers looking to build commercial projects, and WSB people trying fun new trading strategies. In the future I'd like to make the chatbot code a bit cleaner so it can be used as a tutorial project for masters students w/ finance but not programming experience.

# Comparison

Getting SEC data in bulk is surprisingly expensive. Parsed SEC data is even more [expensive](https://docs.cybersyn.com/foundations/sources/sec/). Derived datasets such as board of directors data is also expensive (something like 35k/license).

# Contribution

Greatly appreciated. Also SEC feature requests + QoL suggestions are very useful.

Links: [https://github.com/john-friedman/datamule-python](https://github.com/john-friedman/datamule-python)

EDIT: 10-K and 10-Q parsing implemented.",status-code-200,1gc7yac,https://reddit.com/r/Python/comments/1gc7yac/datamule_download_parse_and_construct_structured/,https://www.reddit.com/r/Python/comments/1gc7yac/datamule_download_parse_and_construct_structured/,2024-10-25 23:37:18,25,0.92,25,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1gc7yac
Python,I don't want to r/learnpython I'm just pretty sure 0 is an integer,"I love python I really do I've been using it professionally now for 5 years in my day job. But I've encountered an error and nobody anywhere has any advice for me and I'm going insane because I don't even know who to report it to.

# The error:

    Exception has occured: TypeError
    an integer is required
      File ""P:\Projects\test.py"", line 179, in navigate
        zero_b = 0
                 ^

This happens regardless what the code in zero\_b's place is. If I try printing anything, it will give the ""an interger is required"" message in the string or integer I'm trying to print. No further stack trace is given.

# The code:

        test_a = 0
    
    ¬† ¬† try:
    ¬† ¬† ¬† ¬† print(""Step 1"")
    ¬† ¬† ¬† ¬† WebDriverWait(driver, 1).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ""[data-testid='read-only-address']"")))
    ¬† ¬† except:
    ¬† ¬† ¬† ¬† print(""Step 2"")
    ¬† ¬† ¬† ¬† try:
    ¬† ¬† ¬† ¬† ¬† ¬† print(""Step 3"")
    ¬† ¬† ¬† ¬† except:
    ¬† ¬† ¬† ¬† ¬† ¬† print(""Except hit"")
    
    ¬† ¬† zero_b = 0

I removed the stuff inside the first except (where ""step 2"" is) because this error happens even when there's just a print statment there. The Selenium WebDriver folks said it couldn't be the call to something they'd written because that shouldn't affect a variable assignation in a different scope

# The circumstances:

This ONLY occures if the debugger has hit a breakpoint anywhere before these lines of code. If the debugger hasn't hit a breakpoint, then this error does not occur. It does not matter where the breakpoint is. Various different code in the place of the WebDriverWait line will also cause this. I'm using Python 3.12.4 64-bit, debugging in VSCode.

# Video:

[https://www.youtube.com/watch?v=4l1ECfiDWpM](https://www.youtube.com/watch?v=4l1ECfiDWpM)

# Edit:

Someone in the comments mentioned using different debuggers. I had tried pycharm but received the same error. Trying pdb, though, does NOT result in the same error. So, this is probably not an issue regarding Python, but closer to a common issue between both the pycharm and the VSCode debuggers. I can use pdb for now, but feel free to continue to speculate what both editors could be doing here if you wish.",_TheModerator,1gc4qk6,https://reddit.com/r/Python/comments/1gc4qk6/i_dont_want_to_rlearnpython_im_just_pretty_sure_0/,https://www.reddit.com/r/Python/comments/1gc4qk6/i_dont_want_to_rlearnpython_im_just_pretty_sure_0/,2024-10-25 21:05:09,0,0.38,0,0,26,0,0,False,False,True,False,False,Discussion,self,t3_1gc4qk6
Python,Pixel-map: A Python CLI tool for plotting geo files in the terminal,"# What My Project Does

[**Pixel-map**](https://github.com/RaczeQ/pixel-map) displays geo data in the terminal. It can be used to quickly look into the geospatial data without opening a notebook, generating HTML maps or using tools like [kepler.gl](https://kepler.gl/).

GitHub: [https://github.com/RaczeQ/pixel-map](https://github.com/RaczeQ/pixel-map)

PyPI: [https://pypi.org/project/pixel-map/](https://pypi.org/project/pixel-map/)

Since I can't embed images in this post, I can only show you the Black and White modes of the library.

ASCII renderer `ascii-bw`:

    $ pixel-map arc-de-triomphe.parquet -r ascii-bw --width 82 --height 43 --no-bg
    ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ arc-de-triomphe.parquet ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†@@L_ ¬†jr ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† &lt;p,=L ,= ¬†,,,_ ¬†jL _q ,,jk ¬†,_r_ ¬†,@QQ@y_B,_ ¬† [u/pu__](https://www.reddit.com/u/pu__) ¬† ¬† ¬†,.,y ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† `QL3[[jL""E""[""@yS`P""y0QHL3dG8 ¬† ""dQL""Q9QF^QQqd ¬† @^hY]P}pq,_ ` ` ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† 9L""QL2L""[""h P"" ¬†""k2/k3L8GQ ¬† @,3QQL^""@y@QD` ¬†@""D\*]@9,jp""`ay_ ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† -C8"",`SnDL""P""y@3L ¬†`bjDr@`[3L ¬†@]h/h]Q,5[0@` ¬†[u/L](https://www.reddit.com/u/L)[V\@3Gh0"" y@""uP0y ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†@`jRh_9F"",pR\JDGL ¬†`QQ}""\J/, ¬†3LjJL""QDj/0` ¬†p,""\d@b@P"" yPPdG_q[ ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† y]P"",u@["", \""u@F, 6 VDFULy} ¬†-/0[Y9_3[@ ¬† jE0P ,@[JQuQ[`][]@D""` ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†?""y@L}QQb][j}jd""yDL ¬† \]FyF@ ¬† DL""b""d\"""" ¬†jh_jQQQQ[}QL~^b@P""` ¬† ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ""*6yE__{}y[]V`/PD""k ¬† ""/DQ@L ¬†@""b_\J@F ¬†jCj]3R@F9Hb_2@P"" ¬† _yL ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† __ ¬†""^0@E,jF_d/9LZPb ¬† 3S]jL ¬†][[jL""F ¬†j[]E]@[,___dP"" ¬† ,q8P^@L ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬†""^hy_ ¬†""^"",Q""P9S/@Rj ¬† 3QEk ¬†^hPRQF ¬†,,__""""""^PPP"" ¬† ,qD\Du) E"" ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†_ay_ ¬†"""" ¬† ¬† """"RQuj@[ER_ ``,j ¬†`b,qr ¬†~Q[QR[[DF ¬† _,,___""""^*PRF ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† uF]Fju_ ¬† ¬† ¬† ¬† `""SQp""._ ¬†`"" ¬† ¬†`` ¬†J[ ""JD""` ¬†_udR[3[]""QDF,pc ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†,c_F.@QD]hy, ¬† ¬† ¬† ¬†` ^9"" ¬† ¬† ¬†,_ ¬† ¬† ""P"" ¬† _y@QL ]@nF]D"",jjpq ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†_SFjn,""90DyFjhu,_ ¬† ¬† `PP0nquy,pQQhu, ¬† ¬†_-3QQQQ[p@D0P"" """"""` ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† q""h_5y]EJL,""j[""@\P@0 _ ¬† ¬† ¬† ¬† ``""""""9PPR ¬†7m """"""` ¬† ¬† ¬† ¬† ¬† _,,u ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†""PP^`""""` ¬† `""^hq{,[JJL ¬† ¬† ¬† ¬† @p ¬† ¬† ¬† ¬† ¬† ¬†___, ¬†yyMP9QQp_""O"" ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ~ ¬† ¬† ¬† ¬† ¬† ¬† ` ¬† ¬† ¬† ¬† ¬† ¬†d@"" ¬† ¬† ¬† ¬† p^]DQP""yn,""^0CjQQ[@ _ ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†_ ,, ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†""`4P_yjQQQQRp,_^0@""j[ ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† _q[""LJ^ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†`""9QQ@[,@Q[Qp _^F ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ,d""_jP"" ¬†_y_ ¬† ¬† ¬† ¬† ¬† ¬† _y_ ¬† ¬† ¬† ¬† """"98@uQ@""jE""=y ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† _ ,,,yppML""QP"" _y@`_ ]k ¬† ¬† ¬† ¬† ¬† ¬†`F_d@h_ ¬† ¬† ¬† ¬† `""9""yu@PQD ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ""P"" `]Q[`\@P"" _y0QJ`jD@y ¬† 0PNL ¬†E3 ¬† ¬†""98@QQQy,_ ¬† ¬† ¬† ¬† ""90@` ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† u[]bP"" _yQP""B]`/@u8 ¬† p_u, ¬† jq@L ¬† Qy ""^0@QQDp,_ ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬†,_y@P"" ,uPGL/Q@j""/U/D ¬† @``jF_ ¬†J[,XL ¬† 8Qu9p,""^9@F_pq,_ ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†,,dP"" ,qh_\jy""?Ej""/Q[}` ¬†@L_jF,@ ¬† [=[jL ¬† 9h]QQPQr__^h[_}Qr,_ ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†`"" ,pQFj]7y""QRjP\/}u0` ¬†dP@QF,@` ¬† @3 )@k ¬† 5L`]P`yQdRq,_^F,@@ ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†,pRZ]y7[[ ,0L3F,Eyh@` ¬†""98@F,@`dL ¬†5JPSu@b ¬† 3P`yDG[_p,_]F,L""9 ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† R_2p0QQQh{U[_j^/[^jQ` ¬†au_ ¬† @""/U[ ¬†jy=p _uu ¬† ¬†""^""yQ]@b ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†""9L_]N[9@uR/,dD9b@` ¬† @QQF,y`JQQ@ ¬†JP""y0jcjL ¬† 5QQDQQQP_,3QQPQL ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬†""[ `/hZ@F,[}/""@"" ¬†_@QQP,@""jL.^0 ¬† qF``jD`/k ¬† @_@^@F,B] SQyd[ ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† fh`h[h_p""y[,E""@"" ¬†jP0QP @FjhF&lt;P ¬† ¬†[__@F,D)dL ¬†`E@D`jP,dh @QQ[ ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†-`/@,"""""" `""RP""9"" ¬†?P`^P """" Y^r /Q[ ¬†?`P` ""uF.P ¬† JF """" \j"" ""WP^ ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬†` ¬† ¬† `""jdQQQb ¬† ¬† ` ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† `` ¬† ¬†` ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†"" ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬†-~-.._/ `""D` ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬†` ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ BBOX: 2.28710,48.86877,2.30167,48.87835 | MAP W:80 H:40 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
    
    $ pixel-map --example monaco_buildings -r ascii-bw --no-bg --width 82 --bbox 7.4185,43.7325,7.4222,43.7352
    ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ monaco_buildings.parquet ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
    ‚îÉ/[[ ¬†8qqQQ[ """" ¬†@QQP` _ ¬†` ¬† ¬†]DDP""""""@QL ¬†]QL ¬†J@[ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉQQ[ yu ]QQL ¬† y,^P"" ,@QP ¬†,@L ¬†yuqy ¬†]QB ¬† @B ¬† @} ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉQQ`_""""_jQ@ ¬† JQQF ¬†_9@"" ¬†,""Q[ ¬†@QQ@ ¬†"""""" ¬† ]QQ@E__ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉQ[ @L`QQQ@ ¬† d@"" ,/0@r ¬†/PhQ[ ¬†]Q@` ¬† BPP ¬†`""JQ@` ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉQ[ @^L7QQ@ ¬† 9F upQb` ,@P`,Q[ ¬†`"""" ¬† ¬† j@ ¬† ¬†JPP~pc ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉQ[ @u@ 4QF ¬† q@_ 5P` yQE` ¬†PR ¬† ,,uuqc_____,,uuqdQ[ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉqq @QP""`f ¬†_ ]QQL ¬†_/^[__ ¬†@ ¬† @QQ@@DDDRPPP^"""""""""""" ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ""P ^j[ ¬† ¬† "" `QP ¬†,@@B DRPF"""" ¬† ` ¬† ¬† ¬† ¬†,,. ¬†___,uy ¬† ¬† ¬† ¬† ¬†F ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ ¬† JQQL, ¬†y ¬† "" ¬† ¬† ¬† ¬† ¬† ¬†,,u. J@@QQ[J@[@Q[ ¬†]QQQQ@ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ¬†@Q[ ¬† ¬† ¬† ¬† ¬†,yuqqq3@Q@DQQE ¬†PPP^"" ¬† `` ¬† JQQQQQL ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬†7Q@ ¬†5@ @L@[ JQ""""J@UQQL,@@L ¬†,_,, ¬† ¬† ¬† ¬† ¬†@QQQQ@ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† {@L ]QL3k]@ ¬†@L,E` ""`` ?@[ ¬†JQQ@ ¬†=9` ¬† ¬† ]QQQQ@L ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ[ ¬† ¬†JQ[ `""`JLjQL ]L3PL,yqyppDR ¬† PPP ¬† ¬† __ ¬† ¬†P^""""3@_ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ@ ¬† ¬† @B ¬†yq @[8[ `@DRP^""[` _,,. ¬†pqL ¬†5QQQQL__,uuq@QDF ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉQE ¬† ¬†@@ ¬†]@ {@J@ ¬†uq@DR8@ ¬†@Q@_ ¬†@D@@LJQQQQQDRP^""""""` ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬† ¬†]QL J@L]@J@L ]@p0PS@L _]Q@L j@QQ[ PP^"""" ¬† __,_yqp ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ_ ¬† ¬†jQQ[ ¬†@[J@UQ} `@E,,jQ[J@,@@L `""""` ¬† _,,uq@QE][""""""` ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉ ¬† ¬†jQQQ@ ¬†8@ @[j@ ¬†@QQ@DPP ""`` _ ,,uq@QQQQQQQQDD0F ¬† ¬†, ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† jQQQQ@ ¬†]QL][J@L ""` ¬†___,yq@QQ_30PP^""""""``____,,u ¬†yQQb_ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉ ¬† ""RQQQD` uZ[J@_@E ¬†@@QQQQ@DP^""__,uL=p@@QQQQQQQQQ@L 8QQQ@L ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉp,_ ¬† ""^` @QQ@L""Ej@L JDP^""_,yq@@DPj[[ @QQQQQQQQQQQQL ""0QQQQh ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ‚îÉ
    ‚îÉQQQDy_ ¬† ¬† """"90b,""^8 ¬†q@@DPP""""` ¬†J@Q@ JQQQQQQQQQQQQL ¬† ]9Q@P"" ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†‚îÉ
    ‚îÉQP9QQQ@ ¬† ¬†_ ¬† ¬†`""^n, `` ¬† ` ¬† ¬† ¬†SQQ[ """""""""""""""""""""""""" ,@Q@=`__ ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†_ ‚îÉ
    ‚îÉF _@QQF ¬† /QQbu,_ ¬† ¬† ¬† ¬† ¬† ¬† __ ¬†`@Q@ JQQQ@U@Q@0D@[ @Q@` 0QDF ¬† ¬† ¬† ¬† ¬† ¬†3@DDL‚îÉ
    ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ BBOX: 7.41724,43.73250,7.42346,43.73520 | MAP W:80 H:24 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ

Braille renderer `braille-bw`:

    $ pixel-map --example london_buildings london_water -r braille-bw --no-bg --width 82
    ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ london_buildings.parquet, london_water.parquet ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚°Ä‚¢Ä‚°Ä‚°Ä‚†Ñ‚¢Ä‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚°Ä‚°Ä‚¢Ä‚°Ä‚†Ñ‚°Ä‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚°Ä‚°Ä‚°Ä‚°Ä‚°Ä‚°Ä‚°Ä‚°Ä‚°Ä‚°Ä‚°Ä‚†Ñ‚¢Ä‚°Ä‚°Ä‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚°Ä‚†Ñ‚†Ñ‚¢Ä‚°Ä‚†Ñ‚¢Ä‚°Ä‚¢Ä‚¢Ä‚¢Ä‚°Ä‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†∏‚¢Ç‚£§‚°Ñ‚†§‚†¢‚°¥‚†è‚†Å‚†Ñ‚†à‚†É‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ê‚¢Ä‚¢Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ê‚°ø‚†á‚†à‚†ü‚†í‚†ã‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚°Ä‚†à‚†â‚†õ‚†≥‚†Ç‚†Ñ‚†Ç‚¢†‚†û‚†Å‚¢†‚£§‚†à‚†¥‚£æ‚°Ø‚†£‚†ú‚°Ä‚£ø‚†Ç‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚¢ò‚£π‚£ø‚¢ã‚°Ä‚†Ñ‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ç‚†∞‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚¢ª‚£∂‚†Ñ‚¢∏‚°Ñ‚£∂‚£ø‚£∂‚†Ç‚†Ñ‚†Ñ‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†à‚†Å‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£º‚¢ß‚†Ñ‚°Ä‚†Ñ‚¢Ä‚°à‚†ã‚†Å‚†à‚†Å‚†∂‚†Ç‚†±‚†•‚†Ç‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†∏‚†ü‚†ã‚†Å‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢†‚†Ñ‚†Ñ‚¢Ä‚°Ä‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚°Ä‚£ø‚°Ö‚†ò‚†É‚£ø‚£ø‚°ø‚†Å‚†Ñ‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚°Ñ‚¢à‚°Ä‚†æ‚†á‚¢†‚£å‚†Å‚†à‚†ê‚†Ç‚†Ñ‚††‚†Ñ‚†Ç‚£ö‚°á‚†Å‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†à‚†Ç‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚††‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£à‚£¥‚£æ‚£ø‚£ø‚°∑‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚°Ä‚£∂‚†ã‚¢π‚°á‚†Ñ‚†ê‚£ø‚£ø‚°á‚†Ñ‚†Ñ‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£ò‚†É‚£Ω‚£õ‚†á‚°∞‚†É‚£®‚£∑‚£∑‚£∂‚£æ‚£¶‚°Ä‚°Ñ‚†õ‚£Ø‚£∑‚°Ä‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†Å‚†Ñ‚†Ñ‚†Ñ‚†à‚†Å‚†Ñ‚†Ç‚†Ñ‚†Ñ‚¢Ä‚£†‚£§‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚†Ñ‚¢Ä‚†∞‚¢∂‚†∂‚†∂‚†Ñ‚°≠‚°Ö‚†Ñ‚¢Ä‚°Ä‚†â‚¢Å‚°Ä‚†Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚£å‚£Ä‚°Ä‚°Ä‚††‚†é‚¢º‚°ø‚†É‚°º‚†É‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚°ô‚¢ø‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚°Ä‚£§‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚°ø‚¢ø‚£ø‚£ø‚°ø‚†ü‚†Å‚††‚£ø‚£ø‚£ø‚£Ä‚£Ä‚£∞‚°É‚°á‚††‚£π‚°è‚¢â‚°Ä‚°É‚††‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢∏‚†ß‚†Ø‚£Ω‚†É‚°ê‚†í‚°¶‚†Å‚†û‚†Å‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚£†‚°å‚†Å‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£†‚£§‚£∂‚°æ‚†ø‚†õ‚†õ‚†â‚†Å‚†Å‚†â‚†â‚†â‚†Å‚†à‚†à‚†Å‚†Å‚†Ñ‚†Ñ‚¢†‚£∂‚£§‚£§‚£≠‚£≠‚£≠‚£≠‚°á‚†ê‚°á‚†É‚†ª‚†Ω‚†Å‚††‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚£ø‚£∑‚£∂‚°ü‚†∏‚¢è‚°¥‚†É‚°¶‚°Ñ‚¢∏‚£ø‚†ü‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚°ö‚†≥‚†ü‚†Ç‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†ê‚¢æ‚°ø‚†ü‚†ã‚†Å‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚††‚°Ä‚¢∏‚£ø‚°Ñ‚£ø‚°Å‚°Ä‚£è‚£π‚†á‚†Ç‚°á‚£ø‚°á‚£ü‚†Å‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚°ü‚†õ‚¢ª‚†É‚°§‚¢§‚†Å‚†º‚°É‚°á‚¢æ‚£ø‚†ê‚†á‚†ü‚†ª‚¢ø‚†ü‚†Å‚¢ê‚°ª‚†Ö‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†à‚†â‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£Ä‚£Ä‚£Ä‚£†‚£§‚†Ñ‚£≠‚£≠‚£≠‚°ç‚†â‚†õ‚†õ‚†Ç‚†ò‚†á‚†ø‚†ø‚†ü‚†Ç‚†∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Å‚†ø‚¢∂‚°è‚¢ò‚££‚°é‚¢∞‚£∂‚£¨‚°ô‚¢ª‚°ø‚†Ñ‚†à‚†Å‚†Ñ‚††‚†Ñ‚¢ó‚°´‚†¥‚†é‚†Å‚¢Ä‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚°Ä‚††‚¢Ä‚°Ä‚†Ñ‚†∞‚†Ñ‚†∂‚†Ü‚†õ‚†õ‚†É‚°Ö‚°Ö‚£ø‚°á‚£∂‚†Ç‚°ø‚¢Ø‚¢©‚°á‚†Ñ‚†ê‚†Ç‚†Ñ‚†ê‚†Ç‚††‚¢∞‚†Ç‚†Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Å‚°Ä‚†à‚¢Ä‚°Ä‚†Å‚†Å‚†ò‚†ø‚†õ‚£Å‚¢∏‚°á‚†Ñ‚¢Ä‚¢Ä‚°Ä‚£™‚†Ö‚°ä‚†Å‚¢∑‚†Æ‚¢Ä‚†Ñ‚°Ä‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£Ä‚£Ä‚°Ä‚†Ñ‚°Ñ‚°Ñ‚£è‚£°‚£¶‚£ò‚¢∏‚£ø‚£ø‚°á‚°ø‚°º‚¢Ø‚£Ø‚°ç‚£≠‚£≠‚°Ä‚†õ‚†õ‚†ò‚†É‚†Ç‚¢Ä‚°Ä‚°Ä‚††‚¢§‚°§‚†ò‚†Ç‚†Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†à‚†Å‚†Ñ‚†∏‚†ø‚£ø‚°á‚†Ñ‚†ê‚†æ‚†ø‚†ø‚†á‚†Ñ‚°º‚†´‚£∂‚°Å‚¢é‚†à‚†Å‚†Ñ‚†Å‚£à‚†Ç‚†Å‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚¢†‚£Ø‚†â‚†Å‚¢æ‚°á‚†±‚†É‚¢õ‚£õ‚£ã‚£â‚£à‚£â‚†É‚°Å‚°Å‚¢â‚£ç‚£ç‚°Å‚£õ‚°õ‚†Å‚†Ç‚†Å‚£Ä‚£Ä‚°Ä‚°Ñ‚°ã‚†É‚†ê‚¢∏‚°ó‚°Ü‚†Ñ‚††‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚£∞‚£∂‚°Ü‚£§‚£§‚£§‚°Ñ‚†Ñ‚††‚£æ‚†É‚†Ç‚†Ñ‚†Ñ‚¢Ä‚°ë‚†Æ‚£≠‚†á‚†Ñ‚°É‚¢Ä‚°Ñ‚†Å‚†â‚°Ä‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚¢ê‚†ñ‚¢ä‚°≠‚†≠‚°Ö‚¢∂‚£ø‚†Å‚£ü‚†Ø‚¢ø‚£ü‚†É‚¢æ‚£ø‚¢ø‚†∑‚¢ì‚°µ‚†ñ‚£ã‚°Å‚£¥‚†Ü‚†æ‚£ª‚†ü‚¢ª‚£ø‚†õ‚†É‚†Ç‚†à‚†â‚†Å‚†Ñ‚†Ñ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚£ô‚£ü‚°É‚°ª‚¢ø‚£ø‚†Å‚†Ñ‚††‚†Ñ‚°Ä‚†Ç‚†Ñ‚†Ñ‚†∏‚†ü‚°¢‚¢ç‚†≥‚†û‚¢°‚†Ü‚°Ä‚†Ç‚†Ñ‚†Å‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚¢∞‚¢ü‚°Ü‚°Ö‚°Ä‚†á‚†á‚†æ‚†á‚†Ø‚†Ω‚£ò‚†É‚£§‚†≤‚°æ‚†Ø‚†Å‚£©‚†¥‚†æ‚°ü‚†Å‚°è‚†Å‚††‚°ø‚†Ø‚¢Ω‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢∏‚£ø‚°ø‚†á‚†ø‚†ø‚†ø‚†Ç‚†Ñ‚°Ä‚†Ñ‚†à‚†ë‚†Ç‚†Ñ‚†Ñ‚¢∏‚°Ø‚°ô‚†É‚†Ñ‚†ô‚†õ‚†π‚¢∑‚°ñ‚†Ç‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†ò‚£Ø‚£©‚†Ö‚£ª‚£¶‚°Ñ‚¢∏‚°á‚°á‚†ê‚†õ‚°∏‚†ü‚¢É‚£°‚†ê‚°õ‚°•‚†Ñ‚°Ñ‚£∂‚°Ñ‚£Å‚°Ä‚°Ä‚°á‚°§‚°ú‚†Å‚†â‚†Å‚†Ñ‚†ê‚†Ç‚†Ñ‚¢Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢º‚£ø‚°á‚¢∏‚¢ø‚†∑‚†Ç‚†Ñ‚†à‚†à‚†Å‚†Å‚†ê‚†Ç‚†Ñ‚†Ñ‚†ú‚£Ω‚°ó‚¢Ä‚†Ñ‚†∏‚°∑‚†Ç‚°Ñ‚¢Ä‚°Ä‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚††‚¢ñ‚°Å‚£¶‚£¨‚£ø‚°∑‚†Ñ‚†∂‚†Ü‚¢Ä‚£†‚†∞‚°Ü‚£õ‚°∫‚†Ñ‚†á‚†ß‚†Ñ‚†á‚£ø‚£∑‚°Ω‚£ø‚°á‚£Ø‚°Ö‚£É‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ê‚†í‚†Ü‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚°æ‚†ø‚†á‚†ò‚†©‚†¥‚†í‚†Ç‚††‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†∞‚†É‚†å‚°Ö‚†É‚¢≤‚†à‚£ë‚†¢‚°å‚†∫‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†ê‚†Ç‚†É‚†ã‚†Å‚†Å‚†Ñ‚†Ñ‚†∞‚¢æ‚¢ß‚£ø‚¢∏‚°á‚°Ü‚†Ö‚°Ñ‚†Ö‚°á‚£Å‚£®‚†É‚¢ø‚°á‚£∂‚°Ü‚£è‚°á‚°É‚°Ç‚°á‚£û‚£∑‚†Ñ‚†Ñ‚†Ñ‚††‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚°Å‚†Ö‚†Ñ‚†Ñ‚†Ñ‚†à‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚††‚†Ñ‚†Ñ‚†à‚†°‚†é‚†§‚†Ñ‚°Ä‚°Ü‚†±‚°Ä‚°É‚°∫‚†Å‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚¢ò‚¢õ‚°ª‚†ó‚¢Ä‚£§‚£§‚°Ñ‚°ø‚£≤‚°ª‚†º‚°á‚†ø‚†Å‚°ì‚†á‚°Ö‚†≠‚†≠‚¢©‚¢®‚£≠‚°Ö‚†Ñ‚¢∞‚¢∞‚†á‚†¥‚°Ü‚°Ü‚£∂‚£∂‚°Ñ‚†Ñ‚†Ñ‚†Ñ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚††‚†Ñ‚†Ç‚†Ñ‚†Ñ‚°Ä‚††‚†í‚†Ç‚°Ñ‚††‚†Ç‚†ê‚†á‚†ê‚†Ç‚†Ç‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†ò‚¢ø‚£ø‚£ø‚¢∏‚£ø‚£è‚†Ö‚°¨‚†â‚†ã‚°Å‚†Ñ‚†´‚†Å‚£í‚°§‚†õ‚¢ª‚£ø‚†∏‚£º‚£ø‚°á‚¢∏‚†ø‚°Ñ‚°á‚°Ç‚†É‚†É‚¢ª‚†ø‚†á‚†Ñ‚†Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚†ö‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚°Ñ‚†Ö‚†Ñ‚†Ñ‚†ê‚†â‚°Ä‚†§‚†î‚†í‚†É‚¢Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚¢†‚†à‚†ª‚†Å‚†æ‚†ø‚†á‚°º‚†£‚°Ñ‚°ø‚†â‚¢†‚°Ñ‚¢±‚°ü‚¢Ä‚†ô‚†∏‚¢∏‚†Ñ‚°á‚£ø‚°á‚¢∏‚£∑‚°Ü‚£≠‚°Ö‚†ò‚†É‚£∞‚¢∂‚£¶‚†Ñ‚†Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚††‚°§‚°§‚£§‚°Ñ‚†Ñ‚†Ñ‚†ê‚†Ñ‚†Ñ‚†ê‚¢´‚†á‚††‚†Ñ‚†Ç‚†Å‚¢Ä‚†Ñ‚†ê‚†ò‚°Ø‚†ú‚†∑‚°Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†ò‚†ü‚°Ñ‚°Å‚¢ß‚†Ç‚†ì‚¢°‚†Ö‚°≤‚†ú‚°Ü‚£ò‚°ø‚°Ü‚†Ö‚°©‚†Å‚°≠‚£≠‚†Ñ‚£≠‚£Ø‚£Ø‚°Ñ‚°ü‚°É‚¢õ‚¢ì‚†õ‚¢∏‚°ü‚¢∫‚£ø‚†Ñ‚†Ç‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚°Ä‚°ü‚†Å‚†Å‚°Ü‚°Ä‚¢ê‚£í‚°Ñ‚†ê‚†Ç‚†â‚†Å‚°†‚†∞‚°Ä‚†£‚†à‚°¢‚†Ñ‚°†‚†∞‚†Ç‚°Ü‚°Ö‚††‚°Ñ‚°Ä‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†∞‚°á‚°™‚¢ù‚†¢‚°ï‚£ê‚†∫‚¢µ‚£Ø‚°É‚†ò‚¢ü‚°Ø‚†Ü‚†Ü‚†Å‚†Å‚°Å‚£â‚£à‚£â‚£â‚£â‚°Å‚£â‚†ã‚†ò‚†É‚°É‚¢à‚°õ‚¢õ‚°ã‚†Å‚†Ç‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚†à‚†õ‚†á‚†Ç‚£Å‚°Å‚£¨‚£•‚°¶‚¢†‚†É‚†Ñ‚¢†‚°Ö‚†§‚†Ö‚†Ñ‚†à‚†Ö‚°™‚†Ñ‚†É‚†Ñ‚°Ü‚†Ü‚†à‚†á‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†∞‚°±‚°Ö‚°Ç‚°õ‚¢±‚°á‚†Å‚†Ç‚†ô‚†õ‚¢¥‚†Æ‚†Ñ‚†Ö‚¢û‚¢∞‚¢ä‚°≠‚°Ö‚°Ö‚°ç‚°Ö‚°Ö‚°á‚¢ø‚†Ñ‚†Ñ‚†Ñ‚£∑‚†Ç‚£∑‚¢∏‚£ø‚†Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ñ‚†Ñ‚††‚°Ñ‚†∫‚†É‚°á‚°á‚£ø‚£∑‚†é‚†Å‚†ê‚†ø‚†É‚†¥‚¢à‚†Ñ‚†Å‚†Ç‚†Å‚†Ñ‚°Ä‚†Å‚°Ö‚†á‚†Ñ‚†á‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†∏‚¢ó‚°Ñ‚°É‚°±‚†ì‚†Å‚†Ñ‚†Ñ‚†Ñ‚††‚†§‚†Ö‚†Å‚†´‚†æ‚¢ò‚¢ã‚°Ö‚°Ö‚°Ö‚°Ö‚°Ö‚°Ö‚°Ö‚£≠‚°§‚£§‚£¨‚°Ö‚£†‚£≠‚¢®‚£Ø‚°Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚£†‚†ñ‚†∂‚°á‚†à‚†Å‚£ô‚°É‚†õ‚†è‚†Å‚¢Ä‚¢é‚¢ë‚†Ñ‚†Ñ‚†Ñ‚†É‚†å‚†ê‚¢£‚°ï‚†Ç‚°Ç‚†Ö‚°á‚†Ñ‚†Ñ‚†Ç‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Å‚†à‚†Å‚†Å‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†à‚†Å‚†Å‚†Å‚†Å‚†Å‚†Å‚†Å‚†Å‚†Ñ‚†à‚†Å‚†Å‚†Å‚†Å‚†à‚†Å‚†Å‚†à‚†Å‚†Å‚†Å‚†Å‚†Å‚†Å‚†Å‚†Å‚†Å‚†à‚†Å‚†à‚†Å‚†Ñ‚†Ñ‚†à‚†à‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†Å‚†à‚†Å‚†Å‚†Ñ‚†Ñ‚†Ñ‚†à‚†Å‚†Ñ‚†Å‚†à‚†Å‚†Ñ‚†Å‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îÉ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚îÉ
    ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ BBOX: -0.13990,51.49221,-0.10879,51.50674 | MAP W:80 H:30 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ

Examples with colourful images are available in the repository.

CLI is built with Typer, so it's easy to use and has fully described parameters rendered with Rich.

**How does it work?**

1. Files are read by¬†`GeoPandas`¬†to GeoSerieses.
2. `Matplotlib`¬†figure is created with the size of the terminal (`pixel-map`¬†expects a default monospace font with the ratio of 8 to 16 pixels. Figure canvas takes terminal height and multiplies it by two).
3. GeoSerieses are plotted to the canvas.
4. The plot bounding box is expanded to the canvas ratio (based on terminal size).
5. Basemap is loaded with¬†`contextily`.
6. Canvas is copied to the image as an¬†`NumPy`¬†array.
7. `img2unicode`¬†is used to render image using unicode characters with color.
8. `Rich`¬†string output is generated using the list of unicode characters with background and foreground colors.
9. Output is printed to the console.

# Target Audience

* GIS practitioners
* Map enthusiasts
* Data engineers/scientists working with geo data

# Comparison

Probably none that I'm aware of with the same functionalities.

[https://github.com/rastapasta/mapscii](https://github.com/rastapasta/mapscii) \- this one can display OSM data in the terminal while being interactive. It's amazing, but it's not written in Python.",YourVibe,1gc3a1k,https://reddit.com/r/Python/comments/1gc3a1k/pixelmap_a_python_cli_tool_for_plotting_geo_files/,https://www.reddit.com/r/Python/comments/1gc3a1k/pixelmap_a_python_cli_tool_for_plotting_geo_files/,2024-10-25 20:00:37,25,0.96,25,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1gc3a1k
Python,Every unicode character can be a variable name in globals and locals,"Hello. Reading about [walrus operator ](https://realpython.com/python-walrus-operator/)I've seen œÜ used as a variable. That defied my knowledge (\_, a-z, A-Z, 0-9), and I thought ""if œÜ is valid, why üçÜ isn't?"".

After a bit of try, I've come up with this.

    initial = 127810
    for i in range(10):
    ¬† ¬† variable = chr(initial + i)
    ¬† ¬† locals()[variable] = f""Value of {variable} is {ord(variable)}""
    print(locals().get(""üçÜ""))

Getting

    Value of üçÜ is 127814

Therefore, üçÜ can be a variable in Python (in globals and locals). But also horizontal tab, backspace, null character, ... can be. Of course, they are not accessible in the code the same way than œÜ or hello\_world, but still it's a nice gimmick. I hope you find it fun and/or useful.

But now the real thing. In this context, do you know if using backspace or null as a variable in globals could break the program in execution time? Thank you.

",no_PlanetB,1gc2gmg,https://reddit.com/r/Python/comments/1gc2gmg/every_unicode_character_can_be_a_variable_name_in/,https://www.reddit.com/r/Python/comments/1gc2gmg/every_unicode_character_can_be_a_variable_name_in/,2024-10-25 19:25:04,36,0.72,36,0,10,0,0,False,False,True,False,False,Discussion,self,t3_1gc2gmg
Python,"Posting 2 - the HTTP client TUI, now supports Python scripting, custom keymaps, and more!","Hello r/Python

I'm excited to share Posting 2 with you all!

# What My Project Does

Posting is a terminal based app for interacting with HTTP APIs. It's a bit like Postman, Insomnia, Bruno, etc.

Posting is a snappy and keyboard-centric UI, built for power users but still approachable for those who aren't familiar with terminal apps.

You can build up requests using the UI, send them and interact with the response, and save the requests to disk as simple YAML files for easy sharing, version control, and re-use.

Posting offers efficient ""jump mode"" navigation which allows you to jump across the UI quickly with the keyboard, extensive autocompletion, themes, integration with other tools (e.g. quickly swap into Vim to edit a request body and swap back), and a bunch more quality-of-life features to let you move fast.

It's written entirely in Python using the Textual framework, and also uses great Python tools like httpx and Pydantic.

With the new release of version 2, you can now run Python code before and after requests! This lets you perform setup and teardown (e.g. logging, setting variables, tokens, etc.).

This version also introduces the (frequently requested) ability to change your keymap for a variety of actions. This will hopefully prevent keybind clashes with your emulator/tmux/whatever!

# Target Audience

If you work with HTTP APIs, and if you particularly enjoy apps that run in the terminal and are keyboard focused, then I think you'll enjoy working with Posting.

# Comparison

* Postman and Insomnia: Electron-based GUIs which are more feature-rich than Posting but don't run in the terminal. Uses a proprietary format for storing requests on disk, making them harder to share and hand-edit. Posting uses YAML instead. As Electron apps, you cannot run Postman or Insomnia over SSH. These apps are also less keyboard focused and are mostly designed to be used via mouse control.
* Bruno: Fully open source. Uses a human-readable format for storing requests, albeit the format uses a custom DSL and so is not easily parsed by other tools.

I hope you enjoy it - I would love to know what you think here or in a discussion on GH!

**Repo**: [https://github.com/darrenburns/posting](https://github.com/darrenburns/posting)

**Docs:** [https://posting.sh](https://posting.sh)

**Blog post:** [https://darren.codes/posts/posting2/](https://darren.codes/posts/posting2/)",darrenburns,1gc0tiu,https://reddit.com/r/Python/comments/1gc0tiu/posting_2_the_http_client_tui_now_supports_python/,https://www.reddit.com/r/Python/comments/1gc0tiu/posting_2_the_http_client_tui_now_supports_python/,2024-10-25 18:13:20,30,0.96,30,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1gc0tiu
Python,Anyone working on or with a great but little-known test framework?,"If you're developing or enjoying a less popular testing framework with Python, I'd love to hear about it! 

I don't love pytest, some of its complexities, tall decorator stacks, and function naming conventions.

I *do* love [ward](https://github.com/darrenburns/ward), with its unusual non-function-naming test names, and unusual defining-functions-in-loops for parameterization. Unfortunately it's now archived, as the developer is busy at Textualize.

Maintaining it myself is probably beyond my abilities and bandwidth, so I plan to migrate some projects to pytest soon, but wanted to check if anyone can show off some fun alternative with something special to offer.

Thanks for any contribution!",AndydeCleyre,1gbxrho,https://reddit.com/r/Python/comments/1gbxrho/anyone_working_on_or_with_a_great_but_littleknown/,https://www.reddit.com/r/Python/comments/1gbxrho/anyone_working_on_or_with_a_great_but_littleknown/,2024-10-25 16:02:52,6,0.72,6,0,8,0,0,False,False,True,False,False,Discussion,self,t3_1gbxrho
Python,This is now valid syntax in Python 3.13!,"There are a [few changes that didn't get much attention](https://www.bitecode.dev/p/python-313-what-didnt-make-the-headlines) in the last releases, and one of them is that comprehensions and lambdas can now be used in annotations (the place where you put type hints).

As the article mentions, this came from a bug tickets that requested this to work:

    class name_2[*name_5, name_3: int]:
        (name_3 := name_4)
    
        class name_4[name_5: name_5]((name_4 for name_5 in name_0 if name_3), name_2 if name_3 else name_0):
            pass

  
Here we have a walrus, unpacking, type vars and a comprehension all in one. I tried it in 3.13 (you gotta create a few variables), and yes, it is now valid syntax.

I don't think I have any use for it (except the typevar, it's pretty sweet), but I pity the person that will have to read that one day in a real code base :)



  
",alicedu06,1gbu1g0,https://reddit.com/r/Python/comments/1gbu1g0/this_is_now_valid_syntax_in_python_313/,https://www.reddit.com/r/Python/comments/1gbu1g0/this_is_now_valid_syntax_in_python_313/,2024-10-25 13:18:15,429,0.89,429,0,250,0,0,False,False,True,False,False,News,self,t3_1gbu1g0
Python,Python Tips Thread üêç,"Hey everyone! Let‚Äôs share our best Python tips, tricks, and resource links that have made coding easier or faster. Whether it's for simplifying code, using useful libraries, or optimizing performance, all contributions are welcome!!, let's go!",Ali-Zainulabdin,1gbr6ms,https://reddit.com/r/Python/comments/1gbr6ms/python_tips_thread/,https://www.reddit.com/r/Python/comments/1gbr6ms/python_tips_thread/,2024-10-25 10:36:14,0,0.41,0,0,15,0,0,False,False,True,False,False,Discussion,self,t3_1gbr6ms
Python,Single line turns the dataclass into a GUI/TUI &amp; CLI application ,"I've been annoyed for years of the overhead you get when building a user interface. It's easy to write a useful script but to put there CLI flags or a GUI window adds too much code. I've been crawling many times to find a library that handles this without burying me under tons of tutorials.

Last six months I spent doing research and developing a project that requires low to none skills to produce a full app out of nowhere. Unlike alternatives, mininterface requires almost nothing, no code modification at all, no learning. Just use a standard dataclass (or a pydantic model, attrs) to store the configuration and you get (1) CLI / config file parsing and (2) useful dialogs to be used in your app.

I've used this already for several projects in my company and I promise I won't release a new Python project without this ever again. I published it only last month and have presented it on two conferences so far ‚Äì it's still new. If you are a developer, you are the target audience. What do you think, is the interface intuitive enough? Should I rename a method or something now while the project is still a few weeks old?

[https://github.com/CZ-NIC/mininterface/](https://github.com/CZ-NIC/mininterface/)",the-e2rd,1gbprvv,https://reddit.com/r/Python/comments/1gbprvv/single_line_turns_the_dataclass_into_a_guitui_cli/,https://www.reddit.com/r/Python/comments/1gbprvv/single_line_turns_the_dataclass_into_a_guitui_cli/,2024-10-25 08:54:34,193,0.99,193,0,53,0,0,False,False,True,False,False,Showcase,self,t3_1gbprvv
Python,PyGenTree: A Simple Yet Powerful Python Package for Generating ASCII Directory Trees,"# What My Project Does

PyGenTree is a Python package that generates ASCII tree representations of directory structures. It's a simple command-line tool that allows you to visualize the structure of your project or any directory on your system. With PyGenTree, you can easily document your project's structure, quickly understand unfamiliar codebases, or generate directory trees for README files.

üîó Check it out on GitHub:¬†[https://github.com/taeefnajib/pygentree](https://github.com/taeefnajib/pygentree)  
If you like this project, please ‚≠ê it. It would encourage me to make better tools in the future.

# Target Audience

PyGenTree is designed for developers, programmers, and anyone who works with directory structures on a regular basis. It's a useful tool for:

* Developers who want to document their project's structure
* Programmers who need to quickly understand unfamiliar codebases
* DevOps teams who want to visualize directory structures for deployment or debugging purposes
* Anyone who wants to generate directory trees for README files or documentation purposes

# Comparison

There are existing tools that generate directory trees, such as `tree` on Linux and `dir` on Windows. There are online ASCII Tree Generators where you have to manually add files and directories. There are some python packages similar to this, but I tried to combine all the useful features from these alternatives and create this one. PyGenTree differs from these alternatives in several ways:

* **Cross-platform compatibility**: PyGenTree works on Windows, macOS, and Linux, making it a great choice for developers who work on multiple platforms.
* **Customizable output**: PyGenTree allows you to customize the output to suit your needs, including sorting options, depth levels, and exclusion of specific files and directories.
* **Easy installation**: PyGenTree is a Python package that can be easily installed using pip, making it a great choice for developers who already use Python.

# Key Features

* Easy installation: `pip install pygentree`
* Customizable depth levels
* Multiple sorting options (ascending, descending, standard)
* Option to show only directories
* Ignore hidden files/directories
* Exclude specific files/directories
* Save output to file
* Cross-platform compatibility

Here's a quick example of what you can do:

    # Basic usage (current directory)
    pygentree
    # Specify a directory and limit depth
    pygentree /path/to/directory -l 2
    # Sort files and folders, ignore hidden, exclude specific directories
    pygentree -s asc --ignore-hidden -e ""node_modules,venv,dist""

PyGenTree is perfect for anyone who wants a simple and powerful tool for generating ASCII directory trees. Feel free to try it out and let me know what you think!

üîó Check it out on GitHub: [https://github.com/taeefnajib/pygentree](https://github.com/taeefnajib/pygentree)

If you like this project, please ‚≠ê it. It would encourage me to make better tools in the future.",TaeefNajib,1gbnnbu,https://reddit.com/r/Python/comments/1gbnnbu/pygentree_a_simple_yet_powerful_python_package/,https://www.reddit.com/r/Python/comments/1gbnnbu/pygentree_a_simple_yet_powerful_python_package/,2024-10-25 06:10:59,28,0.97,28,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1gbnnbu
Python,Manim : package for maths animation,"I recently explored Manim, an open-sourced python package for generating animated videos for explaining maths. It includes animations for shapes, equations, codes, graphs, etc. The repo is trending on GitHub as well. The demo also looks very impressive. Check it out here : https://youtu.be/QciJxVjF4M4?si=Bk_gU4Tj5f6gPpiq",mehul_gupta1997,1gbldgk,https://reddit.com/r/Python/comments/1gbldgk/manim_package_for_maths_animation/,https://www.reddit.com/r/Python/comments/1gbldgk/manim_package_for_maths_animation/,2024-10-25 03:46:32,79,0.89,79,0,6,0,0,False,False,True,False,False,Tutorial,self,t3_1gbldgk
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1gbh5k3,https://reddit.com/r/Python/comments/1gbh5k3/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1gbh5k3/friday_daily_thread_rpython_meta_and_freetalk/,2024-10-25 00:00:50,1,0.6,1,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gbh5k3
Python,cstructpy- Python package designed for binary serialization and deserialization of structured data,"This app is open source and is made using Python:¬†[https://github.com/Maxim-Mushizky/cstructpy](https://github.com/Maxim-Mushizky/cstructpy)

Also can pip install it via pypi [https://pypi.org/project/cstructpy/](https://pypi.org/project/cstructpy/)

# What My Project Does

Provides a simple interface for packing and unpacking binary data based on field definitions using Python's¬†`struct`¬†module. The motivation for this package is to have a data validation using type annotations, similar to pydantic but for binary data. Therefore this package is best when used alongside pydantic.BaseModel or dataclasses.dataclass since it allows a similar class structure and object creation

# Target Audience

Mostly effective for distributed systems, where there are c like structs passed as binary and need to be verified in different parts of the code.

# Comparison

There are no current comparisons, since this project attempt to mimic the object creation and validation as present in Pydantic

# Contribution

If you require any new features or have a use for this package you are more than welcome to join as a celebrator

Enjoy!

  
**Edit:**

Added now also support (v0.2.0) for more flexible array types (only 1D arrays for now though) annotation by using the \_\_class\_getitem\_\_ dunder method. It works by annotating the primitive type with square brackets.  
**For example:**

    class ExampleStruct(GenericStruct):
      uint16_array: UINT16[4] 

UINT16\[4\] will now be an unsigned int16 array of 4, and it will also enforce the size and verify that all the types the same within the array.  
Supports all iterable types in python (list, tuple, set etc)

  
",OkAnything2044,1gb0o3f,https://reddit.com/r/Python/comments/1gb0o3f/cstructpy_python_package_designed_for_binary/,https://www.reddit.com/r/Python/comments/1gb0o3f/cstructpy_python_package_designed_for_binary/,2024-10-24 11:46:05,22,0.88,22,0,10,0,0,False,False,True,False,False,Showcase,self,t3_1gb0o3f
Python,Hatch or uv for a new project?,"I'm starting a new project, and I can't decide if hatch is needed anymore. 
Hatch can install packages using uv for speed, so I used both before.

But uv allows monorepo, while hatch doesn't support it yet.

What are the differences between the two tools ? What would you choose for a new project?",calsina,1gaz3tm,https://reddit.com/r/Python/comments/1gaz3tm/hatch_or_uv_for_a_new_project/,https://www.reddit.com/r/Python/comments/1gaz3tm/hatch_or_uv_for_a_new_project/,2024-10-24 10:10:29,86,0.9,86,0,98,0,0,False,False,True,False,False,Discussion,self,t3_1gaz3tm
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1gap9r6,https://reddit.com/r/Python/comments/1gap9r6/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1gap9r6/thursday_daily_thread_python_careers_courses_and/,2024-10-24 00:00:10,9,0.81,9,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1gap9r6
Python,Monoranger: A poetry plugin for managing monorepos,"üîó Link - [https://github.com/ag14774/poetry-monoranger-plugin](https://github.com/ag14774/poetry-monoranger-plugin)

# What my project does

I recently needed to set up a monorepo and I wanted to have similar structure as in Cargo workspaces from Rust.

Essentially I wanted to have a single lockfile shared between all components/projects in the library and have a single venv with all dependencies installed as this makes development so much easier. I use Poetry so I decided to create a plugin for this usecase.

This plugin:

* Enables multiple projects in a monorepo using Poetry to use a shared poetry lockfile
* Enables multiple projects in a monorepo using Poetry to use a shared virtual environment
* Allows projects to use path dependencies and pin their versions during 'poetry build'

# Target Audience

Any Python developer that wants to create a simple monorepo using Poetry and does not want to resort to complex build tools such as Nx. I will be keeping this plugin up to date and make sure that updates and fixes are pushed in a timely manner

# Comparison

The existing tools fall in two categories: 

a) Compicated build tools that have their focus on other programming languages but also support Python. An example of this is Nx. It's a nice tool but it has too many features for my use case

b) Some existing poetry plugins that allow users to use path dependencies and replace them with a pinned version during 'poetry build' but those do not offer the option to use a shared lockfile or venv. I wanted a single plugin that can handle all my monorepo-related requirements.

# Links

[https://github.com/ag14774/poetry-monoranger-plugin](https://github.com/ag14774/poetry-monoranger-plugin)",andreasyeah,1gak200,https://reddit.com/r/Python/comments/1gak200/monoranger_a_poetry_plugin_for_managing_monorepos/,https://www.reddit.com/r/Python/comments/1gak200/monoranger_a_poetry_plugin_for_managing_monorepos/,2024-10-23 20:10:18,20,0.74,20,0,18,0,0,False,False,True,False,False,Showcase,self,t3_1gak200
Python,3Domain: a 3D visualization tool for subdomain relationships,"WHAT MY PROJECT DOES

By scraping the most top level subdomains of any given website, 3Domain builds a 3D node graph of the relationship between the subdomains. This allows it's users to see which subdomain references which, and which it is referenced by, for a more holistic view of the web app.

TARGET AUDIENCE

My target audience is security professionals who want to understand the architecture of a web app. Additionally, software developers and architects who wish to gain a more holistic view of their own or others web sites. Lastly, maybe SEO professionals can use this as well. 

COMPARISON

3Domain aims to take a different approach to web scraping and spidering in an app. The closest tool that does this that I'm aware of is Burpsuite, which takes a different approach.

I would love to hear your thoughts!

https://github.com/Trivulzianus/3Domain",dvnci1452,1gahcdl,https://reddit.com/r/Python/comments/1gahcdl/3domain_a_3d_visualization_tool_for_subdomain/,https://www.reddit.com/r/Python/comments/1gahcdl/3domain_a_3d_visualization_tool_for_subdomain/,2024-10-23 18:11:58,10,0.8,10,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1gahcdl
Python,Python script to loop through all 4 AWS accounts ,Hi all I have 4 AWS accounts and different application load balancers in each. Can I get a python script using boto3 where my script takes ALB DNSName as input and navigate through all 4 accounts and give me ALB details and account details on which this ALB is hosted ?,srivatsavat92,1gah45u,https://reddit.com/r/Python/comments/1gah45u/python_script_to_loop_through_all_4_aws_accounts/,https://www.reddit.com/r/Python/comments/1gah45u/python_script_to_loop_through_all_4_aws_accounts/,2024-10-23 18:02:40,0,0.12,0,0,2,0,0,False,False,True,False,False,Discussion,self,t3_1gah45u
Python,How marimo notebooks bring Altair charts to life,"&gt;Data visualization is a crucial part of data analysis and storytelling. While static charts can convey information, interactive visualizations take it to the next level by allowing users to explore and understand data in depth. In this post, we‚Äôll explore how marimo notebooks breathe life into Altair charts, creating a dynamic and interactive data exploration experience.

[https://marimo.io/blog/altair](https://marimo.io/blog/altair)",mmmmmmyles,1gafpql,https://reddit.com/r/Python/comments/1gafpql/how_marimo_notebooks_bring_altair_charts_to_life/,https://www.reddit.com/r/Python/comments/1gafpql/how_marimo_notebooks_bring_altair_charts_to_life/,2024-10-23 17:05:25,0,0.41,0,0,8,0,0,False,False,True,False,False,Resource,self,t3_1gafpql
Python,Talks from PyData Amsterdam 2024 now on YouTube,"PyData has uploaded the talks from PyData Amsterdam 2024 (18-20 Sept) to YouTube.

- https://www.youtube.com/playlist?list=PLGVZCDnMOq0reU2lzNZCn9obkyRVaSnpF
- https://www.youtube.com/@PyDataTV/playlists
- https://www.youtube.com/@PyDataTV/videos",commandlineluser,1ga9frr,https://reddit.com/r/Python/comments/1ga9frr/talks_from_pydata_amsterdam_2024_now_on_youtube/,https://www.reddit.com/r/Python/comments/1ga9frr/talks_from_pydata_amsterdam_2024_now_on_youtube/,2024-10-23 12:34:24,83,0.96,83,0,1,0,0,False,False,True,False,False,Resource,self,t3_1ga9frr
Python,SongPi - Continuous song recognition app using Python,"This app is open source and is made using Python: [https://github.com/Mildywot/SongPi](https://github.com/Mildywot/SongPi)

# What My Project Does

My project sets up a Python environment for recognizing songs recorded via an attached microphone to pull a song's name, artist, and cover art within a second or two. It continuously recognizes songs playing (updating about 4 times a minute), and keeps the last song's info if no new song is detected.

It displays album art with a blurred background (of the same album art), and dynamically adjusts text color based on background brightness to keep the artist and title info readable.This project uses Tkinter for the GUI and PyAudio for recording audio, with ShazamIO as the song recognition engine.

You can resize your windowed mode to any size you want, and you can press the Esc button to toggle window and full screen mode.

# Target Audience

This is a toy project and is open source, it works for those wanting to know what song is currently playing.

I created this so when my girlfriend and I played vinyl records at home, we'd always be able to look at a screen and know which song on the record we're currently listening to.

# Comparison

There are some Python programs that identify full music files stored on a device, however I couldn't find any direct comparison project that continuously listens to audio in real time and shows you song information in a GUI like this.

**A few example screenshots below:**

[Window mode 1](https://raw.githubusercontent.com/Mildywot/SongPi/refs/heads/main/readme_images/Oshun-El-eee_windowed.png)

[Full screen example 1](https://raw.githubusercontent.com/Mildywot/SongPi/refs/heads/main/readme_images/JVB_fullscreen.png)

[Window mode 2](https://raw.githubusercontent.com/Mildywot/SongPi/refs/heads/main/readme_images/banger_windowed.png)

[Full screen example 2](https://raw.githubusercontent.com/Mildywot/SongPi/refs/heads/main/readme_images/divorced-aussie-dad-tunes_fullscreen.png)

Enjoy!

EDIT/ For further context on how this works:

1. SongPi loads the info from the config file, and sets up the environment for audio processing.
2. The audio input device (microphone) is selected using the functions¬†*list\_audio\_devices*,¬†*select\_input\_device*, and¬†*validate\_device\_channels*¬†handling the detection.
3. The¬†*record\_audio*¬†function makes use of PyAudio's audio handling and records 4 seconds of audio from your microphone then saves it as a .WAV file (the recording time can be edited in the config, but recordings less than 3 seconds don't seem to work so well, so I settled on 4 seconds as its pretty consistent).
4. The¬†*recognize\_song*¬†function uses the ShazamIO api to fingerprint the recorded audio in the .WAV file, send that fingerprint to Shazam, then receive back the song info. This functions runs in an asynchronous loop to repeatedly retry every 2 seconds in case of network errors.
5. Tkinter creates the GUI then displays the song title, artist and the cover art. It finds the display size of the current screen and only goes 'full screen' to the current screen (I was having issues with a multiple screen setup). I bound the escape button to toggle between full screen and windowed modes, along with having the mouse/cursor disappear after 5 seconds of inactivity (it shows again when moving the mouse). The¬†*update\_images*¬†and¬†*update\_gui*¬†functions only update if there are changes to the song recognition result (i.e. the GUI doesn't update if the same song or no song is detected).
6. Tkinter also modifies the font and text styling (song title is italic and the artist is bold), and anchors these below the central cover art (which resizes dynamically when detecting changes to the window size). The text should always be readable regardless of background colour as the¬†*calculate\_brightness*¬†function adjusts the text colour based on the background's brightness. Thanks to my mate's suggestion, I changed the background to be the current cover art with a gaussian blur using the¬†*create\_blurred\_background*¬†function (initially it would find the most common colour of the cover art and displayed it as a solid coloured background, it looked kind of shit as half the time it was just black or white).
7. The background thread¬†*start\_recognition\_thread*¬†runs in the background separate to the GUI thread so it all remains responsive and usable. SongPi essentially records for 4 seconds, gets the song info back in about 1-2 seconds, then repeats the whole process every 5 seconds or so (depending on recognition its about 4-5 updates per minute).",mildywot,1ga7dnr,https://reddit.com/r/Python/comments/1ga7dnr/songpi_continuous_song_recognition_app_using/,https://www.reddit.com/r/Python/comments/1ga7dnr/songpi_continuous_song_recognition_app_using/,2024-10-23 10:38:30,15,1.0,15,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1ga7dnr
Python,Dynamic Inputs: A way to break standard input limitations.,"**Hello!** I am excited to announce my first open-source project: **Dynamic Inputs**! As a intermediate developer, I would love your contributions and feedback!

# üåô Dynamic Inputs

## What My Project Does

**Dynamic Inputs** addresses common limitations of traditional input methods, such as the inability to read or modify input as it's being typed. With this challenge in mind, **Dynamic Inputs** offers a suite of features to make input handling more dynamic and interactive:

1. **Read User Input Anytime:** Allows the program to capture user input at any moment, which is particularly useful for live input analysis.
2. **Edit User Input:** Enables editing of user input in real-time, opening possibilities like live grammar correction or formatting input (e.g., replacing letters with asterisks for password input).
3. **Built-in Auto Completion:** Provides a built-in auto-completer with a customizable `complete` function, allowing developers to define custom logic for completing inputs.
4. **Raw Calls:** Offers the option to bypass the auto-completer and send direct function calls by setting `raw_call` to True.
5. **Inactivity Trigger:** Detects user inactivity and triggers predefined actions after a set idle time, which can be turned off by disabling `inactivity_trigger`.
6. **Block Empty Inputs:** Prevents empty submissions by blocking the Enter key when the input field is empty, with an option to override this by enabling `allow_empty_input`.
7. **Key Binding:** Supports key-specific logic for triggering functions, though hotkey support is limited due to reliance on `msvcrt` getch functionality on Windows.

## Target Audience

This project is ideal for developers who need more control over user input in their applications, particularly those working on command-line tools, real-time data collection, or interactive scripts. It's especially useful for hobbyists and those developing personal or experimental projects. As a intermediate developer, I‚Äôve designed it with ease of use and flexibility in mind, but more advanced developers may also find its customizability appealing.

## Comparison with Existing Alternatives

Unlike standard input methods, **Dynamic Inputs** allows for reading and editing user input while it is being typed, providing a more interactive experience. It also integrates auto-completion, user inactivity triggers, and input validation in ways that are not easily available in conventional input functions. While there are other libraries and modules for handling input, **Dynamic Inputs** combines these capabilities into a single, easy-to-use package, specifically for developers who want to handle inputs dynamically without reinventing the wheel.

**WARNING:**  
**Dynamic Inputs** is currently only available for Windows due to the use of msvcrt, but we may add Linux compatibility soon! If you'd like to help, please feel free to contribute!

# Want to contribute?

Check out our repository [here!](https://github.com/wired32/Dynamic-Input). I‚Äôm looking forward to your feedback and contributions!",PureSwing9975,1ga79jf,https://reddit.com/r/Python/comments/1ga79jf/dynamic_inputs_a_way_to_break_standard_input/,https://www.reddit.com/r/Python/comments/1ga79jf/dynamic_inputs_a_way_to_break_standard_input/,2024-10-23 10:31:03,28,0.94,28,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1ga79jf
Python,Python web-based classroom IDE for online teacher,"Hi
Wondering what options are out there for python IDE as an online teacher. I‚Äôve been asked to teach python and my experience is teaching scratch to students online and personal coding in C++, java, arduino projects etc.

I‚Äôm looking for something where I can have student accounts linked to mine, I can see their code, push out code examples to them, and maybe even jump in and edit/improve/comment on their code.

I don‚Äôt know much about python, but I suspect I want an IDE with useful built in libraries and assets for students aged around 9-13 to create fun little apps &amp; games like they could in scratch fairly easily.

Thoughts?",waxnwire,1ga66i8,https://reddit.com/r/Python/comments/1ga66i8/python_webbased_classroom_ide_for_online_teacher/,https://www.reddit.com/r/Python/comments/1ga66i8/python_webbased_classroom_ide_for_online_teacher/,2024-10-23 09:15:16,11,0.77,11,0,21,0,0,False,False,True,False,False,Resource,self,t3_1ga66i8
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1g9wxn3,https://reddit.com/r/Python/comments/1g9wxn3/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1g9wxn3/wednesday_daily_thread_beginner_questions/,2024-10-23 00:00:09,2,0.76,2,0,6,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g9wxn3
Python,[Project] Export Amazon wishlist to JSON,"I created a CLI app to allow exporting Amazon wishlist metadata to JSON.

https://github.com/nateify/amazon-wishlist-exporter

# What My Project Does

You provide an Amazon wishlist ID, store TLD, and store locale, and the web page will be scraped to generate the resulting JSON. Options allow you to format date into ISO 8601, and the ordering of the wishlist items can be specified.

I included a Javascript bookmarklet to allow the browser to download a rendered copy of wishlist HTML in case of downloading a private wishlist, since my program does not support authentication.

# Target Audience

Web scraping and archival got me into Python as a hobbyist. If you have ever wanted to preserve Amazon wishlist data or compare over time, this will be useful

# Comparison

I found a very similar Python program seen here: https://github.com/Jaymon/wishlist

It did not fit my use-case so I wrote my own. It allows scraping private wishlists by using Selenium, however I went the route of using ""curl_cffi"" which is a Python binding for curl. I preferred the simplicity, speed, and lightweight nature of it compared to a full browser automation. Jaymon's code is also usable as a module, mine is not (for now).",nateify,1g9wp7l,https://reddit.com/r/Python/comments/1g9wp7l/project_export_amazon_wishlist_to_json/,https://www.reddit.com/r/Python/comments/1g9wp7l/project_export_amazon_wishlist_to_json/,2024-10-22 23:48:43,5,0.74,5,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1g9wp7l
Python,Monoranger: A poetry plugin for managing monorepos,"I recently needed to set up a monorepo and I wanted to have similar structure as in Cargo workspaces from Rust.

Essentially I wanted to have a single lockfile shared between all components/projects in the library and have a single venv with all dependencies installed as this makes development so much easier. I use Poetry so I decided to create a plugin for this usecase.

# What my project does

* Enables multiple projects in a monorepo using Poetry to use a shared poetry lockfile
* Enables multiple projects in a monorepo using Poetry to use a shared virtual environment
* Allows projects to use path dependencies and pin their versions during 'poetry build'

# Target Audience

Any Python developer that wants to create a simple monorepo using Poetry and does not want to resort to complex build tools such as Nx. I will be keeping this plugin up to date and make sure that updates and fixes are pushed in a timely manner

# Comparison

The existing tools fall in two categories: 

a) Compicated build tools that have their focus on other programming languages but also support Python. An example of this is Nx. It's a nice tool but it has too many features for my use case

b) Some existing poetry plugins that allow users to use path dependencies and replace them with a pinned version during 'poetry build' but those do not offer the option to use a shared lockfile or venv. I wanted a single plugin that can handle all my monorepo-related requirements.

# Links

[https://github.com/ag14774/poetry-monoranger-plugin](https://github.com/ag14774/poetry-monoranger-plugin)",andreasyeah,1g9swii,https://reddit.com/r/Python/comments/1g9swii/monoranger_a_poetry_plugin_for_managing_monorepos/,https://www.reddit.com/r/Python/comments/1g9swii/monoranger_a_poetry_plugin_for_managing_monorepos/,2024-10-22 20:57:54,1,0.67,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1g9swii
Python,The Computer That Built Jupyter,"I am related to one of the original developers of Jupyter notebooks and Jupyter lab. Found it while going through storage. He developed it in our upstairs playroom. Thought I‚Äôd share some history before getting rid of it. 

[Pictures](https://imgur.com/a/oQnefkV)",ljatkins,1g9qpgq,https://reddit.com/r/Python/comments/1g9qpgq/the_computer_that_built_jupyter/,https://www.reddit.com/r/Python/comments/1g9qpgq/the_computer_that_built_jupyter/,2024-10-22 19:27:02,863,0.98,863,0,67,0,0,False,False,True,False,False,Discussion,self,t3_1g9qpgq
Python,Bank Project using pyqt5,"Hey guys,

Today i wanted to share a project i've been on for now 2 weeks and im really proud about it. Its a bank application that allows users to create an account, make transfert, create other account into the main one, change username, password etc.. This program could be used at a larger scale for real banks but i dont know how to host the files that contains the user's data online..

# What my project does

When launching the program you'll have to create an account and when logging on to it you will have the choice to either create other accounts (like saving ones) or make transferts.

Im using pyqt5 because the look is very cool and you can customize nearly everything. However because im not a good programer, im only 15 and i didn't know this library 2 weeks before it was kinda hard. But i still managed to make this app!

# Target audience

This program is just a simulation so there is no real goal or not a real targeted audience. However, why not if I feel like it, why not stocking user's data online and open the app online so everyone can open an account, deposit money and make transferts with other users. It could be an interesting idea!

# Comparison

The projects i've found where on github and at my surprise there weren't so many so im happy to say that i believe that mine is one of the best you can find, my program is good-looking and easy to use thats what it makes it better than the other one (i think)

Here is the link to the github page to my program, make sure to read the readme file to get the whole idea and other more precised information about the program:¬†[https://github.com/TuturGabao/BankApplication](https://github.com/TuturGabao/BankApplication)",FreedomOdd4991,1g9nrrg,https://reddit.com/r/Python/comments/1g9nrrg/bank_project_using_pyqt5/,https://www.reddit.com/r/Python/comments/1g9nrrg/bank_project_using_pyqt5/,2024-10-22 17:26:41,15,0.76,15,0,16,0,0,False,False,True,False,False,Showcase,self,t3_1g9nrrg
Python,BugGPT: a GPT powered vulnerable web app generator for bug bounty practice,"WHAT MY PROJECT DOES

By leveraging OpenAI's GPT-4o model, BugGPT creates intentionally exploitable web apps for bug bounty hunters to practice, and for software developers to learn best practices to avoid these flaws. BugGPT consists of 'rooms', which are named and numbered folders consisting of the vulnerable Flask app, and a markdown document explaining the flaw, the exploit, and best practices for developers to avoid these flaws. BugGPT utilizes GitHub Actions to periodically generate new room, assuring a growing collection of challenges to those interested.

TARGET AUDIENCE

My target audience is bug bounty hunters and students who want to learn and practice their skills in a *free* and forgiving environment, which will over time grow in variation. Additionally, amateur software developers who want to learn security best practice for their development journey and career.

COMPARISON

BugGPT aims to supplement and/or replace learning on PortSwigger, Hack The Box, etc. Additionally, it aims to provide security related learning material for software developers. By being free and constantly growing, BugGPT will surely be of service to people in the field.

I would love to hear your thoughts!

https://github.com/Trivulzianus/BugGPT",dvnci1452,1g9mvni,https://reddit.com/r/Python/comments/1g9mvni/buggpt_a_gpt_powered_vulnerable_web_app_generator/,https://www.reddit.com/r/Python/comments/1g9mvni/buggpt_a_gpt_powered_vulnerable_web_app_generator/,2024-10-22 16:50:26,7,0.64,7,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1g9mvni
Python,Build a Flask API for Whisper speech-to-text on GPU for free,"Hey guys, I just released a tutorial on [how to run Whisper on Colab GPU](https://www.assemblyai.com/blog/free-whisper-api-gpu/) and serve it with a Flask API so you can experiment with fast speech-to-text for free. [Here](https://github.com/AssemblyAI-Community/free-whisper-api-gpu)'s the repository if you want to take a look at it!",SleekEagle,1g9m5u6,https://reddit.com/r/Python/comments/1g9m5u6/build_a_flask_api_for_whisper_speechtotext_on_gpu/,https://www.reddit.com/r/Python/comments/1g9m5u6/build_a_flask_api_for_whisper_speechtotext_on_gpu/,2024-10-22 16:20:53,1,0.54,1,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1g9m5u6
Python,Pyloid: A Web-Based GUI Framwork for Desktop Applications - v0.14.2 Released,"# üåÄ What is Pyloid?

Pyloid is the Python backend version of Electron and Tauri, designed to simplify desktop application development. This open-source project, built on **QtWebEngine** and **PySide6**, provides seamless integration with various Python features, making it easy to build powerful applications effortlessly.

# üöÄ Why Pyloid?

With Pyloid, you can leverage the full power of Python in your desktop applications. Its simplicity and flexibility make it the perfect choice for both beginners and experienced developers looking for a Python-focused alternative to Electron or Tauri. It is especially optimized for building AI-powered desktop applications.

# üéØ Target Audience

Pyloid is ideal for:

* **Python Developers**: Build desktop apps with Python without learning new languages like Rust or C++.
* **AI/ML Enthusiasts**: Easily integrate AI models into desktop applications.
* **Web Developers**: Leverage your HTML, CSS, and JavaScript skills for desktop app development.
* **Electron/Tauri Users**: Enjoy a similar experience with enhanced Python integration.

# Key Features üöÄ

* **Web-based GUI Generation**: Easily build the UI for desktop applications using HTML, CSS, and JavaScript.
* **System Tray Icon Support**
* **Multi-Window Management**: Create and manage multiple windows effortlessly.
* **Bridge API between Python and JavaScript**
* **Single Instance Application / Multi Instance Application Support**: Supports both single and multi instance applications.
* **Comprehensive Desktop App Features**: Provides a wide range of functions for desktop apps, including monitor management, desktop capture, notifications, shortcuts, auto start, filewatcher and clipboard access.
* **Clean and Intuitive Code Structure**: Offers a simple and readable code structure that enhances developer productivity.
* **Live UI Development Experience**: Experience real-time UI updates as you modify your code, providing an efficient development workflow.
* **Cross-Platform Support**: Runs on various operating systems, including Windows, macOS, and Linux, Raspberry Pi OS.
* **Integration with Various Frontend Libraries**: Supports integration with frontend frameworks like HTML/CSS/JS and React.
* **Window Customization**: Customize window title bar and draggable region.
* **Direct Utilization of PySide6 Features**: Leverage almost all features of PySide6 to customize and extend the Pyloid API, offering limitless possibilities.
* **Detailed Numpy-style Docstrings**: Provide detailed and clear Numpy-style docstrings that greatly enhance the development experience, making it easy to understand and apply the API.

# üîç Comparison with Existing Alternatives

Electron: While Electron is widely used for desktop apps, it relies on Node.js and Chrome, leading to heavier resource usage. In contrast, Pyloid offers deeper integration with Python and is easier to use for Python developers, providing a smooth development experience.

Tauri: Tauri uses Rust for backend processes, which can be challenging for Python developers. Pyloid focuses on Python, making it easier to integrate with Python libraries and features, while maintaining a similar web-based UI approach.

PyQt/PySide: These frameworks require building UIs from scratch, while Pyloid allows you to create more sophisticated and modern UIs using web technologies (HTML/CSS/JS). This approach simplifies development and enables the creation of more visually appealing and complex interfaces.

PyWebview: Although PyWebview offers Python-JS bridging, Pyloid supports modern frameworks like React and provides a wider range of advanced features, such as real-time UI development and seamless Python integration, making it easier to use and more scalable for complex projects.

Key Differentiator: Pyloid excels in providing detailed, well-organized documentation and clear, Numpy-style docstrings, making the development process smoother and more efficient. This attention to detail helps developers quickly understand and apply the API, setting Pyloid apart from other alternatives.

# Documentation

[Pyloid GitHub](https://github.com/pyloid/pyloid)

[Pyloid Documentation](https://docs.pyloid.com/)

# Update üéá
Many features have been added since the previous version, and the official documentation has been updated and Numpy-style docstrings for all functions and methods!


Your feedback and testing are essential to making this open-source project even better. I am open to receiving any feature addition-related issues for my projects. Stars and support are always welcome and greatly appreciated.

Thanks!",Ok-Method-9403,1g9hwas,https://reddit.com/r/Python/comments/1g9hwas/pyloid_a_webbased_gui_framwork_for_desktop/,https://www.reddit.com/r/Python/comments/1g9hwas/pyloid_a_webbased_gui_framwork_for_desktop/,2024-10-22 13:16:57,105,0.85,105,0,22,0,0,False,False,True,False,False,Showcase,self,t3_1g9hwas
Python,PAR YT2Text v0.2.0 Released,"# What My project Does:

PAR YT2Text Based on ""yt"" By Daniel Miessler with the addition of OpenAI Whisper for videos that don't have transcripts.

# Whats New:

* Added support for local whisper model to transcribe audio

# Key Features:

* Extract metadata, transcripts, and comments from YouTube videos
* If the transcript is not available, optionally use OpenAI Whisper API or Local model to transcribe the audio

# GitHub and PyPI

* Check out the project on GitHub or for full documentation, installation instructions, and to contribute:¬†[https://github.com/paulrobello/par\_yt2text](https://github.com/paulrobello/par_yt2text)
* PyPI [https://pypi.org/project/par\_yt2text/](https://pypi.org/project/par_yt2text/)

# Comparison:

I have seem many command line applications that pull YouTube transcripts and some that transcribe Youtube audio, but none that try to get the transcript first then fall back to auto transcription and also have API / local model options for audio transcription.

# Target Audience

AI enthusiasts and people that dont have enough time to watch 100's of video blogs a day.",probello,1g94r46,https://reddit.com/r/Python/comments/1g94r46/par_yt2text_v020_released/,https://www.reddit.com/r/Python/comments/1g94r46/par_yt2text_v020_released/,2024-10-22 00:02:36,1,0.57,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1g94r46
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1g94p5f,https://reddit.com/r/Python/comments/1g94p5f/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1g94p5f/tuesday_daily_thread_advanced_questions/,2024-10-22 00:00:08,6,0.7,6,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g94p5f
Python,A search engine for all your memes - written in Python.,"The app is open source and written entirely in Python üëâ¬†[https://github.com/neonwatty/meme-search](https://github.com/neonwatty/meme-search)

# What My Project Does

The open source engine indexes your memes by their visual content and text, making them easily searchable. Drag and drop recovered memes into any messager.

The backend is built using these great open source components:

* moondream: a tiny, kickass vision language model
* all-MiniLM-L6-v2: a popular text embedding model
* faiss: a fast and efficient vector db
* sqlite: the swiss army knife of dbs

# Target Audience

This is a toy project. Open source and made for fun.

# Comparison

* immich: great open source image organizer, ~~does not (yet) have powerful image-to-text indexing~~
* other local photo apps: some allow for indexing but not quite at the level of a vlm yet",neonwatty,1g93yyw,https://reddit.com/r/Python/comments/1g93yyw/a_search_engine_for_all_your_memes_written_in/,https://www.reddit.com/r/Python/comments/1g93yyw/a_search_engine_for_all_your_memes_written_in/,2024-10-21 23:25:17,88,0.92,88,0,13,0,0,False,False,True,False,False,Showcase,self,t3_1g93yyw
Python,web_python: A web-based Python interpreter with optional static type checking,"Hey r/Python!

# What My Project Does

`web_python` uses Pyodide (WASM-based Python interpreter) and an (as of writing) experimental feature that allows mounting native file system directories to Pyodide's virtual file system to persist changes to the user's actual file system using Python code.

I've also added optional mypy type checking upon detecting a Python source code file change.

# Target Audience

I wanted a way to develop and test Python projects when I didn't have access to a native Python installation, and make the process *as close* to a native Python development workflow as possible.

This started from a personal need. But I've been making improvements, and it's ready for public use. You need a Chromium-based browser to use this (Chrome, Edge, etc.).

# Comparison

If an online Python interpreter allows multiple files, these usually have to be uploaded/downloaded manually to and from a virtual file system. `web_python` doesn't have this limitation, upon mounting a directory changes to and from the virtual file system are automatically shared.

Source code: [https://github.com/jon-edward/web\_python](https://github.com/jon-edward/web_python)

Hosted: [https://jon.is-a.dev/web\_python/](https://jon.is-a.dev/web_python/)

Let me know what you think! `:)`",NUL_SOH_STX,1g93k9z,https://reddit.com/r/Python/comments/1g93k9z/web_python_a_webbased_python_interpreter_with/,https://www.reddit.com/r/Python/comments/1g93k9z/web_python_a_webbased_python_interpreter_with/,2024-10-21 23:05:48,14,0.8,14,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1g93k9z
Python,"Introducing Amphi, Visual Data Transformation based on Python","Hi everyone,

I‚Äôd like to introduce a new free and source-available visual data transformation tool called¬†[Amphi](https://github.com/amphi-ai/amphi-etl).

# What My Project Does

Amphi is low-code tool designed for data preparation, manipulation and ETL tasks, whether you're working with files or databases, and it supports a wide range of data transformation operations.

# Target Audience

This project is free and source-available and meant for any data practitioners. It is a young project but is ready to be used in production for many use cases.

# Comparison

The main difference from tools like Alteryx or Knime is that Amphi is based on Python and generates native Python code (pandas and DuckDB) that you can export and run anywhere. You also have the flexibility to use any Python libraries and integrate custom code directly into your pipeline.

# Try it

Check out the Github repository here:¬†[https://github.com/amphi-ai/amphi-etl](https://github.com/amphi-ai/amphi-etl)

If you're interested don't hesitate to try, you can install it via pip (you need to have python and pip installed on your laptop):

`pip install amphi-etl`

`amphi start -w workspace/path/folder`

Don't hesitate to star the repo and open GitHub issues if you encounter any problems or have suggestions.

Amphi is still a young project, so there‚Äôs a lot that can be improved. I‚Äôd really appreciate any feedback!",thibautDR,1g8znm0,https://reddit.com/r/Python/comments/1g8znm0/introducing_amphi_visual_data_transformation/,https://www.reddit.com/r/Python/comments/1g8znm0/introducing_amphi_visual_data_transformation/,2024-10-21 20:18:16,29,0.85,29,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1g8znm0
Python,scikit-multiflow installation issue in ubuntu ,"I have trying to install scikit-multiflow lib in my system. I have all library updated. But I'm facing a issue with 'numpy.distutils. [SS from my terminal](https://i.sstatic.net/7Pw5VPeK.png). Any one fixed this before?

I came to know that distutils is not avialable in updated numpy. Even I tired to downgrade the verision still facing issue.",dumbestindumb,1g8zd31,https://reddit.com/r/Python/comments/1g8zd31/scikitmultiflow_installation_issue_in_ubuntu/,https://www.reddit.com/r/Python/comments/1g8zd31/scikitmultiflow_installation_issue_in_ubuntu/,2024-10-21 20:06:43,1,1.0,1,0,1,0,0,False,False,True,False,False,Discussion,self,t3_1g8zd31
Python,I made an app to lock your keyboard/mouse (Free + Open-source),"Link:¬†[https://github.com/Axorax/keylock](https://github.com/Axorax/keylock)

Download:¬†[https://github.com/Axorax/keylock/releases](https://github.com/Axorax/keylock/releases)

# What My Project Does

Keylock allows you to lock your keyboard or mouse or lock both so it blocks input coming from your keyboard/mouse. You can unlock it by clicking the buttons that you clicked to lock. There's also something called ""Emergency exit"". It's a shortcut which is ctrl + q by default which you can change. After your keyboard/mouse is locked, you can press the shortcut and it will unlock your keyboard/mouse instantly. You can also change other settings from the config file.

# Target Audience

Anyone who wants to lock their keyboard or mouse or both for any reason. Maybe you want to clean your keyboard without turning off your PC. Perhaps you want a video to play but don't want to accidentally click any keys. Or you just want to block off input from either your keyboard or mouse.

# Comparison

There's another paid app called keyboard mouse locker. Keylock has more features, it is free and open-source.",axorax,1g8w7mc,https://reddit.com/r/Python/comments/1g8w7mc/i_made_an_app_to_lock_your_keyboardmouse_free/,https://www.reddit.com/r/Python/comments/1g8w7mc/i_made_an_app_to_lock_your_keyboardmouse_free/,2024-10-21 18:00:16,24,0.8,24,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1g8w7mc
Python,Easily make and share GIFs of your favorite YouTube moments (using Python + Whisper Turbo),"The app is open source and written entirely in Python --&gt; [https://github.com/neonwatty/yt-gif-maker](https://github.com/neonwatty/yt-gif-maker)

# What My Project Does

Allows you to easily make and share gifs of your favorite YouTube moments.  Just

* Find a youtube / shorts url containing a short phrase you want to gif-a-fy
* Enter text describing the moment you want to gif-a-fy
* Click the 'create gif' button to create your gif, download, and share!

After creation you can manually adjust, trim, or extend the length of your gif.

# Target Audience

This is a toy project.  Open source and made for fun.

# Comparison

* ezgif: provides the ability to transform video to gif, but you have to cut the video yourself
* quicktime: allows video clipping / exporting as gif but all must be done manually",neonwatty,1g8u0nu,https://reddit.com/r/Python/comments/1g8u0nu/easily_make_and_share_gifs_of_your_favorite/,https://www.reddit.com/r/Python/comments/1g8u0nu/easily_make_and_share_gifs_of_your_favorite/,2024-10-21 16:32:15,25,0.79,25,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1g8u0nu
Python,"temporals - A time, date and datetime periods support","Hi guys!


I'm excited (and mostly nervous) to share my first Python project that is aimed at the wider audience of Python users.


# What Does It Do


**temporals** aims to provide a minimalistic utility layer on top of the Python standard library's `datetime` package in regards to working with `time`, `date` and `datetime` periods.


The library offers three different flavours of periods:

* `TimePeriod`
* `DatePeriod`
* `DatetimePeriod`


As you can probably guess from the names, each period corresponds to a `datetime`object and contains the same as its start and end variables.


When working with periods, each and every one of them is viewed as existing on a timeline, thus each period contains its own implementation of methods related to that position in time:


* Methods like `is_before`, `is_after` and `get_interim` serve the purpose of comparison between periods that exist in time in a non-overlapping fashion;
* Methods like `overlapped_by`, `overlaps_with`, `get_overlap` and `get_disconnect` provide the ability to work with periods that exist in time in an overlapping fashion;
* Operations such as equality between periods and the `in` keyword allow you to determine if a period is equal to, or exists fully within, another period


Additionally, each period instance contains a **Duration** under its `duration` attribute which is built on top of the datetime's `timedelta` and serves the purpose of giving the users the ability to work with each period's time duration.


# Comparison


Other libraries out there such as [Pendulum's Duration](https://pendulum.eustace.io/docs/#duration) and [Pandas' Interval](https://pandas.pydata.org/docs/reference/api/pandas.Interval.html) offer the same functionality as this library, and in a much richer (and, let's be honest, better) way, however, in my personal opinion, they also add a lot of overhead for this specific use case.


# Examples, Documentation, Links


In-depth documentation and examples is available on the Wiki page in Github; I didn't want to blast you all with a wall of text, so if I've managed to grab your attention so far, please do have a look at: https://github.com/dimitarOnGithub/temporals/wiki


PyPi page - https://pypi.org/project/temporals/


Source Code - https://github.com/dimitarOnGithub/temporals



# Notes


* The library does not currently have any specific logic around handling timezone aware objects (or the mix and match of them). As you know, those can be quite tricky to get right and I'd personally like to come up with an elegant way to deal with them in time.


* Any feedback and criticism is more than welcome and will be greatly appreciated! This is my first time sharing something with an audience bigger than just myself and I'm well aware there's probably a lot to improve.


Thank you for taking the time!",winterchillz,1g8nu9s,https://reddit.com/r/Python/comments/1g8nu9s/temporals_a_time_date_and_datetime_periods_support/,https://www.reddit.com/r/Python/comments/1g8nu9s/temporals_a_time_date_and_datetime_periods_support/,2024-10-21 11:54:31,8,0.67,8,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1g8nu9s
Python,Puzzle: Determine actual cost basis given list of transactions,"I closed a robo-traded account at Wealthfront, and received a list of all transactions, and a final cost basis (a list of held lots of a stock).

Given a list of transactions (buy 10, buy 20, buy 15, sell 12), you can tell which lots were sold from if you were left with these three lots (5, 13, 15).

So I published the transactions and the final cost basis, and thought it would be fun to try to figure out the robot's algorithm for choosing lots to sell from. Here it is: https://gist.github.com/dblume/e3d90cc9ad5f8778cf9d9413b27d38b2

Actual cost basis seems to be a mix of Highest In First Out, with a minor adjustment for Long Term Tax Gain.

I have not solved it. If you like this sort of puzzle, give it a go.",betterfool,1g8ebzh,https://reddit.com/r/Python/comments/1g8ebzh/puzzle_determine_actual_cost_basis_given_list_of/,https://www.reddit.com/r/Python/comments/1g8ebzh/puzzle_determine_actual_cost_basis_given_list_of/,2024-10-21 01:24:19,9,0.7,9,0,0,0,0,False,False,True,False,False,Discussion,self,t3_1g8ebzh
Python,Asynchronous framework for working with RabbitMQ,"Hello everybody! I wrote the first version of a small (so far) framework that allows you to work with the RabbitMQ broker.

I hope that this small project can benefit people and grow into something more. The main idea is to process essays asynchronously without resorting to extending the code ring in the project. Among the nice bonuses: there is validation of field types from messages (something like what is in FastAPI, only without dependency injection).

I would like you to study my code and, if anyone has any criticism or recommendations, leave your feedback. Thank you very much!

[https://pypi.org/project/aiocarrot/](https://pypi.org/project/aiocarrot/)  
[https://github.com/d3nbr0/aiocarrot/](https://github.com/d3nbr0/aiocarrot/)",Valuable_Lake6567,1g8dt16,https://reddit.com/r/Python/comments/1g8dt16/asynchronous_framework_for_working_with_rabbitmq/,https://www.reddit.com/r/Python/comments/1g8dt16/asynchronous_framework_for_working_with_rabbitmq/,2024-10-21 00:55:28,51,0.91,51,0,4,0,0,False,False,True,False,False,News,self,t3_1g8dt16
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1g8cr07,https://reddit.com/r/Python/comments/1g8cr07/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1g8cr07/monday_daily_thread_project_ideas/,2024-10-21 00:00:11,7,0.78,7,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g8cr07
Python,Why people still using flask after fastapi release,"Hi folks
I was having an interview for building machine learning based api application and the interviewer told me to use flask i did that and i used flask restful but i was wondering why not use fastapi instead",Sorry_Asparagus_3194,1g83rjr,https://reddit.com/r/Python/comments/1g83rjr/why_people_still_using_flask_after_fastapi_release/,https://www.reddit.com/r/Python/comments/1g83rjr/why_people_still_using_flask_after_fastapi_release/,2024-10-20 17:16:52,189,0.72,189,0,268,0,0,False,False,True,False,False,Discussion,self,t3_1g83rjr
Python,Mutmut 3 released,"I've just released version 3 of mutmut, the industry standard mutation tester for Python. It's an almost complete rewrite to using mutation schemata, which (when coupled with some other changes) massively improve performance. 

There is also a new terminal based UI for working with mutants that makes doing MT much faster and more fun.

Docs: https://mutmut.readthedocs.io/

Code: https://github.com/boxed/mutmut",kankyo,1g806h6,https://reddit.com/r/Python/comments/1g806h6/mutmut_3_released/,https://www.reddit.com/r/Python/comments/1g806h6/mutmut_3_released/,2024-10-20 14:39:07,29,0.85,29,0,4,0,0,False,False,True,False,False,News,self,t3_1g806h6
Python,Are all the scientific python subreddits dead?,I have checked r/scipy and it doesn't look like it has had any posts for years.  Where do people go to discuss scientific applications of python now?  I have implemented a Biot Savart equation simulation I am looking for some feedback on.,kiwiheretic,1g7t726,https://reddit.com/r/Python/comments/1g7t726/are_all_the_scientific_python_subreddits_dead/,https://www.reddit.com/r/Python/comments/1g7t726/are_all_the_scientific_python_subreddits_dead/,2024-10-20 07:16:46,107,0.88,107,0,48,0,0,False,False,True,False,False,Meta,self,t3_1g7t726
Python,I Built a simple demo of PyFiglet inside of Textual,"  
Been doing a lot of stuff with Textual lately. This is an extremely simple demo to showcase that integrating PyFiglet into Textual was quite easy.

Would welcome any advice, I'm really new to publishing.

[https://github.com/edward-jazzhands/textual-pyfiglet-demo](https://github.com/edward-jazzhands/textual-pyfiglet-demo)

**What My Project Does**

PyFigments is a program for converting text into large ASCII-art versions of that text. This is a showcase of incorporating PyFigments into a Textual widget

**Target Audience**

Anyone who likes using the Textual framework

**Comparison**

There's a good online version here: [https://patorjk.com/software/taag/](https://patorjk.com/software/taag/)

This was mostly made as a demo for making a pull request to the Textual framework.",classy_barbarian,1g7pew6,https://reddit.com/r/Python/comments/1g7pew6/i_built_a_simple_demo_of_pyfiglet_inside_of/,https://www.reddit.com/r/Python/comments/1g7pew6/i_built_a_simple_demo_of_pyfiglet_inside_of/,2024-10-20 03:00:32,10,0.76,10,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1g7pew6
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1g7m7nw,https://reddit.com/r/Python/comments/1g7m7nw/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1g7m7nw/sunday_daily_thread_whats_everyone_working_on/,2024-10-20 00:00:09,8,0.84,8,0,4,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g7m7nw
Python,sympy vector coordinate system conversion using express is completely broken and has been for years,"Just putting this here as a public service announcement to keep all of you from wasting hours of time attempting to use a ""feature"" of sympy that has been completely broken for years and sympy does not state is broken in there [documentation](https://docs.sympy.org/latest/modules/vector/coordsys.html#orienting-and-locating-new-systems). when making a child coordinate system in sympy i.e. Cartesian as the parent and Spherical as the child.

Now this doesn't appear so bad as you can just use a transformation matrix to convert between the two using a transformation matrix. However the new system is very much in spherical coordinates and should NEVER be stated as being in Cartesian and from my investigation sympy.vector.Del() is not making the correct del operator to perform curl, divergence, gradient etc when spherical cords are in terms of variables [x,y,z](https://en.wikipedia.org/wiki/List_of_common_coordinate_transformations#From_Cartesian_coordinates_2) which is a totally valid expression of spherical cords. 

I found this when attempting to convert a vector field from Cartesian to Spherical. Do not waste your time attempting to use anything other than Cartesian with sympy coordinate systems it is not worth it unless they fix it.

I have reported the issue to sympy on [github](https://github.com/sympy/sympy/issues/27164#issuecomment-2423808407) but this has been an issue for [years](https://github.com/sympy/sympy/pull/17507), if anyone wants to finish the preexisting PR or make your own I highly recommend it.",ChunkyPanda03,1g7j63m,https://reddit.com/r/Python/comments/1g7j63m/sympy_vector_coordinate_system_conversion_using/,https://www.reddit.com/r/Python/comments/1g7j63m/sympy_vector_coordinate_system_conversion_using/,2024-10-19 21:28:54,36,0.9,36,0,4,0,0,False,False,True,False,False,News,self,t3_1g7j63m
Python,"Incorporate long strings painlessly, beautifully into Python code.","# What My Project Does

Format long strings into paragraphs for easily editable, `gq`-able, `fill-paragraph`-able text values, error messages, and other paragraph-style strings.

    from paragraphs import par
    
    PARAGRAPH = par(
        """"""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
        veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
        commodo consequat.  Duis aute irure dolor in reprehenderit in voluptate
        velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat
        cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
        est laborum.""""""
    )
    
    # the above is equivalent to
    
    PARAGRAPH = (
        ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod""
        + "" tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim""
        + "" veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea""
        + "" commodo consequat. Duis aute irure dolor in reprehenderit in voluptate""
        + "" velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint""
        + "" occaecat cupidatat non proident, sunt in culpa qui officia deserunt""
        + "" mollit anim id est laborum.""
    )

    from paragraphs import par
    
    class SuddenDeathError(Exception):
        def __init__(self, cause: str) -&gt; None:
            self.cause = cause
    
        def __str__(self) -&gt; str:
            return par(
                f""""""
                Y - e - e - e - es, Lord love you! Why should she die of
                {self.cause}? She come through diphtheria right enough the year
                before. I saw her with my own eyes. Fairly blue with it, she was.
                They all thought she was dead; but my father, he kept ladling gin
                down her throat till she came to so sudden that she bit the bowl
                off the spoon.
    
                What call would a woman with that strength in her have to die of
                {self.cause}? What become of her new straw hat that should have
                come to me? Somebody pinched it; and what I say is, them as pinched
                it done her in.""""""
            )
    
    raise SuddenDeathError(""influenza"")

# Target Audience

Meant for production. This is a stable major version with no substantive changes in several years.

# Comparison

This likely does not compare with other libraries, only short functions you may have written yourself to accomplish the same thing. I find it more convenient to keep this stable, tested library as a dependency.

[ShayHill/paragraphs: Incorporate long strings painlessly, beautifully into Python code.](https://github.com/ShayHill/paragraphs)",Shay-Hill,1g7ea20,https://reddit.com/r/Python/comments/1g7ea20/incorporate_long_strings_painlessly_beautifully/,https://www.reddit.com/r/Python/comments/1g7ea20/incorporate_long_strings_painlessly_beautifully/,2024-10-19 17:40:50,7,0.56,7,0,23,0,0,False,False,True,False,False,Showcase,self,t3_1g7ea20
Python,"Real-time YouTube Comment Sentiment Analysis with Kafka, Spark, Docker, and Streamlit","Hey r/Python! üëã

# What My Project Does:

This project performs **real-time sentiment analysis** on **YouTube comments** using a stack of **Kafka**, **Spark**, **Docker**, and **Streamlit**. It classifies comments into **positive**, **neutral**, or **negative** sentiments and displays the results in a web interface for easy visualization and interpretation. The aim is to provide insights on how users are reacting to YouTube videos in real-time, which can be especially useful for content creators, marketers, or analysts who want to track audience reception.

# Target Audience:

This project is primarily a **learning-focused, proof-of-concept** to demonstrate the power of real-time big data analytics with modern tools. While it could potentially be expanded into a production-ready system, it‚Äôs currently a **toy project** meant for educational purposes and exploring various technologies. Developers looking to explore **Kafka**, **Spark**, and **Streamlit** in a Dockerized environment will find this project helpful.

# Comparison:

What sets this project apart from existing alternatives is its **real-time processing** capability combined with the use of **big data tools**. Most sentiment analysis projects process data in batch mode or on a smaller scale, while this project uses **Kafka** for real-time streaming and **Spark** for distributed processing. It‚Äôs also containerized with **Docker**, which makes it easy to deploy and scale. The use of **Streamlit** for a real-time dashboard further enhances the user experience by allowing dynamic data visualization.

# How it Works:

* **Kafka** streams YouTube comments in real-time.
* **Spark** processes the comments and classifies their sentiment (positive, neutral, negative).
* **Streamlit** provides a web interface to display the sentiment results.
* Everything is containerized using **Docker** for easy deployment.

If you‚Äôd like to check it out:

* **Docker Image**: [d3v3r/ytcomments]()
* **GitHub Repo**: [github.com/C0HEr/YTComments](https://github.com/C0HEr/YTComments)

Would love any feedback or suggestions from the community! üòä",dever404,1g7cs5l,https://reddit.com/r/Python/comments/1g7cs5l/realtime_youtube_comment_sentiment_analysis_with/,https://www.reddit.com/r/Python/comments/1g7cs5l/realtime_youtube_comment_sentiment_analysis_with/,2024-10-19 16:32:55,74,0.86,74,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1g7cs5l
Python,filefrag - library and executable to explore file fragmentation,"Spent last night making this, added some turd polish today and added it to pypi.

## ü§∑ why/what?

I wanted to get file fragmentation info so I can punch holes in files, aligned with memory pages. But I really didn't want to parse `filefrag`'s outputs, so I wrote a python version with a friendly API and a command line that can produce json.

It only works on Linux as it depends on the FIE interface, but pull requests welcome etc.

## ‚öíÔ∏è how?

See [the video](https://asciinema.org/a/681791) for a demo including installing from source, but you can install with pip:

`pip install filefrag`

Then you can run `pyfilefrag`, see `--help` for details. It has `--verbose`, and `--json` outputs for your parsing pleasure.

To use the library, just call `filefrag.FileMap('/path/whatever')` to build a map of the extents in the file using ioctl's interface. Then you can poke about in the guts of a file:

* ‚õìÔ∏è‚Äçüí• inspect fragmentation
* üîç find out where data is on your physical drive
* üü∞ compare extents between paths
* üìî use them as dict keys
* üï≥Ô∏è check files for holes, like before and after hole punching
* ‚úÖverify your XFS deduplication strategy, write your own stats tool
* üí© dump file layouts to json (`print(f""{filemap:j}""`)
* ‚ö†Ô∏è break your disk because you believed the outputs of this 0.0.1 release!

Comes with a Device class to do comparisons, so it ought to work with fragments in files on different mountpoints, bind mounts and so on (unfortunately not snap's FUSE mounts; they're far too abstract and piped in via a socket)

## üåç links

* üì∫ [asciinema](https://asciinema.org/a/681791) - video of install and use
* üßë‚Äçüíª [github](https://github.com/bitplane/pyfilefrag) - source is wtfpl licensed (with warranty clause)
* üì¶ [pypi](https://pypi.org/project/filefrag/) - current version is 0.0.1

------
Form 8.16432b follows

## What My Project Does
See above

## Target Audience
See above

## Comparison
See above

## Submission statement

AutoMod is a fascist with regex for arms and /dev/null for a brain.",david-song,1g70lqb,https://reddit.com/r/Python/comments/1g70lqb/filefrag_library_and_executable_to_explore_file/,https://www.reddit.com/r/Python/comments/1g70lqb/filefrag_library_and_executable_to_explore_file/,2024-10-19 03:56:50,18,0.76,18,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1g70lqb
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1g6wbs0,https://reddit.com/r/Python/comments/1g6wbs0/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1g6wbs0/saturday_daily_thread_resource_request_and/,2024-10-19 00:00:11,2,0.61,2,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g6wbs0
Python,"FriendlyDateParser, just another Python module for date parsing! ","Hello!

I've just released **FriendlyDateParser**, just another Python module for date parsing.


## What My Project Does

It can parse complex date expressions like:

* `2 days before the last day of next month`
* `1h15m after next Sunday at midnight CEST`
* `the second Monday of 2012`

The goal is to make working with date references straightforward, even when the expressions are complex.


## Target Audience

At this point, the module is still young and bugs should be expected. There may still be some edge cases which are not handled correctly.


## Comparison

Well, actually the reason for writing this module is that I had been using [**dateparser**](https://dateparser.readthedocs.io/) (*the* mature module with a similar purpose) for a while, but I found it was not able to handle all the cases I needed. So, I created **FriendlyDateParser** to address those gaps.

On the other hand, `dateparser` is multilingual while `friendlydateparser` only support English expressions (and I don't plan to extend the module in that way).

## Links

Check out the documentation and repo [here](https://github.com/salva/py-friendlydateparser)!

The module is also available from [PyPI](https://pypi.org/project/friendlydateparser/)



I'd love to hear your feedback and see how it works for you!",sfandino,1g6nwca,https://reddit.com/r/Python/comments/1g6nwca/friendlydateparser_just_another_python_module_for/,https://www.reddit.com/r/Python/comments/1g6nwca/friendlydateparser_just_another_python_module_for/,2024-10-18 17:35:21,15,0.78,15,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1g6nwca
Python,LLM Static Assert: Using LLMs for more expressive static analysis,"Hi everyone, I've been working on a Python library called [LLM Static Assert](https://github.com/kdunee/llm-static-assert) that uses large language models (LLMs) to perform static analysis. It's designed to help you verify complex code properties that might be difficult to capture with traditional static analysis tools.

**What it does:**

LLM Static Assert lets you write assertions in plain English. For example, you could assert that ""all public methods in class X should have a corresponding unit test.""

Here's a quick example of how it works:

    # Traditional approach would require:
    # 1. Iterating through all methods
    # 2. Parsing AST for each method
    # 3. Checking exception handling patterns
    # 4. Verifying logging calls
    # 5. Maintaining complex test code
    
    # With AILintTest:
    def test_error_handling():
        ailint.assert_code(
            ""All methods in {module} should use the custom ErrorHandler class for exception management, and log errors before re-raising them"",
            {""module"": my_critical_module}
        )
    
    # Another example - checking documentation consistency
    def test_docstring_completeness():
        ailint.assert_code(
            ""All public methods in {module} should have docstrings that include Parameters, Returns, and Examples sections"",
            {""module"": my_api_module}
        )

The library then uses an LLM to analyze your code and determine whether the assertion holds true.

**Target audience:**

This library is aimed at developers who are comfortable with static analysis and are looking for more expressive ways to verify their code. It could be particularly useful for projects with complex or nuanced code properties that are difficult to check with traditional tools.

**Comparison:**

Traditional static analysis tools rely on predefined rules and patterns. LLM Static Assert, on the other hand, leverages the reasoning capabilities of LLMs to understand and evaluate code in a more flexible and context-aware manner. This opens up possibilities for checking a wider range of code properties, including those that are difficult to define formally.

**Additional notes:**

* The library uses [LiteLLM](https://github.com/BerriAI/litellm) for LLM integration, allowing you to easily switch between different models.
* It also implements a quorum system to improve the reliability of the results.
* LLM Static Assert is still experimental, but I believe it has the potential to be a valuable addition to the Python ecosystem.

I've also written a more detailed blog post about the project, which you can find here: [https://www.kosmadunikowski.com/posts/llm-static-assert/](https://www.kosmadunikowski.com/posts/llm-static-assert/)

Feedback and suggestions are welcome!",kdunee,1g6mwtc,https://reddit.com/r/Python/comments/1g6mwtc/llm_static_assert_using_llms_for_more_expressive/,https://www.reddit.com/r/Python/comments/1g6mwtc/llm_static_assert_using_llms_for_more_expressive/,2024-10-18 16:53:25,0,0.35,0,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1g6mwtc
Python,I built an open-source AI-driven Code Review app for GitHub repos,"**What My Project Does**

Hi Everyone,

I recently built an open-source GitHub app in Django/python that can post a detailed line-by-line code review on any new PR. I'd love help in testing it as I seek feedback on it.

Here is the app:¬†[https://gitpack.co/](https://gitpack.co/)

Here is the source-code:¬†[https://github.com/gitpack-ai/gitpack-ai](https://github.com/gitpack-ai/gitpack-ai)¬†and an example PR review:¬†[https://github.com/gitpack-ai/gitpack-ai/pull/9](https://github.com/gitpack-ai/gitpack-ai/pull/9)

It's free for open-source repos, but I can enable this for private repos for a month or so, if you DM me. Appreciate your feedback! I hope you all can find value in it.

**Target Audience** 

Anyone who is actively developing on GitHub",shootingstar00,1g6m2mb,https://reddit.com/r/Python/comments/1g6m2mb/i_built_an_opensource_aidriven_code_review_app/,https://www.reddit.com/r/Python/comments/1g6m2mb/i_built_an_opensource_aidriven_code_review_app/,2024-10-18 16:18:01,96,0.76,96,0,26,0,0,False,False,True,False,False,Showcase,self,t3_1g6m2mb
Python,"Conceptual optimization, would a custom byte checking function be faster than len(list(object)) &gt;0?","i know this can be technically tested with a time thingy inside a test environment with something like timeit, but the answer would be limited to my machine's performance and state

rather i'm perplexed if the python code overhead compared to the direct cpython implementation + boolean check implementation would be roughly equal or not

i'm working with an api rather than directly python, this api has really weird quirks and what would be a usless improvement like `your_list[:]` in this software it can change between a crash and subsequent cpu hanging to a few second of processing due to it's horrible implementations of some of it's custom types

being a type conversion is already necessary in this software from it's custom types to a python datastruct to improve performance, the thought is: being it's a forced single thread api, making that usually useless millisecond save becomes important

would
```py
def is_data_struct_empty(data_struct: list | set | dict | tuple):
    match type(data_struct):
        case ""list"":
            return (data_struct.__sizeof__() == 40)
        case ""set"":
            return (data_struct.__sizeof__() == 200)
        case ""dict"":
            return (data_struct.__sizeof__() == 48)
        case ""tuple"":
            return (data_struct.__sizeof__() == 24)
        case _:
            return (len(data_struct) &gt; 0) #fallback hopefully never used
```
be faster than
```py
if ( len(list(weird_api_type)) &gt; 0 ):
```
from a conceptual perspective?

note: the conversion to list can't be cached as often the data will change mid operation and causes frequently stale data to be used instead making
```py
var = deepcopy(list(object))
if ( len(var) &gt; 0 ):
```
not feasible",ValyArhal,1g6fr6o,https://reddit.com/r/Python/comments/1g6fr6o/conceptual_optimization_would_a_custom_byte/,https://www.reddit.com/r/Python/comments/1g6fr6o/conceptual_optimization_would_a_custom_byte/,2024-10-18 11:26:52,0,0.33,0,0,8,0,0,False,False,True,False,False,Discussion,self,t3_1g6fr6o
Python,"PyTraceToIX - Debugging Jinja2 template, Flask web apps without breaking the design or code changes ","[Project on GitHub](https://github.com/a-bentofreire/pytracetoix)

## What My Project Does

PyTraceToIX is an expression tracer designed for debugging Jinja2 templates, Flask web apps, lambdas, list comprehensions, method chaining, and expressions in general.

Code editors often cannot set breakpoints within these kinds of expressions, which requires significant code modifications to debug effectively.
For Jinja2 templates, the debug extension can be used, but it typically dumps the entire context, making it difficult to isolate specific issues.

PyTraceToIX solves this by allowing developers to trace and write specific data directly to sys.stdout or a stream without altering the design or making any changes to the web application.

Additionally, PyTraceToIX can capture multiple inputs and their results, displaying them all in a single line, making it easier to view aggregated data and trace the flow of values.

PyTraceToIX offers a straightforward solution to these challenges, simplifying debugging while preserving the integrity of the original codebase.
It was designed to be simple, with easily identifiable functions that can be removed once the bug is found.

PyTraceToIX has 2 major functions:
- c__ capture the input of an expression input. ex: c__(x)
- d__ display the result of an expression and all the captured inputs. ex: d__(c__(x) + c__(y))

And 2 optional functions:
- init__ initializes display format, output stream and multithreading.
- t__ defines a name for the current thread.

## Features

- No external dependencies.
- Minimalist function names that are simple and short.
- Traces Results along with Inputs.
- Configurable Result and Input naming.
- Output to the `stdout` or a stream.
- Supports multiple levels.
- Capture Input method with customizable `allow` and `name` callbacks.
- Display Result method with customizable `allow`, `before`, and `after` callbacks.
- Result and Inputs can be reformatted and overridden.
- Configurable formatting at global level and at function level.
- Multithreading support.

## Target Audience

Anyone who wants to debug Jinja2 templates, Flask web apps, lambdas, list comprehensions, method chaining, and expressions in general.
It's not target for production, although, it could be used as well.

## Comparison

I looked for alternatives and I couldn't find any other project that would solve the same problem.

## Example

- A flask web app uses a Jinja2 template
- It generates a shopping card html table with product, quantity and final price.

| Product | Qty | Final Price |
| ------- | --- | ----------- |
| Smartphone | 5 | 2500 |
| Wireless B | 50 | 49960 |
| Smartphone | 20 | 1990 |

- The product name is only the first 11 characters, but we need to know the full name.
- It only shows the final price which is Price * Qty - discount.
- The discount is dependent of the quantity.
- c__ captures the complete name but doesn't change the design.
- c__ captures the qty and labels it as Qty.
- c__ captures the discount value.
- d__ outputs to sys.stdout all the captured inputs and the final price.

The stdout will display these lines:

```plaintext
i0:`Smartphone 128GB` | qty:`5` | i2:`500` | discount:`0` | _:`2500`
i0:`Wireless Bluetooth Headphones` | qty:`50` | i2:`1000` | discount:`40` | _:`49960`
i0:`Smartphone 64GB Black` | qty:`20` | i2:`100` | discount:`10` | _:`1990`
```

Jinja2 template:

```html
&lt;html lang=""en""&gt;
&lt;head&gt;&lt;link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css"" rel=""stylesheet""&gt;&lt;/head&gt;
&lt;body&gt;
    &lt;div class=""container mt-5""&gt;
        &lt;h1&gt;Shopping Cart&lt;/h1&gt;
        &lt;table class=""table table-striped""&gt;
            &lt;tr&gt;&lt;th&gt;Product&lt;/th&gt;&lt;th&gt;Qty&lt;/th&gt;&lt;th&gt;Final Price&lt;/th&gt;&lt;/tr&gt;
            {% for item in purchases %}
            {% set product = products[item['product']] %}
            &lt;tr&gt;
                &lt;td&gt;{{ c__(product['name'])[0:10] }}&lt;/td&gt;
                &lt;td&gt;{{ c__(item['qty'], name='qty') }}&lt;/td&gt;
                &lt;td&gt;{{ d__(c__(product['price']) * item['qty']
                    - c__(discount(item['qty']), name='discount')) }}&lt;/td&gt;
            &lt;/tr&gt;
            {% endfor %}
        &lt;/table&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
```

app.py:

```python
from flask import Flask, render_template
from pytracetoix import c__, d__

app = Flask(__name__)

app.Jinja2_env.globals['d__'] = d__
app.Jinja2_env.globals['c__'] = c__

DISCOUNTS = {50: 40, 20: 10, 10: 5, 0: 0}
PRODUCTS = {
    'WB50CC': {'name': 'Wireless Bluetooth Headphones', 'price': 1000},
    'PH20XX': {'name': 'Smartphone 128GB', 'price': 500},
    'PH50YY': {'name': 'Smartphone 64GB Black', 'price': 100}
}

PURCHASES = [
    {'product': 'PH20XX', 'qty': 5},
    {'product': 'WB50CC', 'qty': 50},
    {'product': 'PH50YY', 'qty': 20}
]


def discount(qty): return next((k, v) for k, v in DISCOUNTS.items() if k &lt;= qty)[1]


@app.route('/', methods=['GET'])
def index():
    return render_template('index.html', products=PRODUCTS, purchases=PURCHASES, discount=discount)


if __name__ == '__main__':
    app.run(debug=True)
```

If the previous example, we add c__ to the discount function on app.py:

```python
def discount(qty): return c__(next((k, v) for k, v in DISCOUNTS.items() if k &lt;= qty))[1]
```

It will add richer discount information to the output:

```plaintext
i0:`Smartphone 128GB` | qty:`5` | i2:`500` | i3:`(0, 0)` | discount:`0` | _:`2500`
i0:`Wireless Bluetooth Headphones` | qty:`50` | i2:`1000` | i3:`(50, 40)` | discount:`40` | _:`49960`
i0:`Smartphone 64GB Black` | qty:`20` | i2:`100` | i3:`(20, 10)` | discount:`10` | _:`1990`
```",abentofreire,1g6fd28,https://reddit.com/r/Python/comments/1g6fd28/pytracetoix_debugging_jinja2_template_flask_web/,https://www.reddit.com/r/Python/comments/1g6fd28/pytracetoix_debugging_jinja2_template_flask_web/,2024-10-18 11:02:58,27,0.94,27,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1g6fd28
Python,PyQt best option for commercial use? ,"I'm looking to possibly develop an app that will run on a Linux Desktop, specifically Ubuntu, and the latest OS X. The UI and performance are very important. Is PyQt my best option?",yellowgolfball,1g6brra,https://reddit.com/r/Python/comments/1g6brra/pyqt_best_option_for_commercial_use/,https://www.reddit.com/r/Python/comments/1g6brra/pyqt_best_option_for_commercial_use/,2024-10-18 06:32:29,36,0.79,36,0,39,0,0,False,False,True,False,False,Discussion,self,t3_1g6brra
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1g654oy,https://reddit.com/r/Python/comments/1g654oy/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1g654oy/friday_daily_thread_rpython_meta_and_freetalk/,2024-10-18 00:00:43,2,0.63,2,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g654oy
Python,"Advanced python tips, libraries or best practices from experts?","I have been working as a software engineer for about 2 years and python was always my go to language while building various different application. I always tried to keep my code clean and implement best practices as much as possible. 

I wonder if there are many more tips which could enhance the way I write python? ",FuzzyCraft68,1g5xswk,https://reddit.com/r/Python/comments/1g5xswk/advanced_python_tips_libraries_or_best_practices/,https://www.reddit.com/r/Python/comments/1g5xswk/advanced_python_tips_libraries_or_best_practices/,2024-10-17 18:29:20,155,0.92,155,0,71,0,0,False,False,True,False,False,Discussion,self,t3_1g5xswk
Python,"[Project] Automatically detecting optimal cuda device
","For folks who are doing ML, I often face the challenge of automating experiments on a shared workstation with multiple CUDA devices available. Instead of manually tracking which GPU has the most available memory, today I decided to create a simple package that handles this task for me.

[Pypi](https://pypi.org/project/cuda-selector/0.1.0/)

[Github](https://github.com/SamerMakni/cuda-selector)

```python
from cuda_selector import auto_cuda
        
# Select cuda device with most memory available
device = auto_cuda()
        
# Select cuda device with lowest power usasge usage
device = auto_cuda('power')

# Select cuda device with lowest power usasge usage
device = auto_cuda('utilization')
```

**What My Project Does**: It simply autodetects which optimal cuda device to use based on gpu usage, power, and available memory.

**Target Audience**: People who are running experiments on large shared workstation, for example in research centers.

**Comparison** Easier than choosing one cuda device at the begining of the experiment, it also automatically use cpu if no cuda devices are available or apple mps if you're on a mac device and mps are available.",SensitiveAccident505,1g5wv6n,https://reddit.com/r/Python/comments/1g5wv6n/project_automatically_detecting_optimal_cuda/,https://www.reddit.com/r/Python/comments/1g5wv6n/project_automatically_detecting_optimal_cuda/,2024-10-17 17:49:12,7,0.89,7,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1g5wv6n
Python,"Latest release of FastAgency makes building web, REST or streaming apps with AI agents a breeze","Today we hit a major milestone with the latest 0.3.0 release of the [**FastAgency**](https://github.com/airtai/fastagency) framework. With just a few lines of code, it allows you to go from a workflow written in **AutoGen** to:

* a web application using [**Mesop**](https://google.github.io/mesop/),
* a REST application using [**FastAPI**](https://fastapi.tiangolo.com/tutorial/), or
* a fully-distributed application using [**NATS.io**](https://nats.io/) message broker and [FastStream](https://github.com/airtai/faststream).

This solves a major problem of bringing agentic workflows written in frameworks such as **AutoGen** to production. The process that took us three months to get [Captn.ai](https://captn.ai/) to production can now be done in three days or less!

Please check out our GitHub repository and let us know what you think about it:

[https://github.com/airtai/fastagency](https://github.com/airtai/fastagency)",davorrunje,1g5vlip,https://reddit.com/r/Python/comments/1g5vlip/latest_release_of_fastagency_makes_building_web/,https://www.reddit.com/r/Python/comments/1g5vlip/latest_release_of_fastagency_makes_building_web/,2024-10-17 16:55:39,13,0.66,13,0,0,0,0,False,False,True,False,False,Resource,self,t3_1g5vlip
Python,Durable OpenAI Swarm - Reliable Multi-Agent Orchestration with OAI‚Äôs Swarm,"**What my project does**

Durable Swarm is a drop-in replacement for OpenAI‚Äôs Swarm that augments it with durable execution to help you build reliable and scalable multi-agent systems.

Durable Swarm makes your agentic workflows resilient to failures, so that if they are interrupted or restarted, they automatically resume from their last completed steps.

https://github.com/dbos-inc/durable-swarm

As multi-agent workflows become more common, longer-running, and more interactive, it's important to make them reliable. If an agent spends hours waiting for user inputs or processing complex workflows, it needs to be resilient to transient failures, such as a server restart. However, reliable multi-agent orchestration isn't easy‚Äîit requires complex rearchitecting like routing agent communication through SQS or Kafka.

Durable execution helps you write reliable agents while preserving the ease of use of a framework like Swarm. The idea is to automatically persist the execution state of your Swarm workflow in a Postgres database. That way, if your program is interrupted, it can automatically resume your agentic workflows from the last completed step.
Here‚Äôs an example application‚Äìa durable refund agent that automatically recovers from interruptions when processing refunds:

https://github.com/dbos-inc/durable-swarm/tree/main/examples/reliable_refund

We also converted all of OpenAI‚Äôs example applications to Durable Swarm:

https://github.com/dbos-inc/durable-swarm/tree/main/examples

Under the hood, we implemented Durable Swarm using DBOS (https://github.com/dbos-inc/dbos-transact-py), an open-source lightweight durable execution library that my company developed. The entire implementation of Durable Swarm is 24 lines of code, declaring the main loop of swarm to be a durable workflow and each chat completion or tool call to be a step in that workflow. Check it out here:

https://github.com/dbos-inc/durable-swarm/blob/main/durable_swarm.py


**Target Audience**

This is designed for both hobby projects and production workloads.  Anyone who wants a simple way to run OpenAI's swarm reliably would be interested in our library.  You can host locally with our open-source library or get the full set of optimizations by uploading to our cloud.

**Comparison**

This is OpenAIs swarm with durability. There is no other library like this, probably because OAI's swarm is only two days old!

We'd love to hear what you think!  We‚Äôll be in the comments for the rest of the day to answer any questions you may have.",jedberg,1g5uuuo,https://reddit.com/r/Python/comments/1g5uuuo/durable_openai_swarm_reliable_multiagent/,https://www.reddit.com/r/Python/comments/1g5uuuo/durable_openai_swarm_reliable_multiagent/,2024-10-17 16:24:11,13,0.84,13,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1g5uuuo
Python,Explore (almost) any python codebase interactively,"https://github.com/markuslahde/pop-up-ide

#What My Project Does
I made a package that enables entering interactive/iterative coding environment from any line of regular python code. Namespace of host environment is copied and can be manipulated inside the environment without irreversible changes. The coding environment has autocomplete and syntax highlighting.

#Target Audience 
This is a toy project, but I think this kind of tool could have use cases in debugging or iterative development.

#Comparison
Functionality is a bit similar to REPL or notebook workflow.

Comments and ideas are welcome!",ArkhamDuels,1g5sxez,https://reddit.com/r/Python/comments/1g5sxez/explore_almost_any_python_codebase_interactively/,https://www.reddit.com/r/Python/comments/1g5sxez/explore_almost_any_python_codebase_interactively/,2024-10-17 15:01:03,8,0.75,8,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1g5sxez
Python,A new way to manipulate a deep nested data without manually writing for loops to iterate it.,"for example we need to calculate the sum of estimated value from all tasks.

we'll need to loop from teams, sprints, stories and tasks.

in python the code will looks like a shape of callback hell (in js)

    # get the sum of estimated and done estimated
    input = {
        ""name"": ""Team A"",
        ""sprints"": [
            {
                ""name"": ""Sprint 1"",
                ""stories"": [
                    {
                        ""name"": ""Story 1"",
                        ""tasks"": [
                            {""name"": ""Task 1"", ""estimated"": 5, ""done"": False},
                            {""name"": ""Task 2"", ""estimated"": 3, ""done"": True},
                        ]
                    },
                    {
                        ""name"": ""Story 2"",
                        ""tasks"": [
                            {""name"": ""Task 3"", ""estimated"": 2, ""done"": True},
                            {""name"": ""Task 4"", ""estimated"": 1, ""done"": True},
                        ]
                    }
                ]
            },
            {
                ""name"": ""Sprint 2"",
                ""stories"": [
                    {
                        ""name"": ""Story 3"",
                        ""tasks"": [
                            {""name"": ""Task 5"", ""estimated"": 3, ""done"": False},
                            {""name"": ""Task 6"", ""estimated"": 2, ""done"": False},
                        ]
                    },
                    {
                        ""name"": ""Story 4"",
                        ""tasks"": [
                            {""name"": ""Task 7"", ""estimated"": 1, ""done"": False},
                            {""name"": ""Task 8"", ""estimated"": 3, ""done"": False},
                        ]
                    }
                ]
            }
        ]
    }

We can hide the part of iterating, and let pydantic-resolve do it internally.

what we need is just simply describing the schema, and add some collect (and define the behavior).

    import asyncio
    from pydantic_resolve import Resolver, ICollector
    from pydantic import BaseModel
    
    
    class TotalEstimateCollector(ICollector):
        def __init__(self, alias):
            self.alias = alias
            self.counter = 0
    
        def add(self, val):
            self.counter = self.counter + val
    
        def values(self):
            return self.counter
    
    class TotalDoneEstimateCollector(ICollector):
        def __init__(self, alias):
            self.alias = alias
            self.counter = 0
    
        def add(self, val):
            done, estimate = val
            if done:
                self.counter = self.counter + estimate
    
        def values(self):
            return self.counter
    
    class Task(BaseModel):
        __pydantic_resolve_collect__ = {
            'estimated': 'total_estimate',
            ('done', 'estimated'): 'done_estimate'
        }
        name: str
        estimated: int
        done: bool
    
    class Story(BaseModel):
        name: str
        tasks: list[Task]
    
    class Sprint(BaseModel):
        name: str
        stories: list[Story]
    
    class Team(BaseModel):
        name: str
        sprints: list[Sprint]
    
        total_estimated: int = 0
        def post_total_estimated(self, counter=TotalEstimateCollector('total_estimate')):
            return counter.values()
    
        total_done_estimated: int = 0
        def post_total_done_estimated(self, counter=TotalDoneEstimateCollector('done_estimate')):
            return counter.values()
    
    async def main():
        team = Team.parse_obj(input)
        team = await Resolver().resolve(team)
        print(team.total_estimated)   # 20
        print(team.total_done_estimated)  # 6
    
    asyncio.run(main())



PART 2:

what would the for loop become if the total\_estimated and total\_done\_estimated are required at all levels (e.g. sprint, story)



it's would be as simple as copy and paste in pydantic-resolve

    class Story(BaseModel):
        name: str
        tasks: list[Task]
    
        total_estimated: int = 0
        def post_total_estimated(self, counter=TotalEstimateCollector('total_estimate')):
            return counter.values()
    
        total_done_estimated: int = 0
        def post_total_done_estimated(self, counter=TotalDoneEstimateCollector('done_estimate')):
            return counter.values()
    
    class Sprint(BaseModel):
        name: str
        stories: list[Story]
    
        total_estimated: int = 0
        def post_total_estimated(self, counter=TotalEstimateCollector('total_estimate')):
            return counter.values()
    
        total_done_estimated: int = 0
        def post_total_done_estimated(self, counter=TotalDoneEstimateCollector('done_estimate')):
            return counter.values()
    
    class Team(BaseModel):
        name: str
        sprints: list[Sprint]
    
        total_estimated: int = 0
        def post_total_estimated(self, counter=TotalEstimateCollector('total_estimate')):
            return counter.values()
    
        total_done_estimated: int = 0
        def post_total_done_estimated(self, counter=TotalDoneEstimateCollector('done_estimate')):
            return counter.values()
    
    async def main():
        team = Team.parse_obj(input)
        team = await Resolver().resolve(team)
        print(team.total_estimated)   # 20
        print(team.total_done_estimated)  # 6
    
    asyncio.run(main())



this is pydantic-resolve (https://github.com/allmonday/pydantic-resolve)

a simple yet flexible library that can enhance your coding experience.

",TurbulentAd8020,1g5sb9d,https://reddit.com/r/Python/comments/1g5sb9d/a_new_way_to_manipulate_a_deep_nested_data/,https://www.reddit.com/r/Python/comments/1g5sb9d/a_new_way_to_manipulate_a_deep_nested_data/,2024-10-17 14:34:19,0,0.39,0,0,39,0,0,False,False,True,False,False,Discussion,self,t3_1g5sb9d
Python,"Create and run a microservice, with a simple browser prompt.  Download and customize in your IDE.","Open the [Web/GenAI website](https://apifabric.ai/admin-app/), and provide a **Natural Language prompt to create a microservice** - a database, an API and a Web App.  Then run it.  See the example prompt below.

&gt;Working software - real screens - have proven to be an effective way to collaborate and iterate with stakeholders, to ensure the requirements are met.  Much more effective than wire frames.

You can now produce these in a minute - no database definition, no framework complexity, not even any screen painting.

Then, download the project and **customize it in your IDE**.  You can also use CodeSpaces, a browser-based version of VSCode.

**Open container-based deployment** supports the infrastructure of your choice.

Web/GenAI is part of [API Logic Server](https://apilogicserver.github.io/Docs/WebGenAI/), an open source Python project based on the Flask and SQLAlchemy frameworks.

You can also view [this video](https://www.youtube.com/watch?v=-tMGqDzxd2A&amp;t=4s).

.

# 1. Web/GenAI - create microservice from prompt

Enter the following prompt into the Web/GenAI site:

    Create a system with customers, orders, items and products.
    
    Include a notes field for orders.
    
    Use LogicBank to create declare_logic() to enforce the Check Credit requirement (do not generate check constraints):
    1. Customer.balance &lt;= credit_limit
    2. Customer.balance = Sum(Order.amount_total where date_shipped is null)
    3. Order.amount_total = Sum(Item.amount)
    4. Item.amount = quantity * unit_price
    5. Store the Item.unit_price as a copy from Product.unit_price

You can also use an existing database.

# 2. What gets created

The created microservice includes:

1. **A Web App:** multi-table (master/detail), multi-page with page navigations, lookups (find a Product by name, not product#) and automatic joins (show Product Name for each Item)
2. **Logic:** the rules above are translated to Python rule declarations
3. **A JSON:API**: multi-table standards-based API, including swagger
4. **A database**: with test data

# Created Project: Models, not code

What does *not* get created is piles of code that are hard to understand and modify.  Rather, the app, logic and api are represented as *models.* expressed in Python:

1. The web app is a YAML file (about 150 lines - no html or JavaScript).
2. The api looks like this (the models are SQLAlchemy data model classes, automatically created from the database):



        api.expose_object(database.models.Customer, method_decorators= method_decorators)
        api.expose_object(database.models.Item, method_decorators= method_decorators)
        api.expose_object(database.models.Order, method_decorators= method_decorators)
        api.expose_object(database.models.Product, method_decorators= method_decorators)

# 3. Customize in your IDE: Rules, and Python

You can download the project and use your preferred desktop IDE, or continue using the browser with CodeSpaces.  You customize using Rules, and Python.  Let's have a look.

# Rules

The logic above (items 1-5) is translated into the following:

        # Logic from GenAI:
    
        Rule.sum(derive=Customer.balance, 
             as_sum_of=Order.amount_total, 
             where=lambda row: row.date_shipped is None)
        Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)
        Rule.formula(derive=Item.amount, 
             as_expression=lambda row: row.quantity * row.unit_price)
        Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)
        Rule.constraint(validate=Customer,
             as_condition=lambda row: row.balance &lt;= row.credit_limit,
             error_msg=""Balance exceeds credit limit ({row.credit_limit})"")
    
        # End Logic from GenAI

Note the Rule engine preserves the abstraction level of your logic - still just 5 rules, translated to Python.  Without rules, this would [require 200 lines of code](https://apilogicserver.github.io/Docs/Logic-Why/)... difficult to understand, debug, and extend.

You can add additional logic using IDE services for code completion.  Whether from natural language or via code completion, there are several important aspects of logic:

* Logic is **automatically reused** across all relevant Use Cases (add order, reselect products, re-assign orders to different customers, etc).  This drives quality by eliminating missed corner cases.
* Logic is **automatically ordered**, so maintenance does not require you to 'untangle' existing code to determine where to insert new logic.  This simplifies maintenance.
* **Automatic dependency management** analyzes each transaction (at the attribute level) to determine which rules fire (others are pruned).  **Automatic chaining** supports multi-table transactions (e.g., the a new Item *adjusts* the `Order.amount_total`, which *adjusts* the `Customer balance`, with is checked against the `credit_limit`).
* Logic is **optimized** to minimize SQL.  The adjustments noted above avoid expensive multi-row queries (`select sum`).

You can also activate **security** (`ApiLogicServer add-security db_url=auth`), and add a declarative Grant to filter out inactive customers for the sales role.

Debug the multi-table logic in your debugger.  The console log depicts each rule firing, with multi-row chaining shown by indentation.

&gt;Backend logic is typically nearly half the system.  A declarative approach makes this *far* more concise, easier to maintain, and higher quality.

# Python

In addition to rules, you can use standard Python and Python libraries.

Let's iterate our project to add Product.CarbonNeutral, and add business logic to provide discounts.

We update the logic - we change the amount derivation to test for carbon neutral products, using standard Python:

        def derive_amount(row: models.Item, 
                          old_row: models.Item, logic_row: LogicRow):
            amount = row.Quantity * row.UnitPrice
            if row.Product.CarbonNeutral == True and row.Quantity &gt;= 10:
               amount = amount * Decimal(0.9)  # breakpoint here
            return amount
    
        Rule.formula(derive=models.Item.Amount, calling=derive_amount)

Both the Rules and Python are automatically part of your API.  So, you can verify it works by using the Admin app to add a new Item to our Order, or Swagger.

# Application Integration

In addition to customizing our logic, we might also want to extend our API for integration, e.g., a custom endpoint for B2B orders, and send messages to internal applications.

We create a new B2B endpoint using standard Flask.  API Logic Server provides RowDictMapping services to transform incoming requests into SQLAlchemy rows.

    class ServicesEndPoint(safrs.JABase):
    
    
    (http_methods=[""POST""])
    def OrderB2B(self, *args, **kwargs):
        """""" # yaml creates Swagger description (not shown)
        """"""
    
        db = safrs.DB         # Use the safrs.DB, not db!
        session = db.session  # sqlalchemy.orm.scoping.scoped_session
    
        order_b2b_def = OrderB2B()
        request_dict_data = request.json[""meta""][""args""][""order""]
        sql_alchemy_row = order_b2b_def.dict_to_row(row_dict = 
                              request_dict_data, session = session)
    
        session.add(sql_alchemy_row)
        return {""Thankyou For Your OrderB2B""}  # automatic commit, which executes transaction logic

Our logic is automatically re-used for all updates, whether from the Admin App or the new custom endpoint.  That is why our api implementation is so small.

We extend our logic with an event that sends a Kafka message for internal App Integration:

    #als: Demonstrate that logic == Rules + Python (for extensibility)
    
    def send_order_to_shipping(row: Order, old_row: Order, logic_row: LogicRow):
            """""" #als: Send Kafka message formatted by RowDictMapper
    
            Args:
                row (Order): inserted Order
                old_row (Order): n/a
                logic_row (LogicRow): bundles curr/old row
            """"""
            if logic_row.is_inserted():
                kafka_producer.send_kafka_message(logic_row=logic_row,
                                     row_dict_mapper=OrderShipping,
                                     kafka_topic=""order_shipping"",
                                     kafka_key=str(row.OrderID),
                                     msg=""Sending Order to Shipping"")
                
    Rule.after_flush_row_event(on_class=Order, calling=send_order_to_shipping)

Test the integration with Swagger.  The log shows the logic, and the Kafka payload.

# Summary

And there you have it.

**GenAI Microservice Automation** creates projects with one prompt, providing API and App Automation, right from your browser.  Or, if you prefer, install and run from the command line.  Iterate, and find out fast if the requirements are understood, *before* intensive development.

Customize with **Logic Automation**, declaring rules to reduce the backend half of your system by 40X. No restrictions - use Python as required.

Open source, your IDE, container-based deployment, and all the flexibility of a framework.",ValBayArea,1g5pm3z,https://reddit.com/r/Python/comments/1g5pm3z/create_and_run_a_microservice_with_a_simple/,https://www.reddit.com/r/Python/comments/1g5pm3z/create_and_run_a_microservice_with_a_simple/,2024-10-17 12:23:47,27,0.76,27,0,10,0,0,False,False,True,False,False,Tutorial,self,t3_1g5pm3z
Python,[Project] I was tired of reading through thousands of lines of documentation,"Alongside Python, Im learning C. So as a way of testing how much I have learned, I decided to dabble in some socket programming in C. Found beej's guide, and got to work.

Problem? I hate reading too much educational stuff. I realized that after every 10 or so minutes I'd lose focus of what I was reading

Solution? Build a program into which I can stuff the ENTIRE documentation, then ask it questions, and it'll give me answers from the documentation I stuffed it with.

Behold, FTHEDOCS!

**What my project does:** It basically gives you a question-answer like interface to search the documentation, so you dont have to spend hours looking for those 2 lines.

**Target audience:** Anyone looking for a nicer way to read the docs. Or anyone who has a bunch of text and would like to search through it.

**Comparisons:** Not that I know of. Though I guess the Ctrl+F shortcut is kind of similiar

**REPO:** [**https://github.com/muaaz-ur-habibi/fthedocs**](https://github.com/muaaz-ur-habibi/fthedocs)

  
Do note: This was a fun project I built as a way to learn RAG, and to suite my specific needs. As a result, it might not be suited for you, though I tried my best to make it as customizable as possible.

  
Thanks to this, I got a simple connection from and to google up and running :)",Ok-Balance4649,1g5nyng,https://reddit.com/r/Python/comments/1g5nyng/project_i_was_tired_of_reading_through_thousands/,https://www.reddit.com/r/Python/comments/1g5nyng/project_i_was_tired_of_reading_through_thousands/,2024-10-17 10:43:42,56,0.8,56,0,13,0,0,False,False,True,False,False,Showcase,self,t3_1g5nyng
Python,Extension to render Google Colab Forms in regular Jupyter Notebooks,"Hi everyone,

Lately, I‚Äôve been bouncing between Google Colab and Jupyter for my projects. While I still prefer Jupyter for most of my work, I really miss the simplicity of Colab‚Äôs Forms feature.

So I create this tiny Extension bringing the functionality of Google Colab Forms to Jupyter Notebooks

    # Just add this to the top of your notebook
    %pip install ipyform
    %load_ext ipyform
    %form_config --auto-detect 1

From there, you can use the same Colab Form syntax you‚Äôre familiar with. It also plays well with all the popular data visualization libraries, including **matplotlib**, **plotly**, and **altair.**

Code¬†here:¬†[https://github.com/phihung/ipyform](https://github.com/phihung/ipyform)

*Let me know your thoughts or if you have any suggestions!*

**What My Project Does**

Extension to render *Google Colab Forms* on regular Jupyter Notebooks.

**Target audience**

People who use Jupyter notebooks - so data scientists and ML researchers.

**Comparisons**

Some [other](https://stackoverflow.com/questions/68360285/is-there-a-way-to-use-google-colab-form-feature-in-a-local-jupyter-notebook) approaches to solving this problem that I've seen include:

* Avoid Colab forms and use ipywidgets instead
* Connecting Colab UI to local Jupyter server",phi89,1g5mg6y,https://reddit.com/r/Python/comments/1g5mg6y/extension_to_render_google_colab_forms_in_regular/,https://www.reddit.com/r/Python/comments/1g5mg6y/extension_to_render_google_colab_forms_in_regular/,2024-10-17 08:54:20,7,1.0,7,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1g5mg6y
Python,"MVT Architecture in Django and How it Works with an Example | Django Tutorial
","In this video, we'll explore the MVT (Model-View-Template) Architecture in Django, the popular Python web framework. If you're new to Django or looking to understand its core structure, this tutorial will help you grasp the basics of how Django organizes web applications and the role of Models, Views, and Templates in creating dynamic, database-driven websites.  
  
What You'll Learn:

* What is MVT architecture? 
* A practical example demonstrating how the MVT components interact. 
* Best practices for structuring your Django project. 

By the end of this tutorial, you'll have a clear understanding of how Django handles the flow of data from the database to the user interface and how to implement your own web applications using this powerful framework.

  
Video Link :

[https://www.youtube.com/watch?v=sE87oB3wYMc](https://www.youtube.com/watch?v=sE87oB3wYMc)",Both_Ad5623,1g5l7cb,https://reddit.com/r/Python/comments/1g5l7cb/mvt_architecture_in_django_and_how_it_works_with/,https://www.reddit.com/r/Python/comments/1g5l7cb/mvt_architecture_in_django_and_how_it_works_with/,2024-10-17 07:15:48,0,0.38,0,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1g5l7cb
Python,"I made my computer go ""Cha Ching!"" every time my website makes money","**What My Project Does**

This is a really simple script, but I thought it was a pretty neat idea so I thought I'd show it off.

It alerts me of when my website makes money from affiliate links by playing a Cha Ching sound.

It searches for an open Firefox window with the title ""eBay Partner Network"" which is my daily report for my Ebay affiliate links, set to auto refresh, then loads the content of the page and checks to see if any of the fields with ""¬£"" in them have changed (I assume this would work for US users just by changing the ¬£ to a $). If it's changed, it knows I've made some money, so it plays the Cha Ching sound.

**Target Audience**

This is mainly for myself, but the code is available for anyone who wants to use it.

**Comparison**

I don't know if there's anything out there that does the same thing. It was simple enough to write that I didn't need to find an existing project.

I'm hoping my computer will be making noise non stop with this script.

Github: https://www.github.com/sgriffin53/earnings_update",haddock420,1g5f73k,https://reddit.com/r/Python/comments/1g5f73k/i_made_my_computer_go_cha_ching_every_time_my/,https://www.reddit.com/r/Python/comments/1g5f73k/i_made_my_computer_go_cha_ching_every_time_my/,2024-10-17 01:11:31,208,0.86,208,0,36,0,0,False,False,True,False,False,Showcase,self,t3_1g5f73k
Python,Text/Terminal-based games for project-based learning,"I'm already utilizing¬†[traitlets](https://traitlets.readthedocs.io/)¬†to keep containers (barrels, inventory etc.) updated on their content's states which I've learned is called ""reactive"" or ""event-based programming"", a skill utilized in the real world.

Do you think one can learn / practice a broad skillset through text-based games, translatable to real-world problems (which companies pay for)?",Maleficent_Height_49,1g5e4mw,https://reddit.com/r/Python/comments/1g5e4mw/textterminalbased_games_for_projectbased_learning/,https://www.reddit.com/r/Python/comments/1g5e4mw/textterminalbased_games_for_projectbased_learning/,2024-10-17 00:15:57,3,0.8,3,0,0,0,0,False,False,True,False,False,Discussion,self,t3_1g5e4mw
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1g5dt6z,https://reddit.com/r/Python/comments/1g5dt6z/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1g5dt6z/thursday_daily_thread_python_careers_courses_and/,2024-10-17 00:00:09,6,1.0,6,0,5,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g5dt6z
Python,Vim Plugin for Incremental Programming (SLIME) with Python,"I just did a major refactor of some Vim plugin ([https://www.vim.org/](https://www.vim.org/)) I've been using for a bit that was inspired by Emacs' slime-mode ([http://common-lisp.net/project/slime/](http://common-lisp.net/project/slime/)), but focused on Python rather than the parentheses-oriented languages. I've been calling it [vim-incpy](https://github.com/arizvisa/vim-incpy) and it's hosted at [https://github.com/arizvisa/vim-incpy](https://github.com/arizvisa/vim-incpy).

You can use ""`arizvisa/vim-incpy""` to install it with whatever Vim/Neovim plug-in manager you're using. The refactor added support for plugin managers, neovim's terminal, and includes documentation (which is always painful to write).

# Target Audience

This is for users general python users of the Vim editors (Vim or Neovim). I tend to find having a Python interpreter always available as useful even when I'm not writing Python. Hopefully others feel the same way...

# What my project does

The gist of it is that it's just a hidden buffer for whatever process you have configured. So you can always evaluate something in that REPL if you need to, and keep it hidden if you care about the screen space.. or not. It's pretty handy if you main with Python or prefer modal-editing for your REPL-ing. Usage is pretty much selecting the line or text, hitting `!` and it executes your code... where `&lt;C-/&gt;` or `&lt;C-\&gt;` will evaluate it. If you want to popup the help for an expression, you can use `&lt;C-@&gt;`.

It's pretty basic, but here's a screenshot (from an xpost) of me using it to help reverse some file format (it's the bottom panel): [https://i.redd.it/6t7lj94ql0vd1.png](https://i.redd.it/6t7lj94ql0vd1.png).

# Comparison (similar and related plugins for the Vim editors)

I just recently read about Conjure ([https://github.com/Olical/conjure](https://github.com/Olical/conjure)) and vim-slime ([https://github.com/jpalardy/vim-slime](https://github.com/jpalardy/vim-slime)) while trying to find similar projects.

Probably the one thing that might be different is that my plugin is probably a little more lightweight compared to Jupyter/IPython ([https://github.com/jupyterlab-contrib/jupyterlab-vim](https://github.com/jupyterlab-contrib/jupyterlab-vim)) or other notebook interfaces. It works cross-platform and runs your selection in a separate namespace within the internal python interpreter (to avoid python plugins for the editor clashing with your python workspace). It also works if your editor doesn't have a terminal api (since that was what it was originally written for).. although the terminal api is far superior.

Anyways, would appreciate any input or even feature requests if they're practical. If you know of any similar editor plugins, I'd love to hear about them too.",arizvisa,1g5byo7,https://reddit.com/r/Python/comments/1g5byo7/vim_plugin_for_incremental_programming_slime_with/,https://www.reddit.com/r/Python/comments/1g5byo7/vim_plugin_for_incremental_programming_slime_with/,2024-10-16 22:29:28,13,0.86,13,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1g5byo7
Python,Arizona coders/programers wanted ,"We are building a specialty tool that runs off of a Raspberry Pi 4.  The programming is in Python.  The CPU / programming controls a few different valves and measures sensor readings.

We are looking for someone in the Phoenix area that can help to finish up the programming.  Our current programmer has taken a full time position and is moving out.

The ideal candidate will have the following experience with Python programming - specifically in the area of working with high sensitivity sensors.  The balance of the programming is pretty basic but the sensor testing and outputs is more complex.",Expert-Resolution661,1g54wj1,https://reddit.com/r/Python/comments/1g54wj1/arizona_codersprogramers_wanted/,https://www.reddit.com/r/Python/comments/1g54wj1/arizona_codersprogramers_wanted/,2024-10-16 17:24:57,0,0.4,0,0,4,0,0,False,False,True,False,False,Discussion,self,t3_1g54wj1
Python,Why do widely used frameworks in python use strings instead of enums for parameters?,"First that comes to mind is matplotlib. Why are parameters strings? E.g. `fig.legend(loc='topleft')`.  
Wouldn't it be much more elegant for enum `LegendPlacement.TOPLEFT` to exist?

What was their reasoning when they decided ""it'll be strings""?

EDIT: So many great answers already! Much to learn from this...",tothespace2,1g52103,https://reddit.com/r/Python/comments/1g52103/why_do_widely_used_frameworks_in_python_use/,https://www.reddit.com/r/Python/comments/1g52103/why_do_widely_used_frameworks_in_python_use/,2024-10-16 15:25:50,223,0.9,223,0,110,0,0,False,False,True,False,False,Discussion,self,t3_1g52103
Python,Censor words in audio using python,"Hi! I'm 18 and recently started building Python projects to upgrade my portfolio. I have this little idea about censorship slurs (or any word) without editing the audio manually word by word. I'm really glad with the result, but I fell in love with the project so I will keep improving it.

# What My Project Does

[Censorship-py](https://github.com/DanteUrdaneta/CENSORSHIP.PY) is a Python library that allows you to censor specific words in an audio file based on a given list of words, replacing the given words with a Beep sound.

# Target Audience

Content creators, video editors, media

# Comparison

I didn't find many projects very similar to mine, but I leave this one here [PyAudioCensor](https://github.com/Smartmayukh/PyAudioCensor).

Let me know some ideas or what you think about my project!",Nesdnt,1g4ud6e,https://reddit.com/r/Python/comments/1g4ud6e/censor_words_in_audio_using_python/,https://www.reddit.com/r/Python/comments/1g4ud6e/censor_words_in_audio_using_python/,2024-10-16 08:15:56,21,0.67,21,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1g4ud6e
Python,Parsera - website data extraction with minimal code,"Python library for scraping websites that I am building for the last few months. The idea is to make data extraction as simple as:

    from parsera import Parsera
    url = ""https://news.ycombinator.com/""
    elements = {
        ""Title"": ""News title"",
        ""Points"": ""Number of points"",
    }
    scraper = Parsera()
    result = scraper.run(url=url, elements=elements)

Check it out on GitHub and share your feedback: [https://github.com/raznem/parsera](https://github.com/raznem/parsera)

**What My Project Does**

It extracts data from websites without dealing with DOM structure and writing web scrapers.

**Target Audience**

Developers who are dealing with web-scraping in their data pipeline.

**Comparison**

Compared alternatives it‚Äôs easier to use, uses less tokens and works faster.",Financial-Article-12,1g4ubg4,https://reddit.com/r/Python/comments/1g4ubg4/parsera_website_data_extraction_with_minimal_code/,https://www.reddit.com/r/Python/comments/1g4ubg4/parsera_website_data_extraction_with_minimal_code/,2024-10-16 08:12:02,16,0.75,16,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1g4ubg4
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1g4m6wp,https://reddit.com/r/Python/comments/1g4m6wp/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1g4m6wp/wednesday_daily_thread_beginner_questions/,2024-10-16 00:00:09,5,1.0,5,0,3,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g4m6wp
Python,Pre-commit hooks that autogenerate iPython notebook diffs,"**What My Project Does**

Nowadays, I use iPython notebooks a lot in my software development nowadays. It's a nice way to debug things without having to fire up pdb; I'll often use it when I'm trying to debug and explore a new API.

Unfortunately, notebooks are really hard to diff in Git. I use magit and git diffs pretty extensively when I change code, and I rely heavily them to make sure I haven't introduced typos or bugs. iPython notebooks are just JSON blobs, though, so git gives me a horrible, incoherent mess. I basically commit them blindly without checking the code at all nowadays, which isn't ideal.

So to resolve this I generate a readable version of the notebook, and check the diff for that. Specifically, I wrote a script that extracts only the Python code from the iPython notebook (which is essentially a JSON file). Then, whenever I commit a change to the iPython notebook, it:

1. Automatically generates the Python-only version alongside the original notebook.
2. Commits both files to the repository.

To make sure it runs when I need it, I created a git pre-commit hook. Git's default pre-commit hooks are a little difficult to use, so I built a hook for the¬†[pre-commit package](https://pre-commit.com/?ref=blog.moonglow.ai). If you want to try it out, you can do so by setting up pre-commit, and then including the following code in your¬†`.pre-commit-hooks.yaml`

     - repo: https://github.com/moonglow-ai/pre-commit-hooks
        rev: v0.1.1
        hooks:
          - id: clean-notebook

You can find the code for the hooks here:¬†[https://github.com/moonglow-ai/pre-commit-hooks](https://github.com/moonglow-ai/pre-commit-hooks)

and you can read more about it at this blog post here!¬†[https://blog.moonglow.ai/diffing-ipython-notebook-code-in-git/](https://blog.moonglow.ai/diffing-ipython-notebook-code-in-git/)

**Target audience**

People who use iPython notebooks - so data scientists and ML researchers.

**Comparisons**

Some other approaches to solving this problem that I've seen include:

*Stripping notebook outputs*: The¬†[`nbstripout`¬†package](https://github.com/kynan/nbstripout?ref=blog.moonglow.ai)¬†does this and also includes a git hook. It's a good idea for general security and hygiene reasons, but it still doesn't give me the easy code diff-ability that I want.

*Just using python files with %% format (aka percent syntax)*: This is a neat notebook format you can use in VSCode, and many people I know use it as their primary way of running notebooks. It seems a little extreme to switch to an entirely new format altogether though.

[`jupytext`](https://jupytext.readthedocs.io/en/latest/paired-notebooks.html?ref=blog.moonglow.ai)*:*¬†A library that 'pairs' an iPython notebook with a python file. It's actually quite similar in implementation to this hook. However, it runs on the Jupyter server, so it doesn't work out-of-the-box with the VSCode editor.",petitneko,1g4lntg,https://reddit.com/r/Python/comments/1g4lntg/precommit_hooks_that_autogenerate_ipython/,https://www.reddit.com/r/Python/comments/1g4lntg/precommit_hooks_that_autogenerate_ipython/,2024-10-15 23:33:50,28,0.82,28,0,14,0,0,False,False,True,False,False,Showcase,self,t3_1g4lntg
Python,"Kanban-Tui, Moving Cards around in the Terminal","* **What My Project Does**

Kanban-Tui is a CLI application to manage tasks and (hopefully) makes you more productive.
It is quite customizable and my motivation was to have a better experience using the fantastic [textual](https://textual.textualize.io) package than with my
previous project [kanban-python](https://github.com/Zaloog/kanban-python) which just utilizes `rich`. It was also the first project, where I used `uv` and I wanted to get more comfortable with databases (sqlite).
With v0.2.0 I also included a `Demo Mode` to create a temporary database and config to play around and test things out.

You can find it on PyPi: [Link](https://pypi.org/project/kanban-tui/)

Source Code on github: [Link](https://github.com/Zaloog/kanban-tui)


* **Target Audience**¬†(e.g., Is it meant for production, just a toy project, etc.)

For everyone who likes to work in the terminal and does not want to miss a more graphical Interface. It is ready to use, but I plan to add multiple boards feature after vacation. That might lead to a db schema change, so keep that in mind, when playing around. 

* **Comparison**¬†(A brief comparison explaining how it differs from existing alternatives.)

Its similar to kanban-python, but has not yet all the features.
Also with the TUI I was able to utilize vim-like motions to move cards around, which comes closer to the feeling of actually moving the cards. 



As always criticism is welcome. And if you find bugs dont hesitate to open an [issue](https://github.com/Zaloog/kanban-tui/issues).",Zaloog1337,1g4huyp,https://reddit.com/r/Python/comments/1g4huyp/kanbantui_moving_cards_around_in_the_terminal/,https://www.reddit.com/r/Python/comments/1g4huyp/kanbantui_moving_cards_around_in_the_terminal/,2024-10-15 20:41:35,11,0.75,11,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1g4huyp
Python,Tips for Command Line Project,"Hello!  I'm making a short project to have a little experience creating a command line tool, as well as getting a project onto PyPI.  Mainly, I'm doing this because I think it's cool, and it would be awesome if a friend could pip3 install my project and just have a CLI tool off the install, similar to how the \`qrcode\` Python library comes with the \`qr\` CLI tool when installed.  If you have any tips \*\*AT ALL\*\* for anything you see, like project organization, overall Python usage, or too many commits (is that possible), please tell me, I'm a sponge for info!

I'm still making the GUI portion, but the actual command line part should be done!

Off a google search, I understand there is already a PyPI project \[Jonathan L√∂fgren\](https://github.com/jonathanlofgren/running/blob/master/.gitignore) made some time ago for converting paces into different distance paces.  The purpose of my project here is to get a little experience creating a CLI tool I could use along with the overall process of getting something onto PyPI that works.  If what I'm doing is majorly wrong, however, please tell me, I don't know!

PyPI Page:  [https://pypi.org/project/paces-calc/](https://pypi.org/project/paces-calc/)

GitHub Source Code link:  [https://github.com/Vladimir-Herdman/Pace-Calculator](https://github.com/Vladimir-Herdman/Pace-Calculator)",Vova____,1g4dzuy,https://reddit.com/r/Python/comments/1g4dzuy/tips_for_command_line_project/,https://www.reddit.com/r/Python/comments/1g4dzuy/tips_for_command_line_project/,2024-10-15 17:58:36,7,0.74,7,0,11,0,0,False,False,True,False,False,Discussion,self,t3_1g4dzuy
Python,Pyro5 and other similar packages,Does anyone use [Pyro5](https://github.com/irmen/Pyro5) to work with Python objects over a network? What are the pros and cons of using the package? Are there other Python packages that offer this functionality?,wiggitt,1g4d554,https://reddit.com/r/Python/comments/1g4d554/pyro5_and_other_similar_packages/,https://www.reddit.com/r/Python/comments/1g4d554/pyro5_and_other_similar_packages/,2024-10-15 17:22:32,8,0.76,8,0,7,0,0,False,False,True,False,False,Discussion,self,t3_1g4d554
Python," Qtcord - A lightweight, native Discord client for Windows and Linux ","Ever noticed that the normal Discord client is bloated and takes too long to load for quick conversations? Well, here's the solution. Qtcord is a very lightweight Discord client written by the open source community and me.

Shoutout to [randomusername-a](https://github.com/randomusername-a) for optimizing the backend and improving the UI of this project!

# How Qtcord works.

Qtcord uses Python Requests to send and retrieve data from the Discord API.

I reverse engineered some of the requests with the browser devtools network tab. The rest were implemented from documentation/tutorials that various people wrote online, including the actual Discord API docs!

For the GUI, I chose PySide6 because it is very easy to use, especially with Qt Designer. This saved me time hardcoding the UI.

# Target Audience

Qtcord is designed for people who don't need the extra features and ads from Discord.

# Why is Qtcord different?

Qtcord is different because it is native. For example, the normal Discord client takes around 500 MiB of RAM. Qtcord only takes 138 MiB of RAM.

# Downloads and Source

[You can get builds of Qtcord here.](https://github.com/mak448a/Qtcord/releases)

Please give my [source code repository for Qtcord](https://github.com/mak448a/Qtcord) a star if it's interesting! üåü",GreatRedditorThracc,1g3xw7g,https://reddit.com/r/Python/comments/1g3xw7g/qtcord_a_lightweight_native_discord_client_for/,https://www.reddit.com/r/Python/comments/1g3xw7g/qtcord_a_lightweight_native_discord_client_for/,2024-10-15 02:49:33,26,0.84,26,0,11,0,0,False,False,True,False,False,Showcase,self,t3_1g3xw7g
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1g3uko4,https://reddit.com/r/Python/comments/1g3uko4/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1g3uko4/tuesday_daily_thread_advanced_questions/,2024-10-15 00:00:10,3,0.67,3,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g3uko4
Python,Python support in KDE,"The KDE community is working to improve Python support in KDE as part of the [KDE Goals](https://kde.org/goals/) initiative. We are implementing Python bindings in KDE and improving support to build third party apps beyond C++. Another project is to ship Kirigami via Pip.

This Sunday, Oct 20th at 18:00 (UTC), the KDE Goals team will be answering your questions live. Post your questions here and I'll make sure they'll answer them. 

We'll be streaming here: [https://tube.kockatoo.org/w/2tAyknEQc8EhL2AyoAUE8M](https://tube.kockatoo.org/w/2tAyknEQc8EhL2AyoAUE8M)

You can get in touch with the community at the [Matrix room](https://matrix.to/#/#kde-streamlined-app-dev:kde.org).",f_r_d,1g3n643,https://reddit.com/r/Python/comments/1g3n643/python_support_in_kde/,https://www.reddit.com/r/Python/comments/1g3n643/python_support_in_kde/,2024-10-14 18:37:28,20,0.83,20,0,6,0,0,False,False,True,False,False,Discussion,self,t3_1g3n643
Python,Speeding up PyTest by removing big libraries,"I've been working on a small project that uses ""big"" libraries, and it was extremely annoying to have `pytest` to take 15‚Äì20 seconds to run 6 test cases that were not even doing anything.

Armed with the excellent [PyInstrument](https://www.reddit.com/r/Python/comments/1g1az6i/pyinstrument_v50_flamegraphs_for_python/) I went ahead to search for what was the reason.

Turns out that biggish libraries are taking a lot of time to load, maybe because of the `importlib` method used by my `pytest`, or whatever.

But I don't really need these libraries in the tests ‚Ä¶ so how about I remove them?

    # tests/conftest.py
    import sys
    from unittest.mock import MagicMock
    
    def pytest_sessionstart():
      sys.modules['networkx'] = MagicMock()
      sys.modules['transformers'] = MagicMock()

And yes, this worked wonders! Reduced the tests run from 15 to much lower than 1 second from `pytest` start to results finish.

I would have loved to remove `sqlalchemy` as well, but unfortunately `sqlmodel` is coupled with it so much it is inseparable from the models based on `SQLModel`.

Would love to hear your reaction to this kind of heresy.",kesor,1g3o5tw,https://reddit.com/r/Python/comments/1g3o5tw/speeding_up_pytest_by_removing_big_libraries/,https://www.reddit.com/r/Python/comments/1g3o5tw/speeding_up_pytest_by_removing_big_libraries/,2024-10-14 19:18:18,50,0.88,50,0,32,0,0,False,False,True,False,False,Discussion,self,t3_1g3o5tw
Python,Lockdown Your FastAPI Endpoints with Armasec,"Tired of writing repetitive code for authentication and authorization in your FastAPI applications? The [Omnivector](https://www.omnivector.ai) team introduces **Armasec**, a Python package designed to streamline the process of protecting your API endpoints.

Armasec leverages the power of OpenID Connect (OIDC) to verify JSON Web Tokens (JWTs) and enforce access control. With just a few lines of code, you can ensure that only authorized users can access your API endpoints.

## How Armasec Works

Armasec simplifies securing your FastAPI endpoints by:
1. **OIDC Verification**: Armasec validates incoming JWTs against a specified OIDC domain, ensuring the token originates from a trusted source.
2. **Audience Validation**: It checks if the token‚Äôs audience matches your application, adding an extra layer of security (optional step).
3. **Permission-Based Access Control**: Define the required permissions for each endpoint, and Armasec will automatically verify if the decoded token contains those permissions under the permissions key.

Armasec is verified to work out of the box with Keycloak and Auth0, although any OIDC solution should work with no problems.

## Target Audience

Armasec is designed for Python developers that work with FastAPI applications.

## How's Armasec different?

While many authorization solutions exist, they often lack the integration with OIDC and permission-based access control that Armasec provides. Currently, developers are forced to write custom code for handling JWT verification and permission checks against their OIDC provider. Armasec eliminates this complexity, offering a ready-to-use solution that seamlessly integrates with FastAPI and simplifies the process of securing your endpoints.

## Example with FastAPI

```python example.py
import os

from armasec import Armasec
from fastapi import FastAPI, Depends


app = FastAPI()
armasec = Armasec(
    domain=os.environ.get(""ARMASEC_DOMAIN""),
    audience=os.environ.get(""ARMASEC_AUDIENCE""),
)

@app.get(""/stuff"", dependencies=[Depends(armasec.lockdown(""read:stuff""))])
async def check_access():
    return dict(message=""Successfully authenticated!"")
```

Run this minimal example using uvicorn:

```bash
pip install armasec uvicorn
uvicorn --host 0.0.0.0 example:app
```

In this example, `armasec.lockdown(""read:stuff"")` acts as a dependency for the `/stuff` endpoint. Armasec will:

* Verify the incoming JWT against the provided OIDC domain.
* Validate the audience.
* Ensure the decoded token has the read:stuff permission.

If any of these checks fail, Armasec will deny access to the endpoint:
* If the JWT is issued by another domain or the audience doesn‚Äôt match, the endpoint will return 401.
* If the JWT is domain-verfied but the permissions in the `lockdown` argument are not present in the token, the endpoint will return 403.

## Benefits of Using Armasec

* **Reduced Boilerplate**: Say goodbye to writing custom authentication and authorization logic.
* **Enhanced Security**: Leverage OIDC for robust and standardized security. Do not depend on reading secrets in your code.
* **Improved Code Readability**: Keep your code clean and focused on business logic.
* **Easy Integration**: Seamlessly integrate with FastAPI using dependencies.

Since its launch, Armasec has reliably secured all of our microservices at [Omnivector](https://www.omnivector.ai), streamlining authentication and authorization across our platform.

## Get Started

Check out the project on [GitHub](https://github.com/omnivector-solutions/armasec) for more information.",matheushent,1g3n9a2,https://reddit.com/r/Python/comments/1g3n9a2/lockdown_your_fastapi_endpoints_with_armasec/,https://www.reddit.com/r/Python/comments/1g3n9a2/lockdown_your_fastapi_endpoints_with_armasec/,2024-10-14 18:40:56,15,0.73,15,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1g3n9a2
Python,Teaching the world's largest programming lesson,"This past Saturday I taught the world's largest programming lesson, with 1668 students, breaking the previous record of 724 students.

We broke the record in Portugal üáµüáπ and the event was co-organised by a local university and a company I used to work at.

It was an insane event.
I have been in plenty of events with WAY more than 2k people.
Music festivals, sports matches, etc.
And yet, nothing beat being on stage, teaching Python to ~1750 students.
(The official record is at 1668 because some students were disqualified for not actually following the lesson ü§¶.)

The lesson was split in three and I taught the middle segment, which was scheduled to last for half of the lesson.

The professor before me taught the students what an algorithm was, conceptually.
One of the examples provided was a brute forcy algorithm to solve a Sudoku puzzle.

Then, I taught them some basic Python syntax.
The objective was for me to introduce enough syntax so that we could implement the algorithm described in the first part on top of an abstraction that I created beforehand.

Finally, a third professor showed a couple of more advanced applications of Python, like creating a RAG application to interact with a major literary work that Portuguese students are supposed to read in school.

If you want to know more details about what I actually taught / did with Sudoku, you can take a look at this blog article of mine: https://mathspp.com/blog/teaching-the-worlds-largest-programming-lesson
Otherwise, I'm just ecstatic that I got to be a part of this and since I don't think it's reasonable to go out on the streets and scream all of this, I decided to post it here.

Please, rejoice with me! üöÄ",RojerGS,1g3loz8,https://reddit.com/r/Python/comments/1g3loz8/teaching_the_worlds_largest_programming_lesson/,https://www.reddit.com/r/Python/comments/1g3loz8/teaching_the_worlds_largest_programming_lesson/,2024-10-14 17:37:31,54,0.82,54,0,12,0,0,False,False,True,False,False,News,self,t3_1g3loz8
Python,Build an intuitive CLI app with Python argparse,"A while ago, I used Python and the [argparse](https://docs.python.org/3/library/argparse.html) library to
build an [app for managing my own mail server](https://github.com/confuzeus/mailiness). That's when I realized that _argparse_
is not only flexible and powerful, but also easy to use.

I always reach for _argparse_ when I need to build a CLI tool because it's also included in the standard library.

EDIT: There are fanboys of another CLI library in the comments claiming that nobody should use argparse but use their preferred CLI libraty instead. Don't listen to these fanboys. If argparse was bad, then Python would remove it from the standard library and Django wouldn't use it for their management commands.

I'll show you how to build a CLI tool that mimics the _docker_ command because I find the interface
intuitive and would like to show you how to replicate the same user experience with _argparse_.
I won't be implementing the behavior but you'll be able to see how you can use _argparse_ to build any kind of easy to use CLI app.

&gt; See a real example of such a tool [in this file](https://github.com/confuzeus/mailiness/blob/master/src/mailiness/cli.py).

## Docker commands

I would like the CLI to provide commands such as:

- docker container ls
- docker container start
- docker volume ls
- docker volume rm
- docker network ls
- docker network create

Notice how the commands are _grouped_ into seperate categories. In the example above, we have _container_, _volume_, and _network_.
[Docker](https://www.docker.com/) ships with many more categories. Type `docker --help` in your terminal to see all of them.

Type `docker container --help` to see _subcommands_ that the _container_ _group_ accepts. _docker container ls_ is such a sub command.
Type _docker container ls --help_ to see _flags_ that the _ls_ sub command accepts.

The docker CLI tool is so intuitive to use because you can easily find any command for performing a task thanks to this kind of grouping.
By relying on the built-in _--help_ flag, you don't even need to read the documentation.

Let's build a CLI similar to the docker CLI tool command above.

&gt; I'm assuming you already read the [argparse tutorial](https://docs.python.org/3/howto/argparse.html#argparse-tutorial)

## Subparsers and handlers

I use a specific pattern to build this kind of tool where I have a bunch of subparsers and a handler for each. Let's build the _docker container create_
command to get a better idea. According to the [docs](https://docs.docker.com/reference/cli/docker/container/create/), the command syntax is `docker container create [OPTIONS] IMAGE [COMMAND] [ARG...]`.

```python
from argparse import ArgumentParser

def add_container_parser(parent):
  parser = parent.add_parser(""container"", help=""Commands to deal with containers."")
  parser.set_defaults(handler=container_parser.print_help)

def main():
  parser = ArgumentParser(description=""A clone of the docker command."")
  subparsers = parser.add_subparsers()

  add_container_parser(subparsers)

  args = parser.parse_args()

  if getattr(args, ""handler"", None):
    args.handler()
  else:
    parser.print_help()


if __name__ == ""__main__"":
  main()
```

Here, I'm creating a main parser, then adding subparsers to it. The first subparser is called _container_. Type `python app.py container` and you'll
see a help messaged printed out. That's because of the _set_default_ method. I'm using it to set an attribute called _handler_ to the object that will be
returned after argparse parses the _container_ argument. I'm calling it _handler_ here but you can call it anything you want because it's not part of the
argparse library.

Next, I want the container command to accept a _create_ command:

```python
...
def add_container_create_parser(parent):
  parser = parent.add_parser(""create"", help=""Create a container without starting it."")
  parser.set_defaults(handler=parser.print_help)

def add_container_parser(parent):
  parser = parser.add_parser(""container"", help=""Commands to deal with containers."")
  parser.set_defaults(handler=container_parser.print_help)

  subparsers = parser.add_subparsers()

  add_container_create_parser(subparsers)
...
```

Type `python app.py container create` to see a help message printed again. You can continue iterating on this pattern to add
as many sub commands as you need.

The _create_ command accepts a number of _flags_. In the documentation, they're called options. The docker CLI help page
shows them as _[OPTIONS]_. With argparse, we're simply going to add them as optional arguments. Add the _-a_ or _--attach_ flag
like so:

```python
...
def add_container_create_parser(parent):
  parser = parent.add_parser(""create"", help=""Create a container without starting it."")
  parser.set_defaults(handler=parser.print_help)

  parser.add_argument(""-a"", ""--attach"", action=""store_true"", default=False, help=""Attach to STDIN, STDOUT or STDERR"")
...
```

Type `python app.py container create` again and you'll see that it contains help for the _-a_ flag. I'm not going to add all flags, so
next, add the _[IMAGE]_ positional argument.

```python
...
def add_container_create_parser(parent):
  parser = parent.add_parser(""create"", help=""Create a container without starting it."")
  parser.set_defaults(handler=parser.print_help)

  parser.add_argument(""-a"", ""--attach"", action=""store_true"", default=False, help=""Attach to STDIN, STDOUT or STDERR"")
  parser.add_argument(""image"", metavar=""[IMAGE]"", help=""Name of the image to use for creating this container."")
...
```

The help page will now container information about the _[IMAGE]_ command. Next, the user can specify a command that the
container will execute on boot. They can also supply extra arguments that will be passed to this command.

```python
from argparse import REMAINDER

...
def add_container_create_parser(parent):
  parser = parent.add_parser(""create"", help=""Create a container without starting it."")
  parser.set_defaults(handler=parser.print_help)

  parser.add_argument(""-a"", ""--attach"", action=""store_true"", default=False, help=""Attach to STDIN, STDOUT or STDERR"")
  parser.add_argument(""image"", metavar=""IMAGE [COMMAND] [ARG...]"", help=""Name of the image to use for creating this container. Optionall supply a command to run by default and any argumentsd the command must receive."")
...
```

What about the default command and arguments that the user can pass to the container when it starts? Recall that we used the
_parse_args_ method in our main function:

```python
def main():
...
  args = parser.parse_args()
...
```

Change it to use _parse_known_args_ instead:

```python
def main():
  parser = ArgumentParser(description=""A clone of the docker command."")
  subparsers = parser.add_subparsers()

  add_container_parser(subparsers)

  known_args, remaining_args = parser.parse_known_args()

  if getattr(known_args, ""handler"", None):
    known_args.handler()
  else:
    parser.print_help()
```

This will allow argparse to capture any arguments that aren't for our main CLI in a list (called _remaining_args_ here) that we
can use to pass them along when the user executes the _container create animage_ command.

Now that we have the interface ready, it's time to build the actual behavior in the form of a handler.

## Handling commands

Like I said, I won't be implementing behavior but I still want you to see how to do it.

Earlier, you used _set_defaults_ in your _add_container_create_parser_ function:

```python
  parser = parent.add_parser(""create"", help=""Create a container without starting it."")
  parser.set_defaults(handler=parser.print_help)
  ...
```

Instead of printing help, you will call another function called a _handler_. Create the handler now:

```python
def handle_container_create(args):
    known_args, remaining_args = args
    print(
        f""Created container. image={known_args.image} command_and_args={' '.join(remaining_args) if len(remaining_args) &gt; 0 else 'None'}""
    )
```

It will simply print the arguments and pretend that a container was created. Next, change the call to _set_defaults_:

```python
  parser = parent.add_parser(""create"", help=""Create a container without starting it."")
  parser.set_defaults(handler=handle_container_create, handler_args=True)
  ...
```

Notice that I'm also passing a _handler_args_ argument. That's because I want my _main_ function to know
whether the handler needs access to the command line arguments or not. In this case, it does. Change _main_ to be as follows now:

```python
def main():
    parser = ArgumentParser(description=""A clone of the docker command."")
    subparsers = parser.add_subparsers()

    add_container_parser(subparsers)

    known_args, remaining_args = parser.parse_known_args()

    if getattr(known_args, ""handler"", None):
        if getattr(known_args, ""handler_args"", None):
            known_args.handler((known_args, remaining_args))
        else:
            known_args.handler()
    else:
        parser.print_help()
```

Notice that I added the following:

```python
...
if getattr(known_args, ""handler_args"", None):
    known_args.handler((known_args, remaining_args))
else:
    known_args.handler()
```

If _handler_args_ is _True_, I'll call the handler and pass all arguments to it.

Use the command now and you'll see that everything works as expected:

```shell
python app.py container create myimage
# Created container. image=myimage command_and_args=None

python app.py container create myimage bash
# Created container. image=myimage command_and_args=bash

python app.py container create myimage bash -c
# Created container. image=myimage command_and_args=bash -c
```

When implementing real behavior, you'll simply use the arguments in your logic.

Now that you implemented the _container create_ command, let's implement another one under the same
category - _docker container stop_.

## Add a second command

Add the following parser and handler:

```python
def handle_container_stop(args):
    known_args = args[0]
    print(f""Stopped containers {' '.join(known_args.containers)}"")


def add_container_stop_parser(parent):
    parser = parent.add_parser(""stop"", help=""Stop containers."")
    parser.add_argument(""containers"", nargs=""+"")

    parser.add_argument(""-f"", ""--force"", help=""Force the containers to stop."")
    parser.set_defaults(handler=handle_container_stop, handler_args=True)
```

Update your _add_container_parser_ function to use this parser:

```python
def add_container_parser(parent):
    parser = parent.add_parser(""container"", help=""Commands to deal with containers."")
    parser.set_defaults(handler=parser.print_help)

    subparsers = parser.add_subparsers()

    add_container_create_parser(subparsers)
    add_container_stop_parser(subparsers)
```

Use the command now:

```shell
python app.py container stop abcd def ijkl
# Stopped containers abcd def ijkl
```

Perfect! Now let's create another category - _docker volume_

## Create another category

Repeat the same step as above to create as many categories as you want:

```python
def add_volume_parser(parent):
  parser = parent.add_parser(""volume"", help=""Commands for handling volumes"")
  parser.set_defaults(handler=parser.print_help)
```

Let's implement the _ls_ command like in _docker volume ls_:

```python
def volume_ls_handler():
  print(""Volumes available:\n1. vol1\n2. vol2"")

def add_volume_ls_parser(parent):
  parser = parent.add_parser(""ls"", help=""List volumes"")
  parser.set_defaults(handler=volume_ls_handler)

def add_volume_parser(parent):
  ...
  subparsers = parser.add_subparsers()
  add_volume_ls_parser(subparsers)
```

Notice how I'm not passing any arguments to the _volume_ls_handler_, thus not adding the _handler_args_ option. Try it out now:

```shell
python app.py volume ls
#Volumes available:
#1. vol1
#2. vol2
```

Excellent, everything works as expected.

As you can see, building user friendly CLIs is simply with argparse. All you have to do is create nested subparsers for any commands
that will need their own arguments and options. Some commands like _docker container create_ are more involved than _docker volume ls_ because
they accept their own arguments but everything can be implemented using argparse without having to bring in any external library.

Here's a full example of what we implemented so far:

```python
from argparse import ArgumentParser


def handle_container_create(args):
    known_args, remaining_args = args
    print(
        f""Created container. image={known_args.image} command_and_args={' '.join(remaining_args) if len(remaining_args) &gt; 0 else 'None'}""
    )


def add_container_create_parser(parent):
    parser = parent.add_parser(""create"", help=""Create a container without starting it."")

    parser.add_argument(
        ""-a"",
        ""--attach"",
        action=""store_true"",
        default=False,
        help=""Attach to STDIN, STDOUT or STDERR"",
    )
    parser.add_argument(
        ""image"",
        metavar=""IMAGE"",
        help=""Name of the image to use for creating this container."",
    )
    parser.add_argument(
        ""--image-command"", help=""The command to run when the container boots up.""
    )
    parser.add_argument(
        ""--image-command-args"",
        help=""Arguments passed to the image's default command."",
        nargs=""*"",
    )

    parser.set_defaults(handler=handle_container_create, handler_args=True)


def handle_container_stop(args):
    known_args = args[0]
    print(f""Stopped containers {' '.join(known_args.containers)}"")


def add_container_stop_parser(parent):
    parser = parent.add_parser(""stop"", help=""Stop containers."")
    parser.add_argument(""containers"", nargs=""+"")

    parser.add_argument(""-f"", ""--force"", help=""Force the containers to stop."")
    parser.set_defaults(handler=handle_container_stop, handler_args=True)


def add_container_parser(parent):
    parser = parent.add_parser(""container"", help=""Commands to deal with containers."")
    parser.set_defaults(handler=parser.print_help)

    subparsers = parser.add_subparsers()

    add_container_create_parser(subparsers)
    add_container_stop_parser(subparsers)


def volume_ls_handler():
    print(""Volumes available:\n1. vol1\n2. vol2"")


def add_volume_ls_parser(parent):
    parser = parent.add_parser(""ls"", help=""List volumes"")
    parser.set_defaults(handler=volume_ls_handler)


def add_volume_parser(parent):
    parser = parent.add_parser(""volume"", help=""Commands for handling volumes"")
    parser.set_defaults(handler=parser.print_help)

    subparsers = parser.add_subparsers()
    add_volume_ls_parser(subparsers)


def main():
    parser = ArgumentParser(description=""A clone of the docker command."")
    subparsers = parser.add_subparsers()

    add_container_parser(subparsers)
    add_volume_parser(subparsers)

    known_args, remaining_args = parser.parse_known_args()

    if getattr(known_args, ""handler"", None):
        if getattr(known_args, ""handler_args"", None):
            known_args.handler((known_args, remaining_args))
        else:
            known_args.handler()
    else:
        parser.print_help()


if __name__ == ""__main__"":
    main()
```

Continue to play around with this and you'll be amazed at how powerful argparse is.

---

I originally posted this [on my blog](https://joshkaramuth.com/blog/python-argparse-intuitive-cli/).
Visit me if you're interested in similar topics.",NodeJS4Lyfe,1g3l5ro,https://reddit.com/r/Python/comments/1g3l5ro/build_an_intuitive_cli_app_with_python_argparse/,https://www.reddit.com/r/Python/comments/1g3l5ro/build_an_intuitive_cli_app_with_python_argparse/,2024-10-14 17:16:23,20,0.74,20,0,22,0,0,False,False,True,False,False,Tutorial,self,t3_1g3l5ro
Python,Which libraries have the best docs?,"Hi,

  
Out of all the available python libraries and frameworks, which ones do you think have the best documentation?

I am looking for examples to learn how to create good docs for a project I am working on.

  
Thanks!",Amgadoz,1g3hrkl,https://reddit.com/r/Python/comments/1g3hrkl/which_libraries_have_the_best_docs/,https://www.reddit.com/r/Python/comments/1g3hrkl/which_libraries_have_the_best_docs/,2024-10-14 14:56:57,93,0.93,93,0,65,0,0,False,False,True,False,False,Discussion,self,t3_1g3hrkl
Python,My first python package got 844 downloads üò≠üò≠,"I know 844 downloads aint much, but i feel so proud.

This was my first project that i published.

Here is the package link:¬†[https://pypi.org/project/Font/](https://pypi.org/project/Font/)

Source code:¬†[https://github.com/ivanrj7j/Font](https://github.com/ivanrj7j/Font)

  
## **What My Project Does**

My project is a library for rendering custom font using opencv.

  
## **Target Audience**

* Computer vision devs
* People who are working with text and images etc

## **Comparison**¬†

From what ive seen there arent many other projects out there that does this, but some of similar projects i have seen are:

* [https://pypi.org/project/a-cv2-putTrueTypeText/](https://pypi.org/project/a-cv2-putTrueTypeText/)¬†this project get the job done, but have really messy code and doesnt have any documentation.",ivanrj7j,1g3gcz9,https://reddit.com/r/Python/comments/1g3gcz9/my_first_python_package_got_844_downloads/,https://www.reddit.com/r/Python/comments/1g3gcz9/my_first_python_package_got_844_downloads/,2024-10-14 13:56:06,479,0.89,479,0,38,0,0,False,False,True,False,False,Showcase,self,t3_1g3gcz9
Python,Emmett55 is now available,"In the same month of [Emmett's 10th anniversary](https://github.com/emmett-framework/emmett/releases/tag/v2.6.0), I also published Emmett55: the micro web framework for inventors.

Emmett55 takes advantage of some of the unique features of Emmett, like the [RSGI protocol](https://github.com/emmett-framework/granian/blob/master/docs/spec/RSGI.md), the Rust powered router, or the [Pipeline](https://emmett.sh/docs/2.6.x/pipeline), but with an overall smaller set of features and fewer dependencies.

Emmett55's primary target audience consists of those projects which won't need the fullstack-like set of features of Emmett, or for those who prefer a different set of libraries like SQLAlchemy for the database layer or Jinja for the templates.

Check it out at [https://github.com/emmett-framework/emmett55](https://github.com/emmett-framework/emmett55)",gi0baro,1g3fy1e,https://reddit.com/r/Python/comments/1g3fy1e/emmett55_is_now_available/,https://www.reddit.com/r/Python/comments/1g3fy1e/emmett55_is_now_available/,2024-10-14 13:37:12,3,0.62,3,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1g3fy1e
Python,How to benchmark with pytest-benchmark,"I wrote a tutorial that walks you through how to benchmark Python code using `pytest-benchmark`. It starts out with a basic example and then evolves things as new requirements are added to the software. SPOILER ALERT: There's a performance regression.

[https://bencher.dev/learn/benchmarking/python/pytest-benchmark/](https://bencher.dev/learn/benchmarking/python/pytest-benchmark/)",bencherdev,1g3cgtm,https://reddit.com/r/Python/comments/1g3cgtm/how_to_benchmark_with_pytestbenchmark/,https://www.reddit.com/r/Python/comments/1g3cgtm/how_to_benchmark_with_pytestbenchmark/,2024-10-14 10:17:26,18,0.95,18,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1g3cgtm
Python,Reading CAN Bus signals from and mf4 file.,"Anybody know how I can read CAN Bus signals from an MF4 file. Any libraries for it, or if I need to convert the file into another format?",-SchlauchbootlippeN-,1g3bsdn,https://reddit.com/r/Python/comments/1g3bsdn/reading_can_bus_signals_from_and_mf4_file/,https://www.reddit.com/r/Python/comments/1g3bsdn/reading_can_bus_signals_from_and_mf4_file/,2024-10-14 09:26:40,4,0.65,4,0,2,0,0,False,False,True,False,False,Discussion,self,t3_1g3bsdn
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1g33d10,https://reddit.com/r/Python/comments/1g33d10/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1g33d10/monday_daily_thread_project_ideas/,2024-10-14 00:00:09,3,0.62,3,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g33d10
Python,Old school 2000s mouse accessory: Particles following your mouse! Get color under cursor! And more!,"I would have loved to instead call this thread: ""You can now have shit stuck to your mouse"", but I felt it wouldn't take very long until it was removed.

# What my project does:  

I've had an idea somewhere in 2022: I want rainbow trails for my mouse cursor. Available software was naught. So I made it myself!  
- It can draw particles of any number and color spawning from your mouse cursor. With multiple vectors, influences from mouse motion and rotation, many ideas can be realized: Crazy or decent, river or beehive, smoke or explosion.  
- or it can be the time  
- Get RGB or RGB complementary color  
- or get RYB and RYB complementary color from under it.  
- Also useless stuff like the time with milliseconds, system cpu and ram usage, individual or at the same time, if you need it visible there for some obscure reason.  
- An image is also possible - default is the poop emoji, of course.  

(Just got a new idea: get color from under cursor and spawn particle with it for a sort of ""scraping off pixels"" effect)  

The function to have a little square with the color under the cursor is sometimes extremely helpful, so I put some work into it and that's why there's a RYB version of it.  

I know my GUI is horribly complicated, maybe even extremely so. I don't know how I can have this much customizability in any reasonable format. I'd love for it to look better - maybe move explanations to hover-text. But I'd need to swutch to raw tKinter or Qt for that. And since PySimpleGUI has me puking into his inbox every 365 days, I just switched to FreeSimpleGUI which is a free fork of an earlier version that still HAS gpl license or something like that.  
Or maybe have an easier view and them this as advanced options.

Today I finished another round of updates and fixes - which I seemingly tend to do every 6 month or so. I am OK enough with it to show you :)
I even made an executable for those who don't want to install Python. Because 3.11+, I think, is necessary. I always update to the newest version. I don't understand why people still program new stuff with 2.7, or what it was.  

I'm still considering trying to figure out spacial hashes and pygame time dilation in order to improve the backend further. But, luckily, I'm currently too stupid to do so. :D     

Here's a link to my repo:  
https://github.com/LtqxWYEG/ShitStuckToYourMouse  
  
Please tell me if the executable doesn't work on your PC (only tested on mine) or if there are any other issues. :)  


## Target audience:  
Anyone who wants to be _particularly_ productive while working. Hehe!  

## Comparison:  
None that I could find. Maybe some programs that are actually from the 90s / early 2000s still exist. Who knows?",Distelzombie,1g32kaw,https://reddit.com/r/Python/comments/1g32kaw/old_school_2000s_mouse_accessory_particles/,https://www.reddit.com/r/Python/comments/1g32kaw/old_school_2000s_mouse_accessory_particles/,2024-10-13 23:19:15,18,0.78,18,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1g32kaw
Python,Xenharmlib 0.2.0 released - Advanced music theory library,"Hi everyone,

Last week I released version 0.2.0 of xenharmlib. New features focus mostly on post-tonal theory and scale transformations. You can get a good overview on [""What's new in 0.2.0""](https://xenharmlib.readthedocs.io/en/0.2.0/whats_new_0_2_0.html).

(Source code¬†[here](https://gitlab.com/retooth/xenharmlib))

***I'm still looking for contributors. So if you are interested, shoot me a message***.

**What My Project Does**

(taken from the docs) Xenharmlib is a music theory library for the exploration and research of microtonality, diatonic set theory, non-standard notations, and many more. The library implements a superset of Western classical music theory, so you can also use it to compose and analyze music in the boundaries of the common practice period or 20th century Western music.

**Target Audience**

Composers who want to get answers to theoretical questions pertaining to structures of musical scales, note intervals, frequencies and frequency ratios in equal division tunings. People who want to explore microtonality or non-western musical theory in general.

**Comparison**

\*¬†**mingus**¬†Everything in mingus can also be done in xenharmlib  
\*¬†**pytuning**¬†supports slightly more tuning methods and export formats, however does not support microtonal notation, note / interval calculation or post-tonal scale transformations.  
\*¬†**music21**¬†is much more mature in providing an analytical toolset, however supports only traditional western equal temperament",realretooth,1g2xyjj,https://reddit.com/r/Python/comments/1g2xyjj/xenharmlib_020_released_advanced_music_theory/,https://www.reddit.com/r/Python/comments/1g2xyjj/xenharmlib_020_released_advanced_music_theory/,2024-10-13 19:41:17,13,0.78,13,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1g2xyjj
Python,I made a website for finding deals on Pokemon cards on Ebay,"Site: https://www.jimmyrustles.com/pokemondeals

Github: https://www.github.com/sgriffin53/pokemon_tcg_deal_finder_app

**What My Project Does**

For the past few weeks I've been working on a Pokemon deal finder website. It works by finding listings from Ebay and card valuations from Pricecharting then returns the listings with the biggest difference in card price compared to card valuation.

It searches Ebay for 112 different sets and right now it has around 200,000 listings.

The listings will be updated every 8 hours.

It seems pretty successful at identifying cards. Most of the misidentification seems to be when a seller has mislabelled the card or set in the title, but for the most part, it seems good at identifying the cards.

It seems to find deals well, though a lot of the deals are heavily played cards that are underpriced due to their condition. For example, on the front page, there's a heavily played Umbreon EX #112 from Unseen Forces that's valued at $165.60 and the price is $19.96.

**Target Audience**

There's a large market for people buying and selling cards on Ebay. Users are constantly looking for good deals, and this tool is a way to automate looking for deals by comparing listing prices to valuations.

**Comparison**

There was a site a while ago that I believe did the same thing, but it shut down. There are other pokemon deal sites but they seem to be manually curated rather than done automatically. I think this could be a unique and useful tool.

Let me know what you think.",haddock420,1g2xje2,https://reddit.com/r/Python/comments/1g2xje2/i_made_a_website_for_finding_deals_on_pokemon/,https://www.reddit.com/r/Python/comments/1g2xje2/i_made_a_website_for_finding_deals_on_pokemon/,2024-10-13 19:22:40,33,0.8,33,0,23,0,0,False,False,True,False,False,Showcase,self,t3_1g2xje2
Python,Accounting (book-keeping) rules for chart of accounts and ledger implemented in Python ,"# Target audience

I think ther is a big void between people who code and who know accounting that is filled with expensive software. Hope this demo can show that if there where common open data formats for charts of accounts, the cost of accounting software could be much lower.

# What this project does

I was working for a while on implementing accounting rules in Python and came up with quite a minimal ledger that allows to create your own chart of accounts, post double and multiple entries and close the ledger properly at accounting period end. The workflow is based on just three classes - \`Chart\`, \`Book\` and \`Entry\` and results in \`TrialBalance\`, \`BalanceSheet\` and \`IncomeStatement\`. The code in under 600 lines, but many things are realistic, for example there are contra accounts, accounts do not go negative, there are both double and multiple entries, and at period end the chart informs which accounts should close to retained earnings. Everything saves to JSON files.

I previously had a CLI for similar project but now it is just one module. The code is covered with tests, mypy and ruff checks that are invoked through \`just\` command runner.

The project is available at [https://github.com/epogrebnyak/abacus-minimal/](https://github.com/epogrebnyak/abacus-minimal/)

# Comparison

I think hledger, medici and microbooks API are the closest alternatives.",iamevpo,1g2x4gh,https://reddit.com/r/Python/comments/1g2x4gh/accounting_bookkeeping_rules_for_chart_of/,https://www.reddit.com/r/Python/comments/1g2x4gh/accounting_bookkeeping_rules_for_chart_of/,2024-10-13 19:04:58,27,0.87,27,0,22,0,0,False,False,True,False,False,Showcase,self,t3_1g2x4gh
Python,Udemy 100 days of code ,"For anyone else who has worked through this course- how difficult were days 39 and 40? I understand how to use requests and how to use API calls (for reference, days 39 and 40 were the airline price finder days), but I just can‚Äôt wrap my head around this. I‚Äôm probably just going to skip this one lol.",DippingDots81,1g2vres,https://reddit.com/r/Python/comments/1g2vres/udemy_100_days_of_code/,https://www.reddit.com/r/Python/comments/1g2vres/udemy_100_days_of_code/,2024-10-13 18:05:41,7,0.64,7,0,11,0,0,False,False,True,False,False,Discussion,self,t3_1g2vres
Python,Environments Utils - Detect Your (quirky) Python Runtime Environment,"Hey, r/Python!

**What My Project Does:**

Over the years, I‚Äôve been working on a Python package called [**Environments Utils**](https://github.com/LucaCappelletti94/environments_utils) that helps detect characteristics of the environments where your Python script is running. It‚Äôs built to handle various edge cases and odd environments I‚Äôve encountered. For example, it can determine if your script runs inside a **Jupyter Notebook**, on a **SLURM cluster**, or within **Rosetta** on macOS. The package also identifies system architecture, operating system, GPU availability, and even whether you have an internet connection - all with no additional dependencies!

**Target Audience:**

This package is designed for **developers and data scientists** who work in diverse environments, such as cloud platforms and high-performance computing clusters. I find it particularly useful when I need to adapt a pipeline depending on which system it is being installed on.

* **Production Use:** You can use the package to adapt your script's behaviour based on the runtime environment (e.g., using different logging mechanisms in a SLURM cluster).
* **Development/Debugging:** If you're writing code that needs to adapt to odd environments like Colab, TMUX, or hybrids like **macOS Rosetta**, this package can save you some headaches. I had several scripts that only broke down in COLAB or Rosetta etc, and this made the error messages that users reported back to me much more informative.

**Installation:**

As usual, it's just a pip install away:

    pip install environments_utils

**Examples:**

Detect Rosetta on macOS:

    from environments_utils import is_macos_rosetta
    
    if is_macos_rosetta():
        print(""I am running inside Rosetta!"")

Detect SLURM node:

    from environments_utils import is_slurm_node
    
    if is_slurm_node():
        print(""Running on a SLURM node!"")

**GitHub:** [LucaCappelletti94/environments\_utils](https://github.com/LucaCappelletti94/environments_utils)

Happy to hear your thoughts, feedback, or ideas for new features!",Personal_Juice_2941,1g2lh97,https://reddit.com/r/Python/comments/1g2lh97/environments_utils_detect_your_quirky_python/,https://www.reddit.com/r/Python/comments/1g2lh97/environments_utils_detect_your_quirky_python/,2024-10-13 08:56:14,40,0.93,40,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1g2lh97
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1g2d9f2,https://reddit.com/r/Python/comments/1g2d9f2/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1g2d9f2/sunday_daily_thread_whats_everyone_working_on/,2024-10-13 00:00:09,10,0.78,10,0,8,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g2d9f2
Python,I'm making a periodic table on python.,"I'm making a periodic table that has almost everything that a element can have. I made a Github repository, so check it out! Also, the ""discussion"" flair is because I know that the code is pretty bad, so if anybody has anything to add (both for the table and for the code ), please tell me!

Github link:
https://github.com/Mountainkaio/Python-s-periodic-table",CanalOnix,1g2af5p,https://reddit.com/r/Python/comments/1g2af5p/im_making_a_periodic_table_on_python/,https://www.reddit.com/r/Python/comments/1g2af5p/im_making_a_periodic_table_on_python/,2024-10-12 21:33:06,34,0.69,34,0,45,0,0,False,False,True,False,False,Discussion,self,t3_1g2af5p
Python,Pyloid: A Web-Based GUI Library for Desktop Applications - v0.11.0 Released,"# üåÄ What is Pyloid?

Pyloid is the Python backend version of Electron, Tauri, designed to simplify desktop application development. This open-source project, built on **QtWebEngine** and **PySide6**, provides seamless integration with various Python features, making it easy to build powerful applications effortlessly.

# üöÄ Why Pyloid?

With Pyloid, you can leverage the full power of Python in your desktop applications. Its simplicity and flexibility make it the perfect choice for both beginners and experienced developers looking for a Python-focused alternative to Electron or Tauri. It is especially optimized for building AI-powered desktop applications.

GitHub:¬†[Pyloid GitHub](https://github.com/pyloid/pyloid)  
Docs:¬†[Pyloid Docs](https://docs.pyloid.com/)

# üéØ Target Audience

Pyloid is designed for a wide range of developers, particularly those who:

* **Python Developers**: If you are familiar with Python and want to build desktop applications, Pyloid provides a smooth transition to desktop development without needing to learn new languages like Rust or C++.
* **AI and Machine Learning Enthusiasts**: Pyloid is optimized for AI-powered desktop applications, making it an ideal tool for developers who want to integrate machine learning models or AI features directly into their apps.
* **Web Developers**: Developers who are proficient in web technologies (HTML, CSS, JavaScript) and want to bring their skills into desktop app development will find Pyloid's web-based GUI support particularly useful.
* **Cross-Platform App Developers**: Pyloid allows you to build applications that run seamlessly across multiple operating systems (Windows, macOS, Linux), making it a great choice for developers looking to target different platforms with a single codebase.
* **Electron/Tauri Users Seeking Python Integration**: If you're familiar with Electron or Tauri and are looking for a Python-focused alternative with a similar development experience, Pyloid offers the same advantages but with deeper Python integration.

# Pyloid v0.11.0 Release Notes

We‚Äôre excited to announce the release of Pyloid version 0.11.0! This update brings several major improvements and new features to enhance both functionality and usability. Here‚Äôs a breakdown of the key changes:

1. **Renaming &amp; Optimization**: The project has been officially renamed from *Pylon* to *Pyloid*, along with a series of optimizations to improve performance.
2. **Documentation Overhaul**: All official documentation has been thoroughly updated and reorganized to reflect the new name and the latest features, ensuring a smoother experience for developers.
3. **Dynamic Tray &amp; Icon Updates**: Tray and icon-related methods now support dynamic updates, meaning changes can be applied even after the application is running.
4. **Enhanced Tray Features**: New tray tooltip options and tray icon animations have been added for better customization and visual feedback.
5. **Advanced Timer Functionality**: Several new timer features have been introduced, including:
   * **High-precision timers**
   * **Single-shot timers**
   * **Periodic timers**
6. **File Watcher Functionality**: A new file watcher feature is now available, enabling monitoring of file or directory changes with the ability to trigger callback functions.
7. **Notification Click Callbacks**: You can now define callback functions to handle click events on notifications, providing more interactive and responsive notifications.
8. **Comprehensive Guides**: The official documentation now includes detailed guides to help users get the most out of these new features.

# üîç Comparison with Existing Alternatives

# PyWebview vs Pyloid Comparison

# 1. Core Architecture

* **PyWebview**: PyWebview is a lightweight wrapper around native web engines (e.g., WebKit on macOS and Linux, MSHTML on Windows) that allows you to easily create web-based GUIs using Python. It integrates well with Python code, making it easy to build desktop applications with HTML, CSS, and JavaScript.
* **Pyloid**: Pyloid is built on **QtWebEngine** and **PySide6**, offering a more powerful framework that can handle complex applications. It is optimized for developing desktop applications with Python, particularly those involving AI integration.

**Key Difference**: PyWebview relies on native web engines to support simple applications, while Pyloid uses QtWebEngine to provide a more flexible and scalable environment.

# 2. Python and JavaScript Integration

* **PyWebview**: PyWebview focuses on executing JavaScript from Python and handling communication between the two. However, developers often need to write JavaScript inside Python strings, which can limit IDE support and make debugging more challenging.
* **Pyloid**: Pyloid provides a **Bridge API** for smooth communication between Python and JavaScript. This API offers more flexibility and allows easy integration of Python functionality with web-based frontends.

**Key Difference**: Pyloid offers a more intuitive and developer-friendly integration for Python-JS interactions, whereas PyWebview is more limited in this aspect.

# 3. Frontend Framework Integration

* **PyWebview**: PyWebview provides limited integration with modern frontend frameworks like React and Vue. While these frameworks can be used, PyWebview primarily focuses on HTML, CSS, and JavaScript, and integrating other frameworks can be more complex.
* **Pyloid**: Pyloid offers templates that make it easy to integrate modern frontend libraries and frameworks like React, providing a more flexible approach to frontend development.

**Key Difference**: Pyloid is better suited for integrating modern frontend libraries, while PyWebview has more limitations in this area.

# 4. Use Cases and Target Applications

* **PyWebview**: PyWebview is ideal for quickly developing simple desktop applications. It‚Äôs particularly useful for lightweight applications that need to combine Python with a web-based GUI.
* **Pyloid**: Pyloid is designed for building complex, feature-rich desktop applications that integrate AI or machine learning, making it suitable for larger projects.

**Key Difference**: PyWebview is best for simpler applications, while Pyloid is better suited for complex projects with AI integration.

# 5. System Tray and Multi-Window Support

* **PyWebview**: PyWebview does not natively support system tray icons and has limited multi-window management capabilities.
* **Pyloid**: Pyloid includes **system tray support** and robust multi-window management, allowing developers to easily create and manage multiple windows and implement complex UIs.

**Key Difference**: Pyloid offers more desktop-specific features such as system tray icons and multi-window management, which PyWebview lacks.

# 6. Desktop-Specific Features

* **PyWebview**: PyWebview focuses on embedding web content and connecting it with Python logic but does not offer extensive desktop-specific features such as clipboard management, notifications, or desktop capture.
* **Pyloid**: Pyloid provides **desktop-specific features** such as clipboard access, notifications, monitor management, desktop capture, file watchers, dynamic tray icons, and more, giving developers more control over desktop application functionality.

**Key Difference**: Pyloid offers a richer set of desktop application features compared to PyWebview.

# 7. Cross-Platform Support

* **PyWebview**: PyWebview works on Windows, macOS, and Linux but relies on the native web engines of each platform, which can result in inconsistent behavior across different systems.
* **Pyloid**: Pyloid uses **QtWebEngine**, ensuring more consistent performance and behavior across Windows, macOS, and Linux.

**Key Difference**: Pyloid provides more reliable cross-platform support due to QtWebEngine, while PyWebview‚Äôs reliance on native web engines can lead to inconsistencies.

# 8. Ease of Use

* **PyWebview**: PyWebview is very lightweight and easy to use, making it an excellent choice for small projects or prototypes. Its simplicity is its strength, but it can be limiting for more complex applications.
* **Pyloid**: Pyloid is slightly more complex due to its additional functionality but offers a much richer development experience for larger projects and more demanding applications.

**Key Difference**: PyWebview is simpler and better suited for small apps, while Pyloid, with its broader feature set, is ideal for complex apps.

# Conclusion:

* **PyWebview** is a great tool for quickly and easily developing lightweight applications that combine Python and web technologies.
* **Pyloid** is optimized for AI-powered, scalable cross-platform desktop applications, offering more features and flexibility for larger, more complex projects.

If you‚Äôre looking to build a simple desktop app, **PyWebview** may be the better option, but if you need to develop an AI-based or more scalable project, **Pyloid** is the superior choice.",Ok-Method-9403,1g1w3ox,https://reddit.com/r/Python/comments/1g1w3ox/pyloid_a_webbased_gui_library_for_desktop/,https://www.reddit.com/r/Python/comments/1g1w3ox/pyloid_a_webbased_gui_library_for_desktop/,2024-10-12 09:02:42,64,0.88,64,0,15,0,0,False,False,True,False,False,Showcase,https://b.thumbs.redditmedia.com/_uYesFeB2WuJoQPOROLC9sSgsvBqjlj0U8DthiXyntE.jpg,t3_1g1w3ox
Python,I Understand Machine Learning with Numpy and PyTorch Better Since I Started Focusing on the Basics,"I've recently started appreciating ML in Python more since I began looking at the concepts from the ground up.

For example, I took a closer look at the basics of classification neural networks, and now I have a better understanding of how more complex networks work. The foundation here is logistic regression, and understanding that has really helped me grasp the overall concepts better. It also helped me implementing the code in Numpy and in PyTorch.

If you're also interested in Machine Learning with Python and sometimes feel overwhelmed by all the complicated topics, I really recommend going back to the basics. I've made a video where I explain logistic regression step by step using a simple example.

The video will be attached here: [https://youtu.be/EB4pqThgats?si=Z-lXOjuNKEP5Yehn](https://youtu.be/EB4pqThgats?si=Z-lXOjuNKEP5Yehn)

I'd be happy if you could take a look and give me some feedback! I'm curious to hear what you think of my approach and if you have any tips on how to make it even clearer.",vtimevlessv,1g1uuyc,https://reddit.com/r/Python/comments/1g1uuyc/i_understand_machine_learning_with_numpy_and/,https://www.reddit.com/r/Python/comments/1g1uuyc/i_understand_machine_learning_with_numpy_and/,2024-10-12 07:25:03,124,0.82,124,0,27,0,0,False,False,True,False,False,Discussion,self,t3_1g1uuyc
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1g1npyb,https://reddit.com/r/Python/comments/1g1npyb/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1g1npyb/saturday_daily_thread_resource_request_and/,2024-10-12 00:00:13,3,0.67,3,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g1npyb
Python,rye in production?,"Good morning/evening!

Have you heard of rye? Which is pretty cool tool chain mgmt framework written in rust.

Recently, I'm using it in production(semantic search engine). I feel like it is better than peotry, because it handles ai related packages-like torch- seemlessly.

Is there  anyone to adopt  rye in production? How was your experience?

",Ok-Lunch2268,1g1mi1f,https://reddit.com/r/Python/comments/1g1mi1f/rye_in_production/,https://www.reddit.com/r/Python/comments/1g1mi1f/rye_in_production/,2024-10-11 22:58:09,0,0.29,0,0,12,0,0,False,False,True,False,False,Discussion,self,t3_1g1mi1f
Python,Default netrc entry causes requests module to spam your password to the world?,"The python requests module will automatically scan your .netrc and append a basic authorization header with your base64 encoded user:pass to all outgoing requests. 

To see this 
- add a default entry into your .netrc
- make any requests.get(some_urrl)
- inspect the response.request.headers

I always assumed I needed to import netrc to make use of my netrc, but that is not true. 

This seems like a horrible security choice?

Lesson is never use a ‚Äúdefault entry into your netrc?



",kyngston,1g1gdvw,https://reddit.com/r/Python/comments/1g1gdvw/default_netrc_entry_causes_requests_module_to/,https://www.reddit.com/r/Python/comments/1g1gdvw/default_netrc_entry_causes_requests_module_to/,2024-10-11 18:18:18,0,0.5,0,0,5,0,0,False,False,True,False,False,Discussion,self,t3_1g1gdvw
Python,Random context generator - RaCoGen (provisional name),"**What my project does:**

RaCoGen is a simple program that generates a random context (a situation in which then two characters are put) by making use of 3 databases (nouns, adjectives and actions).

1. First, it selects a random noun and adjective, and it generates a setting with that, like ""big forest"" or ""sandy gym"". 
2. Then, it selects and action, like ""talking"", ""drawing""...
3. Finally, it generates the context using the setting and action, giving a result like ""In a sandy gym, where char1 and char2 are drawing.""

After all of this is ready, the program prints the result like this:

Random noun selected: beach

Random adjective selected: cultural

Random setting created: cultural beach

Random action selected: sleeping

Random context created: In a cultural beach, where char1 and char2 are sleeping.

**Target audience:**

This project doesn't have a target audience in mind because it's an experiment. I'm just seeing what I can or can't do. You can consider it a toy, because it's more for entertainment than anything eslse. 

But that's just for now. I will, probably, expand this so it gives the users more options, has more variety, etc. 

For now, it's made to test while I learn, but maybe in the future it could turn to an app with a nice interface for users that want to make databases for whatever reason but don't want, or can't, spend the time writting everything themselves.

**Comparision with other programs:**

I don't know if there are any programs like this out there. My reasoning tells me that there must be, and that my program will be simpler and, because of that, you could say that worse for that regard. 

  
**Links:**

If you want to give this program a try, check out my [GitHub](https://github.com/INGOR0/random-context-generator/tree/main) repository.

If you are interested in how it works internally and want to follow my journey as I figure these things out, check out my [Google Document](https://docs.google.com/document/d/1RzmRTRMYWoDTSx2ddamlSiGY7xL__hYuhZHebURhIj4/edit) discussing all of that.",EntertainmentCute998,1g1e7as,https://reddit.com/r/Python/comments/1g1e7as/random_context_generator_racogen_provisional_name/,https://www.reddit.com/r/Python/comments/1g1e7as/random_context_generator_racogen_provisional_name/,2024-10-11 16:42:38,2,0.57,2,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1g1e7as
Python,A new take on dependency injection in Python,"In case anyone's interested, I've put together a DI framework ""pylayer"" in python that's fairly different from the alternatives I'm aware of (there aren't many). It includes a simple example at the bottom.  
[https://gist.github.com/johnhungerford/ccb398b666fd72e69f6798921383cb3f](https://gist.github.com/johnhungerford/ccb398b666fd72e69f6798921383cb3f)

# What my project does

It allows you automatically construct dependencies based on their constructors.

The way it works is you define your dependencies as dataclasses inheriting from an¬†`Injectable`¬†class, where upstream dependencies are declared as dataclass attributes with type hints. Then you can just pass the classes to an¬†`Env`¬†object, which you can query for any provided type that you want to use. The Env object will construct a value of that type based on the¬†`Injectable`¬†classes you have provided. If any dependency needed to construct the queried type, it will generate an error message explaining what was missing and why it was needed.

# Target audience

This is a POC that might be of interest to anyone who is uses or has wanted to use dependency injection in a Python project.

# Comparison

[https://python-dependency-injector.ets-labs.org/](https://python-dependency-injector.ets-labs.org/) is but complicated and unintuitive. pylayer is more automated and less verbose.

[https://github.com/google/pinject](https://github.com/google/pinject) is not maintained and seems similarly complicated.

[https://itnext.io/dependency-injection-in-python-a1e56ab8bdd0](https://itnext.io/dependency-injection-in-python-a1e56ab8bdd0) provides an approach similar to the first, but uses annotations to simplify some aspects of it. It's still more verbose and less intuitive, in my opinion, than pylayer.

Unlike all the above, pylayer has a relatively simple, functional mechanism for wiring dependencies. It is able to automate more by using the type introspection and the automated `__init__` provided by `dataclasses`. 

For anyone interested, my approach is based on Scala's¬†[ZIO library](https://zio.dev/). Like ZIO's `ZLayer` type, pylayer takes a functional approach that uses memoization to prevent reconstruction of the same values. The main difference between pylayer and ZIO is that wiring and therefore validation is done at runtime. (Obviously compile-time validation isn't possible in Python...)",jivesishungry,1g1dp8i,https://reddit.com/r/Python/comments/1g1dp8i/a_new_take_on_dependency_injection_in_python/,https://www.reddit.com/r/Python/comments/1g1dp8i/a_new_take_on_dependency_injection_in_python/,2024-10-11 16:20:58,13,0.73,13,0,36,0,0,False,False,True,False,False,Showcase,self,t3_1g1dp8i
Python,Opinions on Inclusive / Exclusive Upper Bounds,"I would ask this as a poll, but that option isn't available. I'm looking to get people's opinions on bounds for a range within Python. For something like a random number, etc., do you find it **more natural** for a the upper bound on a range to be inclusive or exclusive? 

For example, if our range is 6 through 12. The lower bound is essentially always inclusive, index-wise. Which is more natural to you:

Inclusive would contain: 6, 7, 8, 9, 10, 11, 12  
Exclusive would contain: 6, 7, 8, 9, 10, 11",SuperMB13,1g1cx5i,https://reddit.com/r/Python/comments/1g1cx5i/opinions_on_inclusive_exclusive_upper_bounds/,https://www.reddit.com/r/Python/comments/1g1cx5i/opinions_on_inclusive_exclusive_upper_bounds/,2024-10-11 15:48:05,0,0.29,0,0,12,0,0,False,False,True,False,False,Discussion,self,t3_1g1cx5i
Python,Pyinstrument v5.0 - flamegraphs for Python!,"Hi reddit! I've been hard at work on a new [pyinstrument](https://github.com/joerick/pyinstrument) feature that I'm really excited to show off. It's a completely new HTML renderer that lets you see visually exactly what happened as the program was running.

**What it does** First, some context: Pyinstrument is a statistical profiler for Python. That means you can activate it when you're running your code, and pyinstrument will record what happens periodically, and at the end, give you a report that tells you where the time was spent.

**Target Audience** Anyone wondering if their Python program could be faster! Not only is it useful from a performance perspective, it's also a nice way to understand what's going on when a program runs.

**Comparison** If you've used profilers like cProfile before, pyinstrument aims to be a more user-friendly, intuitive alternative to that. It's also a _statistical profiler_, it only samples your program periodically, so it shouldn't slow the program down too much.

**So, what's new?** Up until now, the output has been some form of call stack. That's great to identify the parts of code that are taking the most time. But it can leave some information missing - what's the pattern of the code execution? What order do things happen in? When do the slow functions get called?

https://joerick.s3.amazonaws.com/pyi+video+1.gif

That's where the new HTML mode comes in! Run pyinstrument with the `-r html` flag, and when the browser opens up you can see the option to view as a Timeline. From there, you can see the big picture, and then zoom in all the way to milliseconds to see what your program is up to!

More info in the [writeup on my blog](https://joerick.me/posts/2024/10/3/pyinstrument-5/).

Give it a try on your codebase! Just do `pip install -U pyinstrument` to get the latest version and use the `-r html` flag to use the new mode.",joerick,1g1az6i,https://reddit.com/r/Python/comments/1g1az6i/pyinstrument_v50_flamegraphs_for_python/,https://www.reddit.com/r/Python/comments/1g1az6i/pyinstrument_v50_flamegraphs_for_python/,2024-10-11 14:22:43,115,0.96,115,0,22,0,0,False,False,True,False,False,Showcase,self,t3_1g1az6i
Python,Python.org stylesheet 404 - Is it just me?,"GET https://www.python.org/static/stylesheets/style.73ee703a9176.css results in a 404 for me. And the home page doesn't render correctly. 

Works fine from a mobile browser though. Seeing issues when loading the page from a desktop.",sardar_silicon,1g1ajjy,https://reddit.com/r/Python/comments/1g1ajjy/pythonorg_stylesheet_404_is_it_just_me/,https://www.reddit.com/r/Python/comments/1g1ajjy/pythonorg_stylesheet_404_is_it_just_me/,2024-10-11 14:03:00,0,0.4,0,0,5,0,0,False,False,True,False,False,Meta,self,t3_1g1ajjy
Python,Automatic Flowcharts,Are there any tools or libraries that make automatic flowcharts or something similar? Like the call stack when debugging but more like a diagram of all the calls that are made since an if name == '\_\_main\_\_' is executed. It would be useful to see more or less what a program does even if it is not completely accurate.,Unlikely_Stand3020,1g190dl,https://reddit.com/r/Python/comments/1g190dl/automatic_flowcharts/,https://www.reddit.com/r/Python/comments/1g190dl/automatic_flowcharts/,2024-10-11 12:50:05,11,0.87,11,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1g190dl
Python,"Tkinter based package for sending GUI alerts / notifications, named tk-alert","Hi everyone, I have been thinking to post here for some time and decided to do so. I was hesitant as this is my first time working on a python package and the project is far from being finished.

Long story short, I have been working on a personal app using Tkinter and I needed a way to send error notifications to users, could not find something really easy to install and use so I started working on creating my own self-contained package.

  
**1. What my project does.**

Sends GUI notifications for users meant for information, warnings or errors, using Tkinter. 

My design philosophy was that the package should be simple and ready to use out-of-the-box, but should have more complex design time features for people that want a specific look on their app (this part is work in progress)

So far I did not have time to continue work on this due to multiple reasons, but as the cold season approaches I am looking forward to get on with some tasks from my to-do list.

**2. Target audience.**

Tkinter devs, not ready for production yet.

**3. Comparison.**

What I want this package to be set apart by is the ease of set-up and use + the fact that it is self-contained (I will keep it that way in all the iterations to come).

Please take a look if you want (or if this sounds like something you would use). Any feedback is appreciated as I don't have a lot of experience with making python packages and I am looking to improve my code / design.

Github: [https://github.com/DragosPancescu/tk-alert](https://github.com/DragosPancescu/tk-alert)

PyPI: [https://pypi.org/project/tk-alert/](https://pypi.org/project/tk-alert/)",dragos13,1g17jeq,https://reddit.com/r/Python/comments/1g17jeq/tkinter_based_package_for_sending_gui_alerts/,https://www.reddit.com/r/Python/comments/1g17jeq/tkinter_based_package_for_sending_gui_alerts/,2024-10-11 11:28:11,11,0.79,11,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1g17jeq
Python,[Updated] Summary of Major Changes Between Python Versions,"Hi r/python üëã,

A while ago I shared my blog post summarising changes between python versions, a resource that a lot of you appreciated.

https://www.nicholashairs.com/posts/major-changes-between-python-versions/

With the recent release of Python 3.13 I've obviously needed to update the post, which is done üéâ. I will add that it's definitely not a guide to all the changes and there will be much better content from others if you want to deep dive into the changes.

I've also added links to related tools based on feedback in various comment sections as it turns out I wasn't the first person to do this and credit where credit is due. There's also other various changes like linking to ruff instead of just black etc.

Finally I'm also re-sharing this because I managed to break all the links to my posts when migrating servers for a few days which Google Search obviously hated (who knew returning HTTP 404 was terrible for SEO üôÉ &lt;/s&gt;). Anyway this is important not because of my own SEO, but because if you have been using Google as the quick way to find the post and been wondering why it's gone that's why. For those of you that bookmarked it: all links should be restored.

I hope it continue to prove useful to you and see you in 2025 for œÄython 3.14 üêç

Edit: would help if I linked the post ü§¶ü§¶ü§¶ü§¶",nicholashairs,1g15i7n,https://reddit.com/r/Python/comments/1g15i7n/updated_summary_of_major_changes_between_python/,https://www.reddit.com/r/Python/comments/1g15i7n/updated_summary_of_major_changes_between_python/,2024-10-11 09:04:32,12,0.7,12,0,4,0,0,False,False,True,False,False,Resource,self,t3_1g15i7n
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1g0ww31,https://reddit.com/r/Python/comments/1g0ww31/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1g0ww31/friday_daily_thread_rpython_meta_and_freetalk/,2024-10-11 00:00:41,4,0.84,4,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g0ww31
Python,"Introducing Eventum ASGI, a Python framework simplifying the creation of WebSocket-based apps","# Introduction:

I'm excited to present my first Python framework. I would appreciate any feedback you could give me, it's my first project and it's still in active development.

# What My Project Does:

The project is based on ASGI protocol, the key idea is to simplify the usage of WebSockets which isn't a strong side of most popular frameworks. The framework introduces some new approaches to handling WebSockets, most of the time you'll work with a `WSConnection` class which is one of the keystones of the framework. 

Another significant difference from the common approach is the connection lifecycle in the app.

1.  You create a `handshake_route`, which is only responsible for handling the initial request. It expects to get a handshake request to switch protocols.
2. You create an `event`. To make it easier to understand you can also consider it to be a route, just for messages sent via an established connection. It expects a `JSON` which must contain an ""event"" field in it.

To explain how everything works behind the scenes:

1. A client sends a handshake to switch protocols and for a server to either accept or reject a connection.
2. Once accepted, the connection gets into a loop where it's constantly checking for new events to come from the client. The framework also manages disconnections.
3. Once a client sends a message, the app routes the event to the corresponding event route.

You can find much more info in the documentation provided in the links section.

# Key Features:

* WebSocket connection handling
* Event-based routing
* Middleware support
* Lifespan event management
* Pydantic model validation for events and handshakes
* HTTP response support
* Connection flags management

# Target Audience:

**For now**, Eventum ASGI is mainly for those who want to experiment and play around with the framework. It‚Äôs still in its early stages and not yet production-ready. However, **in the future**, I hope the target audience will be backend developers looking for a streamlined way to handle WebSockets in their applications.

# Planned Features:

* Simple way to handle reconnections 
* File-sharing support
* Integrations with message buses such as redis, kafka and etc.
* ... And much more, feel free to suggest features in the comments! 

# Comparison:

The framework is focused on providing new approaches to handling WebSockets that aren't in other frameworks. Most of them are already specified in the previous sections.

# Links:

GitHub: [https://github.com/Gaulix3d/eventum-asgi](https://github.com/Gaulix3d/eventum-asgi)

Documentation: [https://gaulix3d.github.io/mkdocs-eventum/](https://gaulix3d.github.io/mkdocs-eventum/)

PyPi: [https://pypi.org/project/eventum-asgi/](https://pypi.org/project/eventum-asgi/)",Gaulixe,1g0px5z,https://reddit.com/r/Python/comments/1g0px5z/introducing_eventum_asgi_a_python_framework/,https://www.reddit.com/r/Python/comments/1g0px5z/introducing_eventum_asgi_a_python_framework/,2024-10-10 18:42:25,23,0.86,23,0,13,0,0,False,False,True,False,False,Showcase,self,t3_1g0px5z
Python,"My first Python package, for creating queries using including Pydantic/SqlAlchemy.","# What My project Does:

Applying filters and ordering queries using¬†`Pydantic`. This way, you can use the same schema for deserialization and generating docs to query the database. There is a base class that can be inherited to reuse the same logic in other places. For example, I am considering adding support for¬†`marshmallow-dataclass`¬†or¬†`marshmallow`¬†in the future. 

# Key Features:

* Base class which can be inherited to be used in other places
* Dedicated `pydantic` class which allows to apply filters/orderings to query as well get filters/ordering and then manually apply them whenever it is required
* Utils which can apply filters/ordering to a query without dataclasses.

# GitHub and PyPI

* GitHub: [https://github.com/ViAchKoN/dataclass-sqlalchemy-mixins](https://github.com/ViAchKoN/dataclass-sqlalchemy-mixins)
* PyPi [https://pypi.org/project/dataclass-sqlalchemy-mixins/](https://pypi.org/project/dataclass-sqlalchemy-mixins/)

# Comparison:

More python/sqlalchemy/pydantic versions supported. Added more features.",IaMaPPle111,1g0mzvh,https://reddit.com/r/Python/comments/1g0mzvh/my_first_python_package_for_creating_queries/,https://www.reddit.com/r/Python/comments/1g0mzvh/my_first_python_package_for_creating_queries/,2024-10-10 16:34:53,3,0.67,3,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1g0mzvh
Python,What I Learned from Making the Python Back End for My New Webapp,"I learned a lot from making this, and think a lot of it would be interesting to others making web apps in Python:

[https://youtubetranscriptoptimizer.com/blog/02\_what\_i\_learned\_making\_the\_python\_backend\_for\_yto](https://youtubetranscriptoptimizer.com/blog/02_what_i_learned_making_the_python_backend_for_yto)",dicklesworth,1g0jybv,https://reddit.com/r/Python/comments/1g0jybv/what_i_learned_from_making_the_python_back_end/,https://www.reddit.com/r/Python/comments/1g0jybv/what_i_learned_from_making_the_python_back_end/,2024-10-10 14:21:28,35,0.82,35,0,11,0,0,False,False,True,False,False,Resource,self,t3_1g0jybv
Python,"PSA: If you're starting a new project, try astral/uv!","It's really amazing, complex dependencies are resolved in mere miliseconds, it manages interpreters for you and it handles dev-dependencies and tools as good if not better than poetry. You are missing out on a lot of convenience if you don't try it. [check it out here](https://github.com/astral-sh/uv).

Not affiliated or involved in any way btw, just been using it for a few months and am still blown out of the water by how amazing uv and ruff are.",Mithrandir2k16,1g0imjf,https://reddit.com/r/Python/comments/1g0imjf/psa_if_youre_starting_a_new_project_try_astraluv/,https://www.reddit.com/r/Python/comments/1g0imjf/psa_if_youre_starting_a_new_project_try_astraluv/,2024-10-10 13:18:52,347,0.91,347,0,127,0,0,False,False,True,False,False,Resource,self,t3_1g0imjf
Python,folder-organization script,"Hey everybody! I wanted to share my new program I wrote. It's a folder-organization script that organizes everything into one folder. I got the idea when I was looking at my desktop and realized I just save / create things on there with no organization at all. This program organizes the files based on their file extension and puts them into a seperate folder. The link to the repository on my github is [https://github.com/Vortex1134/folder-organization.git](https://github.com/Vortex1134/folder-organization.git) If you do use it, let me know if you run into any errors, but I think I got them all sorted out. :)",vortexgamer1134,1g0f1vv,https://reddit.com/r/Python/comments/1g0f1vv/folderorganization_script/,https://www.reddit.com/r/Python/comments/1g0f1vv/folderorganization_script/,2024-10-10 09:43:29,13,0.81,13,0,10,0,0,False,False,True,False,False,Showcase,self,t3_1g0f1vv
Python,Petition for Python 3.14 to be called 'PiThon or 'œÄthon',"Since python 3.13 was released this year, and 3.14 releasing next year, it would be very splendid to mark Python 3.14 to be called PiThon or œÄthon, just for the fun of it. no need to change the language. If the devs want, they can make python 3.14 respond to 'pithon --version' too",KaustubhIsMyName,1g0a94c,https://reddit.com/r/Python/comments/1g0a94c/petition_for_python_314_to_be_called_pithon_or/,https://www.reddit.com/r/Python/comments/1g0a94c/petition_for_python_314_to_be_called_pithon_or/,2024-10-10 03:51:19,0,0.42,0,0,31,0,0,False,False,True,False,False,Discussion,self,t3_1g0a94c
Python,ParScrape v0.4.6 Released,"# What My project Does:

Scrapes data from sites and uses AI to extract structured data from it.

# Whats New:

* Added more AI providers
* Updated provider pricing data
* Minor code cleanup and bug fixes
* Better cleaning of HTML

# Key Features:

* Uses Playwright / Selenium to bypass most simple bot checks.
* Uses AI to extract data from a page and save it various formats such as CSV, XLSX, JSON, Markdown.
* Has rich console output to display data right in your terminal.

# GitHub and PyPI

* PAR Scrape is under active development and getting new features all the time.
* Check out the project on GitHub or for full documentation, installation instructions, and to contribute:¬†[https://github.com/paulrobello/par\_scrape](https://github.com/paulrobello/par_scrape)
* PyPI [https://pypi.org/project/par\_scrape/](https://pypi.org/project/par_scrape/)

# Comparison:

I have seem many command line and web applications for scraping but none that are as simple, flexible and fast as ParScrape

# Target Audience

AI enthusiasts and data hungry hobbyist",probello,1g06arb,https://reddit.com/r/Python/comments/1g06arb/parscrape_v046_released/,https://www.reddit.com/r/Python/comments/1g06arb/parscrape_v046_released/,2024-10-10 00:17:37,17,0.84,17,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1g06arb
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1g05xw8,https://reddit.com/r/Python/comments/1g05xw8/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1g05xw8/thursday_daily_thread_python_careers_courses_and/,2024-10-10 00:00:09,2,0.67,2,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1g05xw8
Python,What to use instead of callbacks?,"I have a lot of experience with Python, but I've also worked with JavaScript and Go and in some cases, it just makes sense to allow the caller to pass a callback (ore more likely a closure). For example to notify the caller of an event, or to allow it to make a decision. I'm considering this in the context of creating library code.

Python lambdas are limited, and writing named functions is clumsier than anonymous functions from other languages. Is there something - less clumsy, more Pythonic?

In my example, there's a long-ish multi-stage process, and I'd like to give the caller an opportunity to validate or modify the result of each step, in a simple way. I've considered class inheritance and mixins, but that seems like too much setup for just a callback. Is there some Python pattern I'm missing?",ivoras,1g02dtg,https://reddit.com/r/Python/comments/1g02dtg/what_to_use_instead_of_callbacks/,https://www.reddit.com/r/Python/comments/1g02dtg/what_to_use_instead_of_callbacks/,2024-10-09 21:15:34,39,0.75,39,0,47,0,0,False,False,True,False,False,Discussion,self,t3_1g02dtg
Python,[blog post] Hugging Face + Dask for parallel data processing and model inference,"Wanted to share a blog post on using Hugging Face with Dask to process the FineWeb dataset. The example goes through:

* Reading directly from Hugging Face with Dask, eg `df = dask.dataframe.read_parquet(hf://...)`
* Using a Hugging Face Language Model to classify the educational level of the text.
* Filtering the highly educational web pages as a new dataset and writing in parallel directly from Dask to Hugging Face storage.

The example goes through processing a small subset of the FineWeb dataset with pandas and then scaling out to multiple GPUs with Dask.

Blog post: [https://huggingface.co/blog/dask-scaling](https://huggingface.co/blog/dask-scaling)",dask-jeeves,1fzyh7x,https://reddit.com/r/Python/comments/1fzyh7x/blog_post_hugging_face_dask_for_parallel_data/,https://www.reddit.com/r/Python/comments/1fzyh7x/blog_post_hugging_face_dask_for_parallel_data/,2024-10-09 18:29:42,5,0.73,5,0,0,0,0,False,False,True,False,False,Resource,self,t3_1fzyh7x
Python,PEP 760 ‚Äì No More Bare Excepts,"PEP 760 ‚Äì No More Bare Excepts

This PEP proposes disallowing bare `except:` clauses in Python‚Äôs exception-handling syntax.

- https://peps.python.org/pep-0760/
- https://discuss.python.org/t/pep-760-no-more-bare-excepts/",commandlineluser,1fzxwj3,https://reddit.com/r/Python/comments/1fzxwj3/pep_760_no_more_bare_excepts/,https://www.reddit.com/r/Python/comments/1fzxwj3/pep_760_no_more_bare_excepts/,2024-10-09 18:05:30,142,0.9,142,0,96,0,0,False,False,True,False,False,News,self,t3_1fzxwj3
Python,What personal challenges have you solved using Python? Any interesting projects or automations?,"Hey everyone! I'm curious‚Äîwhat have you used Python for in your daily life? Are there any small, repetitive tasks you've automated that made things easier or saved you time? I'd love to hear about it!

  
I stumbled upon an old article on this Python a while ago. I think it's worth revisiting this topic about it again.

",kelvinxG,1fzupwm,https://reddit.com/r/Python/comments/1fzupwm/what_personal_challenges_have_you_solved_using/,https://www.reddit.com/r/Python/comments/1fzupwm/what_personal_challenges_have_you_solved_using/,2024-10-09 15:53:21,129,0.92,129,0,174,0,0,False,False,True,False,False,Discussion,self,t3_1fzupwm
Python,Speeding up unit tests in CI/CD,"I have a large Django project that currently takes ca. 30 minutes to run all the unit tests serially in our CI/CD pipeline and we want speed this up as it's blocking our releases.

I have a Ruby background and am new to Python - so I'm investigating the options available in the Python ecosystem to speed this up. So far I've found:

* [pytest-xdist](https://pypi.org/project/pytest-xdist/)
* [pytest-split](https://pypi.org/project/pytest-split/)
* [pytest-parallel](https://pypi.org/project/pytest-parallel/)
* [pytest-run-parallel](https://pypi.org/project/pytest-run-parallel/)
* [tox](https://tox.wiki/en/latest/index.html) parallel (not exactly what I need, as I only have one environment)
* [CircleCI's test splitting](https://circleci.com/docs/parallelism-faster-jobs/) - I've used this for Ruby, and it didn't do so well when some classes had a lot of tests in them

I'd love to hear your experiences of these tools and if you have any other suggestions.",EmergencyEdict,1fzreee,https://reddit.com/r/Python/comments/1fzreee/speeding_up_unit_tests_in_cicd/,https://www.reddit.com/r/Python/comments/1fzreee/speeding_up_unit_tests_in_cicd/,2024-10-09 13:27:40,21,0.77,21,0,46,0,0,False,False,True,False,False,Discussion,self,t3_1fzreee
Python,"Created a Script for myself, thought others might need it as well. Python Env Cleaner","I first created this to clean my global python env as due to mistakes of life, I have installed requirements.txt of numerous projects on global python. Later realized that if I can make such mistakes while boasting 10 years of experience on resume, others might also suffer from it.

# What My Project does

It cleans the environment you are in when running this script. Only leaves

# Target Audience

Anyone who wants to clean their global or specific virtual env.

# Comparison: 

I did a high level first page only search on google and github \`how to clean virtual env\` but didn't find anything meaningful.



Github Link:¬†[https://github.com/sadaqatullah/python-env-cleaner](https://github.com/sadaqatullah/python-env-cleaner)",sindhichhokro,1fzr4sj,https://reddit.com/r/Python/comments/1fzr4sj/created_a_script_for_myself_thought_others_might/,https://www.reddit.com/r/Python/comments/1fzr4sj/created_a_script_for_myself_thought_others_might/,2024-10-09 13:15:02,3,0.58,3,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1fzr4sj
Python,Optimization Based Customer Segmentation,"Hey everyone,

I just finished a project called¬†**Optimization-Based Customer Segmentation**, and I thought some of you might find it useful. It‚Äôs designed to help businesses segment customers based on their propensities, optimizing for revenue while keeping costs in check.

**What My Project Does**

Smart Segment helps businesses make smarter decisions about their customers by identifying which customers are most likely to convert or bring in revenue, based on existing customer data and predictions from Machine Learning models.

# Here's why it matters:

* **Increase Revenue**: By focusing marketing efforts on the customers most likely to buy, businesses can increase conversion rates. Instead of wasting resources on broad, inefficient targeting, Smart Segment allows companies to hone in on the customers who matter most.
* **Reduce Costs**: Businesses save money by avoiding spending on customers who are unlikely to convert. The tool helps optimize marketing budgets, ensuring money is spent efficiently.
* **Maximize ROI**: Smart Segment improves return on investment (ROI) by balancing customer acquisition costs with potential revenue, ensuring that marketing investments are optimized for profit, not just growth.

# How it works:

* **Uses Machine Learning Data**: If you already have a Machine Learning model predicting customer behavior, Smart Segment takes that information and applies optimization techniques to segment customers in a way that maximizes revenue or conversion rates.
* **Customization**: You can tweak the tool to fit your specific needs, such as defining how much you're willing to spend on customer acquisition and how much revenue you'd expect from different segments.

**Target Audience**

**Business Intelligence and Marketing Teams**: Anyone responsible for customer segmentation, revenue optimization, or marketing strategy will benefit from the insights this tool provides.

Data Scientists and Analysts might also find this solution useful!

**Comparison**

This is the only library currently performing a layer of optimization over classification probabilities to maximize revenue and conversion rates. Benchmarking against conventional uniform / percentile based methods has shown the Smart Segment model to outperform significantly.

You can install it easily from PyPI:

    pip install smart-segment

If you're interested, here are the links to the Github and PyPI.

[https://github.com/astronights/smart-segment](https://github.com/astronights/smart-segment)

[https://pypi.org/project/smart-segment/](https://pypi.org/project/smart-segment/)

I‚Äôd love to get your thoughts or any feedback you might have. Thanks for checking it out!

EDIT: Here are some statistics from the Optimization method's performance:

|**Metric**|**Uniform**|**Percentile**|**Smart Segment (Optimized)**|
|:-|:-|:-|:-|
|**Group 1**|(-0.00058, 0.1\]|(-0.00058, 0.0535\]|(0.0, 0.154\]|
|**Group 2**|(0.1, 0.2\]|(0.0535, 0.0829\]|(0.154, 0.264\]|
|**Group 3**|(0.2, 0.3\]|(0.0829, 0.11\]|(0.264, 0.406\]|
|**Group 4**|(0.3, 0.4\]|(0.11, 0.138\]|(0.406, 0.612\]|
|**Group 5**|(0.4, 0.5\]|(0.138, 0.168\]|(0.612, 0.898\]|
|**Group 6**|(0.5, 0.6\]|(0.168, 0.202\]|(0.898, 0.915\]|
|**Group 7**|(0.6, 0.7\]|(0.202, 0.244\]|(0.915, 0.965\]|
|**Group 8**|(0.7, 0.8\]|(0.244, 0.3\]|(0.965, 1.0\]|
|**Group 9**|(0.8, 0.9\]|(0.3, 0.39\]||
|**Group 10**|(0.9, 1.0\]|(0.39, 1.0\]||
|**Best Conversion Rate**|97.48% (0.9-1.0)|50.92% (0.39-1.0)|**100%** (0.965-1.0)|
|**Total Revenue ($)**|$70,280|-$542,580|**$216,448**|
|**Best Revenue / Customer**|$9.24 (0.9-1.0)|-$4.72 (0.39-1.0)|**$15.23** (0.915-0.965)|",astronights,1fzolb1,https://reddit.com/r/Python/comments/1fzolb1/optimization_based_customer_segmentation/,https://www.reddit.com/r/Python/comments/1fzolb1/optimization_based_customer_segmentation/,2024-10-09 10:53:39,2,0.67,2,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1fzolb1
Python,UXsim 1.7.0 released: Network traffic flow simulator reduces memory usage by ~50%,"[Version 1.7.0](https://github.com/toruseo/UXsim/releases/tag/v1.7.0)¬†of UXsim is released, which halve memory usage by using in-place updates of route choice matrices and includes new functions for shortest path analysis.

**UXsim 1.7.0 highlights**

* Optimized memory usage and others
   * In large scale scenarios, memory usage is reduced by about 50%
   * More efficient and accurate demand definition functions:¬†`adddemand_nodes2nodes2`¬†and¬†`adddemand_area2area2`
   * This is mostly based on investigation and contribution by¬†[EwoutH](https://github.com/EwoutH). Thanks!
* Add several utility functions for shortest path analysis

[UXsim](https://github.com/toruseo/UXsim)¬†is a free, open-source macroscopic and mesoscopic network traffic flow simulator written in Python. It simulates the movements of car travelers and traffic congestion in road networks. It is suitable for simulating large-scale (e.g., city-scale) traffic phenomena. UXsim is especially useful for scientific and educational purposes because of its simple, lightweight, and customizable features, but users are free to use UXsim for any purpose.",Balance-,1fzobvk,https://reddit.com/r/Python/comments/1fzobvk/uxsim_170_released_network_traffic_flow_simulator/,https://www.reddit.com/r/Python/comments/1fzobvk/uxsim_170_released_network_traffic_flow_simulator/,2024-10-09 10:36:28,7,0.82,7,0,2,0,0,False,False,True,False,False,News,self,t3_1fzobvk
Python,Python Image Library question (colors changed after PNG to JPG conversion),"Hi guys. Sorry, if I'm asking this question in the wrong subreddit. 

My Lambda function uses the Python Image Library (PIL) to convert images, specifically converting everything to PNG. Recently, I've run into a few cases where the colors of the image noticeably change during the conversion from JPG. Could you please advise me on what I should do?

[original JPG](https://drive.google.com/file/d/16l5WW4XO0QbT_xFCD23uivoMHeepm5n7/view) 

[converted PNG](https://drive.google.com/file/d/1DxEPY_svwzbU6K9K_-lCk1lwhq-mzx7K/view)

Part of my code below

    def convert_image (s3_source_key, prefix):
        playout_key = prefix + '_playout.png'
        thumbnail_key = prefix + '_thumb.png'
        all_good = False
    
        try:
            s3_client = boto3.client('s3')
    
            # read the original file
            file_object = s3_client.get_object(Bucket=S3_SOURCE_BUCKET, Key=s3_source_key)['Body']
            file_buffer = file_object.read()
    
            im_orig = Image.open(BytesIO(file_buffer))
    
            # save to png (even if original is actually a png)
            buffer = BytesIO()
            im_orig.convert('RGBA').save(buffer, 'PNG', optimize=True)
    
            buffer.seek(0)
            s3_client.put_object(Body=buffer, Bucket=BUCKET_NAME, Key=playout_key)
    
            # create a thumbnail for an image asset
            im = Image.open(BytesIO(file_buffer))
    
            width, height = im.size
            new_w = width / 3 # 3 is a default resize coefficient
            new_h = height / 3
            
            im = im.convert(""RGBA"")
            im = im.resize((int(new_w), int(new_h)))
            buffer = BytesIO()
            im.save(buffer, 'PNG')
            buffer.seek(0)
            
            s3_client.put_object(Body=buffer, Bucket=BUCKET_NAME, Key=thumbnail_key)

Thanks!  
",Medical_Carrot3927,1fzm95n,https://reddit.com/r/Python/comments/1fzm95n/python_image_library_question_colors_changed/,https://www.reddit.com/r/Python/comments/1fzm95n/python_image_library_question_colors_changed/,2024-10-09 07:57:44,0,0.5,0,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1fzm95n
Python,Releasing TorchImager: A lightweight library for visualizing PyTorch tensors directly on GPU ,"**What My Project Does**

Hi everyone,

I‚Äôm excited to introduce **TorchImager**, a library to help you visualize **PyTorch tensors** directly on the **GPU**. The goal is to simplify the visualization process while keeping it efficient, by rendering tensors directly on the GPU without requiring transfers back to the CPU.

**Target Audience**

It's intended to help anyone doing machine learning visualize their data/weights.

**Comparaison**

The main alternative until now what to bring back the tensor you wanted to display to the CPU, which is slow and inefficient. You can now skip this step!



Github Link: [https://github.com/Picus303/TorchImager](https://github.com/Picus303/TorchImager)

For now, it's only an alpha and is only available for AMD GPUs (I don't have an Nvidia GPU to test it), but I plan to extend it support and improve it over time.

It would be very helpful for me to get your feedback to make it the useful tool I know it can become. So thanks a lot if you plan to try it!",Picus303,1fzg8q6,https://reddit.com/r/Python/comments/1fzg8q6/releasing_torchimager_a_lightweight_library_for/,https://www.reddit.com/r/Python/comments/1fzg8q6/releasing_torchimager_a_lightweight_library_for/,2024-10-09 01:32:55,4,1.0,4,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1fzg8q6
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1fzeenv,https://reddit.com/r/Python/comments/1fzeenv/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1fzeenv/wednesday_daily_thread_beginner_questions/,2024-10-09 00:00:10,4,0.76,4,0,8,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fzeenv
Python,Webcurses Roguelike - the quest to minimize screen update size,"Hi,

i had a lot of fun building something completely useless, and i want to share it with you, because somehow i think it is an interesting idea.

Well, i built a small roguelike game for me, that is far from finished. It uses only pure python 3.11+ with the builtin curses module, and runs fine in the terminal.

Because i'm a web guy, i bult a wrapper that takes the unmodified curses app and puts it into threads in a flask server with websockets. It communicates with the app through python queues and threading events, and transferes the screen as string of spans.

Challenges i encountered so far:

I lack of crucial understanding of curses color_pair mechanic. Due to this i transfer rgb code in the span for now, containing all base colors (+bright) and all cube rgb colors.

That leads to a bad screen update size. Originally it was 250k, at the moment i use gzip to bring it down to 2k. But i plan to pack this into a minimal binary format (char+color codes) with potential delta screen updates, to match curses original idea.

Anyways, a fun little experiment. Here is the repo, it's gpl3: https://codeberg.org/Nimbostratus/rl

This is a live demo, but it may crash any time: http://timelord.de:5000/

On a side note, i wanted to post this as a showcase, but the showcase questions don't apply to this, and please accept not commercial git hosters like codeberg.org.",IntegrityError,1fzdb8d,https://reddit.com/r/Python/comments/1fzdb8d/webcurses_roguelike_the_quest_to_minimize_screen/,https://www.reddit.com/r/Python/comments/1fzdb8d/webcurses_roguelike_the_quest_to_minimize_screen/,2024-10-08 23:06:46,6,0.72,6,0,5,0,0,False,False,True,False,False,Discussion,self,t3_1fzdb8d
Python,I make a python library for use as wrapper and transform a pdf in html without lose format,"Hello everyone, how are you? I recently created a library wrapper for PDF2HTMLEX for use in Python, this library can transform PDF files to HTML and also convert all PDF files in a folder to HTML semi-automatically.

I would appreciate your feedback by using it, making pull requests or stars if you like:



Repository URL:

[https://github.com/gabriel-batistuta/pypdf2htmlEX](https://github.com/gabriel-batistuta/pypdf2htmlEX)



The library can be downloaded from PYPI as well:

[https://pypi.org/project/pypdf2htmlex/](https://pypi.org/project/pypdf2htmlex/)",ZackTheEvangelist,1fz9ynu,https://reddit.com/r/Python/comments/1fz9ynu/i_make_a_python_library_for_use_as_wrapper_and/,https://www.reddit.com/r/Python/comments/1fz9ynu/i_make_a_python_library_for_use_as_wrapper_and/,2024-10-08 20:38:08,15,0.83,15,0,4,0,0,False,False,True,False,False,Resource,self,t3_1fz9ynu
Python,"PyMaktube An procedural Pseudo Random Generation Lib
","
https://github.com/OUIsolutions/PyMaktub

### What My Project Does
PyMaktub its a Procedural Pseudo Random Lib, designed for a lot of uses cases

Fuzzing, construing tokens, generating elements in games ,etc

### Target Audience
Gamer Developers(procedural Generation), Theorem tester(testing hipoteses)
Application testing , with fuzzing

### Comparison
its way more organized then the native lib, and its have seed control and seed modifications
",MateusMoutinho11,1fz8wa4,https://reddit.com/r/Python/comments/1fz8wa4/pymaktube_an_procedural_pseudo_random_generation/,https://www.reddit.com/r/Python/comments/1fz8wa4/pymaktube_an_procedural_pseudo_random_generation/,2024-10-08 19:52:47,1,0.67,1,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1fz8wa4
Python,2024 Python Developers Survey,"The 2024 Python Developers Survey run by the Python Software Foundation in partnership with JetBrains is now open! 

[Survey Link - 10-15 minutes to complete](https://survey.alchemer.com/s3/8009809/python-developers-survey-2024)

[Blog post](https://pyfound.blogspot.com/2024/10/join-python-developers-survey-2024.html)",monorepo,1fz1siq,https://reddit.com/r/Python/comments/1fz1siq/2024_python_developers_survey/,https://www.reddit.com/r/Python/comments/1fz1siq/2024_python_developers_survey/,2024-10-08 14:56:49,48,0.89,48,0,3,0,0,False,False,True,False,False,:pythonLogo: Official Event,self,t3_1fz1siq
Python,Loading private key of a certificate in local windows machine store,"To use Microsoft graph API we use a service principal and a certificate. I can retrieve the certificate if it‚Äôs in azure key vault and use it to get an MSAL token for authentication. I am unable to do that if the certificate is in local windows machine certificate store. 
Has anyone ever did this? I can‚Äôt find any working samples on the internet.
Would really appreciate a solution.",Sea_Gur5722,1fz0ud0,https://reddit.com/r/Python/comments/1fz0ud0/loading_private_key_of_a_certificate_in_local/,https://www.reddit.com/r/Python/comments/1fz0ud0/loading_private_key_of_a_certificate_in_local/,2024-10-08 14:15:48,2,0.63,2,0,2,0,0,False,False,True,False,False,Discussion,self,t3_1fz0ud0
Python,Niquests v3.9.0 Released,"We are proud to announce our latest advancement for Niquests. Since last time we published in 
this community, a lot of things happened.

We landed for you:

- Post-Quantum Security for QUIC
- QUIC v2
- Integrated WebSocket Support
- HTTP Trailers
- Early Responses like ""103 Early Hints""
- Happy EyeBalls

The project reached 800+ stars with half a million downloads since the beginning.
We are grateful to Microsoft and involved parties for funding our work through the Microsoft FOSS Fund program.

**What My Project Does**

Niquests is a HTTP Client. It aims to continue and expand the well established Requests library.
For many years now, Requests has been frozen. Being left in a vegetative state and not evolving, 
this blocked millions of developers from using more advanced features.

**Target Audience**

It is a production ready solution. So everyone is potentially concerned.

**Comparison**

Niquests is the only HTTP client capable of serving HTTP/1.1, HTTP/2, and HTTP/3 automatically.
The project went deep into the protocols (early responses, trailer headers, etc...) and all related 
networking essentials (like DNS-over-HTTPS, advanced performance metering, etc..)

You may find the project at: https://github.com/jawah/niquests
",Ousret,1fyv8uh,https://reddit.com/r/Python/comments/1fyv8uh/niquests_v390_released/,https://www.reddit.com/r/Python/comments/1fyv8uh/niquests_v390_released/,2024-10-08 08:52:55,64,0.87,64,0,13,0,0,False,False,True,False,False,Showcase,self,t3_1fyv8uh
Python,ZMAG (ZeroMQ &amp; GraphQL),"Hi everyone,

# Docs:

[https://hlop3z.github.io/zmag/](https://hlop3z.github.io/zmag/)

# GitHub:

[https://github.com/hlop3z/zmag/](https://github.com/hlop3z/zmag/)

# What My Project Does:

ZMAG is a framework designed for building **network APIs** rather than traditional web applications, leveraging the unique combination of **GraphQL** and **ZeroMQ**. With **ZeroMQ** you can create different system. Examples: 

* **Request / Response**
* **Push / Pull**
* **Publish / Subscribe**

# Target Audience:

Currently is a toy project, I‚Äôm going to use it to manage projects internally, which I made with Django and FastAPI.

# Comparison:

As far as I know there‚Äôs nothing that combines **GraphQL** and **ZeroMQ** into a framework. Something similar I know that exist but not with GraphQL is [https://www.zerorpc.io/](https://www.zerorpc.io/) ",ixatrap,1fyu9v6,https://reddit.com/r/Python/comments/1fyu9v6/zmag_zeromq_graphql/,https://www.reddit.com/r/Python/comments/1fyu9v6/zmag_zeromq_graphql/,2024-10-08 07:35:39,5,0.74,5,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1fyu9v6
Python,Pylon: A Web-Based GUI Library for Desktop Applications,"# üíé What is Pylon?

Pylon is a web-based GUI library designed for desktop applications, providing a Python-powered alternative to frameworks like Electron and Tauri. It simplifies desktop app development by integrating Python features with a modern web-based interface, making it ideal for AI-driven applications.

# üéØ Target Audience

Pylon is designed for both beginners and experienced developers who want to build desktop applications using Python. It's particularly suited for those seeking an easy-to-use, Python-centric framework to develop robust desktop apps, especially those incorporating AI functionalities.

# üîç Comparison with Existing Alternatives

Unlike general-purpose frameworks such as Electron and Tauri, Pylon is tailored specifically for Python developers. It offers native support for Python's ecosystem and includes optimizations for building AI-powered desktop applications, making it a great choice for developers integrating machine learning models into their apps.

# Key Features üöÄ

* **Web-Based GUI**: Build UIs for desktop apps using HTML, CSS, and JavaScript.
* **System Tray Support**: Integrate system tray icons with ease.
* **Multi-Window Management**: Create and manage multiple windows seamlessly.
* **Python-JavaScript Bridge API**: Effortlessly bridge Python and JavaScript functionality.
* **Single Instance Support**: Prevent multiple instances of the app from running.
* **Comprehensive Desktop Features**: Includes monitor management, desktop capture, notifications, shortcuts, and clipboard access.
* **Clean Code Structure**: Simplified and intuitive code to boost developer productivity.
* **Live UI Development**: Real-time UI updates during code modification for an efficient workflow.
* **Cross-Platform**: Runs on Windows, macOS, and Linux.
* **Frontend Library Integration**: Compatible with HTML/CSS/JS frameworks and React.

GitHub: [Pylon GitHub](https://github.com/pyloid/pyloid)  
Docs: [Pylon Docs](https://docs.pyloid.com/)

This open-source project was created to facilitate the development of AI-powered desktop applications. I would greatly appreciate your support and feedback.",Ok-Method-9403,1fysjpn,https://reddit.com/r/Python/comments/1fysjpn/pylon_a_webbased_gui_library_for_desktop/,https://www.reddit.com/r/Python/comments/1fysjpn/pylon_a_webbased_gui_library_for_desktop/,2024-10-08 05:27:56,77,0.89,77,0,39,0,0,False,False,True,False,False,Showcase,self,t3_1fysjpn
Python,LlamaSim: Simulate election polling using LLMs,"Hey everyone! 

**What my project does?** I'm building LlamaSim, a multi-LLM framework built on Python to simulate election polling (completely open-source).

* Here's a quick video demo on Gradio!¬†[Loom Demo](https://www.loom.com/share/e7a6bf9cf44448ed99e7b29cd790d918?sid=ef31be73-6266-40f9-94b8-d4912799ab25)
* And here's the repo if anyone is interested!¬†[https://github.com/jw-source/LlamaSim](https://github.com/jw-source/LlamaSim)

**Target Audience:** Honestly I'm super interested in behavioral econ, so this is just a personal project for now.

**How it works?** It uses gpt-4o to generate synthetic identities, and uses Cerebras's Llama 3.1 8b models to run groupchats and predictions on any event/question. I'd really appreciate any insight/advice on improving it as much as possible, as I'd love to continue building upon it! I've been brainstorming a bit with long-term memory storage (such as using mem0) and live news feeds to make it truly agentic, as well converting it into a graph-theory based approach as well!

**Comparison:** This is kinda similar to Autogen or CrewAI, but much less useful toward agentic task-solving, and much more towards conversation and prediction. I don't believe any LLM-based human simulation frameworks currently exist",General_Passenger401,1fynpq7,https://reddit.com/r/Python/comments/1fynpq7/llamasim_simulate_election_polling_using_llms/,https://www.reddit.com/r/Python/comments/1fynpq7/llamasim_simulate_election_polling_using_llms/,2024-10-08 00:58:09,0,0.44,0,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1fynpq7
Python,Just Released Version 0.5.0 of Django Action Triggers!,"First off, a huge thank you to everyone who provided feedback after the release of version 0.1.0! I've taken your input to heart and have been hard at work iterating and improving this tool. I‚Äôm excited to announce the release of¬†**version 0.5.0**¬†of¬†**django-action-triggers**.

There‚Äôs still more to come in terms of features and addressing suggestions, but here‚Äôs an overview of the current progress.

# What My Project Does

[Django Action Triggers](https://github.com/Salaah01/django-action-triggers)¬†is a Django library that lets you trigger specific actions based on database events, detected via Django Signals. With this library, you can configure¬†**actions**¬†that run asynchronously when certain triggers (e.g., a model save) are detected.

For example, you could set up a trigger that hits a webhook and sends a message to AWS SQS whenever a new sale record is saved.

# Supported Integrations?

Here‚Äôs an overview of what integrations are currently supported:

* Webhooks
* RabbitMQ
* Kafka
* Redis
* AWS SQS (Simple Queue Service)
* AWS SNS (Simple Notification Service)
* AWS Lambda (New in version 0.5.0)
* GCP Pub/Sub (New in version 0.5.0)

# Comparison

The closest alternative I've come across is Debezium. Debezium allows streaming changes from databases. This project is different and is more suited for people who want a Django integration in the form of a library. Debezium on the other hand, will be better suited for those who prefer getting their hands a bit dirtier (perhaps) and configuring streaming directly from the database.

# Looking Forward

As always, I‚Äôd love to hear your feedback. This project started as a passion project but has become even more exciting as I think about all the new integrations and features I plan to add.

# Target Audience

So, whilst it remains a passion project for the moment, I hope to get it production-ready by the time it hits version 1.0.

Feel free to check out the repo and documentation, and let me know what you think!

Repo:¬†[https://github.com/Salaah01/django-action-triggers](https://github.com/Salaah01/django-action-triggers)

Documentation:¬†[https://django-action-triggers.readthedocs.io/en/latest/](https://django-action-triggers.readthedocs.io/en/latest/)",Salaah01,1fyn04j,https://reddit.com/r/Python/comments/1fyn04j/just_released_version_050_of_django_action/,https://www.reddit.com/r/Python/comments/1fyn04j/just_released_version_050_of_django_action/,2024-10-08 00:22:18,6,0.88,6,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1fyn04j
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1fymjo9,https://reddit.com/r/Python/comments/1fymjo9/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1fymjo9/tuesday_daily_thread_advanced_questions/,2024-10-08 00:00:07,2,0.76,2,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fymjo9
Python,"openai-gradio, Python package for making web apps with Open AI API","# Installation

You can install¬†`openai-gradio`¬†directly using pip:

    pip install openai-gradio

That's it!

# Basic Usage

Just like if you were to use the¬†`openai`¬†API, you should first save your OpenAI API key to this environment variable:

    export OPENAI_API_KEY=&lt;your token&gt;
    

Then in a Python file, write:

    import gradio as gr
    import openai_gradio
    
    gr.load(
        name='gpt-4-turbo',
        src=openai_gradio.registry,
    ).launch()

Run the Python file, and you should see a Gradio Interface connected to the model on OpenAI!

  
github: [https://github.com/gradio-app/openai-gradio](https://github.com/gradio-app/openai-gradio)",Illustrious_Row_9971,1fykcvz,https://reddit.com/r/Python/comments/1fykcvz/openaigradio_python_package_for_making_web_apps/,https://www.reddit.com/r/Python/comments/1fykcvz/openaigradio_python_package_for_making_web_apps/,2024-10-07 22:18:26,0,0.38,0,0,2,0,0,False,False,True,False,False,Resource,self,t3_1fykcvz
Python,üéôÔ∏è Podcastfy: An Open Source Python Package to Transform Text into an AI-Powered Podcast,"# Check out¬†[Podcastfy on Github](https://github.com/souzatharsis/podcastfy).

  
Introducing Podcastfy! üöÄ

Transform content into engaging audio conversations with this open-source Python package. Install with `pip install podcastfy`.

Check out the GitHub repo for examples and samples. Star if you like it, and feel free to contribute!

**What the Project Does** Podcastfy is an open-source Python package that converts web content, PDFs, and text into multi-lingual audio conversations using GenAI.

**Target Audience** Developers and AI enthusiasts looking to experiment with audio content generation in their projects.

**Comparison** Unlike Google's NotebookLM, Podcastfy is open-source, programmatic, and customizable, allowing users to modify and extend its capabilities.",HighlanderNJ,1fyk3dy,https://reddit.com/r/Python/comments/1fyk3dy/podcastfy_an_open_source_python_package_to/,https://www.reddit.com/r/Python/comments/1fyk3dy/podcastfy_an_open_source_python_package_to/,2024-10-07 22:06:39,0,0.44,0,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1fyk3dy
Python,Flashcards from the command line,"I put together a very slapdash version of Anki in the command line: https://github.com/s3bw/kanki

## what my project does

Allows you to create and use flash cards with a spaced repetition algorithm

## target audience

Just a toy project, it‚Äôs a pretty basic and barebones tool

## comparison

Less features than most flashcard apps",mm11wils,1fyepk5,https://reddit.com/r/Python/comments/1fyepk5/flashcards_from_the_command_line/,https://www.reddit.com/r/Python/comments/1fyepk5/flashcards_from_the_command_line/,2024-10-07 18:23:59,8,0.85,8,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1fyepk5
Python,Python 3.13's best new features,"Everyone has their own take on this topic and [here is mine as both a video and an article](https://pym.dev/python-313-whats-new/?watch).

I'm coming with the perspective of someone who works with newer Python programmers *very* often.

My favorite feature *by far* is **the new Python REPL**. In particular:

- **Block-level editing**, which is a huge relief for folks who live code or make heavy use of the REPL
- **Smart pasting**: pasting blocks of code *just works* now
- **Smart copying**: thanks to *history mode* (with `F2`) copying code typed in the REPL is much easier
- **Little niceities**: `exit` exits, `Ctrl-L` clears the screen even on Windows, hitting tab inserts 4 spaces

The other 2 big improvements that many Python users will notice:

- Virtual environments are now git-ignored by default (they have their own self-ignoring `.gitignore` file, which is brilliant)
- PDB got 2 fixes that make it much less frustrating: breakpoints start *at* the breakpoint and not after and running Python expressions works even when they start with `help`, `list`, `next`, or another PDB command

These are just my takes on the widely impactful new features, after a couple months of playing with 3.13. I'd love to hear *your take* on what the best new features are.",treyhunner,1fyeo1g,https://reddit.com/r/Python/comments/1fyeo1g/python_313s_best_new_features/,https://www.reddit.com/r/Python/comments/1fyeo1g/python_313s_best_new_features/,2024-10-07 18:22:13,210,0.97,210,0,37,0,0,False,False,True,False,False,News,self,t3_1fyeo1g
Python,Python 3.13 released,"https://www.python.org/downloads/release/python-3130/

&gt; This is the stable release of Python 3.13.0
&gt; 
&gt; Python 3.13.0 is the newest major release of the Python programming language, and it contains many new features and optimizations compared to Python 3.12. (Compared to the last release candidate, 3.13.0rc3, 3.13.0 contains two small bug and some documentation and testing changes.)
&gt;
&gt; Major new features of the 3.13 series, compared to 3.12
&gt; 
&gt; Some of the new major new features and changes in Python 3.13 are:
&gt;
&gt; New features
&gt; 
&gt;    - A new and improved interactive interpreter, based on PyPy's, featuring multi-line editing and color support, as well as colorized exception tracebacks.
&gt;    - An experimental free-threaded build mode, which disables the Global Interpreter Lock, allowing threads to run more concurrently. The build mode is available as an experimental feature in the Windows and macOS installers as well.
&gt;    - A preliminary, experimental JIT, providing the ground work for significant performance improvements.
&gt;    - The locals() builtin function (and its C equivalent) now has well-defined semantics when mutating the returned mapping, which allows debuggers to operate more consistently.
&gt;    - A modified version of mimalloc is now included, optional but enabled by default if supported by the platform, and required for the free-threaded build mode.
&gt;    - Docstrings now have their leading indentation stripped, reducing memory use and the size of .pyc files. (Most tools handling docstrings already strip leading indentation.)
&gt;    - The dbm module has a new dbm.sqlite3 backend that is used by default when creating new files.
&gt;    - The minimum supported macOS version was changed from 10.9 to 10.13 (High Sierra). Older macOS versions will not be supported going forward.
&gt;    - WASI is now a Tier 2 supported platform. Emscripten is no longer an officially supported platform (but Pyodide continues to support Emscripten).
&gt;    - iOS is now a Tier 3 supported platform.
&gt;    - Android is now a Tier 3 supported platform.
&gt; 
&gt; Typing
&gt; 
&gt;    - Support for type defaults in type parameters.
&gt;    - A new type narrowing annotation, typing.TypeIs.
&gt;    - A new annotation for read-only items in TypeDicts.
&gt;    - A new annotation for marking deprecations in the type system.
&gt; 
&gt; Removals and new deprecations
&gt; 
&gt;    - PEP 594 (Removing dead batteries from the standard library) scheduled removals of many deprecated modules: aifc, audioop, chunk, cgi, cgitb, crypt, imghdr, mailcap, msilib, nis, nntplib, ossaudiodev, pipes, sndhdr, spwd, sunau, telnetlib, uu, xdrlib, lib2to3.
&gt;    - Many other removals of deprecated classes, functions and methods in various standard library modules.
&gt;    - C API removals and deprecations. (Some removals present in alpha 1 were reverted in alpha 2, as the removals were deemed too disruptive at this time.)
&gt;    - New deprecations, most of which are scheduled for removal from Python 3.15 or 3.16.
&gt; 

More details at https://docs.python.org/3.13/whatsnew/3.13.html",henbruas,1fybncq,https://reddit.com/r/Python/comments/1fybncq/python_313_released/,https://www.reddit.com/r/Python/comments/1fybncq/python_313_released/,2024-10-07 16:18:23,615,0.98,615,0,97,0,0,False,False,True,False,False,News,self,t3_1fybncq
Python,Python versus Wolfram Language: Is there anything like Wolfram Notebook with Python?,"hon and Wolfram Language are user-friendly, higher level languages.

Is it true that Wolfram Language has still more traits of higher level language given there are perhaps scenarios where Wolfram Language will accomplish a task in one line that will require numerous lines in Python?

For instance to find reverse of square of a range of function in Wolfram Language:

    Reverse[Range[10]^2]

Wolfram Notebook can support publishing the above together with text content:

[https://www.wolframcloud.com/obj/dc911f5f-10bc-483b-8a70-7ee35ac00f14](https://www.wolframcloud.com/obj/dc911f5f-10bc-483b-8a70-7ee35ac00f14)

Not sure Jupyter notebook too can accomplish the same.

",DigitalSplendid,1fy72d2,https://reddit.com/r/Python/comments/1fy72d2/python_versus_wolfram_language_is_there_anything/,https://www.reddit.com/r/Python/comments/1fy72d2/python_versus_wolfram_language_is_there_anything/,2024-10-07 13:02:06,0,0.44,0,0,9,0,0,False,False,True,False,False,Discussion,self,t3_1fy72d2
Python,numpy tutorial - Spyder 6 IDE,"I've put together a numpy tutorial video which should be a good primer for beginners. The video uses the Spyder 6 IDE and its visual aids such as its variable explorer:

[https://www.youtube.com/watch?v=yd169cQ-Msg](https://www.youtube.com/watch?v=yd169cQ-Msg)

numpy is an abbreviation for numeric Python and is based around the ndarray class. The ndarray class is a datastructure which bridges the numeric datamodel previously explored in the int, float, bool and complex classes alongside the collection based datamodel previously explored in the tuple and list. The ndarray is the foundational data structure used for data science.

* builtins datatypes 
* importing numpy
* numpy library overview
* ndarray overview 
* ndarray instantiation and attributes 
* ndarray constructors (array, empty, zeros, ones, full) 
* rows and columns 
* ndarray constructors from prototype array (empty\_like, zeros\_like, ones\_like, full\_like)
* visualising higher dimensional arrays 
* constructing higher dimensional arrays 
* shape 
* flattening 
* indexing 
* collection based identifiers 
* broadcasting arrays (broadcast, broadcast\_to) 
* sorting (sort, argsort) 
* ndarray constructors (arange, linspace and logspace) 
* avoiding naming conflicts with builtins 
* grids (ogrid and meshgrid) 
* numeric operators 
* datatypes, rolling over and overflow 
* boolean identifiers 
* set-like identifiers 
* statistical identifiers 
* vectorized math identifiers 
* numpy random module 
* datetime64 and timedelta64 
* numpy linalg module ",PhilipYip,1fy5vp3,https://reddit.com/r/Python/comments/1fy5vp3/numpy_tutorial_spyder_6_ide/,https://www.reddit.com/r/Python/comments/1fy5vp3/numpy_tutorial_spyder_6_ide/,2024-10-07 12:00:53,2,0.67,2,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1fy5vp3
Python,How significant is the impact of different base case values in Strassen Matrix Multiplication Method,"Hi, I'm currently starting a research assignment on the base case value in the recursive function in the Strassen matrix multiplication method. I have read¬†[online](https://github.com/jaeho3690/Matrix_multiplication_python/blob/master/Algorithms_hw1_Report.pdf)¬†that a higher base case value of 2 and 4 (compared to n == 1 in normal Strassen mtd) allows a higher computational efficiency, especially for larger matrices, as measured using time. I also tried it myself on VS code using python and the time needed seems to decrease until n reaches the maximum base case value.

However, there isn't much, or even any, research done on this. So I doubt my research project would be of any significance and usefulness to improving Strassen mtd.

To give some background, base case refers to the value of 'n' in which the recursive matrix multiplication function stops. Normally, n == 1, where the large matrice is divided to form many 1 by 1 matrices. Changing n to 2 and 4 would just mean to break up the large matrix (e.g. 256 by 256) into larger small matrices and thereafter apply the remaining method of strassen to it.

Would really appreciate if any of ya'll could provide some expertise on this topic as I am new to python and coding in general, and also links to research done/online resources. Thank you!",playingcards_medic,1fy502i,https://reddit.com/r/Python/comments/1fy502i/how_significant_is_the_impact_of_different_base/,https://www.reddit.com/r/Python/comments/1fy502i/how_significant_is_the_impact_of_different_base/,2024-10-07 11:08:16,5,0.73,5,0,1,0,0,False,False,True,False,False,Discussion,self,t3_1fy502i
Python,"gs-batch-pdf: a cli for compressing, converting to pdf/a multiple pdfs in parallel","Hello everybody, [I published my first package to pipy](https://pypi.org/project/gs-batch-pdf/)!

Repo: https://github.com/kompre/gs-batch

I'm not a developer, but an engineer who dabbles with python, so this has been an important goal for me.

# What My Project Does

My project is a **cli for processing multiple pdf files in parallel** using ghostscript as backend. It provide some sensible defaults for **compressing** and **converting to pdf/a** (pdf/a requires gs 10.04.0 for best result), taking advantage of multiprocessing.

For installation I suggest to use `pipx`

```
pipx install gs-batch-pdf
```

- You can compress a bunch of pdf (glob patterns allowed!) and save them to a `compressed` folder:

```
gsb * --compress --prefix ./compressed/ 
```

- You can also specify a valid preset for compression, and do that in place:

```
gsb * --compress /screen --force
```

- You can convert them to pdf/a (default level 2), attach a suffix to the filename:

```
gsb * --pdfa --suffix=_pdfa
```

- you can do both:

```
gsb **/* --compress /printer --pdfa 3 --prefix ./compressed_pdfa/ --suffix banana
```

- you can even provide valid gs options:

```
gsb --options ""..."" *
```

After processing is complete a summary table will appear telling you how much you have compressed the file and its location (will open the file manager to location)

# Target Audience

For people who like a nice cli and have to deal with lots of pdfs, that need to be compressed or converted to pdf/a to be submitted to public administration and dont want to deal with online tools (confidential issues), or don't want to pay for premium features in thei pdf viewer/editor.

# Comparison

There are lots of online tools for compressing and converting to pdf/a, but they are online, meaning they are either slow-ish or clunky to use (loading one file at time, then you need to fetch the downloaded file, rename, etc.). Also your file may contain confidenatial information that you're not ok to upload somewhere on the internet.

As offline tools go, many lock these feature as premium. The best tool I found id PDF24, which also uses ghostscript, but I didn't love the gui. I think a cli is the better tool.

`ghostscript` is the cli alternative that most forum would reccomend, but the commands for achieving such results are quiote convuleted and I use not so quite often that I always need to search the commands and copy and paste some somewhat obsure command line syntax. Also no multiprocessing, as far I can tell.

So instead of creating a simple pwsh script, I decided to create a python cli using `click`, bacuase I find its installation is simpler than rediscovering each time how alias works on pwsh. Also it is crossplatform as a bonus (tried on linux and windows).


I hope you may find it useful, I sure did.",komprexior,1fy4zec,https://reddit.com/r/Python/comments/1fy4zec/gsbatchpdf_a_cli_for_compressing_converting_to/,https://www.reddit.com/r/Python/comments/1fy4zec/gsbatchpdf_a_cli_for_compressing_converting_to/,2024-10-07 11:07:08,1,0.57,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1fy4zec
Python,"Arakawa: Build data reports in 100% Python (a fork of Datapane)
","I forked Datapane (https://github.com/datapane/datapane) because it's not maintained but I think it's very useful for data analysis and published a new version under a new name.

[https://github.com/ninoseki/arakawa](https://github.com/ninoseki/arakawa)

The functionalities are same as Datapane but it can work along with newer DS/ML libraries such as Pandas v2, NumPy v2, etc.

## What My Project Does

Arakawa makes it simple to build interactive reports in seconds using Python.

Import Arakawa's Python library into your script or notebook and build reports programmatically by wrapping components such as:

- Pandas DataFrames
- Plots from Python visualization libraries such as Bokeh, Altair, Plotly, and Folium
- Markdown and text
- Files, such as images, PDFs, JSON data, etc.

Arakawa reports are interactive and can also contain pages, tabs, drop downs, and more. Once created, reports can be exported as HTML, shared as standalone files, or embedded into your own application, where your viewers can interact with your data and visualizations.

## Target Audience

DS/ML people or who needs to create a visual rich report.

## Comparison

Possibly Streamlit and Plotly Dash. But a key difference is whether it's dynamic or static.
Arakawa creates a static HTML report and it's suitable for periodical reporting.",ninoseki,1fxuqh5,https://reddit.com/r/Python/comments/1fxuqh5/arakawa_build_data_reports_in_100_python_a_fork/,https://www.reddit.com/r/Python/comments/1fxuqh5/arakawa_build_data_reports_in_100_python_a_fork/,2024-10-07 00:08:55,63,0.94,63,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1fxuqh5
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1fxukcp,https://reddit.com/r/Python/comments/1fxukcp/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1fxukcp/monday_daily_thread_project_ideas/,2024-10-07 00:00:10,6,0.76,6,0,2,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fxukcp
Python,Python is awesome! Speed up Pandas point queries by 100x or even 1000x times.,"Introducing [NanoCube](https://github.com/Zeutschler/nanocube/tree/main)!  I'm currently working on another Python library, called [CubedPandas](https://github.com/Zeutschler/cubedpandas), that aims to make working with Pandas more convenient and fun, but it suffers from **Pandas low performance** when it comes to filtering data and executing **aggregative point queries** like the following:

    value = df.loc[(df['make'].isin(['Audi', 'BMW']) &amp; (df['engine'] == 'hybrid')]['revenue'].sum()

**So, can we do better?** Yes, multi-dimensional OLAP-databases are a common solution. But, they're quite heavy and often not available for free. I needed something super lightweight, a minimal in-process in-memory OLAP engine that can convert a Pandas DataFrame into a multi-dimensional index for point queries only.

Thanks to the greatness of the Python language and ecosystem I ended up with [less than 30 lines of (admittedly ugly) code](https://github.com/Zeutschler/nanocube/blob/main/nanocube/__init__.py) that can speed up Pandas point queries by [factor 10x, 100x or even 1,000x](https://github.com/Zeutschler/nanocube/blob/main/README.md#nanocube-benchmarks).

I wrapped it into a library called [NanoCube](https://github.com/Zeutschler/nanocube/tree/main), available through `pip install nanocube`. For source code, further details and some benchmarks please visit https://github.com/Zeutschler/nanocube.

    from nanocube import NanoCube
    nc = NanoCube(df)
    value = nc.get('revenue', make=['Audi', 'BMW'], engine='hybrid')

**Target audience:** NanoCube is useful for data engineers, analysts and scientists who want to speed up their data processing. Due to its low complexity, NanoCube is already suitable for production purposes.

If you find any issues or have further ideas, please let me know on here, or on [Issues on Github](https://github.com/Zeutschler/nanocube/issues).",Psychological-Motor6,1fxgkj6,https://reddit.com/r/Python/comments/1fxgkj6/python_is_awesome_speed_up_pandas_point_queries/,https://www.reddit.com/r/Python/comments/1fxgkj6/python_is_awesome_speed_up_pandas_point_queries/,2024-10-06 13:32:15,183,0.88,183,0,50,0,0,False,False,True,False,False,Showcase,self,t3_1fxgkj6
Python,Complete Reddit Backup- A BDFR enhancement: Archive reddit saved posts periodically,"**What My Project Does**

The¬†[BDFR tool](https://github.com/Serene-Arc/bulk-downloader-for-reddit)¬†is an existing, popular and thoroughly useful method to archive reddit saved posts offline, supporting JSON and XML formats. But if you're someone like me that likes to save hundreds of posts a month, move the older saved posts to some offline backup and then un-save these from your reddit account, then you'd have to manually merge last month's BDFR output with this month's. You'd then need to convert the BDFR tool's JSON's file to HTML separately in case the original post was taken down.

For instance, On September 1st, you have a folder for¬†[](https://www.reddit.com/r/soccer/)¬†containing your saved posts from the month of August from the BDFR tool. You then remove August's saved posts from your account to keep your saved posts list concise. Then on October 1st, you run it again for posts saved in September. Now you need to add¬†[](https://www.reddit.com/r/soccer/)'s posts which were saved in September with those of August's, by manually copy-pasting and removing duplicates, if any. Then repeat the same process subreddit-wise.

I made a script to do this, while also using [bdfrtohtml ](https://github.com/BlipRanger/bdfr-html)to render the final BDFR output (instead of leaving the output in BDFR's JSONs/xml). I have also¬†**grouped saved posts by subreddit in the index.html, which references all the saved posts**. In the reddit interface, they are merely ordered by date and not grouped.

**Target Audience**

1. Reddit users who frequently save posts, hoping to reference them one day. 

2. Someone with a digital hoarding mentality, like me. 

3. Someone who believes that one day the useful, informative post may be taken down by the author or due to a server issue.

4. Someone group saved posts by subreddit. For instance, cooking tips can be found under the heading ""r/cooking"" which the reddit interface does not support.

**Comparison**

1. As mentioned, the [BDFR tool](https://github.com/Serene-Arc/bulk-downloader-for-reddit) and the [bdfrtohtml ](https://github.com/BlipRanger/bdfr-html)repo, if you only want to save these posts once, or are comfortable storing outputs of separate runs separately.

2. [https://github.com/nooneswarup/export-archive-reddit-saved-](https://github.com/nooneswarup/export-archive-reddit-saved-) Last commit was 3 years ago. Reddit APIs changed a lot since then, not sure if it still works. Also, it doesn't store comments locally, just has a link to them.

3. [https://github.com/pvik/saved-for-reddit](https://github.com/pvik/saved-for-reddit) - Last commit 8 years ago. Stores into a CSV file

4. [https://github.com/FracturedCode/archivebox-reddit-](https://github.com/FracturedCode/archivebox-reddit-) Runs a daily cronjob which may be unnecessary, stores them into [ArchiveBox](https://github.com/ArchiveBox/ArchiveBox).

5. [https://github.com/erohtar/redditSaver-](https://github.com/erohtar/redditSaver-) Uses node js, difficult to setup

6. [https://github.com/shadowmoose/RedditDownloader-](https://github.com/shadowmoose/RedditDownloader-) Stopped working w.e.f July 2023.

7. [https://github.com/aplotor/expanse-](https://github.com/aplotor/expanse-) Uses JS, may not work for saving posts on mobile

  
**Repo Link**

[https://github.com/sriramcu/complete\_reddit\_backup](https://github.com/sriramcu/complete_reddit_backup)",sriramcu,1fxeglk,https://reddit.com/r/Python/comments/1fxeglk/complete_reddit_backup_a_bdfr_enhancement_archive/,https://www.reddit.com/r/Python/comments/1fxeglk/complete_reddit_backup_a_bdfr_enhancement_archive/,2024-10-06 11:34:30,21,0.97,21,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1fxeglk
Python,I wanna create something fun and useful in Python,"So recently, I wrote a script in Python that grabbed my Spotify liked songs, searched them on Youtube and downloaded them in seconds. I downloaded over 500 songs in minutes using this simple program, and now I wanna build something more. I have intermediate Python skills and am exploring web scraping (enjoying too!!). 

What fun ideas do you have that I can check out?",bharajuice,1fxd8g3,https://reddit.com/r/Python/comments/1fxd8g3/i_wanna_create_something_fun_and_useful_in_python/,https://www.reddit.com/r/Python/comments/1fxd8g3/i_wanna_create_something_fun_and_useful_in_python/,2024-10-06 10:07:45,82,0.84,82,0,60,0,0,False,False,True,False,False,Discussion,self,t3_1fxd8g3
Python,Are there any DX standards for building API in a Python library that works with dataframes?,"I'm currently working on a Python library (kawa) that handles and manipulates dataframes. My goal is to design the library so that the ""backend"" of the library can be swapped if needed with other implementations, while the code (method calls etc) of the library do not need changing. This could make it easier for consumers to switch to other libraries later if they don't want to keep using mine.  
  
I'm looking for some existing standard or conventions used in other similar libraries that I can use as inspiration.

For example, here's how I create and load a datasource:

    import pandas as pd
    import kawa
    ...
    
    cities_and_countries = pd.DataFrame([
    {'id': 'a', 'country': 'FR', 'city': 'Paris', 'measure': 1},
    {'id': 'b', 'country': 'FR', 'city': 'Lyon', 'measure': 2},
    ])
    
    unique_id = 'resource_{}'.format(uuid.uuid4())
    loader = kawa.new_data_loader(df=self.cities_and_countries, datasource_name=unique_id)
    loader.create_datasource(primary_keys=['id'])
    loader.load_data(reset_before_insert=True, create_sheet=True)

and here's how I manipulate (run compute) the created datasource (dataframe):

    import pandas as pd
    import kawa
    ...
    
    df = (kawa.sheet(sheet_name=unique_id)
      .order_by('city', ascending=True)
      .select(K.col('city'))
      .limit(1)
      .compute())

Some specific questions I have:

* What core methods (like filtering, aggregation, etc.) should I make sure to implement for dataframe-like objects?
* Should I focus on supporting method chaining like in pandas (e.g., `.groupby().agg()`), or are there other patterns that work well for dataframe manipulation?
* How should I handle input/output functionality (e.g., reading/writing to CSV, JSON, SQL)?

I‚Äôd love to hear from those of you who have experience building or using Python libraries that deal with dataframes. Any advice or resources would be greatly appreciated!

Thanks in advance!",Amazing_Variation_47,1fxbf9o,https://reddit.com/r/Python/comments/1fxbf9o/are_there_any_dx_standards_for_building_api_in_a/,https://www.reddit.com/r/Python/comments/1fxbf9o/are_there_any_dx_standards_for_building_api_in_a/,2024-10-06 07:52:02,22,0.85,22,0,9,0,0,False,False,True,False,False,Discussion,self,t3_1fxbf9o
Python,How to measure python coroutine context switch time?,"I am trying to measure context switch time of coroutine and python thread by having 2 threads waiting for a event that is set by the other thread. Threading context switch takes 3.87 ¬µs, which matches my expectation as OS context switch does takes a few thousands of instructions. The coroutine version's context switch is 14.43 ¬µs, which is surprising to me as I was expecting coroutine context switch to be magnitude faster. Is it a Python coroutine issue is my program wrong?

Code can be found in this¬†[gist](https://gist.github.com/biran0083/00bcdc69a44da4c09d65b81e6687f751).

[Rewriting the program in rus](https://gist.github.com/biran0083/1094fd325c1c90f1288bd7d4871b288a)t gives more reasonable results: coro: 163 ns thread: 1989 ns",Hot-Willow-9567,1fx9tgr,https://reddit.com/r/Python/comments/1fx9tgr/how_to_measure_python_coroutine_context_switch/,https://www.reddit.com/r/Python/comments/1fx9tgr/how_to_measure_python_coroutine_context_switch/,2024-10-06 05:54:32,2,0.59,2,0,4,0,0,False,False,True,False,False,Discussion,self,t3_1fx9tgr
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1fx3vfc,https://reddit.com/r/Python/comments/1fx3vfc/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1fx3vfc/sunday_daily_thread_whats_everyone_working_on/,2024-10-06 00:00:09,24,0.89,24,0,17,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fx3vfc
Python,Terminal Anime Browsing redefined,"**What my project does:**

I made a python package [FastAnime](https://github.com/Benex254/FastAnime), that replicates the experience you would get from watching anime from a browser in the terminal. It uses yt-dlp to scrape the sites, rich and inquirerPy for the ui and click for the commandline interface. It also supports fzf and rofi as external menus.

It mostly intergrates the anilist api to achieve most of this functionality.

**Target Audience:**

The project's goal was to bring my love of anime to the terminal.

So its aimed at those anime enthusiasts who prefer doing everything from the terminal.

**Comparison:**

The main difference between it and other tools like it is how  robust and featureful it is:

* sync play intergration
* anilist syncing
* view whats trending
* watch trailers of upcoming anime
* score anime directly from your terminal
* powerful search and filter capability a kin to one in a browser
* intergration with python mpv to enable a seamless viewing experience without ever closing the player
* batch downloading
* manage your anilist anime lists directly from the terminal
* highly configurable
* nice ui
* and so on ...

[https://github.com/Benex254/FastAnime](https://github.com/Benex254/FastAnime)

  
",BenX855,1fwt65b,https://reddit.com/r/Python/comments/1fwt65b/terminal_anime_browsing_redefined/,https://www.reddit.com/r/Python/comments/1fwt65b/terminal_anime_browsing_redefined/,2024-10-05 15:39:07,8,0.73,8,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1fwt65b
Python,Plyppy: A Command-line Plymouth Boot Splash Generator,"# What My Project Does 
This CLI program takes in an image, GIF or video file as an input, optionally removes the background and turns it into a plymouth boot splash theme. It can also automatically install and test the theme for you! You can install this program by cloning it from github or running `pip install plyppy`.
# Target Audience 
This program is targeted towards Linux users that have Plymouth setup but want a more customized theme, without the hassle of copying a template, splitting GIFs/videos and erasing backgrounds and writing a script to make it work.
# Comparison 
There are no real alternatives, just templates.
# Repo Link
[https://github.com/cel7t/plyppy](https://github.com/cel7t/plyppy)
Let me know what you think!",cel7t,1fwql5p,https://reddit.com/r/Python/comments/1fwql5p/plyppy_a_commandline_plymouth_boot_splash/,https://www.reddit.com/r/Python/comments/1fwql5p/plyppy_a_commandline_plymouth_boot_splash/,2024-10-05 13:37:05,1,1.0,1,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1fwql5p
Python,Segregate By Date: Sort your photos into year and month folders based on filename and EXIF metadata,"**What My Project Does**

This Python code I developed can read a folder containing images and can sort them into folders- parent folder name would be ""2024"", ""2023"", etc and child folders would be ""Jan"", ""Feb"", etc. The program can read files no matter how they are nested or how many sub-folders there are or where they came from. For instance, if we have 100 files directly in a folder with normal names, 50 files with timestamps in the filename (like IMG\_20210912\_120000.jpg), 100 files already sorted into years but not month, 50 files already fully sorted into month and year. Once the program is run, all 300 files will be properly sorted into year and month folders.  

You can also set the input folder as a new set of images and the output folder a previous output of this program, and the output folder will be modified in place to generate a new fully sorted set of photos (in other words, previous results are implicitly merged with the new one). 

**Target Audience**

1. People or families who regularly take pictures on multiple devices, later wanting to store them all in one place, perhaps to maintain a long-term memories album, or to make it easier to manually remove similar pictures taken from multiple sources.

2. People who scanned physical images from a photo album, embedding the date of capture in the filename, (while the file's metadata would only represent the date of scanning) and then wanted to sort them like how Google Photos arranges files by month (in descending order, when you scroll on the main page). Other tools can sometimes sort *only* by metadata, thus storing clearly black and white images along with your current year photos, despite the filename clearly having ""1960"" in it.

3. People who captured photos spanning multiple months on an older camera and now wanted to sort them and then store them along with newer photos captured on a smartphone. 

**Comparison**

[https://github.com/ivandokov/phockup](https://github.com/ivandokov/phockup) - To be honest, I didn't notice this existed when I did this project. But the setup seems to be quite complicated, and you'd have to do quite a bit of reading before you can run this program. My repo is far less customizable, meaning it works exactly as described, with the seamless merge functionality. And I've also released an exe that is extremely simple to use, with folder pickers.

[https://github.com/QiuYannnn/Local-File-Organizer](https://github.com/QiuYannnn/Local-File-Organizer) - You could use this if you're more comfortable letting AI decide the way in which your photos (or any file) should be sorted. My repo has an easy to understand three stage approach- folder/filename, then EXIF metadata, then creation date. My code is easy to comprehend as well, so it could be modified on demand, unlike phockup which has a steep learning curve. A PR would always be appreciated!

**Repo Link**

[https://github.com/sriramcu/segregate\_by\_date](https://github.com/sriramcu/segregate_by_date)",sriramcu,1fwo463,https://reddit.com/r/Python/comments/1fwo463/segregate_by_date_sort_your_photos_into_year_and/,https://www.reddit.com/r/Python/comments/1fwo463/segregate_by_date_sort_your_photos_into_year_and/,2024-10-05 11:19:06,14,0.9,14,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1fwo463
Python,3.13 JIT compiler VS Numba,"Python 3.13 comes with a new Just in time compiler (JIT). On that I have a few questions/thoughts on it.



1. About CPython3.13 JIT I generally hear:

* we should not expect dramatic speed improvements
* This is just the first step for Python to enable optimizations not possible now, but is the groundwork for better optimizations in the future



2.  How does this JIT in the short term or long term compare with Numba?

3. Are the use cases disjoint or a little overlap or a lot overlap?

4. Would it make sense for CPython JIT and Numba JIT to be used together? 



Revelant links:

Cpython JIT:

[https://github.com/python/cpython/blob/main/Tools/jit/README.md](https://github.com/python/cpython/blob/main/Tools/jit/README.md)

Numba Architecture:

[https://numba.readthedocs.io/en/stable/developer/architecture.html](https://numba.readthedocs.io/en/stable/developer/architecture.html)

What's new Announcement

[https://docs.python.org/3.13/whatsnew/3.13.html#an-experimental-just-in-time-jit-compiler](https://docs.python.org/3.13/whatsnew/3.13.html#an-experimental-just-in-time-jit-compiler)",powerbronx,1fwewvg,https://reddit.com/r/Python/comments/1fwewvg/313_jit_compiler_vs_numba/,https://www.reddit.com/r/Python/comments/1fwewvg/313_jit_compiler_vs_numba/,2024-10-05 01:10:19,30,0.88,30,0,8,0,0,False,False,True,False,False,Discussion,self,t3_1fwewvg
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1fwdjon,https://reddit.com/r/Python/comments/1fwdjon/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1fwdjon/saturday_daily_thread_resource_request_and/,2024-10-05 00:00:11,2,0.67,2,0,3,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fwdjon
Python,ovld - fast and featureful multiple dispatch,"## What My Project Does

[ovld](https://github.com/breuleux/ovld) implements multiple dispatch in Python. This lets you define multiple versions of the same function with different type signatures.

For example:

    import math
    from typing import Literal
    from ovld import ovld
    
    @ovld
    def div(x: int, y: int):
        return x / y
    
    @ovld
    def div(x: str, y: str):
        return f""{x}/{y}""
    
    @ovld
    def div(x: int, y: Literal[0]):
        return math.inf
    
    assert div(8, 2) == 4
    assert div(""/home"", ""user"") == ""/home/user""
    assert div(10, 0) == math.inf

## Target Audience

Ovld is pretty generally applicable: multiple dispatch is a central feature of several programming languages, e.g. Julia. I find it particularly useful when doing work on complex heterogeneous data structures, for instance walking an AST, serializing/deserializing data, generating HTML representations of data, etc.


## Features

* Wide range of supported annotations: normal types, protocols, `Union`, `Literal`, generic collections like `list[str]` (only checks the first element), `HasMethod`, `Intersection`, etc.
* Easy to define [custom types](https://ovld.readthedocs.io/en/latest/types/#defining-new-types).
* Support for [dependent types](https://ovld.readthedocs.io/en/latest/dependent/), by which I mean ""types"" that depend on the values of the arguments. For example you can easily implement a `Regexp[regex]` type that matches string arguments based on regular expressions, or a type that only matches 2x2 torch.Tensor with int8 dtype.
* Dispatch on keyword arguments (with a few limitations).
* Define [variants](https://ovld.readthedocs.io/en/latest/usage/#variants) of existing functions (copies of existing overloads with additional functionality)
* Special `recurse()` function for recursive calls that also work with variants.
* Special `call_next()` function to call the next dispatch.


## Comparison

There already exist a few multiple dispatch libraries: plum, multimethod, multipledispatch, runtype, fastcore, and the builtin functools.singledispatch (single argument).

Ovld is faster than all of them in all of my benchmarks. From 1.5x to 100x less overhead depending on use case, and in the ballpark of isinstance/match. It is also generally more featureful: no other library supports dispatch on keyword arguments, and only a few support `Literal` annotations, but with massive performance penalties.

[Whole comparison section, with benchmarks, can be found here.](https://ovld.readthedocs.io/en/latest/compare/)",Broolucks,1fwdgal,https://reddit.com/r/Python/comments/1fwdgal/ovld_fast_and_featureful_multiple_dispatch/,https://www.reddit.com/r/Python/comments/1fwdgal/ovld_fast_and_featureful_multiple_dispatch/,2024-10-04 23:55:26,13,0.85,13,0,11,0,0,False,False,True,False,False,Showcase,self,t3_1fwdgal
Python,"OpenSource, Drones and Python?","Want to have some fun? I have been working on a Python Flask app that will run on a Radxa Zero, it connects to OpenIPC FPV system as a GroundStation. Many of us that fly need ways to change parameters and this is why this app was born. Want to join in on the fun? I have only really wrote small utils with Python Flask so any experienced dev looking to have some fun are welcome.¬†[https://github.com/OpenIPC/improver](https://github.com/OpenIPC/improver)",Viperz28,1fwcy4z,https://reddit.com/r/Python/comments/1fwcy4z/opensource_drones_and_python/,https://www.reddit.com/r/Python/comments/1fwcy4z/opensource_drones_and_python/,2024-10-04 23:30:21,2,0.67,2,0,0,0,0,False,False,True,False,False,Discussion,self,t3_1fwcy4z
Python,Introducing MyLittleOCR: A Unified Wrapper for Popular OCR Libraries,"**What My Project Does**

MyLittleOCR is a simple yet powerful wrapper that provides a consistent API for various OCR engines, allowing developers to easily integrate and switch between different OCR libraries without changing their codebase.

The supported OCR libraries are: Tesseract (Apache 2.0 License), EasyOCR (Apache 2.0 License), WeChat OCR (Unknown License, Windows only), Surya (GPL 3.0 License), and RapidOCR (Apache 2.0 License).

**Example Usage**:

    from my_little_ocr import get_engine_instance
    
    engine = get_engine_instance(""rapidocr"")
    result = engine.ocr(""img1.png"")
    
    print(result.to_list())

**Comparison**

Switching between engines is as simple as changing the engine name in¬†`get_engine_instance()`. Contributions are welcome‚Äîcome check it out!

**Target Audience**

OCR needer

github:¬†[https://github.com/X-T-E-R/my-little-ocr](https://github.com/X-T-E-R/my-little-ocr)

`pip install my_little_ocr`",No-Tangelo-9010,1fwcl0c,https://reddit.com/r/Python/comments/1fwcl0c/introducing_mylittleocr_a_unified_wrapper_for/,https://www.reddit.com/r/Python/comments/1fwcl0c/introducing_mylittleocr_a_unified_wrapper_for/,2024-10-04 23:12:25,2,1.0,2,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1fwcl0c
Python,What Python feature made you a better developer? ,"A few years back I learned about dataclasses and, beside using them all the time, I think they made me a better programmer, because they led me to learn more about Python and programming in general. 

What is the single Python feature/module that made you better at Python? ",missing_backup,1fwab0s,https://reddit.com/r/Python/comments/1fwab0s/what_python_feature_made_you_a_better_developer/,https://www.reddit.com/r/Python/comments/1fwab0s/what_python_feature_made_you_a_better_developer/,2024-10-04 21:26:58,393,0.94,393,0,238,0,0,False,False,True,False,False,Discussion,self,t3_1fwab0s
Python,Stake's Popular Plinko with Python,"**What My Project Does**

Using the Pygame Module I recreated Stake's famous Plinko game. I created a YouTube video to go along. The code and the video break down how the house can bias the game in their favor and how a simple addictive children's game can entertain while stealing the money of fellow gamblers. The script uses pygame for the visuals/ UI, matplotlib for the graphical representations, and basic python for the physics/ biasing. Download, play, learn. Youtube video is linked in the GitHub.

**Target Audience**¬†

Just a toy project for gamers and gamblers

**Comparison**¬†

This is a risk free version to the online gambling alternative

GitHub:¬†[https://github.com/jareddilley/Plinko-Balls](https://github.com/jareddilley/Plinko-Balls)",jareddilley,1fwa6uc,https://reddit.com/r/Python/comments/1fwa6uc/stakes_popular_plinko_with_python/,https://www.reddit.com/r/Python/comments/1fwa6uc/stakes_popular_plinko_with_python/,2024-10-04 21:21:54,6,1.0,6,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1fwa6uc
Python,My TLS wrapper reached 3k downloads/mo,"Very excited to see this. My OSS project has reached 3k downloads mo. Take a look and let me know if you have any suggestions. 

https://github.com/rawandahmad698/noble-tls",Soprano-C,1fw2mfk,https://reddit.com/r/Python/comments/1fw2mfk/my_tls_wrapper_reached_3k_downloadsmo/,https://www.reddit.com/r/Python/comments/1fw2mfk/my_tls_wrapper_reached_3k_downloadsmo/,2024-10-04 15:58:12,1,0.53,1,0,1,0,0,False,False,True,False,False,Resource,self,t3_1fw2mfk
Python,I never realized how complicated slice assignments are in Python...,"I‚Äôve recently been working on a custom mutable sequence type as part of a personal project, and trying to write a `__setitem__` implementation for it that handles slices the same way that the builtin list type does has been far more complicated than I realized, and left me scratching my head in confusion in a couple of cases.

Some parts of slice assignment are obvious or simple. For example, pretty much everyone knows about these cases:

    &gt;&gt;&gt; l = [1, 2, 3, 4, 5]
    &gt;&gt;&gt; l[0:3] = [3, 2, 1]
    &gt;&gt;&gt; l
    [3, 2, 1, 4, 5]
    
    &gt;&gt;&gt; l[3:0:-1] = [3, 2, 1]
    &gt;&gt;&gt; l
    [1, 2, 3, 4, 5]

That‚Äôs easy to implement, even if it‚Äôs just iterative assignment calls pointing at the right indices. And the same of course works with negative indices too. But then you get stuff like this:

    &gt;&gt;&gt; l = [1, 2, 3, 4, 5]
    &gt;&gt;&gt; l[3:6] = [3, 2, 1]
    &gt;&gt;&gt; l
    [1, 2, 3, 3, 2, 1]
    
    &gt;&gt;&gt; l = [1, 2, 3, 4, 5]
    &gt;&gt;&gt; l[-7:-4] = [3, 2, 1]
    &gt;&gt;&gt; l
    [3, 2, 1, 2, 3, 4, 5]
    
    &gt;&gt;&gt; l = [1, 2, 3, 4, 5]
    &gt;&gt;&gt; l[12:16] = [3, 2, 1]
    &gt;&gt;&gt; l
    [1, 2, 3, 4, 5, 3, 2, 1]

Overrunning the list indices extends the list in the appropriate direction. OK, that kind of makes sense, though that last case had me a bit confused until I realized that it was likely implemented originally as a safety net. And all of this is still not too hard to implement, you just do the in-place assignments, then use `append()` for anything past the end of the list and `insert(0)` for anything at the beginning, you just need to make sure you get the ordering right.

But then there‚Äôs this:

    &gt;&gt;&gt; l = [1, 2, 3, 4, 5]
    &gt;&gt;&gt; l[6:3:-1] = [3, 2, 1]
    Traceback (most recent call last):
      File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
    ValueError: attempt to assign sequence of size 3 to extended slice of size 1

What? Shouldn‚Äôt that just produce `[1, 2, 3, 4, 1, 2, 3]`? Somehow the moment there‚Äôs a non-default step involved, we have to care about list boundaries? This kind of makes sense from a consistency perspective because using a step size other than `1` or `-1` could end up with an undefined state for the list, but it was still surprising the first time I ran into it given that the default step size makes these kind of assignments work.

Oh, and you also get interesting behavior if the length of the slice and the length of the iterable being assigned don‚Äôt match:

    &gt;&gt;&gt; l = [1, 2, 3, 4, 5]
    &gt;&gt;&gt; l[0:2] = [3, 2, 1]
    &gt;&gt;&gt; l
    [3, 2, 1, 3, 4, 5]
    
    &gt;&gt;&gt; l = [1, 2, 3, 4, 5]
    &gt;&gt;&gt; l[0:4] = [3, 2, 1]
    &gt;&gt;&gt; l
    [3, 2, 1, 5]

If the iterable is longer, the extra values get inserted after last index in the slice. If the slice is longer, the extra indices within the list that are covered by the slice but not the iterable get deleted. I can *kind of* understand this logic to some extent, though I have to wonder how many bugs there are out in the wild because of people not knowing about this behavior (and, for that matter, how much code is actually *intentionally* using this, I can think of a few cases where it‚Äôs useful, but for all of them I would preferentially be using a generator or filtering the list instead of mutating it in-place with a slice assignment)

Oh, but those cases *also* throw value errors if a step value other than `1` is involved...

    &gt;&gt;&gt; l = [1, 2, 3, 4, 5]
    &gt;&gt;&gt; l[0:4:2] = [3, 2, 1]
    Traceback (most recent call last):
      File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
    ValueError: attempt to assign sequence of size 3 to extended slice of size 2

---

TLDR for anybody who ended up here because they need to implement this craziness for their own mutable sequence type:

1. Indices covered by a slice that are inside the sequence get updated in place.
2. Indices beyond the ends of the list result in the list being extended in those directions. This applies even if *all* indices are beyond the ends of the list, or if negative indices are involved that evaluate to indices *before* the start of the list.
3. If the slice is longer than the iterable being assigned, any extra indices covered by the slice are deleted (equivalent to `del l[i]`).
4. If the iterable being assigned is longer than the slice, any extra items get inserted into the list after the end of the slice.
5. If the step value is anything other than `1`, cases 2, 3, and 4 instead raise a `ValueError` complaining about the size mismatch.",ahferroin7,1fvyu8b,https://reddit.com/r/Python/comments/1fvyu8b/i_never_realized_how_complicated_slice/,https://www.reddit.com/r/Python/comments/1fvyu8b/i_never_realized_how_complicated_slice/,2024-10-04 13:13:44,148,0.92,148,0,31,0,0,False,False,True,False,False,Discussion,self,t3_1fvyu8b
Python,I made a dumb simple GMAIL client... only for sending emails from gmail.,"I wanted to automatically send emails from my gmail account but didn't want to go through the whole Google Cloud Platform / etc. setup... this just requires an app passcode for your gmail.

(note: I'm not great at packaging so currently only works from GitHub install)

# What my project does: 

Lets you use your gmail and send it in Python without all the GCP setup.

# Target audience: 

Simpletons like myself.

# Comparison: 

I couldn't find an easy way to use Python gmail without all the complicated Google Cloud Platform jazz... so if you're only wanting to automatically send emails with your gmail account, this is for you!

Let me know what you guys think! Look at the source, it's pretty simple to use haha.

[https://github.com/zackplauche/python-gmail](https://github.com/zackplauche/python-gmail)",thezackplauche,1fvxpkj,https://reddit.com/r/Python/comments/1fvxpkj/i_made_a_dumb_simple_gmail_client_only_for/,https://www.reddit.com/r/Python/comments/1fvxpkj/i_made_a_dumb_simple_gmail_client_only_for/,2024-10-04 12:15:57,54,0.85,54,0,20,0,0,False,False,True,False,False,Showcase,self,t3_1fvxpkj
Python,Lazywarden: Automate your Bitwarden Backups and Imports with Total Security! ‚òÅÔ∏èüîêüñ•Ô∏è,"What My Project Does

A few weeks ago, I launched Lazywarden, a tool designed to make life easier for those of us who use Bitwarden or Vaultwarden. It automates the process of backing up and importing passwords, including attachments, in a secure and hassle-free way. You can check it out here: [https://github.com/querylab/lazywarden](https://github.com/querylab/lazywarden) 

Target Audience

Anyone who wants to automate backups and imports of passwords securely and efficiently, while using Bitwarden or Vaultwarden.

Comparison

While Bitwarden is excellent for managing passwords, automating processes like cloud backups, integrating with other services, or securing your data locally can be tricky. Lazywarden simplifies all this with a script that does the heavy lifting for you. üòé

I'm open to any feedback, suggestions, or ideas for improvement. Feel free to share your thoughts or contribute to the project! ü§ù

Thanks for reading, and I hope you find Lazywarden as useful as I do. üíªüîë",querylab,1fvw58w,https://reddit.com/r/Python/comments/1fvw58w/lazywarden_automate_your_bitwarden_backups_and/,https://www.reddit.com/r/Python/comments/1fvw58w/lazywarden_automate_your_bitwarden_backups_and/,2024-10-04 10:43:21,14,0.95,14,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1fvw58w
Python,"htmy: Async, pure-Python HTML rendering library","Hi all,

I just released the first version my latest project: htmy. Its creation was triggered by one of my recent enterprise projects where I had to prototype a complex SPA with FastAPI, HTMX, TailwindCSS, and ... Jinja.

It's an async, zero-dependency, typed rendering engine that lets you write your components 100% in Python. It is primarily for server-side rendering, HTML, and XML generation.

It works with any backend framework, CSS, or JS library, and is also very customizable. At the moment, there is one application [example](https://volfpeter.github.io/htmy/examples/fastapi-htmx-tailwind-daisyui/) in the docs that's built with FastAPI, TailwindCSS, DaiyUI, and HTMX.

Key features:

* Async;
* React-like context support;
* Sync and async function components with decorator syntax;
* All baseline HTML tags built-in;
* `ErrorBoundary` component for graceful error handling;
* Everything is easily customizable, from the rendering engine to components, formatting and context management;
* Automatic HTML attribute name conversion with escape hatches;
* Minimized complexity for easy long-term maintenance;
* Fully typed.

Check it out if the features sound interesting to you.",volfpeter,1fvv11p,https://reddit.com/r/Python/comments/1fvv11p/htmy_async_purepython_html_rendering_library/,https://www.reddit.com/r/Python/comments/1fvv11p/htmy_async_purepython_html_rendering_library/,2024-10-04 09:23:56,21,0.87,21,0,27,0,0,False,False,True,False,False,News,self,t3_1fvv11p
Python,Introducing My Text-to-Reels Generator: Create Engaging Video Content Effortlessly!,"# What My Project Does

I‚Äôve developed a text-to-reels generator that transforms your written content into engaging short videos. Using Gemini API and stable diffusion to generate the videos. You can take a look here and maybe give a star if you interested.

[https://github.com/Kither12/Makeine](https://github.com/Kither12/Makeine)

# Target Audience

Anyone that would like to make reels for fun.

# Comparison

It's only run with 4gb VRAM so you don't need high GPU to use it.",Kitherare,1fvo0lg,https://reddit.com/r/Python/comments/1fvo0lg/introducing_my_texttoreels_generator_create/,https://www.reddit.com/r/Python/comments/1fvo0lg/introducing_my_texttoreels_generator_create/,2024-10-04 01:41:20,0,0.44,0,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1fvo0lg
Python,PEP 758 ‚Äì Allow `except` and `except*` expressions without parentheses,"PEP 758 ‚Äì Allow `except` and `except*` expressions without parentheses [https://peps.python.org/pep-0758/](https://peps.python.org/pep-0758/)

# Abstract

This PEP proposes to allow unparenthesized `except` and `except*` blocks in Python‚Äôs exception handling syntax. Currently, when catching multiple exceptions, parentheses are required around the exception types. This was a Python 2 remnant. This PEP suggests allowing the omission of these parentheses, simplifying the syntax, making it more consistent with other parts of the syntax that make parentheses optional, and improving readability in certain cases.

# Motivation

The current syntax for catching multiple exceptions requires parentheses in the `except` expression (equivalently for the `except*` expression). For example:

    try:
        ...
    except (ExceptionA, ExceptionB, ExceptionC):
        ...

While this syntax is clear and unambiguous, it can be seen as unnecessarily verbose in some cases, especially when catching a large number of exceptions. By allowing the omission of parentheses, we can simplify the syntax:

    try:
        ...
    except ExceptionA, ExceptionB, ExceptionC:
        ...

This change would bring the syntax more in line with other comma-separated lists in Python, such as function arguments, generator expressions inside of a function call, and tuple literals, where parentheses are optional.

The same change would apply to `except*` expressions. For example:

    try:
        ...
    except* ExceptionA, ExceptionB, ExceptionC:
        ...

Both forms will also allow the use of the `as` clause to capture the exception instance as before:

    try:
        ...
    except ExceptionA, ExceptionB, ExceptionC as e:
        ...",kirara0048,1fvnlol,https://reddit.com/r/Python/comments/1fvnlol/pep_758_allow_except_and_except_expressions/,https://www.reddit.com/r/Python/comments/1fvnlol/pep_758_allow_except_and_except_expressions/,2024-10-04 01:19:49,72,0.9,72,0,67,0,0,False,False,True,False,False,News,self,t3_1fvnlol
Python,Learn How to Use JSON as a Small Database for Your Py Projects by Building a Hotel Accounting System,"This is the first free tutorial designed to help beginners learn how to use JSON to create a simple database for their projects.

It also prepares developers for the next two tutorials in our ""Learn by Build"" series, where we'll cover how to use the `requests` library, build asynchronous code, and work with threads.

and by time we will add extra more depth  projects  to enhance your pythonic skills

find tutorial in github [https://github.com/rankap/learn\_by\_build/tree/main/tut\_1\_learn\_json](https://github.com/rankap/learn_by_build/tree/main/tut_1_learn_json)",RevolutionaryAd8906,1fvmvlj,https://reddit.com/r/Python/comments/1fvmvlj/learn_how_to_use_json_as_a_small_database_for/,https://www.reddit.com/r/Python/comments/1fvmvlj/learn_how_to_use_json_as_a_small_database_for/,2024-10-04 00:41:48,47,0.74,47,0,37,0,0,False,False,True,False,False,Tutorial,self,t3_1fvmvlj
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1fvm1no,https://reddit.com/r/Python/comments/1fvm1no/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1fvm1no/friday_daily_thread_rpython_meta_and_freetalk/,2024-10-04 00:00:44,1,0.67,1,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fvm1no
Python,Introducing DelugeWebClient,"## What My Project Does

I needed a way to inject torrents into Deluge bittorrent client via Python for a few projects. 

## Comparison

Initially, I was using the [deluge-client](https://github.com/JohnDoee/deluge-client), which worked well but had a key limitation: it doesn't support HTTP connections, making it incompatible with setups using reverse proxies.

Given this limitation and my need for HTTP support, I decided to create my own solution. While the original goal was to make a utility for personal use, I realized others might benefit from it as well, so I expanded it into a more polished tool for the community.

## Target Audience

Anyone that would like to utilize python to interact with their Deluge bittorrent client.

## DelugeWebClient

A Python client for the Deluge Web API, with support for HTTP connections, making it ideal for reverse proxy setups or direct URL access.

## Key Features

Full access to most Deluge Web API methods, including core functionalities through RPC. Designed for use in projects where HTTP connections are essential. Easy to integrate and use, with a clear API and support for common tasks like uploading torrents and managing torrents. I took inspiration from qbittorrent-api, and I hope this project proves helpful to anyone looking for a flexible, HTTP-capable Deluge Web API client.

Feedback and Contributions Feel free to try it out, give feedback, report any issues, or contribute on GitHub. Any suggestions or contributions to make it better are welcome!

## Example Usage
    from deluge_web_client import DelugeWebClient

    # using a context manager automatically logs you in
    with DelugeWebClient(url=""https://site.net/deluge"", password=""example_password"") as client:
        upload = client.upload_torrent(
            torrent_path=""filepath.torrent"",
            add_paused=False, # optional
            seed_mode=False, # optional
            auto_managed=False, # optional
            save_directory=None, # optional
            label=None, # optional
        )
        print(upload)
        # Response(result=""0407326f9d74629d299b525bd5f9b5dd583xxxx"", error=None, id=1)

## Links 
[Project](https://github.com/jessielw/deluge-web-client)

[PyPi](https://pypi.org/project/deluge-web-client)

[Docs](https://deluge-web-client.readthedocs.io)
",jlw_4049,1fvkya3,https://reddit.com/r/Python/comments/1fvkya3/introducing_delugewebclient/,https://www.reddit.com/r/Python/comments/1fvkya3/introducing_delugewebclient/,2024-10-03 23:07:29,2,0.67,2,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1fvkya3
Python,70+ Python Leetcode Problems solved in 5+hours (every data structure),"https://m.youtube.com/watch?v=lvO88XxNAzs

I love Python, it‚Äôs my first language and the language that got me into FAANG (interviews and projects). 

It‚Äôs not my day to day language (now TypeScript) but I definitely think it‚Äôs the best for interviews and getting started which is why I used it in this video. 

Included a ton of Python tips, as well as programming and software engineering knowledge. Give a watch if you want to improve on these and problem solving skills too ü´°",PhysicsThese5656,1fvjnhz,https://reddit.com/r/Python/comments/1fvjnhz/70_python_leetcode_problems_solved_in_5hours/,https://www.reddit.com/r/Python/comments/1fvjnhz/70_python_leetcode_problems_solved_in_5hours/,2024-10-03 22:06:50,240,0.95,240,0,24,0,0,False,False,True,False,False,Tutorial,self,t3_1fvjnhz
Python,AG Grid in Reflex for Data Tables in your Python Web Apps,"Reflex AG Grid is a high-performance and highly customizable component library for working with tabular data in Reflex applications. It seamlessly integrates AG Grid--a high-performance feature-rich datagrid for major JavaScript frameworks (like React) that offers filtering, grouping, pivoting, and more-- into the Reflex ecosystem, bringing advanced data grid capabilities to Python developers building modern web applications.

# Why Reflex AG Grid?

Reflex has become more popular among Python developers working in banking and fintech--who need components like AG Grid for advanced data handling. We're excited to announce that you can start building powerful data-driven applications with Reflex AG Grid today! Simply install it using pip:

    pip install reflex-ag-grid

(Note: This is an initial release. Check out the [open source repo](https://github.com/reflex-dev/reflex-ag-grid) and our [docs](https://reflex.dev/docs/library/tables-and-data-grids/ag-grid/) for the latest version and any updates)

# What is AG Grid?

[AG Grid](https://www.ag-grid.com) is a feature-rich data grid library designed for displaying and manipulating tabular data in web applications. With over a million monthly downloads, and 90% of the Fortune 500 comapnies using it, it's a leading solution for working with tabular data. AG Grid offers a wide array of functionalities including:

* In-place cell editing
* Real-time data updates
* Pagination and infinite scrolling
* Column filtering, reordering, resizing, and hiding
* Row grouping and aggregation
* Built-in theming

The AG Grid team is dedicated to continually improving the library, ensuring it remains at the forefront of data grid technology.

# Reflex AG Grid vs. Reflex DataTable Components

While Reflex offers basic `rx.data_table` component out of the box, Reflex AG Grid takes data handling to the next level. If you're working with large datasets, need advanced filtering and sorting capabilities, or require features like editable cells and export options, Reflex AG Grid is the ideal choice.

Some key advantages of Reflex AG Grid include:

* Superior performance with large datasets
* Extensive customization options
* Built-in features like column pinning and row grouping
* Seamless integration with Reflex's reactive programming model
* Support for both free (community) and enterprise AG Grid features

Similarly to Reflex, the core functionality of AG Grid is free and open-source. For those needing even more power, AG Grid offers an enterprise version with additional features such as pivot tables, advanced groupings, and Excel export capabilities. Reflex AG Grid supports both the community and enterprise versions ‚Äì you just need a valid AG Grid license key to unlock the enterprise features.

# Getting Started with Reflex AG Grid

Follow along for a brief step-by-step guide on how to use Reflex AG Grid to build an app like the one shown below! Press the ""Fetch Latest Data"" button to see the app in action. Check out the full live [app](https://ag-grid-app.reflex.run) and [code](https://github.com/reflex-dev/reflex-examples/tree/main/ag_grid_finance).

This finance app uses Reflex AG Grid to display stock data in an interactive grid with advanced features like sorting, filtering, and pagination. Selecting a row from the grid shows that companies stock data for the past 6 months in a line chart. Let's review the code to see how Reflex AG Grid is used in this app.

Setup

First we import the necessary libraries, including yfinance for fetching the stock data.

    import reflex as rx
    from reflex_ag_grid import ag_grid
    import yfinance as yf
    from datetime import datetime, timedelta
    import pandas as pd

# Fetching and transforming data

Next, we define the State class, which contains the application's state and logic. The `fetch_stock_data` function fetches stock data for the specified companies and transforms it into a format suitable for display in AG Grid. We call this function when clicking on a button, by linking the `on_click` trigger of the button to this state function.

We define state variables, any fields in your app that may change over time (A Var is directly rendered into the frontend of the app).

The `data` state variable stores the raw stock data fetched from Yahoo Finance. We transform this data to round the values and store it as a list of dictionaries, which is the format that AG Grid expects. The transformed data is sorted by date and ticker in descending order and stored in the `dict_data` state variable.

The `datetime_now` state variable stores the current datetime when the data was fetched.

    # The list of companies to fetch data for
    companies = [""AAPL"", ""MSFT"", ""GOOGL"", ""AMZN"", ""META""]
    
    class State(rx.State):
        # The data fetched from Yahoo Finance
        data: pd.DataFrame
        # The data to be displayed in the AG Grid
        dict_data: list[dict] = [\{}]
        # The datetime of the current fetched data
        datetime_now: datetime = datetime.now()
    
        def fetch_stock_data(self):
            self.datetime_now = datetime.now()
            start_date = self.datetime_now - timedelta(days=180)
    
            # Fetch data for all tickers in a single download
            self.data = yf.download(companies, start=start_date, end=self.datetime_now, group_by='ticker')
            rows = []
            for ticker in companies:
                # Check if the DataFrame has a multi-level column index (for multiple tickers)
                if isinstance(self.data.columns, pd.MultiIndex):
                    ticker_data = self.data[ticker]  # Select the data for the current ticker
                else:
                    ticker_data =   # If only one ticker, no multi-level index exists
    
                for date, row in ticker_data.iterrows():
                    rows.append({
                        ""ticker"": ticker,
                        ""date"": date.strftime(""%Y-%m-%d""),
                        ""open"": round(row[""Open""], 2),
                        ""high"": round(row[""High""], 2),
                        ""mid"": round((row[""High""] + row[""Low""]) / 2, 2),
                        ""low"": round(row[""Low""], 2),
                        ""close"": round(row[""Close""], 2),
                        ""volume"": int(row[""Volume""]),
                    })
            
            self.dict_data = sorted(rows, key=lambda x: (x[""date""], x[""ticker""]), reverse=True)self.data
    
    rx.button(
        ""Fetch Latest Data"", 
        on_click=State.fetch_stock_data, 
    )

# Defining the AG Grid columns

The `column_defs` list defines the columns to be displayed in the AG Grid. The `header_name` is used to set the header title for each column. The `field` key represents the id of each column. The `filter` key is used to insert the filter feature, located below the header of each column.

    column_defs = [
        ag_grid.column_def(field=""ticker"", header_name=""Ticker"", filter=ag_grid.filters.text, checkbox_selection=True),
        ag_grid.column_def(field=""date"", header_name=""Date"", filter=ag_grid.filters.date),
        ag_grid.column_def(field=""open"", header_name=""Open"", filter=ag_grid.filters.number),
        ag_grid.column_def(field=""high"", header_name=""High"", filter=ag_grid.filters.number),
        ag_grid.column_def(field=""low"", header_name=""Low"", filter=ag_grid.filters.number),
        ag_grid.column_def(field=""close"", header_name=""Close"", filter=ag_grid.filters.number),
        ag_grid.column_def(field=""volume"", header_name=""Volume"", filter=ag_grid.filters.number),
    ]

# Displaying AG Grid

Now for the most important part of our app, AG Grid itself!

* `id` is required because it uniquely identifies the Ag-Grid instance on the page.
* `column_defs` is the list of column definitions we defined earlier.
* `row_data` is the data to be displayed in the grid, which is stored in the `dict_data` State var.
* `pagination`, `pagination_page_size` and `pagination_page_size_selector` parameters enable pagination with specific variables in the grid.
* `theme` enables you to set the theme of the grid.

We set `theme` using the `grid_theme` State var in the [`rx.select`](http://rx.select) component. Every state var has a built-in function to set it's value for convenience, called `set_VARNAME`, in this case `set_grid_theme`.

    ag_grid(
        id=""myAgGrid"",
        column_defs=column_defs,
        row_data=State.dict_data,
        pagination=True,
        pagination_page_size=20,
        pagination_page_size_selector=[10, 20, 50, 100],
        theme=State.grid_theme,
        on_selection_changed=State.handle_selection,
        width=""100%"",
        height=""60vh"",
    )
    
    class State(rx.State):
        ...
        # The theme of the AG Grid
        grid_theme: str = ""quartz""
        # The list of themes for the AG Grid
        themes: list[str] = [""quartz"", ""balham"", ""alpine"", ""material""]
    
    rx.select(
        State.themes,
        value=State.grid_theme,
        on_change=State.set_grid_theme,
        size=""1"",
    )

The `on_selection_changed` event trigger, shown in the code above, is called when the user selects a row in the grid. This calls the function `handle_selection` method in the State class, which sets the `selected_rows` state var to the new selected row and calls the function `update_line_graph`.

The `update_line_graph` function gets the relevant ticker and uses it to set the `company` state var. The Date, Mid, and DateDifference data for that company for the past 6 months is then set to the state var `dff_ticker_hist`.

Finally it is rendered in an `rx.recharts.line_chart`, using `rx.recharts.error_bar` to show the DateDifference data which are the highs and the lows for the day.

    class State(rx.State):
        ...
        # The selected rows in the AG Grid
        selected_rows: list[dict] = None
        # The currently selected company in AG Grid
        company: str
        # The data fetched from Yahoo Finance
        data: pd.DataFrame
        # The data to be displayed in the line graph
        dff_ticker_hist: list[dict] = None
    
        def handle_selection(self, selected_rows, _, __):
            self.selected_rows = selected_rows
            self.update_line_graph()
        
        def update_line_graph(self):
            if self.selected_rows:
                ticker = self.selected_rows[0][""ticker""]
            else:
                self.dff_ticker_hist = None
                return
             = ticker
            
            dff_ticker_hist = self.data[ticker].reset_index()
            dff_ticker_hist[""Date""] = pd.to_datetime(dff_ticker_hist[""Date""]).dt.strftime(""%Y-%m-%d"")
            
            dff_ticker_hist[""Mid""] = (dff_ticker_hist[""Open""] + dff_ticker_hist[""Close""]) / 2
            dff_ticker_hist[""DayDifference""] = dff_ticker_hist.apply(
                lambda row: [row[""High""] - row[""Mid""], row[""Mid""] - row[""Low""]], axis=1
            )
            
            self.dff_ticker_hist = dff_ticker_hist.to_dict(orient=""records"")
    
    
    rx.recharts.line_chart(
        rx.recharts.line(
            rx.recharts.error_bar(
                data_key=""DayDifference"",
                direction=""y"",
                width=4,
                stroke_width=2,
                stroke=""red"",
            ),
            data_key=""Mid"",
        ),
        rx.recharts.x_axis(data_key=""Date""),
        rx.recharts.y_axis(domain=[""auto"", ""auto""]),
        data=State.dff_ticker_hist,
        width=""100%"",
        height=300,
    )self.company

# Conclusion

By bringing AG Grid to the Reflex ecosystem, we're empowering Python developers to create sophisticated, data-rich web applications with ease. Whether you're building complex dashboards, data analysis tools, or an application that demands powerful data grid capabilities, Reflex AG Grid has you covered.

We're excited to see what you'll build with Reflex AG Grid! Share your projects, ask questions, and join the discussion in our [community forums](https://forum.reflex.dev). Together, let's push the boundaries of what's possible with Python web development!",Imaginary-Art-6809,1fvhgol,https://reddit.com/r/Python/comments/1fvhgol/ag_grid_in_reflex_for_data_tables_in_your_python/,https://www.reddit.com/r/Python/comments/1fvhgol/ag_grid_in_reflex_for_data_tables_in_your_python/,2024-10-03 20:30:47,2,0.58,2,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1fvhgol
Python,"PyTraceToIX - expression tracer for debugging lambdas, comprehensions, method chaining, and expr.","* Repo: [https://github.com/a-bentofreire/pytracetoix](https://github.com/a-bentofreire/pytracetoix)
* Docs: [https://www.devtoix.com/docs/pytracetoix/en/](https://www.devtoix.com/docs/pytracetoix/en/)

# What My Project Does

  
**PyTraceToIX** is an open-source expression tracer for debugging lambdas, list comprehensions, method chaining, and expressions.

Code editors can't set breakpoints inside expressions, lambda functions, list comprehensions, and chained methods, forcing significant code changes to debug such code.

PyTraceToIX provides a straightforward solution to this problem.

It was designed to be simple, with easily identifiable functions that can be removed once the bug is found.

**PyTraceToIX** has 2 major functions:

* **c\_\_** capture the input of an expression input. ex: c\_\_(x)
* **d\_\_** display the result of an expression and all the captured inputs. ex: d\_\_(c\_\_(x) + c\_\_(y))

And 2 optional functions:

* **init\_\_** initializes display format, output stream and multithreading.
* **t\_\_** defines a name for the current thread.

# Target Audience

Anyone who needs to debug expressions, lambdas, list comprehensions, method chaining, and expressions.  
In general, is target to display values on single lines where debuggers can't set breakpoints.

# Comparison

I did a quick search and I couldn't find anything similar, but if there is, please put it on the comments for me to evaluate.

# Features

* Multithreading support.
* Simple and short minimalist function names.
* Result with Inputs tracing.
* Configurable formatting at global level and at function level.
* Configurable result and input naming.
* Output to the stdout or a stream.
* Multiple levels.
* Capture Input method with allow and name callback.
* Display Result method with allow, before and after callbacks.

# Examples

    from pytracetoix import d__, c__
    
    [x, y, w, k, u] = [1, 2, 3, 4 + 4, lambda x:x]
    #  expression
    z = x + y * w + (k * u(5))
    
    # Display expression with no inputs
    z = d__(x + y * w + (k * u(5)))
    
    # Output:
    # _:`47`
    
    # Display expression result with inputs
    z = d__(c__(x) + y * c__(w) + (k * u(5)))
    
    # Output:
    # i0:`1` | i1:`3` | _:`47`
    
    # Display expression result with inputs within an expression
    z = d__(c__(x) + y * c__(w) + d__(k * c__(u(5), level=1)))
    
    # Output:
    # i0:`5` | _:`40`
    # i0:`1` | i1:`3` | _:`47`
    
    # lambda function
    f = lambda x, y: x + (y + 1)
    f(5, 6)
    
    # Display lambda function result and inputs
    f = lambda x, y: d__(c__(x) + c__(y + 1))
    f(5, 6)
    
    # Output:
    # i0:`5` | i1:`7` | _:`12`
    
    # Display lambda function inputs and result with input and result names
    f = lambda x, y: d__(c__(x, name='x') + c__(y + 1, name='y+1'), name='f')
    f(5, 6)
    
    # Output:
    # x:`5` | y+1:`7` | f:`12`
    
    #  list comprehension
    l = [5 * y * x for x, y in [(10, 20), (30, 40)]]
    
    # Display list comprehension with input and result names
    l = d__([5 * c__(y, name=f""y{y}"") * c__(x, name=lambda index, _, __: f'v{index}') for x, y in [(10, 20), (30, 40)]])
    
    # Output:
    # y20:`20` | v1:`10` | y40:`40` | v3:`30` | _:`[1000, 6000]`
    
    # Display expression if `input count` is 2
    d__(c__(x) + c__(y), allow=lambda data: data['input_count__'] == 2)
    
    # Display expression if the first input value is 10.0
    d__(c__(x) + c__(y), allow=lambda data: data['i0'] == 10.0)
    
    # Display expression if the `allow_input_count` is 2, in this case if `x &gt; 10`
    d__(c__(x, allow=lambda index, name, value: value &gt; 10) + c__(y),
            allow=lambda data: data['allow_input_count__'] == 2)
    
    # Display expression if the generated output has the text 10
    d__([c__(x) for x in ['10', '20']], before=lambda data: '10' in data['output__'])
    
    # Display expression and after call `call_after` if it was allowed to display
    d__([c__(x) for x in ['10', '20']], allow=lambda data: data['allow_input_count__'] == 2,
            after=lambda data: call_after(data) if data['allow__'] else """")
    
    class Chain:
        def __init__(self, data):
            self.data = data
    
        def map(self, func):
            self.data = list(map(func, self.data))
            return self
    
        def filter(self, func):
            self.data = list(filter(func, self.data))
            return self
    
    # A class with chain methods
    Chain([10, 20, 30, 40, 50]).map(lambda x: x * 2).filter(lambda x: x &gt; 70)
    
    # Display the result and capture the map and filter inputs
    d__(Chain([10, 20, 30, 40, 50]).map(lambda x: c__(x * 2)).filter(lambda x: c__(x &gt; 70)).data)
    
    # Output:
    # i0:`20` | i1:`40` | i2:`60` | i3:`80` | i4:`100` | i5:`False` | i6:`False` | i7:`False` | i8:`True` | i9:`True` | _:`[80, 100]`
    ",abentofreire,1fvh1wq,https://reddit.com/r/Python/comments/1fvh1wq/pytracetoix_expression_tracer_for_debugging/,https://www.reddit.com/r/Python/comments/1fvh1wq/pytracetoix_expression_tracer_for_debugging/,2024-10-03 20:13:17,1,0.57,1,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1fvh1wq
Python,Django AI Assistant for VS Code,Hey guys! I wanted to share this new Django VS Code extension. It's basically an AI chat (RAG) system trained on the Django docs that developers can chat with inside of VS Code. Should be helpful in answering basic or more complex questions and generally pointing you in the right direction when using Django!¬†[https://marketplace.visualstudio.com/items?itemName=buildwithlayer.django-integration-expert-Gus30](https://marketplace.visualstudio.com/items?itemName=buildwithlayer.django-integration-expert-Gus30),Junior-Description41,1fvdca4,https://reddit.com/r/Python/comments/1fvdca4/django_ai_assistant_for_vs_code/,https://www.reddit.com/r/Python/comments/1fvdca4/django_ai_assistant_for_vs_code/,2024-10-03 17:34:54,7,0.6,7,0,3,0,0,False,False,True,False,False,Resource,self,t3_1fvdca4
Python,"gs-batch-pdf: a cli tool for processing multiple pdfs (compressing, converting to pdf/a)","Hi, I've published [my first package](https://github.com/kompre/gs-batch) to pipy!

# What My Project Does

It's a cli tool that uses ghostscript for processing multiple pdf files at once.

I like a good cli tool and I like to use ghostscript mostly for compressing pdf files or converting them to pdf/a. The problem I have with ghostscript is that the command lines are quite long and I use not quite so often that I end up to forget the relevant command and need to search online for a somewhat kind of obsure cli.

Therefore I created this cli to provide with few option easy to remember, which provide sensible parameters to the underlining ghostscript which is doing the work. Also I made it so it can process multiple files in parallel.

I'm not a professional developer, I just flirt with python as structural engineer, so being able to actually publishing a package to pipy has been a nice goal reached.

Quite frankly I find easier to create a python cli (with `click`) than figuring out how to make a pwsh script, then adding it path, etc. BONUS: with python, it's crossplatform! (tested on linux and windows)

I suggest you install it with `pipx`

`pipx install gs-batch-pdf`

Then you can use it to compress multiple pdf files (glob patterns!)

`gsb * --compress --prefix=compressed/`

`gsb * --compress /screen --force`

or  convert them to pdf/a (works best with gs 10.04.0):

`gsb * --pdfa --suffix=_pdfa`

`gsb * --pdfa 3 -f`

or both:

`gsb * --compress --pdfa --force`

And more.

# Target Audience

It is for anyone who has to deal with multiple pdfs at once, likely to submit to public administration (pdf/a) and want a offline tool (good for confidential files) that can use on any number of files with relative ease.  Have a look if it may interest you. I know for sure that I will use it a lot.

# Comparison

The most common tool that compress and convert to pdf/a are usually online tools that will usually accept only one file at time, or require premium features to be unlocked.

PDF24 is quite good and is powered by ghostscript too, but it's not quite as slick to use as a cli. Also it was failing at converting to pdf/a level 2/3, but that was because of a known issue with ghostscript prior to version 10.04.0, which has only being recently published.

In short I just wanted to do my own thing, with simple options, easy to use on the spot, that can process multiple files at once.",komprexior,1fvcdu5,https://reddit.com/r/Python/comments/1fvcdu5/gsbatchpdf_a_cli_tool_for_processing_multiple/,https://www.reddit.com/r/Python/comments/1fvcdu5/gsbatchpdf_a_cli_tool_for_processing_multiple/,2024-10-03 16:54:03,1,1.0,1,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1fvcdu5
Python,Copy right for pandas syntax?,I wanna create a package that uses exactly  the same syntax pandas uses like iloc and str.contains for other data types and objects to achieve the similar goal pandas has for data manipulation but will it violate copy right law??,ootybotty,1fvaeng,https://reddit.com/r/Python/comments/1fvaeng/copy_right_for_pandas_syntax/,https://www.reddit.com/r/Python/comments/1fvaeng/copy_right_for_pandas_syntax/,2024-10-03 15:25:24,0,0.13,0,0,9,0,0,False,False,True,False,False,Discussion,self,t3_1fvaeng
Python,Custom keymaps in Textual,"This post describes a new feature in Textual that allows you to customize key bindings.

[https://darren.codes/posts/textual-keymaps/](https://darren.codes/posts/textual-keymaps/)

This feature has been requested a lot. Mostly from Vim users. ",willm,1fv4fqa,https://reddit.com/r/Python/comments/1fv4fqa/custom_keymaps_in_textual/,https://www.reddit.com/r/Python/comments/1fv4fqa/custom_keymaps_in_textual/,2024-10-03 10:22:18,7,0.71,7,0,0,0,0,False,False,True,False,False,News,self,t3_1fv4fqa
Python,Livestream Today: Python 3.13 Features with ≈Åukasz Langa and Tania Allard,"Hey everyone from JetBrains and PyCharm! üëã

We are hosting a livestream **today at 5 PM CEST / 11 AM EDT** to discuss the latest features in **Python 3.13**  and where Python might evolve in the world of **data science** and beyond.

There will be two fantastic guests from the **Python Software Foundation**:

* **≈Åukasz Langa** (CPython Developer in Residence, Python 3.8 - 3.9 release manager, original creator of Black)

* **Tania Allard** (Vice-chair of the PSF board, PSF fellow, and Quansight Labs director)

We'll cover:

* An overview of Python 3.13's new features üêç
* Predictions on the future of Python in data science and general tech trends üìä

Bring your questions‚Äîwe'll be answering them live! Hope to see you there. üòä

**Link to the stream:** [**https://www.youtube.com/live/GPwYSf1t8Lw?si=ncLELtPxqfgl80yw**](https://www.youtube.com/live/GPwYSf1t8Lw?si=ncLELtPxqfgl80yw)",Snoo-Val,1fv3rcd,https://reddit.com/r/Python/comments/1fv3rcd/livestream_today_python_313_features_with_≈Çukasz/,https://www.reddit.com/r/Python/comments/1fv3rcd/livestream_today_python_313_features_with_≈Çukasz/,2024-10-03 09:31:04,9,0.81,9,0,1,0,0,False,False,True,False,False,:pythonLogo: Official Event,self,t3_1fv3rcd
Python,I wrote a library that adds a @depends() decorator for FastAPI endpoints,"I always missed being able to decorate my endpoints in FastAPI with decorators like `@authorized()`, `@cached(max_age=60)`, etc. but making decorators work with FastAPI endpoints and their dependencies proved surprisingly difficult.

I have now written [fastapi-decorators](https://github.com/Minibrams/fastapi-decorators) which adds a `@depends()` decorator that you can use to decorate your endpoints with - with full FastAPI support :)

# What My Project Does

It allows you to add FastAPI dependencies to your endpoints with the `@depends()` decorator:
```python
@app.get(""/users/{user_id}"")
@depends(Depends(verify_auth_token))
def get_user_by_user_id(user_id: int):
   ...
```

The documentation lists a couple of useful decorators you can build with `@depends()`:

- `@authorize()` for authorizing requests
- `@rate_limit(max=5, period=60)` for rate-limiting endpoints
- `@cache(max_age=5)` for caching responses if you have expensive route operations
- `@log_request()` for logging incoming requests
- `@handle_error()` for catching exceptions and returning custom responses

‚Ä¶ but you can of course use it for whatever you want.

# Target Audience
Anyone writing FastAPI applications. The library is a polished version of decorator logic I use in several production systems.

# Comparison
This functionality is currently not supported by FastAPI. It has been [suggested as an added feature](https://github.com/fastapi/fastapi/issues/704), but the suggestion was closed.

Hope someone finds it useful.",Iklowto,1fv3hbs,https://reddit.com/r/Python/comments/1fv3hbs/i_wrote_a_library_that_adds_a_depends_decorator/,https://www.reddit.com/r/Python/comments/1fv3hbs/i_wrote_a_library_that_adds_a_depends_decorator/,2024-10-03 09:09:14,73,0.87,73,0,14,0,0,False,False,True,False,False,Showcase,self,t3_1fv3hbs
Python,v8serialize ‚Äì Read/write JavaScript values from Python using V8's serialization format,"Hi everyone! I'd like to share a Python library I've been working on.

* [https://github.com/h4l/v8serialize](https://github.com/h4l/v8serialize)
* Docs: [https://h4l.github.io/v8serialize/en/latest/](https://h4l.github.io/v8serialize/en/latest/)

# What My Project Does

v8serialize encodes/decodes the V8 JavaScript engine's serialization format. This is a specialised format that V8 uses to serialize JavaScript values when doing things like storing data in IndexedDB, passing values between contexts using `postMessage()`. The format can represent all the JSON types, plus common JavaScript types that JSON can't, like Map, Set, Date, Error, ArrayBuffer, RegExp, undefined, BigInt. Plus it can serialize reference cycles, so serialized objects can link to each other without causing infinite recursion.

In order to interact with these JavaScript types from Python, v8serialize also implements Python versions of JavaScript's Object, Array, Map, Set and other types; replicating details like Arrays supporting large gaps between indexes and Map/Set using object identity rather than equality to detect duplicates.

Together, these features allow Python programs to receive values from a JavaScript program, interact with them, and send JavaScript values back.

v8serialize itself doesn't provide a communication mechanism, it's just the encoding/decoding, like the `json` module.

# Target Audience

It's intended for situations where Python and JavaScript programs are communicating, particulally where sharing richer data structures than JSON supports is useful. The main strength of V8's serialization format is that it allows the JavaScript code to send/receive most values without needing to explicitly convert them to a simpler JSON format.

# Comparison

v8serialize is similar to the `json` or `pickle` modules. It's a bit like a binary JSON format, focussed on maximising interoperability with JavaScript running on V8.

The encoder/decoder is pure Python, so it'll be slower than the builtin `json` module.

# Examples

From node/Deno, the `v8` module can serialize values like this:

    import * as v8 from 'node:v8';
    import {Buffer} from 'node:buffer';
    console.log(v8.serialize({foo: 'bar'}).toString('base64'));
    console.log(v8.deserialize(Buffer.from('/w87UwJoaVMLZnJvbSBweXRob246Ag==', 'base64')))

Prints:

    /w9vIgNmb28iA2JhcnsB
    Map(1) { 'hi' =&gt; 'from python' }

From Python:

    &gt;&gt;&gt; from base64 import b64decode, b64encode
    &gt;&gt;&gt; import v8serialize
    &gt;&gt;&gt; v8serialize.loads(b64decode('/w9vIgNmb28iA2JhcnsB'))
    JSObject(foo='bar')
    &gt;&gt;&gt; b64encode(v8serialize.dumps({'hi': 'from python'}))
    b'/w87UwJoaVMLZnJvbSBweXRob246Ag=='

Personally I wrote v8serialize because I'm working on writing a Python client for the [Deno KV](https://deno.com/kv) database. It uses this format to store JS values, so I needed a way to read/write this data from Python to interact with it. I'm working on this at the moment, so that'll be the next thing I finish!

Thanks for reading.",h4l,1fv305d,https://reddit.com/r/Python/comments/1fv305d/v8serialize_readwrite_javascript_values_from/,https://www.reddit.com/r/Python/comments/1fv305d/v8serialize_readwrite_javascript_values_from/,2024-10-03 08:30:06,8,0.75,8,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1fv305d
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1fuuq86,https://reddit.com/r/Python/comments/1fuuq86/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1fuuq86/thursday_daily_thread_python_careers_courses_and/,2024-10-03 00:00:09,2,0.76,2,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fuuq86
Python,Introducing DnsTrace: Track DNS Queries in Real-Time Using eBPF!,"Hello, Python community!

I‚Äôm thrilled to announce my latest project: [DnsTrace](https://github.com/furkanonder/DnsTrace)! This F/OSS tool is designed to track DNS queries made by processes on your machine, utilizing the powerful eBPF technology.

**Getting Started**

Before diving into DnsTrace, you‚Äôll need to install **BCC (BPF Compiler Collection)**, which is essential for this project. You can find the installation guide [here](https://github.com/iovisor/bcc/blob/master/INSTALL.md).

After setting up BCC, you can install DnsTrace effortlessly with:

`pipx install dnstrace`

**How to Use DnsTrace**  
To start monitoring DNS queries, run the following command:  
`sudo dnstrace`

**Why DnsTrace?**

* **Instant Insights**: Monitor DNS queries in real time.
* **Lightweight**: Built with eBPF for efficiency.
* **Community-Driven**: F/OSS project and welcoming to contributions!

**Join the Project!**

I‚Äôd love your thoughts, suggestions, or any contributions! Check out the project on [GitHub](https://github.com/furkanonder/) for more details.

Thank you for your interest, and happy coding!",scroll_down0,1futut7,https://reddit.com/r/Python/comments/1futut7/introducing_dnstrace_track_dns_queries_in/,https://www.reddit.com/r/Python/comments/1futut7/introducing_dnstrace_track_dns_queries_in/,2024-10-02 23:17:11,8,0.84,8,0,2,0,0,False,False,True,False,False,News,self,t3_1futut7
Python,Python 3.13.0 release candidate 3 released,"&gt; This is the final release candidate of Python 3.13.0

&gt; This release, 3.13.0rc3, is the final release preview (no really) of 3.13. This release is expected to become the final 3.13.0 release, barring any critical bugs being discovered. The official release of 3.13.0 is now scheduled for Monday, 2024-10-07.

&gt; This extra, unplanned release candidate exists because of a couple of last minute issues, primarily a significant performance regression in specific workloads due to the incremental cyclic garbage collector (introduced in the alpha releases). We decided to roll back the garbage collector change in 3.13 (and continuing work in 3.14 to improve it), apply a number of other important bug fixes, and roll out a new release candidate.

https://pythoninsider.blogspot.com/2024/10/python-3130-release-candidate-3-released.html?m=1",stevanmilic,1fusnfy,https://reddit.com/r/Python/comments/1fusnfy/python_3130_release_candidate_3_released/,https://www.reddit.com/r/Python/comments/1fusnfy/python_3130_release_candidate_3_released/,2024-10-02 22:14:37,141,0.95,141,0,32,0,0,False,False,True,False,False,News,self,t3_1fusnfy
Python,Saving my laundry from unexpected rain by adding rain detection to my smart home with Python,"**What My Project Does**

Repo:¬†[https://github.com/bens-electrical-escapades/RainSensor](https://github.com/bens-electrical-escapades/RainSensor)

Video:¬†[https://youtu.be/hfJn5d-R0nY](https://youtu.be/hfJn5d-R0nY)

Using a¬†[zigbee2mqtt](https://www.zigbee2mqtt.io/), a raspberry Pi and a Zigbee adapter. I make a very simple script (it's more an example of what can be done with this package and set up) and connect to a rain sensor to determine if it rains.  
I also re-purpose a door sensor to know if the washing line is out/up and can therefore get notifications when it starts raining and the laundry is out.

As I said, it's pretty simple script. Hope you enjoy.

**Target Audience**

Toy project / smart home enthuaists 

**Comparison**

Home assistant will do all this, and is much easier to use and set up. But I wanted an opportunity to use my little but growing Python knowledge in a way which interacts with the real world in some way.  So I combined Python and home automation¬†in this project",btb331,1furmuq,https://reddit.com/r/Python/comments/1furmuq/saving_my_laundry_from_unexpected_rain_by_adding/,https://www.reddit.com/r/Python/comments/1furmuq/saving_my_laundry_from_unexpected_rain_by_adding/,2024-10-02 21:29:35,20,0.93,20,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1furmuq
Python,"Whisper ü§´: LLM's in your terminal.
","Hi all -- I've been working on a little side project and thought I'd post it here to get some reactions.

It's called [Whisper](https://github.com/syn54x/whisper).  If you like it, give it a star!

**What My Project Does?**

Whisper is an LLM question/answer tool for your terminal.  For those of us who work in terminals, sometimes it's annoying to have to jump to a browser to interact with ChatGPT or Claude.

**Target Audience**

I built it because I found myself wishing I could just ask question in my terminal.  If for no one else, I am the target audience.

**Comparison**

Compared to [chatgpt.com](http://chatgpt.com) and [claude.ai](http://claude.ai), this has the potential to be more convenient.  I haven't seen any other tools that allow you to interact with LLMs easily within your terminal.

**Where can you find it?**


```
whisper on ÓÇ† main [$] is üì¶ v0.1.3 via üêç v3.12.6 
‚ùØ whisper ""What's that linux command for killing a process using port 8000?""
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Kill Process Using Port 8000 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ To kill a process using port 8000 in Linux, you can use the      ‚îÇ
‚îÇ following command:                                               ‚îÇ
‚îÇ                                                                  ‚îÇ
‚îÇ                                                                  ‚îÇ
‚îÇ  lsof -t -i:8000 | xargs kill                                    ‚îÇ
‚îÇ                                                                  ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
```


screenshot: [https://imgur.com/a/COyytFK](https://imgur.com/a/COyytFK)

Pypi: [https://pypi.org/project/just-whisper/](https://pypi.org/project/just-whisper/)

Github: [https://github.com/syn54x/whisper](https://github.com/syn54x/whisper)

Docs: [https://syn54x.github.io/whisper/](https://syn54x.github.io/whisper/)",Original-Ad-4606,1fuoc8f,https://reddit.com/r/Python/comments/1fuoc8f/whisper_llms_in_your_terminal/,https://www.reddit.com/r/Python/comments/1fuoc8f/whisper_llms_in_your_terminal/,2024-10-02 19:09:47,0,0.48,0,0,16,0,0,False,False,True,False,False,Showcase,self,t3_1fuoc8f
Python,Compaqt - a new Python serializer!,"Hi everyone!

I'm currently working on a new serializer module, and wanted to try and get some feedback on it.

**What My Project does?**

Compaqt is a serializer that encodes Python values into a bytes object, with the ability to convert it back to actual Python values. In short, it provides a straightforward way to serialize and deserialize data.

Some of its highlights:

* Compact data representation - hence the module name
* Minimal memory usage - using automatic, on-the-fly allocation tweaks
* A fast encoding/decoding process

Currently, the module only provides basic serialization. There are plans to support more in further updates. Some things I plan on adding soon:

* Custom datatype support - where you can create your own serialization methods
* More advanced method args - to make the serializer better based on your needs

**Benchmarks**

These benchmarks are performed over 1 million iterations of serializing and de-serializing. The types 'str', 'int', 'float', 'list', and 'dict' are all processed once separate from each other per iteration. The size is the length of all variables in a list as a serialized object.

The values:

    values = [
        1024,
        'Hello, world!',
        3.142,
        ['hello', 'compaqt!'],
        {'17': 'dictionary'}
    ]

The benchmark results:

    Name: 'Compaqt'
    Time: 0.655404 s
    Size: 58 bytes
    
    Name: 'MsgPack'
    Time: 1.520682 s
    Size: 58 bytes
    
    Name: 'Pickle'
    Time: 1.724677 s
    Size: 88 bytes
    
    Name: 'JSON'
    Time: 6.855052 s
    Size: 75 bytes

**Target Audience**

While Compaqt is a personal project, it can be useful for anyone needing data in byte format, such as:

* Data storage solutions that require serialization
* Developers looking for an efficient and easy-to-use encoding solution

**Comparison**

Compared to other solutions, Compaqt:

* provides an even more compact encoding method
* is generally fast with serializing
* attempts to minimize memory usage instead of over-allocating

**Where can you find it?**

You can find the module on [*PyPI*](https://pypi.org/project/compaqt/).

The GitHub with further usage details can be found [*here*](https://github.com/svenboertjens/compaqt).

Thank you for reading! I'd love to hear if you have any feedback or questions.

Edit: Add benchmarks for comparison against other serializers.",glippygobbler,1fulsg4,https://reddit.com/r/Python/comments/1fulsg4/compaqt_a_new_python_serializer/,https://www.reddit.com/r/Python/comments/1fulsg4/compaqt_a_new_python_serializer/,2024-10-02 17:24:16,10,0.76,10,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1fulsg4
Python,In search of exemplars,"There have been lots of ""best practice"" questions over the years, but I'm looking for exemplars.

Projects that are done so well that they are (or are approaching) the gold standard of Pythonic ideals.

What projects have you worked on, or encountered that exemplified the best of Python's aspirations? The ones you can point to and definitively say ""Here! Do it like this!""",DeCaMil,1fujcje,https://reddit.com/r/Python/comments/1fujcje/in_search_of_exemplars/,https://www.reddit.com/r/Python/comments/1fujcje/in_search_of_exemplars/,2024-10-02 15:45:26,20,0.79,20,0,12,0,0,False,False,True,False,False,Discussion,self,t3_1fujcje
Python,SpecMock for better testing! üß™‚öóÔ∏è,"TL;DR a library for creating mocks which mimic objects and don't allow you to use the mock in ways an instance wouldn't.

One of the problems I often encounter with unit tests is that the code gets *refactored* and the test don't get updated properly (if at all). When changing the name of an attribute, some tests might not break (and therefore not be updated) e.g.

    class Client:
      publisher: Publisher # rename from producer to publisher 
      ...
    
    def test__lazy_send__doesnt_publish_before_used(client_mock):
      client_mock.lazy_send(""hi!"")
      client_mock.producer.assert_not_called()

This test will pass even though `Client` doesn't have a producer any more.

Using `MagicMock(spec=Client)` or `create_autospec` won't solve the issue because they don't support properties:  
`AttributeError: Mock object has no attribute 'publisher'`

This led me to create my own library for Mocks which mimic the class better:

[spec\_mock](https://github.com/AharonSambol/spec_mock)

It acts just like a normal MagicMock but doesn't let you use any **properties** or **methods** that the class it's mimicking wouldn't.",AharonSambol,1fud6y2,https://reddit.com/r/Python/comments/1fud6y2/specmock_for_better_testing/,https://www.reddit.com/r/Python/comments/1fud6y2/specmock_for_better_testing/,2024-10-02 10:45:41,6,0.69,6,0,4,0,0,False,False,True,False,False,Resource,self,t3_1fud6y2
Python,NuCS: fast constraint solving in Python,"**What my project does**

NuCS is a Python library for solving Constraint Satisfaction and Optimization Problems. NuCS allows to solve constraint satisfaction and optimization problems such as timetabling, travelling salesman, scheduling problems.

NuCS is distributed as a Pip package and is easy to install and use.

NuCS is also very fast because it is powered by¬†[Numpy](https://numpy.org/)¬†and¬†[Numba](https://numba.pydata.org/)¬†(JIT compilation).

**Targeted audience**

NuCS is targeted at Python developers who want to integrate constraint programming capabilities in their projects.

**Comparison with other projects**

Unlike other Python librairies for constraint programming, NuCS is 100% written in Python and does not rely on a external solver.

**Github repository**

[https://github.com/yangeorget/nucs](https://github.com/yangeorget/nucs)",Dangerous-Mango-672,1fuc9ti,https://reddit.com/r/Python/comments/1fuc9ti/nucs_fast_constraint_solving_in_python/,https://www.reddit.com/r/Python/comments/1fuc9ti/nucs_fast_constraint_solving_in_python/,2024-10-02 09:40:42,1,1.0,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1fuc9ti
Python,Yami - A music player made with Tkinter,"This is my high school project and wanted to share it  
**Github Link:** [https://github.com/DevER-M/yami](https://github.com/DevER-M/yami)  
**Image:** [**https://imgur.com/a/rfL41xg**](https://imgur.com/a/rfL41xg)

**Some of the features:**

* ***mp3 , flac, and many audio formats supported for playback***
* ***Clean UI***
* ***Can download music with art cover***
* ***it is also asynchronous***

**Libraries used:**

* customtkinter
* spotdl
* mutagen

**Target audience:** This project will be useful for people who do not want ads and want a simple user interface to play music

**Comparison: There are currently no projects that have all the features covered and is made with tkinter**

To use this install all requirements in the .txt file and you are good to go

**RoadMap:I will not be actively developing it but i will update it now and then**

A follow would be nice! [https://github.com/DevER-M](https://github.com/DevER-M)",FishStickSocks,1fu9kox,https://reddit.com/r/Python/comments/1fu9kox/yami_a_music_player_made_with_tkinter/,https://www.reddit.com/r/Python/comments/1fu9kox/yami_a_music_player_made_with_tkinter/,2024-10-02 06:14:23,33,0.83,33,0,18,0,0,False,False,True,False,False,Showcase,self,t3_1fu9kox
Python,CLI tool to clean up virtual environments.,"I created a simple application  ([envCleaner](https://github.com/kayqueGovetri/envCleaner)) to remove inconvenient virtual environments from the file system of any PC, helping to save disk space. It is open to improvements and suggestions.

[Typer](https://typer.tiangolo.com/) is being used for the creation of the CLI.",qykyq,1fu3dz8,https://reddit.com/r/Python/comments/1fu3dz8/cli_tool_to_clean_up_virtual_environments/,https://www.reddit.com/r/Python/comments/1fu3dz8/cli_tool_to_clean_up_virtual_environments/,2024-10-02 00:20:44,0,0.39,0,0,8,0,0,False,False,True,False,False,Resource,self,t3_1fu3dz8
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1fu2yo4,https://reddit.com/r/Python/comments/1fu2yo4/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1fu2yo4/wednesday_daily_thread_beginner_questions/,2024-10-02 00:00:10,2,0.76,2,0,2,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fu2yo4
Python,Get clean markdown from any data source using vision-language models in Python,"I have found that quality data preprocessing for LLMs from raw data sources can be an incredibly difficult task, so I'm sharing a new project I began working on this summer to solve this problem.

**What My Project Does:**

[The package in question](https://github.com/emcf/thepipe)¬†is an open-source project designed to simplify the process of scraping clean data from various sources (PDFs, URLs, Docs, Images, etc). Whether you're working with PDFs, web pages, or images, it can handle the extraction into a clean markdown format. Unlike traditional scraping tools, it is able to understand the context and layout of documents, thanks to vision-language models. It even handles complex tables and figures.

The beauty of The Pipe is that it's not just a black box. It's open-source so you can peek under the hood, understand how it works, customize it to fit your specific needs, etc. The Python library is quite thoroughly documented for this kind of stuff.

**Comparison:**

Look at existing Python packages for document scraping such as PyPDF2, Unstructured, PyMuPDF (fitz), PDFMiner, Tabula-py, Camelot, pdfplumber, and marker. While these tools are great at basic text extraction, they often struggle with more complex tasks like handling scanned PDFs, irregular data tables, tables that span multiple pages, and documents with mixed content (e.g., images, figures, or complex formatting). On the other hand, my package leverages vision-language models to automatically interpret the structure and context of documents, making it far more capable of handling such challenging scenarios out of the box.

**Target Audience:**

This project is ideal for data scientists, machine learning engineers, and researchers working with large language models (LLMs) who need to preprocess raw data efficiently. It's flexible enough to be used in production settings or as a tool for prototyping data pipelines.

Give it a spin and you might just find yourself with more time to focus on the actually exciting parts of your ML &amp; AI-related data science projects :)

Cheers!",Confident-Honeydew66,1ftwu2p,https://reddit.com/r/Python/comments/1ftwu2p/get_clean_markdown_from_any_data_source_using/,https://www.reddit.com/r/Python/comments/1ftwu2p/get_clean_markdown_from_any_data_source_using/,2024-10-01 19:31:47,25,0.93,25,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1ftwu2p
Python,"I Made NumTextAlchemy: Accurately Convert Numbers to Text (and Back), Handling Up to 10¬≤¬π¬≤!","# What My Project Does:

NumTextAlchemy is a Python library that allows you to **convert numbers to text and back to numeric form** accurately, even for numbers as large as **10¬≤¬π¬≤**. This tool is perfect for anyone needing to convert large numeric values into their text representation (or vice versa) without losing precision.

# Target Audience:

This library is aimed at:

* **Developers** who work with extremely large numbers and need a reliable solution for converting between numeric and text representations.
* Anyone building applications that require handling numbers beyond the typical data type limits (e.g., scientific computing, financial apps).
* Those looking for a utility for educational, experimental, or even production-level projects that need to manage large numbers accurately.

# Comparison:

What sets **NumTextAlchemy** apart from other libraries is its ability to handle numbers up to **10¬≤¬π¬≤**‚Äîsomething most libraries struggle with. Many existing alternatives either don't support large numbers well or lack the accuracy needed when switching between text and numeric formats. NumTextAlchemy fills that gap, providing a simple but powerful solution for handling **very large** numbers efficiently.

# Source Code:

You can check out the project here:

* **PyPI**: [NumTextAlchemy on PyPI](https://pypi.org/project/NumTextAlchemy/)
* **GitHub**: [GitHub Repository](https://github.com/Srinath-N-Gudi/NumTextAlchemy)

Feel free to give it a try, and I‚Äôd love to hear your feedback or suggestions for improvements! Thanks for checking it out! üôå",Srinath001,1ftho30,https://reddit.com/r/Python/comments/1ftho30/i_made_numtextalchemy_accurately_convert_numbers/,https://www.reddit.com/r/Python/comments/1ftho30/i_made_numtextalchemy_accurately_convert_numbers/,2024-10-01 06:34:57,3,0.81,3,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1ftho30
Python,ryp: R inside Python,"Excited to release ryp, a Python package for running R code inside Python! 

[https://github.com/Wainberg/ryp](https://github.com/Wainberg/ryp)

ryp makes it a breeze to use R packages in your Python projects.

**What My Project Does**

ryp is a minimalist, powerful Python library for:

* running R code inside Python
* quickly transferring huge datasets between Python (NumPy/pandas/polars) and R without writing to disk
* interactively working in both languages at the same time

**Target Audience**

Data scientists and engineers, bioinformaticians, Python package developers, ...

**Comparison**

ryp is an alternative to the widely used¬†[rpy2](https://github.com/rpy2/rpy2)¬†library. Compared to rpy2, ryp provides:

* increased stability
* a much simpler API, with less of a learning curve
* interactive printouts of R variables that match what you'd see in R
* a full-featured R terminal inside Python for interactive work
* inline plotting in Jupyter notebooks (requires the¬†`svglite`¬†R package)
* much faster data conversion with¬†[Arrow](https://arrow.apache.org/)¬†(also provided by¬†[rpy2-arrow](https://github.com/rpy2/rpy2-arrow))
* support for¬†*every*¬†NumPy, pandas and polars data type representable in base R, no matter how obscure
* support for sparse arrays/matrices
* recursive conversion of containers like R lists, Python tuples/lists/dicts, and S3/S4/R6 objects
* full Windows support

ryp does the opposite of the¬†[reticulate](https://rstudio.github.io/reticulate)¬†R library, which runs Python inside R.",ryp_package,1ftuqhj,https://reddit.com/r/Python/comments/1ftuqhj/ryp_r_inside_python/,https://www.reddit.com/r/Python/comments/1ftuqhj/ryp_r_inside_python/,2024-10-01 18:06:35,43,0.84,43,0,23,0,0,False,False,True,False,False,Showcase,self,t3_1ftuqhj
Python,Compaqt - A new serializer!,"Hi everyone!

I'm currently working on a new serializer module, and wanted to try and get some feedback on it.



**What does Compaqt do?**

Compaqt is a serializer that encodes Python values into a bytes object, with the ability to convert it back to actual Python values. In short, it provides a straightforward way to serialize and deserialize data.

Some of its highlights:

* Compact data representation - hence the module name
* Minimal memory usage - using automatic, on-the-fly allocation tweaks
* A fast encoding/decoding process

Currently, the module only provides basic serialization. There are plans to support more in further updates. Some things I plan on adding soon:

* Custom datatype support - where you can create your own serialization methods
* More advanced method args - to make the serializer better based on your needs



**Who/what does it target?**

While Compaqt is a personal project, it can be useful for anyone needing data in byte format, such as:

* Data storage solutions that require serialization
* Developers looking for an efficient and easy-to-use encoding solution



**Difference compared to existing solutions**

Compared to other solutions, Compaqt:

* provides an even more compact encoding method
* is generally fast with serializing
* attempts to minimize memory usage instead of over-allocating



**Where can you find it?**

You can find the module on [*PyPI*](https://pypi.org/project/compaqt/).

The GitHub with further usage details can be found [*here*](https://github.com/svenboertjens/compaqt).



Thank you for reading! I'd love to hear if you have any feedback or questions.",glippygobbler,1ftszay,https://reddit.com/r/Python/comments/1ftszay/compaqt_a_new_serializer/,https://www.reddit.com/r/Python/comments/1ftszay/compaqt_a_new_serializer/,2024-10-01 16:55:29,1,0.67,1,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1ftszay
Python,Any state machine fans‚Äã out there?‚Äã Got any fun/awful stories?,"I first started to appreciate finite state machines about 15 years ago when I was creating a custom radio protocol for low speed long distance links. Nothing too fancy, but the protocol had retries and acknowledgements. Like a tiny TCP stack.

About 8 years ago I became a state machine nerd out of necessity at work. Sink or swim. Although it was hectic, it pushed me to create a very useful state machine tool.

# The frickin huge LCD GUI

My first project at a new company was very ambitious for a solo dev. In a short amount of time, I needed to create a custom user interface for a 2x20 character LCD that had a lot of different menu pages. 107 pages in total, arranged into different hierarchies. Some of the menus were calibration and setup wizards. Some showed live data. Some were interactive and allowed editing parameters. Each of those 107 pages also needed to support multiple languages (English, German, Russian, Spanish).

A previous developer (that quit before I joined) had tried a data driven menu approach. They defined the entire menu layout and page transitions in data. This made perfect sense for a while until the client started adding tricky requirements like ""if buttons UP, DOWN and BACK are held for 5 seconds while in sub menu1, show message 57 for 3 seconds, do XYZ and then transition to menu 6"". Or ""cycle between pages 33/34/35 every 5 seconds of inactivity"". A bunch of custom stuff like that. The data driven approach wasn't flexible enough and had many hacks that turned into a mess.

I decided to try using a more flexible state machine approach instead. I figured it could handle any client requirement. So I got busy. At around 20 states, my velocity started to slow. At around 35 states I had trouble keeping everything straight in my head and I still had a long way to go (85% of the project left). I had to start carefully maintaining a visual diagram of the state machine. This helped, but I still wasn't going to meet the deadline. Not good. This was my first project at the new company.

I asked about purchasing state machine software to help, but there wasn't a budget and would be a tough sell. The best commercial software (Stateflow) cost nearly half my salary! Anything more affordable was awful to use (dated GUI would regularly crash, a hundred mouse clicks to do something simple, ...). FML.

So one weekend (I was working a ton of hours), I tried something different. Instead of manually drawing my diagram while I read/wrote the implementation code, I took the diagram XML and started generating the code. `Visual Diagram --&gt; Code`. I had a working proof of concept in a couple days. It took more refinement to meet all my needs, but it turned out to be an absolute life saver. The end product (which the client loved) had over 300 states. It was one of the most complex projects I've ever worked on.

# Open sourcing the tool

Even though the tool was super rushed, myself and other developers found it very valuable for future work projects. I got management approval to address significant technical debt in the tool, but our workload never allowed me to actually work on it. This was understandable, but also frustrating. So 4 years ago I asked if I could open source the tool and work on it on my own time. Thankfully management approved! I started work on a complete rewrite soon after. My original tool only supported a single programming language, but I wanted to support as many as possible.

# StateSmith

Fast forward a few more years and I'm quite happy with the tool now called [StateSmith](https://github.com/StateSmith/StateSmith). It's gained some traction in the embedded community (500+ stars on [GitHub](https://github.com/StateSmith/StateSmith)), but I've recently started adding more languages. We now support 7 - Python, C, C++, JavaScript, TypeScript, C# and Java.

Python support in StateSmith is pretty new, but it passes an extensive automated test suite so I'm not too worried about bugs. I would, however, really appreciate feedback on features/config that would help generate more useful Python state machines.

## Comparison
As far as I know, StateSmith is unique in that it generates code **from** a diagram. This is super helpful for more complicated designs. Here's an example of a StateSmith draw.io diagram for controlling a [Mario video game character](https://github.com/StateSmith/StateSmith-examples/blob/main/mario-sm-3/README.md). You can style and organize them however you want.

Thanks for reading.

I hope you'll share some of your own state machine stories (good/bad, love/hate).

Adam",a-d-a-m-f-k,1ftndij,https://reddit.com/r/Python/comments/1ftndij/any_state_machine_fans_out_there_got_any_funawful/,https://www.reddit.com/r/Python/comments/1ftndij/any_state_machine_fans_out_there_got_any_funawful/,2024-10-01 12:54:51,62,0.92,62,0,17,0,0,False,False,True,False,False,Discussion,self,t3_1ftndij
Python,Real time RAG in Python,"A tutorial for those who are looking for an intro to RAG and want to implement it end-to-end in Python.

RAG involves several critical processes to ensure the efficient extraction, processing, and utilization of data. These processes include data extraction, data wrangling, chunking, embedding model application, setting up retrieval, query encoding, and LLM (Large Language Model) generation. Each step plays a vital role in creating a robust RAG system that can provide accurate and contextually relevant information. Each of these processes can be connected through the use of data pipelines. And my team at Bytewax wrote about such a pipeline 

https://bytewax.io/blog/building-real-time-rag-systems-with-python-bytewax",oli_k,1ftmh8a,https://reddit.com/r/Python/comments/1ftmh8a/real_time_rag_in_python/,https://www.reddit.com/r/Python/comments/1ftmh8a/real_time_rag_in_python/,2024-10-01 12:08:21,9,0.8,9,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1ftmh8a
Python,PyUiBuilder: The only Python GUI builder you'll ever need.,"Hi all,

Been working on a Python Drag n Drop UI Builder project for a while and wanted to share it with the community.

**You can check out the builder tool here:** [**https://pyuibuilder.pages.dev/**](https://pyuibuilder.pages.dev/)

**Github Link:** [**https://github.com/PaulleDemon/PyUIBuilder**](https://github.com/PaulleDemon/PyUIBuilder)

**What My Project Does?**

PyUIBuilder is a framework agnostic Drag and drop GUI builder for python. You can output the code in multiple UI library based on selection.

**Some of the features:**

While there are a lot of features, here are few you need to know.

* Framework agnostic - Can outputs code in multiple frameworks.
* Pre-built UI widgets for multiple frameworks
* **Plugins to support 3rd party UI libraries**
* Generates python code.
* Upload local assets.
* Support for layout managers such as Grid, Flex, absolute positioning
* Generates requirements.txt file when needed

**Supported frameworks/libraries**

Right now, two libraries are supported, other frameworks are work in progress

* Tkinter - Available
* CustomTkinter - Available
* Kivy - Coming soon
* PySide - Coming Soon

**Roadmap**

You can check out the roadmap for more details on what's coming [**Roadmap**](https://github.com/PaulleDemon/PyUIBuilder/blob/main/roadmap.md)

**Target Audience**:

* People who want to quickly build Python GUI
* People who are learning GUI development.
* People who want to learn how to make a GUI builder tool (learning resource)

**Comparison**¬†(A brief comparison explaining how it differs from existing alternatives.)

* Right now, most available tools are library/framework specific.
* Many try to give you code in xml instead of python making it harder to debug.
* Majority lack support for 3rd party UI libraries.

**-----**

I have tested it on Chrome, Firefox and Edge, I haven't tested it on safari (I don't have mac), however it should work fine.

I know, the title sounds ambitious, it's because, I have written an abstraction to allow me to develop the tool for multiple frameworks easily.

Here each widget is responsible for generating it's own code, this way I can support multiple frameworks as well as 3rd party UI library. The code generation engine is only responsible to resolve variable name conflicts and putting the code together along with other assets.

I have been working on this tool publicly, so if you want to see how it progressed from early days, you can check it out [**Build in public**](https://buildinpublic.pages.dev/).

If you have any question's feel free to ask, I'll answer it whenever I get time.

Have a great day :)",ArtleSa,1ftlhvy,https://reddit.com/r/Python/comments/1ftlhvy/pyuibuilder_the_only_python_gui_builder_youll/,https://www.reddit.com/r/Python/comments/1ftlhvy/pyuibuilder_the_only_python_gui_builder_youll/,2024-10-01 11:12:06,275,0.95,275,0,63,0,0,False,False,True,False,False,Showcase,self,t3_1ftlhvy
Python,Rant of the Day,"3 years ago I was working in tax when I got a taste for the potential of Python for problem solving. I got hooked and spent as much time as possible to understand Python for data analytics. I love using Python, idk but the feeling I get when a piece of code (written shitty) actually works....ahhh its amazing.   
Kinda like Frankenstein.... ""IT LIVESSSS!"" Basically i really enjoy creating and solving problems with it.

Fast forward 3 years, and I managed to get a position of Senior Manager on Data Management, thinking ah yes finally I get to work on the things I like.   
  
8 months in and I have YET to write a piece of code. Literally my entire time is spent replying to emails, fixing problems other people cause, having to deal with office drama, never ending meetings and top management seem to never be able to decide on anything. The amount of issues that come up on a daily basis is nuts and I never have time to sit down and be creative. Yesterday I lost my shit during a useless 4 hour meeting that could have been solved easily with a well structured email.

Do any of you go through this? ",Whiskey_JG,1ftl52n,https://reddit.com/r/Python/comments/1ftl52n/rant_of_the_day/,https://www.reddit.com/r/Python/comments/1ftl52n/rant_of_the_day/,2024-10-01 10:50:02,72,0.84,72,0,20,0,0,False,False,True,False,False,Discussion,self,t3_1ftl52n
Python,I developed a suite of Python Applications - There‚Äôs Something Here for Everyone! üòú,"I‚Äôve developed a collection of Python applications designed for those interested in the self-hosted world. These applications are versatile and can be run via Docker containers or as standalone scripts.

# What My Project Does

My suite of applications includes tools for book lovers, music enthusiasts, and film &amp; TV buffs. Here are some of them:

üìö **For Book Lovers:**

* [**eBookBuddy**](https://github.com/TheWicklowWolf/eBookBuddy): Discover new books based on your existing library. *(Requires Readarr)*
* [**ConvertBooks**](https://github.com/TheWicklowWolf/ConvertBooks): Easily convert books between formats.
* [**BookBounty**](https://github.com/TheWicklowWolf/BookBounty): Find missing books with ease. *(Requires Readarr)*

üéµ **For Music Enthusiasts:**

* [**Lidify**](https://github.com/TheWicklowWolf/Lidify): Discover new artists based on your existing library. *(Requires Lidarr)*
* [**Lidatube**](https://github.com/TheWicklowWolf/Lidatube): Find missing albums from your library. *(Requires Lidarr)*
* [**PlaylistDir**](https://github.com/TheWicklowWolf/PlaylistDir): Automatically generate custom playlists from folders.
* [**SpotTube**](https://github.com/TheWicklowWolf/SpotTube): Retrieve your favorite music from Spotify via YouTube.
* [**Syncify**](https://github.com/TheWicklowWolf/Syncify): Download Spotify or YouTube playlists (scheduled).

üé¨ **For Film &amp; TV Buffs:**

* [**RadaRec**](https://github.com/TheWicklowWolf/RadaRec): Discover new movies based on your existing library. *(Requires Radarr)*
* [**SonaShow**](https://github.com/TheWicklowWolf/SonaShow): Discover new TV shows based on your existing library. *(Requires Sonarr)*

üîç **Additional Tools:**

* [**Huntorr**](https://github.com/TheWicklowWolf/Huntorr): A torrent discovery tool that helps you find and add torrents to ***qBitTorrent***. *(Requires qBitTorrent)*
* [**ChannelTube**](https://github.com/TheWicklowWolf/ChannelTube): Sync and download content from YouTube channels.

# Target Audience

These applications are primarily aimed at users in the self-hosted community who want to enhance their media libraries.

# Comparison

My tools focus on integration with popular self-hosted services **Readarr**, **Lidarr**, **Sonarr** and **Radarr**, ensuring that you can manage your media collections seamlessly. Additionally, they offer the flexibility of deployment, allowing you to choose between Docker containers and standalone scripts based on your needs.


# Links

GitHub: [https://github.com/TheWicklowWolf](https://github.com/TheWicklowWolf).  
Usage Guide: [https://thewicklowwolf.github.io/](https://thewicklowwolf.github.io/)",TheWicklowWolf,1ftkppb,https://reddit.com/r/Python/comments/1ftkppb/i_developed_a_suite_of_python_applications_theres/,https://www.reddit.com/r/Python/comments/1ftkppb/i_developed_a_suite_of_python_applications_theres/,2024-10-01 10:21:30,39,0.81,39,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1ftkppb
Python,Ban Transparency from Tim Peters,"Tim has posted a summary of communications he had with the PSF directly prior to his recent 3-month suspension.

https://chrismcdonough.substack.com/p/ban-transparency-from-tim-peters",mcdonc,1ftbjt8,https://reddit.com/r/Python/comments/1ftbjt8/ban_transparency_from_tim_peters/,https://www.reddit.com/r/Python/comments/1ftbjt8/ban_transparency_from_tim_peters/,2024-10-01 00:48:26,144,0.87,144,0,116,0,0,False,False,True,False,False,News,self,t3_1ftbjt8
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1ftak55,https://reddit.com/r/Python/comments/1ftak55/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1ftak55/tuesday_daily_thread_advanced_questions/,2024-10-01 00:00:24,3,0.81,3,0,9,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1ftak55
Python,Stroke Width Transfor w/Parallel Processing,"Hey everyone!

I‚Äôm excited to share my latest project: Stroke Width Transform (SWT), implemented in Python and optimized with parallel processing for faster text detection in images. The Stroke Width Transform (SWT) algorithm was introduced by researchers from Microsoft in a 2010 paper by Boris Epshtein, Eyal Ofek, and Yonatan Wexler.

# Key Features:

* Efficient text detection using SWT.
* Parallel processing for improved performance.
* Easy to use and fully open source.

Check out the project on GitHub: [https://github.com/vrlelif/stroke-width-transform](https://github.com/vrlelif/stroke-width-transform) ‚≠ê If you find it useful, I‚Äôd love a star!

Feedbacks are welcome! 

# 1. What My Project Does:

The project implements the **Stroke Width Transform (SWT)** algorithm with enhancements, focusing on improving **text detection in natural images**. It adds **parallel processing** using Python's multiprocessing module to improve the algorithm‚Äôs performance significantly. The enhancements include modifications to improve noise reduction, more accurate text region detection, and overall faster execution by distributing tasks across multiple processors‚Äã.

# 2. Target Audience:

The project is geared towards researchers and developers working in **computer vision** and **text detection algorithms**, particularly those who need efficient, high-performance text detection in images. While it can be a part of a **production** system, it also serves as a foundational or experimental implementation for those studying **image processing** algorithms‚Äã.

# 3. Comparison:

Compared to existing SWT implementations, this project distinguishes itself by:

* Using **parallel processing** to increase the speed of the algorithm, especially on high-resolution images.
* Improving text detection accuracy by applying rules for **noise reduction** and **stroke length limitation**, which help filter out irrelevant image features that are often mistaken for text‚Äã.",Affectionate_Good790,1ft8xja,https://reddit.com/r/Python/comments/1ft8xja/stroke_width_transfor_wparallel_processing/,https://www.reddit.com/r/Python/comments/1ft8xja/stroke_width_transfor_wparallel_processing/,2024-09-30 22:45:15,7,0.89,7,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1ft8xja
Python,My Open-Source Tool for Instant Audio Transcription to Clipboard üéôÔ∏è‚úçÔ∏è,"Hey everyone,

So for couple days I've been working on a lightweight, open-source python desktop application that I'm excited to share with you all! It's called¬†**Voica**, and it allows you to record system audio and instantly transcribe it directly to your clipboard. I also found it useful for dictating speech into text. Only tested in on macOS, so in future release plan to make it multiplatform.

**What My Project Does**

* **Record System Audio:**¬†Capture any audio playing on your computer, whether it's from a video, podcast, webinar, mic or any other source.
* **Instant Transcription:**¬†Transcribe the recorded audio into text using OpenAI's Whisper model.
* **Clipboard Integration:**¬†The transcribed text is automatically copied to your clipboard for quick and easy pasting.
* **Custom Hotkeys:**¬†Start and stop recording with customizable keyboard shortcuts. (For now limited enum)
* **Model Selection:**¬†Choose from different Whisper models (`tiny`,¬†`base`,¬†`small`,¬†`medium`,¬†`large`) to balance speed and accuracy according to your needs.
* **Privacy-Focused:**¬†All processing is done locally on your machine‚Äîno audio data is sent to external servers.

**Target Audience**  
People who often use AI tools and need dictating.   
People who doing tech interviews/meetings notes and need real time transcription of system output to clipboard.

**Comparison**¬†

I did'n find any app with transcribing to clipboard feature.



* **Source code:**¬†[https://github.com/pantech48/voica](https://github.com/pantech48/voica)
* **Installation Instructions:**¬†Detailed steps are provided in the README to help you set up the app on your macOS system.
* **Requirements:**¬†You'll need Python 3.12 or higher and¬†[BlackHole](https://github.com/ExistentialAudio/BlackHole)¬†installed to capture system audio.

I'm looking forward to hearing your thoughts! Also this is my first time of sharing something with Tech community, so I am waiting for your feedback guys!",Pantech48,1ft7d5q,https://reddit.com/r/Python/comments/1ft7d5q/my_opensource_tool_for_instant_audio/,https://www.reddit.com/r/Python/comments/1ft7d5q/my_opensource_tool_for_instant_audio/,2024-09-30 21:36:21,6,0.72,6,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1ft7d5q
Python,Ultimate free python advanced course,"Our team is planning to launch new mini courses next week, but we're unsure of the best approach. We'd like your input:

Should we offer free courses to help junior Python developers transition to senior level? If so, what topics should be covered?

Or should we focus on mini courses centered around small projects?

",RevolutionaryAd8906,1ft5efv,https://reddit.com/r/Python/comments/1ft5efv/ultimate_free_python_advanced_course/,https://www.reddit.com/r/Python/comments/1ft5efv/ultimate_free_python_advanced_course/,2024-09-30 20:16:34,10,0.63,10,0,11,0,0,False,False,True,False,False,Discussion,self,t3_1ft5efv
Python,Tutorial on type hinting any matrix with Protocol (compatible with numpy and nested lists),"I went down a rabbit hole trying to find the perfect way to type hint a matrix. Here's what I learned. First, the naive approach:

    matrix3x3: list[list[int]] = [[1,2,3],[4,5,6],[7,8,9]]

There are two problems with this. The first is that list\[list\[int\]\] is a concrete type, and we'd like it to be abstract. As is, mypy would raise an error if we tried to do this:

    import numpy as np
    matrix3x3 = np.ndarray(shape=(3, 3), buffer=np.array([[1,2,3],[4,5,6],[7,8,9]])) # error

We *would* like to be able to do this though, because an NDArray shares all the relevant qualities of a matrix for our application.

The second problem is more subtle. `matrix3x3` is meant to always be 3x3, but Python's lists are dynamically resizable, which means the shape can be tampered with. Ideally, we'd like mypy to be able to raise an error before runtime if someone else later tries to write `matrix3x3.pop()` or `matrix3x3[0].append(something)`. This is not a problem in a language like Java, where Arrays are fixed-size.

There are three ways around these issues:

# 1. Switch to a statically-typed language.

This is the least preferable option, but something everyone should consider if they keep resisting duck typing. I still prefer duck typing at least for prototyping.

# 2. Modify the implementation.

This is certainly better, but not the best option. It's worth demonstrating how you could do this. For example, we can start with this:

    class FixedShapeMatrix:
      def __init__(rows: int, cols: int) -&gt; None:
        _matrix = [[0 for c in cols] for r in rows]

and continue defining the functionality of the `FixedShapeMatrix` object so that it has an immutable shape with mutable entries.

Another example is to just use numpy instead:

    import numpy as np
    from numpy import typing as npt
    
    matrix3x3: npt.NDArray[np.int64] = np.ndarray((3,3), buffer=np.array([[1,2,3],[4,5,6],[7,8,9]])

Both of these solutions suffer from the same problem: they require significant refactoring of the existing project. And even if you had the time, you will lose generality when you pick the `NDArray` or `FixedShapeMatrix` implementations. Ideally, you want `matrix3x3` to be *structurally typed* such that *any* of these implementations can be assigned to it. When you pigeonhole your `matrix3x3` type, you lose the Abstraction of OOP. Thankfully, with Protocol, there's another way.

# 3. Structural subtyping.

Note: I'm going to be using Python 3.12 typing notation. As a quick reference, this is code in 3.11:

    from typing import TypeVar, Generic
    
    T = TypeVar('T', bound=int|float)
    
    
    class MyClass(Generic[T]):
    
      def Duplicates(self, val: T) -&gt; list[T]:
        return [val] * 2

And this is the same code in 3.12 (no imports needed):

    class MyClass[T: int|float]:
    
      def Duplicates(self, val: T) -&gt; list[T]:
        return [val] * 2

So, let's finally try to make an abstract matrix type directly. I'm going to show you how I iteratively figured it out. If you're already a little familiar with Protocol, you might have guessed this:

    type Matrix[T] = Sequence[Sequence[T]]

But the problem is that Sequence is read-only. We're going to have to create our own type from scratch. The best way to start is to realize which methods we really need from the matrix:

1. indexing (read + write)
2. iterable
3. sized

The first attempt might be this:

    from typing import Protocol
    
    
    class Matrix(Protocol):
    
      def __getitem__(): ...
    
      def __setitem__(): ...
    
      def __len__(): ...
    
      def __iter__(): ...

But there are multiple problems with this. The first is that we need to explicitly annotate the types of each of these functions, or else our matrix won't be statically hinted.

    from typing import Protocol, Iterator
    
    
    class Matrix(Protocol):
    
      def __getitem__(self, index: int) -&gt; int | Matrix: ...
    
      def __setitem__(self, index: int, val: int | Matrix) -&gt; None: ...
    
      def __len__(self) -&gt; int: ...
    
      def __iter__(self) -&gt; Iterator[int | Matrix]: ...

The idea here is that `matrix3x3[0][0]` is an int, while the type of `matrix3x3[0]` is recursively a matrix that contains ints. But this doesn't protect against `matrix3x3: Matrix = [1,2,3,[4,5,6],7,8,9]` , which is not a matrix.

Here we realize that we should handle the internal rows as their own type.

    from typing import Protocol, Iterator
    
    
    class MatrixRow(Protocol):
    
      def __getitem__(self, index: int) -&gt; int: ...
    
      def __setitem__(self, index: int, value: int) -&gt; None: ...
    
      def __len__(self) -&gt; int: ...
    
      def __iter__(self) -&gt; Iterator[int]: ...
    
    
    class Matrix(Protocol):
    
      def __getitem__(self, index: int) -&gt; MatrixRow: ...
    
      def __setitem__(self, index: int, value: MatrixRow) -&gt; None: ...
    
      def __len__(self) -&gt; int: ...
    
      def __iter__(self) -&gt; Iterator[MatrixRow]: ...

Now both the matrix and its rows are iterable, sized, and have accessible and mutable indexes.

    matrix3x3: Matrix = [[1,2,3],[4,5,6],[7,8,9]] # good
    matrix3x3.append([10,11,12]) # error - good!
    matrix3x3[0][2] = 10 # good
    matrix3x3[0][0] += 1 # good
    matrix3x3[1].append(7) # error - good!

There's just one bug though. See if you can find it first:

&gt;!matrix3x3\[1\] = \[4,5,6,7\] # no error - bad!!&lt;

&gt;!The solution is we need to remove \_\_setitem\_\_ from Matrix. We will still be able to modify the elements of any MatrixRow without it. Bonus points if you understand why (hint: references).!&lt;

So let's go ahead and do that, and as a final touch, let's make it so that the matrix values all must have the same type. To do this, we enforce a generic type that supports integer operations (int, float, np.int32, np.float64, etc). Here's how I did that:

    from typing import Protocol, Iterator, SupportsInt
    
    
    class MatrixRow[T: SupportsInt](Protocol):
    
      def __getitem__(self, index: int) -&gt; T: ...
    
      def __setitem__(self, index: int, value: T) -&gt; None: ...
    
      def __len__(self) -&gt; int: ...
    
      def __iter__(self) -&gt; Iterator[T]: ...
    
    
    class Matrix[S: SupportsInt](Protocol):
    
      def __getitem__(self, index: int) -&gt; MatrixRow[S]: ...
    
      def __len__(self) -&gt; int: ...
    
      def __iter__(self) -&gt; Iterator[MatrixRow[S]]: ...

Now all of these work!

    matrix3x3: Matrix[int]
    matrix3x3 = [[1,2,3],[4,5,6],[7,8,9]]
    matrix3x3 = np.array([[1,2,3],[4,5,6],[7,8,9]])
    matrix3x3 = np.ndarray(shape=(3, 3), buffer=np.array([[1,2,3],[4,5,6],[7,8,9]]))
    for row in matrix3x3:
      for val in row:
        print(val)
    print(len(matrix3x3), len(matrix3x3[0]))

And all of these raise errors!

    matrix3x3.append([10,11,12])
    matrix3x3[2].append(10)
    matrix3x3.pop()
    matrix3x3[0].pop()
    matrix3x3[0][0] = ""one""

And even if some of those implementations are intrinsically mutable in size, our type system lets mypy catch any bug where `matrix3x3` is reshaped.  Unfortunately, there's no way to prevent someone from assigning a 4x7 matrix to `matrix3x3`, but at least it's named clearly. Maybe someday there will be Python support for fixed-size lists as types.",AngelaTarantula2,1ft3yar,https://reddit.com/r/Python/comments/1ft3yar/tutorial_on_type_hinting_any_matrix_with_protocol/,https://www.reddit.com/r/Python/comments/1ft3yar/tutorial_on_type_hinting_any_matrix_with_protocol/,2024-09-30 19:16:19,11,0.87,11,0,13,0,0,False,False,True,False,False,Tutorial,self,t3_1ft3yar
Python,Introducing ZipNN: A Python Library for lossless Compressing tailored for AI Models,"**What My Project Does:**

ZipNN is an open-source Python library that enables lossless compression of AI models, **reducing their size by 33% with BF16 format (yes, also Llama3.2)**. Effectively cutting down download times and easing the load on servers. The library integrates smoothly with Hugging Face, with just adding a single line of code. The decompression is fast and there are already compressed Models on Hugging Face that you can try right away and save time. 

**Target Audience:**

ZipNN is developed for **AI researchers, data scientists, and software developers** who manage large neural network models. It is particularly useful for those seeking efficient ways to handle model size constraints in both academic and production environments. The library aims to facilitate better resource management without sacrificing the accuracy of AI models.

**Comparison with Existing Alternatives:**

**ZipNN is tailored for AI models (the NN stands for neural network)** and gives both a better compression ratio and speed.  
For example, with BF16, ZSTD (the current state-of-the-art) saves 21%, while ZipNN saves 33%, and compression and decompression are x1.5 faster.  


**Additional Resources and Examples:**

* **GitHub Repository:** [Visit the ZipNN GitHub Repository](https://github.com/zipnn/zipnn)
* **Kaggle Notebook ‚Äì Practical Example:** [Using ZipNN with Llama-3.2 on Kaggle](https://www.kaggle.com/code/royleibovitz/huggingface-llama-3-2-example)
* **Example Directory:** For more use cases and implementation details, browse our [Examples Directory](https://github.com/zipnn/zipnn/tree/main/examples).",Candid_Raccoon2102,1fsxvcr,https://reddit.com/r/Python/comments/1fsxvcr/introducing_zipnn_a_python_library_for_lossless/,https://www.reddit.com/r/Python/comments/1fsxvcr/introducing_zipnn_a_python_library_for_lossless/,2024-09-30 15:10:36,31,0.86,31,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1fsxvcr
Python,(Almost) Pure Python Webapp,"What My Project Does

It's a small project to see how far I can go building a dynamic web application without touching JS, using mainly htmx and Flask. It's an exploratory project to figure out the capabilities and limitations of htmx in building web applications. While it's not production-grade, I'm quite satisfied with how the project turned out, as I have learned a great deal about htmx from it.

[https://github.com/hanstjua/python-messaging](https://github.com/hanstjua/python-messaging)

Target Audience

It's not meant to be used in production.

Comparisons

I don't see any point comparing it with other projects as it's just a little toy project.",Warm-Championship753,1fswzlg,https://reddit.com/r/Python/comments/1fswzlg/almost_pure_python_webapp/,https://www.reddit.com/r/Python/comments/1fswzlg/almost_pure_python_webapp/,2024-09-30 14:33:04,58,0.85,58,0,28,0,0,False,False,True,False,False,Showcase,self,t3_1fswzlg
Python,[Release] secure.py ‚Äì Simplify HTTP Security Headers in Python Web Frameworks (Major Update),"Hello Pythonistas!

I'm excited to announce a major update to **secure.py**, a Python library that makes adding essential HTTP security headers to your web applications easier than ever. Whether you're using Flask, Django, FastAPI, or another framework, **secure.py** provides a unified API to enhance your app's security.

---

### **What My Project Does**

**secure.py** helps developers effortlessly add HTTP security headers to their Python web applications. Security headers like Content-Security-Policy (CSP), HSTS, and X-Frame-Options are crucial for protecting against threats like cross-site scripting (XSS), clickjacking, and other attacks.

Manually configuring these headers can be tedious and error-prone, especially across different frameworks. **secure.py** streamlines this process by providing:

- **Quick Security Presets**: Apply BASIC or STRICT security configurations with a single line of code.
- **Full Customization**: Control headers like CSP, HSTS, X-Frame-Options, Referrer-Policy, and more.
- **Multi-Framework Support**: Works seamlessly with both synchronous and asynchronous frameworks.
- **Modern Pythonic Design**: Utilizes Python 3.10+ features for cleaner and more efficient code.
- **No External Dependencies**: Lightweight and easy to include in any project.
- **Best Practice Compliance**: Follows recommendations from the OWASP Secure Headers Project and MDN Web Docs.

---

### **Target Audience**

This library is intended for Python developers who are building web applications and want to enhance their security without the hassle of manually managing HTTP security headers. Whether you're working on a personal project, a startup, or a large-scale production application, **secure.py** can help ensure your app adheres to security best practices.

---

### **Comparison with Existing Alternatives**

While some frameworks offer middleware or extensions to manage security headers, they often:

- **Lack Flexibility**: Limited customization options for different security needs.
- **Are Framework-Specific**: Require different implementations for each framework you use.
- **Don't Leverage Modern Python Features**: Many don't utilize the latest Python enhancements for cleaner code.

**secure.py** differs by:

- **Unified API Across Frameworks**: Provides a consistent interface for multiple frameworks like Flask, Django, FastAPI, Sanic, and more.
- **Extensibility and Customization**: Offers both preset configurations and the ability to fine-tune individual headers.
- **Modern Python Features**: Leverages Python 3.10+ features such as structural pattern matching and enhanced type hinting.
- **No External Dependencies**: Ensures a lightweight addition to your project without unnecessary bloat.

---

### **Example Usage**

**Flask Integration:**

```python
from flask import Flask, Response
from secure import Secure

app = Flask(__name__)
secure_headers = Secure.with_default_headers()

@app.after_request
def add_security_headers(response: Response):
    secure_headers.set_headers(response)
    return response
    
# Define your routes and views below
```

**Django Middleware:**

```python
from django.http import HttpResponse
from secure import Secure

secure_headers = Secure.with_default_headers()

def set_secure_headers(get_response):
    def middleware(request):
        response = get_response(request)
        secure_headers.set_headers(response)
        return response
    return middleware

# Add 'set_secure_headers' to your MIDDLEWARE list in settings.py
```

**FastAPI Middleware:**

```python
from fastapi import FastAPI

from secure import Secure

app = FastAPI()
secure_headers = Secure.with_default_headers()


@app.middleware(""http"")
async def add_security_headers(request, call_next):
    response = await call_next(request)
    await secure_headers.set_headers_async(response)
    return response

# Define your endpoints below
```

---

### **Requirements**

- **Python 3.10** or higher

---

**GitHub Repository:** [https://github.com/TypeError/secure](https://github.com/TypeError/secure)

---

I'd love to hear your feedback! Try it out in your projects and let me know how it works for you or if there are features you'd like to see.

Thanks, and happy coding!",Nilvalues,1fsrxts,https://reddit.com/r/Python/comments/1fsrxts/release_securepy_simplify_http_security_headers/,https://www.reddit.com/r/Python/comments/1fsrxts/release_securepy_simplify_http_security_headers/,2024-09-30 10:03:40,10,0.81,10,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1fsrxts
Python,"Paramorator ‚Äì Simplify Parametrized Decorators, Make Type Checkers Happy ‚úÖ","In almost every project I work on I end up needing to create parametrized decorators at some point. That is, a decorator that can accept arguments before you tack it into the function or class you want to wrap. For example:

    @database_session
    def get_data(session: Session, key: str) -&gt; dict[str, Any]:
        ...

    @database_session(privileges=""read_write"")
    def save_data(session: Session, data: dict[str, Any]) -&gt; None:
        ...    

It's not exactly rocket science, but to do this in a way that will make type checkers and IDEs happy can be a bit of a pain. [Paramorator](https://github.com/rmorshea/paramorator) is a dead simple (&lt;100 line) library I created that makes that process a little easier. Here's how you could use it to implement the `database_session` decorator above:

    from functools import wraps
    from typing import Callable, Concatenate, Literal, ParamSpec, TypeVar

    from paramorator import paramorator
    from sqlalchemy.orm import Session

    P = ParamSpec(""P"")
    R = TypeVar(""R"")


    @paramorator
    def database_session(
        func: Callable[Concatenate[Session, P], R],
        privileges: Literal[""read_only"", ""read_write""] = ""read_only"",
    ) -&gt; Callable[P, R]:

        @wraps(func)
        def wrapper(*args: P.args, **kwargs: P.kwargs) -&gt; R:
            with (ro_session() if privileges == ""read_only"" else rw_session()) as session:
                return func(session, *args, **kwargs)

        return wrapper

For comparison, here's how you would do the same thing without [Paramorator](https://github.com/rmorshea/paramorator):

    from functools import wraps
    from typing import Callable, Concatenate, Literal, ParamSpec, TypeVar, overload

    from sqlalchemy.orm import Session

    P = ParamSpec(""P"")
    R = TypeVar(""R"")


    @overload
    def database_session(
        func: None = ...,
        /,
        privileges: Literal[""read_only"", ""read_write""] = ...,
    ) -&gt; Callable[[Callable[Concatenate[Session, P], R]], Callable[P, R]]: ...


    @overload
    def database_session(
        func: Callable[Concatenate[Session, P], R],
        /,
        privileges: Literal[""read_only"", ""read_write""] = ...,
    ) -&gt; Callable[P, R]: ...


    def database_session(
        func: Callable[Concatenate[Session, P], R] | None = None,
        /,
        privileges: Literal[""read_only"", ""read_write""] = ""read_only"",
    ) -&gt; Callable[P, R] | Callable[[Callable[Concatenate[Session, P], R]], Callable[P, R]]:
        if func is None:
            return lambda func: database_session(func, privileges=privileges)

        @wraps(func)
        def wrapper(*args: P.args, **kwargs: P.kwargs) -&gt; R:
            with (ro_session() if privileges == ""read_only"" else rw_session()) as session:
                return func(session, *args, **kwargs)

        return wrapper

Ultimately [Paramorator](https://github.com/rmorshea/paramorator) let's you focus on reading and writing the bits that actually matter.",rmorshea,1fsqybd,https://reddit.com/r/Python/comments/1fsqybd/paramorator_simplify_parametrized_decorators_make/,https://www.reddit.com/r/Python/comments/1fsqybd/paramorator_simplify_parametrized_decorators_make/,2024-09-30 08:48:44,19,0.84,19,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1fsqybd
Python,deltabase: manage delta tables in both local and cloud environments with ease,"**What My Project Does:**¬† 

DeltaBase is a lightweight, comprehensive solution for managing Delta Tables in both local and cloud environments. Built on the high-performance frameworks [**polars**](https://github.com/pola-rs/polars) and [**deltalake**](https://github.com/delta-io/delta-rs), DeltaBase streamlines data operations with features like upsert, delete, commit, and version control. Designed for data engineers, analysts, and developers, it ensures data consistency, efficient versioning, and seamless integration into your workflows.

Here is an [Example Notebook](https://github.com/uname-n/deltabase/blob/master/examples/magic.ipynb) using DeltaBase to explore some Magic The Gathering data.

**Target Audience:**¬†data engineers, analysts, and developers

**Comparison:** fits somewhere inbetween using polars and deltalake directly and databricks

[https://github.com/uname-n/deltabase](https://github.com/uname-n/deltabase)",uname-n,1fsjqpf,https://reddit.com/r/Python/comments/1fsjqpf/deltabase_manage_delta_tables_in_both_local_and/,https://www.reddit.com/r/Python/comments/1fsjqpf/deltabase_manage_delta_tables_in_both_local_and/,2024-09-30 01:07:55,15,0.94,15,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1fsjqpf
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1fsif9y,https://reddit.com/r/Python/comments/1fsif9y/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1fsif9y/monday_daily_thread_project_ideas/,2024-09-30 00:00:09,5,0.86,5,0,2,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fsif9y
Python,How does sleep work under the hood in python,"I was curious how sleep works under the hood? it accurate always?

Can it sleep less than the seconds specified? Can it sleep more than specified?

How is it implemented?

[https://coderquill.bearblog.dev/beyond-the-pause-exploring-the-inner-workings-of-pythons-sleep/](https://coderquill.bearblog.dev/beyond-the-pause-exploring-the-inner-workings-of-pythons-sleep/)",curious-dev199,1frry07,https://reddit.com/r/Python/comments/1frry07/how_does_sleep_work_under_the_hood_in_python/,https://www.reddit.com/r/Python/comments/1frry07/how_does_sleep_work_under_the_hood_in_python/,2024-09-29 00:14:58,0,0.47,0,0,10,0,0,False,False,True,False,False,Resource,self,t3_1frry07
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1frro25,https://reddit.com/r/Python/comments/1frro25/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1frro25/sunday_daily_thread_whats_everyone_working_on/,2024-09-29 00:00:18,8,0.84,8,0,19,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1frro25
Python,Learning a language other than Python?,"I‚Äôve been working mostly with Python for backend development (Django) for that past three years. I love Python and every now and then I learn something new about it that makes it even better to be working in Python. However, I get the feeling every now and then that because Python abstracts a lot of stuff, I might improve my overall understanding of computers and programming if I learn a language that would require dealing with more complex issues (garbage collection, static typing, etc)

Is that the case or am I just overthinking things?",pedrotpi,1fribvi,https://reddit.com/r/Python/comments/1fribvi/learning_a_language_other_than_python/,https://www.reddit.com/r/Python/comments/1fribvi/learning_a_language_other_than_python/,2024-09-28 16:38:04,125,0.88,125,0,154,0,0,False,False,True,False,False,Discussion,self,t3_1fribvi
Python,Join the Bot Battle: Create Your Own!,"Hey everyone!

I wanted to share a fun project I‚Äôve been working on involving bots that play a game where they can choose to either share or steal. The rules are simple: if both players share, they each get 10 points; if both steal, they each get 0; and if one shares while the other steals, the stealer gets 20 points.

I've implemented a few example bots, including one that always steals and another that always shares. But I encourage all of you to create your own bots with unique strategies! You can modify their behavior based on past choices, implement more complex decision-making algorithms, or even create entirely new strategies. The possibilities are endless!

If you're interested, I‚Äôd be happy to share the code and discuss ideas for bot strategies. Let‚Äôs see who can create the most cunning bot!

Happy coding!

below here is a list of some example bots

Cooly:

    class Bot:
    ¬† ¬† #1 steal 
    ¬† ¬† #0 split
    ¬† ¬† def __init__(self, name):
    ¬† ¬† ¬† ¬† self.name = name
    ¬† ¬† ¬† ¬† self.score = 0
    ¬† ¬† ¬† ¬† self.history = []
    ¬† ¬† ¬† ¬† self.times_opponent_stole = 0 ¬†# Instance variable
    
    ¬† ¬† def choose(self, current_round, prev_round, prev_opponent_choice):
    ¬† ¬† ¬† ¬† if prev_opponent_choice == 1:
    ¬† ¬† ¬† ¬† ¬† ¬† self.times_opponent_stole += 1 ¬†
    ¬† ¬† ¬† ¬† if self.times_opponent_stole &gt;= 2:
    ¬† ¬† ¬† ¬† ¬† ¬† return 1
    ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† return 0

Copy\_cat:

    class Bot:
    ¬† ¬† #1 steal 
    ¬† ¬† #0 split
    ¬† ¬† def __init__(self, name):
    ¬† ¬† ¬† ¬† self.name = name
    ¬† ¬† ¬† ¬† self.score = 0
    ¬† ¬† ¬† ¬† self.history = []
    
    ¬† ¬† def choose(self, current_round, prev_round, prev_opponent_choice):
    ¬† ¬† ¬† ¬† if prev_opponent_choice != None:
    ¬† ¬† ¬† ¬† ¬† ¬† return prev_opponent_choice
    ¬† ¬† ¬† ¬† else :
    ¬† ¬† ¬† ¬† ¬† ¬† return 1

Smarty:

    class Bot:
    ¬† ¬† #1 steal 
    ¬† ¬† #0 split
    ¬† ¬† def __init__(self, name):
    ¬† ¬† ¬† ¬† self.name = name
    ¬† ¬† ¬† ¬† self.score = 0
    ¬† ¬† ¬† ¬† self.history = []
    ¬† ¬† ¬† ¬† self.times_opponent_split = 0
    
    ¬† ¬† def choose(self, current_round, prev_round, prev_opponent_choice):
    ¬† ¬† ¬† ¬† if prev_opponent_choice == 0:
    ¬† ¬† ¬† ¬† ¬† ¬† self.times_opponent_split += 1 ¬†
    ¬† ¬† ¬† ¬† if current_round &lt;= 2:
    ¬† ¬† ¬† ¬† ¬† ¬† return 0
    ¬† ¬† ¬† ¬† elif current_round == self.times_opponent_split:
    ¬† ¬† ¬† ¬† ¬† ¬† if current_round &lt;= 6:
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† return 0
    ¬† ¬† ¬† ¬† ¬† ¬† else :
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† return 1
    ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† return 1

Here is the github repo with all the bots:

[https://github.com/SpikeyLP/Bots](https://github.com/SpikeyLP/Bots)",Spike-LP,1frh5u8,https://reddit.com/r/Python/comments/1frh5u8/join_the_bot_battle_create_your_own/,https://www.reddit.com/r/Python/comments/1frh5u8/join_the_bot_battle_create_your_own/,2024-09-28 15:45:33,16,0.77,16,0,15,0,0,False,False,True,False,False,Discussion,self,t3_1frh5u8
Python,Join the Bot Battle: Create Your Own!,"Hey everyone!

I wanted to share a fun project I‚Äôve been working on involving bots that play a game where they can choose to either share or steal. The rules are simple: if both players share, they each get 10 points; if both steal, they each get 0; and if one shares while the other steals, the stealer gets 20 points.

I've implemented a few example bots, including one that always steals and another that always shares. But I encourage all of you to create your own bots with unique strategies! You can modify their behavior based on past choices, implement more complex decision-making algorithms, or even create entirely new strategies. The possibilities are endless!

If you're interested, I‚Äôd be happy to share the code and discuss ideas for bot strategies. Let‚Äôs see who can create the most cunning bot!

Happy coding!

below here is a list of some example bots



Randy:

    class Bot:
    ¬† ¬† #1 steal 
    ¬† ¬† #0 split
    ¬† ¬† def __init__(self, name):
    ¬† ¬† ¬† ¬† self.name = name
    ¬† ¬† ¬† ¬† self.score = 0
    ¬† ¬† ¬† ¬† self.history = []
    
    ¬† ¬† def choose(self, current_round, prev_round, prev_opponent_choice):
    ¬† ¬† ¬† ¬† if current_round % 2 == 1:
    ¬† ¬† ¬† ¬† ¬† ¬† return 0
    ¬† ¬† ¬† ¬† else:
    ¬† 
    ¬† ¬† ¬† ¬† ¬† return 1
    

Copy\_cat:

    class Bot:
    ¬† ¬† #1 steal 
    ¬† ¬† #0 split
    ¬† ¬† def __init__(self, name):
    ¬† ¬† ¬† ¬† self.name = name
    ¬† ¬† ¬† ¬† self.score = 0
    ¬† ¬† ¬† ¬† self.history = []
    
    ¬† ¬† def choose(self, current_round, prev_round, prev_opponent_choice):
    ¬† ¬† ¬† ¬† if prev_opponent_choice != None:
    ¬† ¬† ¬† ¬† ¬† ¬† return prev_opponent_choice
    ¬† ¬† ¬† ¬† else :
    ¬† ¬† ¬† ¬† ¬† ¬† return 1
    
    

Cooly:

    class Bot:
    ¬† ¬† #1 steal 
    ¬† ¬† #0 split
    ¬† ¬† def __init__(self, name):
    ¬† ¬† ¬† ¬† self.name = name
    ¬† ¬† ¬† ¬† self.score = 0
    ¬† ¬† ¬† ¬† self.history = []
    ¬† ¬† ¬† ¬† self.times_opponent_stole = 0 ¬†# Instance variable
    
    ¬† ¬† def choose(self, current_round, prev_round, prev_opponent_choice):
    ¬† ¬† ¬† ¬† if prev_opponent_choice == 1:
    ¬† ¬† ¬† ¬† ¬† ¬† self.times_opponent_stole += 1 ¬†
    ¬† ¬† ¬† ¬† if self.times_opponent_stole &gt;= 2:
    ¬† ¬† ¬† ¬† ¬† ¬† return 1
    ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† return 0
    

  
",Spike-LP,1frfor2,https://reddit.com/r/Python/comments/1frfor2/join_the_bot_battle_create_your_own/,https://www.reddit.com/r/Python/comments/1frfor2/join_the_bot_battle_create_your_own/,2024-09-28 14:37:32,3,0.56,3,0,0,0,0,False,False,True,False,False,Discussion,self,t3_1frfor2
Python,"PeepDB v0.1.4 - Support for MongoDB and SQLite added , GUI next time","# What My Project Does

I made a post a while ago about PeepDB. For people who don't know what the project is about, it is a CLI tool built in Python and my goal is to make it the easiest and fastest self hosted tool to view tables and data across multiple database types. I also want to make it a Python library so it can be used inside python scripts.¬†**Up until recently the project supported MySQL, MariaDB and Postgres databases.**

# Target Audience (e.g., Is it meant for production, just a toy project, etc.)

peepDB is aimed at developers debugging database-driven applications, DBAs performing quick checks or audits, data analysts exploring table structures, and those learning about databases who want an easy way to explore data. It's suitable for use in both development and production environments

# Comparison

peepDB distinguishes itself from alternatives by focusing solely on quick table viewing, supporting multiple databases out-of-the-box. It requires no SQL knowledge to use, has a minimal footprint compared to larger database management tools

# What was added in this release

Because of popular demand¬†**support for MongoDB databases and SQLite**, as well as enhanced security storage for passwords (not officially certified) and also¬†**the ability to switch between showing numbers in scientific form and normal form**.

# Next Steps

Support for Oracle and Redis and also support firebase and of course the beloved open-source supabase.

**Also a GUI that would open in your local browser**¬†with a command like¬†`peepdb gui`

# Collaboration

As always¬†**we are open to new collaborators**:

[https://github.com/PeepDB-dev/peepdb](https://github.com/PeepDB-dev/peepdb)",_twelvechess,1frffq2,https://reddit.com/r/Python/comments/1frffq2/peepdb_v014_support_for_mongodb_and_sqlite_added/,https://www.reddit.com/r/Python/comments/1frffq2/peepdb_v014_support_for_mongodb_and_sqlite_added/,2024-09-28 14:25:33,42,0.96,42,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1frffq2
Python,Probabilistic: A Python Library for Randomized Function Execution,"**What My Project Does**

Probabilistic is a Python library designed to facilitate the probabilistic execution of functions and the analysis of their outcome distributions. Whether you're simulating uncertain events, performing randomized experiments, or simply adding an element of chance to your applications, Probabilistic provides a straightforward and flexible toolkit to meet your needs.

**Comparison**

While you can achieve similar functionality using¬†`if`¬†statements to control function execution probabilities, this approach quickly becomes cumbersome as the number of functions grows. Probabilistic streamlines this process by offering:

* Decorators for Conditional Execution:¬†Easily control whether a function executes based on specified probabilities with simple decorators.
* Batch Execution:¬†Utilize the¬†execute¬†function to bulk execute multiple functions independently, each with its own probability.

Upcoming Features:Conditional Probability-Based Execution, Mutual Exclusivity Execution, Dependent Function Execution, Probability Chains Support. These features will simplify complex probabilistic setups that would otherwise be confusing and error-prone when implemented from scratch.

**Source**

Check out the source code and detailed documentation on GitHub:¬†[https://github.com/r-kataria/Probabilistic](https://github.com/r-kataria/Probabilistic)

If you like the idea, please consider giving it a star on GitHub! ‚≠ê

Happy Probabilistic Coding üé≤üêç!

P.S. This is my first open-source project. I'm very excited to be sharing this here and would love your feedback and contributions!",r-kataria,1frbtjs,https://reddit.com/r/Python/comments/1frbtjs/probabilistic_a_python_library_for_randomized/,https://www.reddit.com/r/Python/comments/1frbtjs/probabilistic_a_python_library_for_randomized/,2024-09-28 11:02:00,32,0.96,32,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1frbtjs
Python,WTF is ASGI and WSGI in python apps? - A writeup,"I‚Äôve been working on Python-based backend development for about three years now in various forms. I primarily use Django and FastAPI, although I initially started with Flask. However, during my backend work, I frequently encountered the terms ASGI and WSGI. For example, one of my Django deployment scripts included references to¬†`asgi_app`¬†and¬†`wsgi_app`, and used gunicorn to deploy these apps. Although I initially dismissed these terms as implementation details but now got some time to go deeper. Here is a writeup:-

[https://samagra.me/wtf/2024/09/27/gateway-interfaces.html](https://samagra.me/wtf/2024/09/27/gateway-interfaces.html)

Edit TLDR:

ASGI and WSGI are protocols for communication between web servers and Python web applications. ASGI is newer, asynchronous, and more efficient for handling multiple requests simultaneously. WSGI is older, synchronous, and processes requests one at a time. The post explains their differences and provides example implementations of echo servers using both interfaces.",tempNull,1fr59e2,https://reddit.com/r/Python/comments/1fr59e2/wtf_is_asgi_and_wsgi_in_python_apps_a_writeup/,https://www.reddit.com/r/Python/comments/1fr59e2/wtf_is_asgi_and_wsgi_in_python_apps_a_writeup/,2024-09-28 03:16:48,158,0.93,158,0,14,0,0,False,False,True,False,False,Resource,self,t3_1fr59e2
Python,Django ninja aio crud - Rest Framework,"Django ninja aio crud Is a rest framework based on Django ninja. It comes out from the purpose of create class based views and async CRUD operations dynamically.

Check It on [GitHub](https://github.com/caspel26/django-ninja-aio-crud)

Check It on
[Pypi](https://pypi.org/project/django-ninja-aio-crud/)

What The Project Does

Django ninja aio crud make you able to code fast async CRUD operations and easier than base Django ninja. It generates runtime model schemas for crud, has support for async pagination and support class based view. Built-in classes for code views are APIView (for class based views) and APIViewSet for async CRUD views. It has also a built-in JWT authentication class which uses joserfc package.

For more Info and usage check README on GitHub repo.

Comparison

Django ninja make you able to code function based views.
Django ninja aio crud make you able to code class based views.

Django ninja Is not recommended for large project which have a lot of models due to necessity to hard code CRUDs
Django ninja aio crud is recommended for large project because makes CRUDs takes no time and zero repetitions.

Django ninja has not built in async jwt auth class.
Django ninja aio crud has built in async jwt auth class.

Django ninja does not resolve automatically reverse relations and whole relation payload into schemas. Especially in async views.
Django ninja aio crud resolve automatically reverse relations and relations into CRUDs' schema and does It at runtime. It uses async views.

Target Audience

Django ninja aio crud is designed for anyone who want to code Rest APIs faster and cleaner using Django's ORM.",peppe2612,1fr1z92,https://reddit.com/r/Python/comments/1fr1z92/django_ninja_aio_crud_rest_framework/,https://www.reddit.com/r/Python/comments/1fr1z92/django_ninja_aio_crud_rest_framework/,2024-09-28 00:12:49,10,0.73,10,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1fr1z92
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1fr1qjk,https://reddit.com/r/Python/comments/1fr1qjk/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1fr1qjk/saturday_daily_thread_resource_request_and/,2024-09-28 00:00:13,5,0.86,5,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fr1qjk
Python,The Riccardo (Fourier) transform,"Tonight I decided to have some fun my way after sleepless nights spent putting an app into production on time. And nothing, I'm so stunned that I don't even remember why a few hours ago I started trying to make my own Fourier transform without any in-depth mathematical knowledge on the matter, but since the result is apparently remarkable, at least with series of simple numbers, I share it.

In practice it works like this, in a way similar to the various FFTs: you take a frequency, you try various phases, you see which of these sinusoids if subtracted have the lowest peaks and then you do the same procedure with the amplitude. Subtract the obtained sinusoid from the given series of numbers and start again by doubling the frequency (if you set 2, as by default, to the doubling index). The characteristic is that you can start from the frequency you want and deepen the frequencies as many times as you want, regardless of the size of the given array. An obvious limitation is that the way the code is done (look at the find\_best\_amplitude function), right now, it doesn't work for frequencies that have an amplitude greater than 2.

I uploaded the code to GitHub: [https://github.com/cekkr/riccardo\_transform](https://github.com/cekkr/riccardo_transform)

This is an example use:

    length = 100
    refPi = np.pi / (length / 2)
    data = [np.sin(refPi * x) + np.sin((refPi * x * 2) + (np.pi / 4)) for x in range(length)]
    
    sinusoids, residue, resultant = decompose_sinusoid(data, halving=2.0, precision=10, max_halvings=10, reference_size=1)
    print(""Sinusoids:"", sinusoids)
    
    # Result:
    # Sinusoids: [{'frequency': 0.06283185307179587, 'phase': 0, 'amplitude': 1}, {'frequency': 0.12566370614359174, 'phase': 0.7884661249732198, 'amplitude': 0.998291015625}]

As you can see in simple cases the answer is quite correct. With halving we mean how much the frequency doubles at each analysis cycle, with precision we mean how deeply we need to check the amplitude and phase (example, if the number to find is 0.3 the algorithm does 0 and 0.5, 0.25, 0.375 ... now that I think about it I have not implemented anything that stops automatically when the result is ""extremely precise""), max\_halvings and how many times the frequency doubles to look for matches and reference\_size is how large the first frequency is with respect to the size of the given array.

It is a very naive algorithm, yes, but excuse me, I got such a satisfying result that I felt the need to gloat!

I'm curious to know if anyone is interested in a similar algorithm. Thanks

# Update

I implemented a frequency selection system to try to reveal ""middle"" frequencies. Also, combining the same looped function gives a very precise value.

But yes, I failed to get a fast algorithm so far.

    length = 100
    refPi = np.pi / (length / 2)
    data = [np.sin(refPi * x) + (np.sin((refPi * x * 2) + (np.pi / 4))*0.5) + (np.sin(refPi * x * 3)) for x in range(length)]
    
    sinusoids_1, residue, resultant = decompose_sinusoid(data, halving=2, precision=10, max_halvings=10, reference_size=1)
    sinusoids_2, residue, resultant = decompose_sinusoid(residue, halving=2, precision=10, max_halvings=10, reference_size=1)
    
    print(""Sinusoids 1:"", sinusoids_1)
    print(""Sinusoids 2:"", sinusoids_2)
    print(""Total sinusoids: "", combine_sinusoids(sinusoids_1, sinusoids_2))

  
Results:

    Sinusoids 1: [{'frequency': 1.0, 'phase': 0.19462381246299076, 'amplitude': 1}, {'frequency': 2.0, 'phase': 0.7972865145035621, 'amplitude': 0.53125}, {'frequency': 3.0, 'phase': 0, 'amplitude': 0.96875}, {'frequency': 9.0, 'phase': 0.23220634176618896, 'amplitude': 0.0078125}, {'frequency': 8.0, 'phase': 0.01845570635424912, 'amplitude': 0.00286865234375}, {'frequency': 17.0, 'phase': 4.858884145627767, 'amplitude': 0.00286865234375}]
    
    Sinusoids 2: [{'frequency': 1.0, 'phase': 4.6709714991117774, 'amplitude': 0.2509765625}, {'frequency': 2.0, 'phase': 4.575097699868925, 'amplitude': 0.09375}, {'frequency': 4.0, 'phase': 0.10737865515199488, 'amplitude': 0.03125}, {'frequency': 13.0, 'phase': 3.141592653589793, 'amplitude': 0.0078125}, {'frequency': 44.99999999999999, 'phase': 5.691068723055729, 'amplitude': 0.00146484375}]
    
    Total sinusoids:  [{'frequency': 1.0, 'phase': np.float64(-0.059024974139288255), 'amplitude': np.float64(0.9724220892929857)}, {'frequency': 2.0, 'phase': np.float64(0.6756928770880679), 'amplitude': np.float64(0.4592330500096089)}, {'frequency': 3.0, 'phase': 0, 'amplitude': 0.96875}, {'frequency': 4.0, 'phase': 0.10737865515199488, 'amplitude': 0.03125}]
    ",itsmeriky,1fr0of4,https://reddit.com/r/Python/comments/1fr0of4/the_riccardo_fourier_transform/,https://www.reddit.com/r/Python/comments/1fr0of4/the_riccardo_fourier_transform/,2024-09-27 23:07:19,4,0.57,4,0,5,0,0,False,False,True,False,False,Discussion,self,t3_1fr0of4
Python,Search YouTube Comments: Raw and with GeminiAI,"Repo link: [https://github.com/sriramcu/youtube\_comment\_section\_analysis](https://github.com/sriramcu/youtube_comment_section_analysis)

**What My Project Does**

1. **Stores all comments** of a video into a text file using the Youtube Data API v3, with their replies indented and number of likes in square brackets. Suppose you want to know **what song was playing in the background**. Just Ctrl+F ""song"" and you can find the comment and all it's replies. 

2. Instead of using a text file, you could also ask GeminiAI questions specifically about the comments section, instead of wasting your GeminiAI quota by trying to feed the video itself. Like, you could ask on a cooking video, ""what alternative recipes did the commenters suggest"", and the model could give you a response. My project uses the Gemini 1.5 flash API due to its free quota available. Works pretty well for this task. 

All API keys, setup instructions are in the repo link. I've also added an intuitive GUI to run this program.

**Target Audience**

General users with some technical background- namely to install python, clone repositories and install libraries. 

**Comparison**

* I've seen plenty of projects carrying out sentiment analysis of comments, but these are usually separately trained models, whereas mine leverages existing Gemini 1.5 flash model, which can carry out tasks apart from sentiment analysis, based on your very own custom prompt. 
   * [https://github.com/JatinAgrawal0/youtube-comment-sentimental-analysis](https://github.com/JatinAgrawal0/youtube-comment-sentimental-analysis)
   * [https://www.bardeen.ai/playbooks/get-sentiment-analysis-from-youtube-comments-and-save-to-google-sheets](https://www.bardeen.ai/playbooks/get-sentiment-analysis-from-youtube-comments-and-save-to-google-sheets)
   * [https://www.linkedin.com/pulse/youtube-comment-sentiment-analysis-using-gpt-35-kidwa-arif/](https://www.linkedin.com/pulse/youtube-comment-sentiment-analysis-using-gpt-35-kidwa-arif/)
* Likewise, I've seen plenty of web extensions searching comments but none show the surrounding context, like comments immediately below or above; or even every single reply. And many of these are needlessly complicated- in setup, instructions and even the final output. Nothing crisp like an indented text file.
   * [https://github.com/sonigy/YCS](https://github.com/sonigy/YCS)
   * [https://github.com/mattwright324/youtube-comment-suite](https://github.com/mattwright324/youtube-comment-suite)
   * [https://ytcomment.kmcat.uk/](https://ytcomment.kmcat.uk/)
   * [https://www.hadzy.com/](https://www.hadzy.com/)
* My code combines the two main points mentioned above.",sriramcu,1fquhxm,https://reddit.com/r/Python/comments/1fquhxm/search_youtube_comments_raw_and_with_geminiai/,https://www.reddit.com/r/Python/comments/1fquhxm/search_youtube_comments_raw_and_with_geminiai/,2024-09-27 18:24:44,0,0.4,0,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1fquhxm
Python,LangDict : Build complex LLM Applications with Python Dictionary,"I'm sharing a new LLM Application framework based on what I've learned from developing LLM Application over the past few months.

* When developing an LLM Application, the Prompt + LLM + Output parser of Langchain is sufficient for.
* Prompt is similar to a feature specification and has enough information about the module.
* Agent can be built by connecting multiple modules, and the PyTorch Module has already demonstrated its intuitive usage.

# What My Project Does

**LangDict** : Build complex LLM Applications with Python Dictionary

\*Repo :¬†[https://github.com/langdict/langdict](https://github.com/langdict/langdict)

**Key Features**

* LLM Applicaiton framework for simple, intuitive, specification-based development
* Simple interface (Stream / Batch)
* Modularity: Extensibility, Modifiability, Reusability
* Easy to change trace options (Console, Langfuse)
* Easy to change hyper-paramters (Prompt, Paramter)

---

    from typing import Any, Dict, List
    
    from langdict import Module, LangDictModule
    
    
    _query_rewrite_spec = {
        ""messages"": [
            (""system"", ""You are a helpful AI bot.\nRewrite Human's question to search query.\n## Output Format: json, {{ \""query\"": str}}""),
            (""placeholder"", ""{conversation}""),
        ],
        ""llm"": {
            ""model"": ""gpt-4o-mini"",
            ""max_tokens"": 200
        },
        ""output"": {
            ""type"": ""json""
        }
    }
    
    
    class RAG(Module):
    
        def __init__(self, docs: List[str]):
            super().__init__()  
            self.query_rewrite = LangDictModule.from_dict(_query_rewrite_spec)
             = SimpleRetriever(docs=docs)  # Module
            self.answer = LangDictModule.from_dict(answer_spec)
    
        def forward(self, inputs: Dict[str, Any]):
            query_rewrite_result = self.query_rewrite({
                ""conversation"": inputs[""conversation""],
            })
            doc = self.search(query_rewrite_result)
            return self.answer({
                ""conversation"": inputs[""conversation""],
                ""context"": doc,
            })
    
    rag = RAG()
    inputs = {
        ""conversation"": [{""role"": ""user"", ""content"": ""How old is Obama?""}]
    }
    
    rag(inputs)
    &gt;&gt;&gt; 'Barack Obama was born on August 4, 1961. As of now, in September 2024, he is 63 years old.'

# Target Audience¬†

For anyone building an LLM Application. This framework is intended for production, but is currently in alpha version and suitable for prototyping.

# Comparison¬†

* LangChain : ü¶úüîó Build context-aware reasoning applications
* LlamaIndex is a data framework for your LLM applications
* LiteLLM : Python SDK, Proxy Server (LLM Gateway) to call 100+ LLM APIs in OpenAI format - \[Bedrock, Azure, OpenAI, VertexAI, Cohere, Anthropic, Sagemaker, HuggingFace, Replicate, Groq\]
* DSPy : The framework for programming‚Äînot prompting‚Äîfoundation models

LangDict aims to be simple. All you need to use is a Python Dictionary. It's just a matter of writing the LLM's functional specification in a Dictionary, and being able to handle the module's inputs and outputs in a Dictionary as well.",BigSchedule754,1fqre92,https://reddit.com/r/Python/comments/1fqre92/langdict_build_complex_llm_applications_with/,https://www.reddit.com/r/Python/comments/1fqre92/langdict_build_complex_llm_applications_with/,2024-09-27 16:09:45,14,0.85,14,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1fqre92
Python,What are some of Pydantic's most annoying aspects / limitations?,"Hi all,

As per title, I'd be curious to hear what people's *negative* experiences with Pydantic are. 

Personally, I have found debugging issues related to nested Pydantic models to be quite gnarly to grapple with. Especially true with the v1 -&gt; v2 migration, although the [migration guide](https://docs.pydantic.dev/latest/migration/) has been really helpful in this.

Overall I find it an extremely useful library, both in my day job (we use it mostly to validate user requests to our REST API and to perform CRUD operations) and personal projects. Curious to hear your thoughts.",enzoinc,1fqovy7,https://reddit.com/r/Python/comments/1fqovy7/what_are_some_of_pydantics_most_annoying_aspects/,https://www.reddit.com/r/Python/comments/1fqovy7/what_are_some_of_pydantics_most_annoying_aspects/,2024-09-27 14:21:30,67,0.93,67,0,55,0,0,False,False,True,False,False,Discussion,self,t3_1fqovy7
Python,"pyPIDTune: A Python PID Tuning Library with Logger, Simulator, and Process Emulator üéâ","**pyPIDTune** is an intuitive PID tuning suite with a graphical user interface (GUI) aimed at optimizing the PID tuning process.

# What The Project Does

**pyPIDTune** is a comprehensive toolset for PID control system tuning. It offers an intuitive, step-by-step framework to **record, tune, simulate,** and **test** PID controllers‚Äîall in one package. This makes it ideal for engineers who want an efficient and effective way to tune PID controllers while benefiting from integrated simulation tools.

**pyPIDTune** addresses common PID tuning challenges by providing a unified set of tools that allow you to:

* **Record** a Process Reaction Curve (PRC) with the **PID Logger**.
* **Tune** PID parameters based on the recorded data using the **PID Tuner**.
* **Simulate** the response using the **PID Simulator** to verify performance before real-world implementation.
* **Test** the tuning with a **Process Emulator**, simulating how the system would behave under real-world conditions.

# Comparison

|Feature|pyPIDTune|Manual Tuning|
|:-|:-|:-|
|Automatic PRC Logging|Yes ‚úÖ|No ‚ùå|
|Step-by-Step Tuning|Yes ‚úÖ|No ‚ùå|
|Built-in Simulation|Yes ‚úÖ|No ‚ùå|
|Process Emulation|Yes ‚úÖ|No ‚ùå|
|Time Efficient|Yes ‚úÖ|No ‚ùå|

Manual tuning, while commonly used, lacks the systematic approach and real-time feedback that **pyPIDTune** provides. By automating the logging and tuning process, **pyPIDTune** ensures that you can quickly iterate on PID parameters, reducing trial and error.

# Target Audience

**pyPIDTune** is designed for anyone working with PID controllers and familiar with Python. With its simple setup and ease of use, it's suitable for engineers in fields such as industrial control, robotics, and process automation.

# Links

**GitHub repo**: [https://github.com/PIDTuningIreland/pypidtune](https://github.com/PIDTuningIreland/pypidtune)  
**PyPI**: [https://pypi.org/project/pypidtune/](https://pypi.org/project/pypidtune/)  
**Guide**: [blog.pidtuningireland.com](http://blog.pidtuningireland.com)

# Installation

To install, use:

`pip install pypidtune`

  
",PIDTuningIreland,1fqmsio,https://reddit.com/r/Python/comments/1fqmsio/pypidtune_a_python_pid_tuning_library_with_logger/,https://www.reddit.com/r/Python/comments/1fqmsio/pypidtune_a_python_pid_tuning_library_with_logger/,2024-09-27 12:42:13,83,0.93,83,0,13,0,0,False,False,True,False,False,Showcase,self,t3_1fqmsio
Python,Im trying to create also learn a Notifier where if the server is up i will get a message that regist,"Im trying to create also learn a Notifier where if the registering new user is up i will get a message that registration is available but im having trouble what is missing in my code. 

  
or is my code even corect or did i use the correct api

    import requests
    import time
    import os
    
    url = ""https://hotel101app.com/api/campaigns/active"" ¬†# Target URL
    
    while True:
    ¬† ¬† datetime = time.strftime(""%Y-%m-%d %H:%M:%S"")
    ¬† ¬† try:
    ¬† ¬† ¬† ¬† response = requests.get(url)
    ¬† ¬† ¬† ¬† if response.status_code == (200, 201): ¬†# Check for 404 or 500
    ¬† ¬† ¬† ¬† ¬† ¬† print(""HOTEL IS UP"")
    ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† print(f""{datetime} : {response.status_code} : Registration temporarily unavailable"")
    ¬† ¬† except requests.exceptions.RequestException as e:
    ¬† ¬† ¬† ¬† print(f""Error: {e}"")
    ¬† ¬† 
    ¬† ¬† time.sleep(5) ¬†# Wait for 5 seconds before the next request
    ",Super-Train628,1fqmim3,https://reddit.com/r/Python/comments/1fqmim3/im_trying_to_create_also_learn_a_notifier_where/,https://www.reddit.com/r/Python/comments/1fqmim3/im_trying_to_create_also_learn_a_notifier_where/,2024-09-27 12:28:04,0,0.29,0,0,6,0,0,False,False,True,False,False,Discussion,self,t3_1fqmim3
Python,"Python in Excel, does it make sense to you?","The title of the post seems self-explanatory, but I struggle to see how the integration between Excel and Python is genuinely useful. Personally, I use either Excel **or** Python depending on the task. If it's about creating a table or performing simple checks on small datasets, I go with Excel. On the other hand, if I need to work with large datasets, create more complex automations, or require specific libraries, Python is a much better choice. In my view, each tool serves its own specific purpose.",December92_yt,1fqj9oj,https://reddit.com/r/Python/comments/1fqj9oj/python_in_excel_does_it_make_sense_to_you/,https://www.reddit.com/r/Python/comments/1fqj9oj/python_in_excel_does_it_make_sense_to_you/,2024-09-27 08:51:25,90,0.81,90,0,108,0,0,False,False,True,False,False,Discussion,self,t3_1fqj9oj
Python,Literate Programming with Python: A Quick Start Guide and Community Project,"I've created a quick-start guide for literate programming with Python and I'm looking to expand it with your help.

## What My Project Does

My project is a [GitHub Gist](https://gist.github.com/Foadsf/c134ab9a8d79cdeda139807b759daf2a) that provides step-by-step instructions for setting up a literate programming environment using Quarto, VS Code, and Python on Windows. It enables developers to write code and documentation in a single file, enhancing code readability and maintainability.

## Target Audience

This guide is meant for:
- Python developers interested in exploring literate programming
- Educators and students looking for better ways to document code
- Anyone working on projects where clear, in-depth documentation is crucial

It's suitable for both hobby projects and professional development, especially in fields where reproducible research is valued.

## Comparison to Existing Alternatives

While there are other literate programming tools available (like Jupyter Notebooks), this setup offers:
1. Integration with VS Code, a popular IDE among Python developers
2. Use of Quarto, which supports multiple output formats (HTML, PDF, Word)
3. A lightweight approach that doesn't require a browser-based interface 
4. And most importantly it is git friendly!

## Community Involvement

I'm looking to expand this project and would love your help to:
1. Extend the guide for macOS and Linux users
2. Explore other markup languages (Markdown variants, AsciiDoc, reStructuredText, MyST, Typst)

For those interested in LaTeX, I've also summarized literate programming in TeX [here](https://tex.stackexchange.com/a/717251/102825).

What's your experience with literate programming in Python? Any tools or tips to share?",foadsf,1fqj1my,https://reddit.com/r/Python/comments/1fqj1my/literate_programming_with_python_a_quick_start/,https://www.reddit.com/r/Python/comments/1fqj1my/literate_programming_with_python_a_quick_start/,2024-09-27 08:33:50,8,0.75,8,0,13,0,0,False,False,True,False,False,Showcase,self,t3_1fqj1my
Python,First Python Project: Minecraft Cloud Synchronization,"# Hi everyone!

I‚Äôm new to Python and development in general. My background is mainly in front-end technologies like JavaScript, React, and Node, and I've only recently started exploring backend development with tools like Firestore/Firebase. This project is a first step into Python for me, so I‚Äôd love to get feedback!

# What My Project Does

My friends and I recently got back into playing Minecraft, setting up a modded server for a fun experience. However, one of the challenges we faced was finding a way to host the server without dedicating one person's computer to it 24/7. We needed a way to make sure the server was always available for anyone to play, without waiting on one person to start it.

So, I built a cloud synchronization system for Minecraft servers. It syncs the server files to a cloud storage service using Python scripts, Google Cloud, and batch files. This way, any player can access and start the server on their own machine, making it much easier for everyone to play whenever they like.

# Target Audience

This project is geared towards:

* Casual Minecraft players who want to host a modded server without paying for dedicated hosting services.
* Tech-savvy gamers interested in a free and customizable way to host their server using cloud services.
* Developers or learners looking for a practical project to explore Python and cloud synchronization.

The aim is to provide an alternative to traditional server hosting options while having fun with Python scripting.

# Comparison

There are existing solutions like OneDrive or Google Drive for sharing files, and of course, you can pay a monthly fee for a dedicated hosting service. While these options work well, they may not suit everyone‚Äôs preferences or budget.

With my cloud-sync approach, you can achieve similar functionality without a monthly cost. If you're comfortable with some setup and Python scripting, this method is a free alternative to keep your server running and synced. Plus, it's an excellent way to learn more about Python, automation, and using cloud APIs.

**Link to the Project**: [GitHub - Minecraft Cloud Sync](https://github.com/johnson7m/minecraft_cloud_sync)

  
Please be honest - after looking at some of the impressive work done here with Python, I understand that my code is  not up to snuff or even remotely in the same ball park as everyone else's. I can take this post down if it doesn't fall within the guidelines. 

I just didn't think it made sense to post it in the learnpython subreddit because I didn't really have a question? I just wanted to share with people who might actually want to use it/make it way better. ",Spudkip,1fqhocd,https://reddit.com/r/Python/comments/1fqhocd/first_python_project_minecraft_cloud/,https://www.reddit.com/r/Python/comments/1fqhocd/first_python_project_minecraft_cloud/,2024-09-27 06:48:20,15,0.86,15,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1fqhocd
Python,My python program now lets LLMs running on both Ollama and Llama.cpp search the internet!,"I have now updated my program to allow for use with Ollama! Previously the program was just usable with Llama.cpp, you can now use Ollama as well! with the program allowing locally run LLMs to search the internet for you!  
Here is the github:

[https://github.com/TheBlewish/Web-LLM-Assistant-Llamacpp-Ollama](https://github.com/TheBlewish/Web-LLM-Assistant-Llamacpp-Ollama)

This update took a while sorry about the delay, after numerous requests to add Ollama support I finally made it happen, please check it out on github and let me know what you think! Now anyone can search the internet using LLM's with either Llama.cpp or Ollama, the choice is yours! 

**What My Project Does**: This lets you ask questions that the LLM's may not know the answer to and still have it give you the answer after finding the information to answer you online! You could ask it questions about current events, or any information that isn't within it's training data and it can actually find your answer!It does this via the LLM creating a search query relating to a question your asking and can also select to search within a specific time range such as showing results from the last year or last week, etc. Then it sees 10 webpages with information about what is contained within each, and then the LLM selects the two most relevant pages which are then scraped for the information within. At this point the LLM either determines it can answer your question or it does another search, potentially refining the search terms to be more relevant to find information as well as selecting different pages if it's first search didn't find anything. This program allows up to 5 different searches and scrapes to find information to answer your query, but often it gets the answer after just one search depending on the complexity of the question! Since it's scraping 2 websites each search, this means if your question is quite niche or complex the LLM can scrape information from up to 10 individual websites to find an answer to your question if it needs to!This update took quite a while, please check it out and let me know what you think! Feel free to post any issues onto the github page and i'll fix it for you!

  
**Target Audience**: user of Llama.cpp or now Ollama that want similar search capabilities as seen with ChatGPT!

  
**Comparison**: It has a simplistic UI and an easy to use design, quite simple and effective compared to some of the more overly complex options out there to achieve similar goals. This makes it more accessible and hopefully more easy to use!",CuriousAustralianBoy,1fqf96f,https://reddit.com/r/Python/comments/1fqf96f/my_python_program_now_lets_llms_running_on_both/,https://www.reddit.com/r/Python/comments/1fqf96f/my_python_program_now_lets_llms_running_on_both/,2024-09-27 04:03:42,0,0.44,0,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1fqf96f
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1fqar0b,https://reddit.com/r/Python/comments/1fqar0b/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1fqar0b/friday_daily_thread_rpython_meta_and_freetalk/,2024-09-27 00:00:40,2,0.76,2,0,5,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fqar0b
Python,Reshape Data in Polars Efficiently from Wide to Long Form,"Hi everyone. I wrote a series of blog posts about how to reshape data in [polars](https://pola.rs/) from wide to long form. [partI](https://samukweku.github.io/data-wrangling-blog/notebooks/Reshape-Data-in-Polars-Wide-to_Long-Part-I.html) describes general reshaping in polars for a variety of usecases, while [partII](https://samukweku.github.io/data-wrangling-blog/notebooks/Reshape-Data-in-Polars-Wide-to_Long-Part-II.html) and [partIII](https://samukweku.github.io/data-wrangling-blog/notebooks/Reshape-Data-in-Polars-Wide-to_Long-Part-III.html) suggests ways to squeeze more performance.

The article targets users who are familiar with the polars python DataFrame library and want to convert their data from wide form to long format, for efficient data analysis or some other reason. Hope you find it useful.",No_Current3282,1fq8rf0,https://reddit.com/r/Python/comments/1fq8rf0/reshape_data_in_polars_efficiently_from_wide_to/,https://www.reddit.com/r/Python/comments/1fq8rf0/reshape_data_in_polars_efficiently_from_wide_to/,2024-09-26 22:25:00,9,0.8,9,0,5,0,0,False,False,True,False,False,Resource,self,t3_1fq8rf0
Python,Adding non-python dependencies with uv,"I'm trying out Astral's UV to manage a python project...my project uses libpng, libusb, libjpeg and libomp. I was able to add libusb successfully, which is written in C. The other three packages are too but 'uv add libpng', etc. failed. So I tried pointing directly to the git repos 'uv add libjpeg git+https://github.com/thorfdbg/libjpeg' etc and that command failed because 'neither \`pyproject.toml\` nor \`setup.py\` are present in the directory', which duh, they're written in C. Interesting..anyone have thoughts about why libusb succeeded but the others failed?",Electrical_Brick_215,1fq8dz7,https://reddit.com/r/Python/comments/1fq8dz7/adding_nonpython_dependencies_with_uv/,https://www.reddit.com/r/Python/comments/1fq8dz7/adding_nonpython_dependencies_with_uv/,2024-09-26 22:07:48,0,0.5,0,0,11,0,0,False,False,True,False,False,Discussion,self,t3_1fq8dz7
Python,Looking for volunteers to take my Python course and give feedback ,"**Edit: enough people have volunteered so this is closed now. Thank you to the people that are helping! What a fantastic community! Here's a link to the course if you are interested:** [**https://www.udemy.com/course/python-for-engineers-scientists-and-analysts/?couponCode=FREEBIE2024**](https://www.udemy.com/course/python-for-engineers-scientists-and-analysts/?couponCode=FREEBIE2024)

I have today just published a course on Udemy aiming to help people with some kind of technical background (e.g. engineers, scientists, analysts etc) get going with Python.

The course goes from setting up Python from scratch (with Thonny) to doing statistical analysis, visualisation and modeling fairly quickly. There‚Äôs 1.5 hours of video spread over 11 lectures, coding exercises, downloadable code, assignments and quizzes.

I am looking to try and make the course as good as possible, so I am wondering if anyone would be happy to take the course - for free - in exchange for feedback and a review?

If so let me know and I will DM you a free coupon and link to the course.",bobo-the-merciful,1fq5567,https://reddit.com/r/Python/comments/1fq5567/looking_for_volunteers_to_take_my_python_course/,https://www.reddit.com/r/Python/comments/1fq5567/looking_for_volunteers_to_take_my_python_course/,2024-09-26 19:48:05,13,0.67,13,0,136,0,0,False,False,True,False,False,Tutorial,self,t3_1fq5567
Python,show: 200 line pygame hotreloader,"[https://github.com/ivanbelenky/pygame-hot](https://github.com/ivanbelenky/pygame-hot)

* **What My Project Does**
   * wraps game and allows for hotreload on save file
   * provide simple minimal interface for reloading
* **Target Audience**:
   * whomever that wants to save a couple of seconds when developing a game, please try it and open an issue if found, I did not use pygame extensively so I am sure there are some fail cases",leculet,1fq3ola,https://reddit.com/r/Python/comments/1fq3ola/show_200_line_pygame_hotreloader/,https://www.reddit.com/r/Python/comments/1fq3ola/show_200_line_pygame_hotreloader/,2024-09-26 18:46:14,2,0.61,2,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1fq3ola
Python,[D] Has anyone moved over to numpy2.0? What are some cool magic(s) that you have learned so far?,"Is anyone using numpy2.0 fully now? What are some magic(s) tricks, tips, and hacks that you have discovered? I'm talking about creative usage of any new features that they introduced.",Studyr3ddit,1fq35j1,https://reddit.com/r/Python/comments/1fq35j1/d_has_anyone_moved_over_to_numpy20_what_are_some/,https://www.reddit.com/r/Python/comments/1fq35j1/d_has_anyone_moved_over_to_numpy20_what_are_some/,2024-09-26 18:23:37,26,0.8,26,0,8,0,0,False,False,True,False,False,Discussion,self,t3_1fq35j1
Python,Opik: Open source LLM evaluation framework,"Repo Link: [https://github.com/comet-ml/opik](https://github.com/comet-ml/opik)

**What My Project Does**

Opik is an open source LLM eval framework. With this first release, we've focused on a few key features:

* Out-of-the-box implementations of LLM-based metrics, like Hallucination and Moderation.
* Step-by-step tracking, such that you can test and debug individual components, even for multi-agent architectures.
* Exposing an API for ""model unit tests"" (built on Pytest), to allow you to run evals as part of your CI/CD pipelines
* Providing an easy UI for scoring, annotating, and versioning your logged LLM data, for further evaluation or training.

**Target Audience**

Opik is for anyone building LLM applications. It is production-ready.

**Comparison**

Opik provides a similar API to tools like DeepEval. Unlike DeepEval, however, Opik is 100% open source‚Äîmeaning that the Opik backend and UI are included in the source code, and can be run locally on your own machine.",calebkaiser,1fq33rw,https://reddit.com/r/Python/comments/1fq33rw/opik_open_source_llm_evaluation_framework/,https://www.reddit.com/r/Python/comments/1fq33rw/opik_open_source_llm_evaluation_framework/,2024-09-26 18:21:35,55,0.87,55,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1fq33rw
Python,Monthly Python Data Engineerig September issue and How Data Platforms Work free book,"The September issue of the [Monthly Python Data Engineering](https://open.substack.com/pub/alessandromolina/p/monthly-python-data-engineering-september) newsletter is now out, this month many libraries and projects introduced interesting additions, but the most important news is the announcement of the [How Data Platforms Work](https://github.com/amol-/datapyground/tree/main/book) book and the associated [DataPyground](https://github.com/amol-/datapyground) project. 

The book is specifically targeted to Python developers and is going to be published monthly, with each new chapter part of the same month newsletter issue.   
  
The concepts and algorithms explained in the book will then be implemented in **DataPyground**, which inspired by the literate programming concept, hopes to be a learning experience to which people can also contribute to if they want to experiment implementing new components and capabilities of the data platform. Only constraint will be to retain the same level of documentation quality for each new proposed addition and avoiding external dependencies (using third parties ready made implementations would reduce the value as a learning experience).

  
  
",_amol_,1fq0qoc,https://reddit.com/r/Python/comments/1fq0qoc/monthly_python_data_engineerig_september_issue/,https://www.reddit.com/r/Python/comments/1fq0qoc/monthly_python_data_engineerig_september_issue/,2024-09-26 16:43:28,13,0.94,13,0,4,0,0,False,False,True,False,False,News,self,t3_1fq0qoc
Python,"FastHTML, a new Python web framework","FastHTML is a lightweight Python web framework for building fast, scalable web applications. Here's what you need to know:

Pure Python: Built entirely in Python, making it easy to learn and use
Component-based: Uses reusable components for efficient development
Fast and flexible: Suitable for small to medium-sized projects
Easy setup: Simple installation and project creation process
Key features: Components, templates, views, and models",digital_meta,1fpz1td,https://reddit.com/r/Python/comments/1fpz1td/fasthtml_a_new_python_web_framework/,https://www.reddit.com/r/Python/comments/1fpz1td/fasthtml_a_new_python_web_framework/,2024-09-26 15:32:33,1,1.0,1,0,0,0,0,False,False,True,False,False,News,self,t3_1fpz1td
Python,FileSystemPro 1.0.4.0,"FileSystemPro 1.0.4 is now available! Explore the latest release to discover new functions and learn about the enhanced performance. Updating to FileSystemPro 1.0.4 is seamless and won‚Äôt introduce any bugs if you‚Äôre using previous versions of the library. All new functions have been implemented with full support for previous versions.

https://github.com/hbisneto/FileSystemPro/releases/tag/v1.0.4.0",Hbisneto,1fpy0hm,https://reddit.com/r/Python/comments/1fpy0hm/filesystempro_1040/,https://www.reddit.com/r/Python/comments/1fpy0hm/filesystempro_1040/,2024-09-26 14:49:23,6,0.72,6,0,11,0,0,False,False,True,False,False,Resource,self,t3_1fpy0hm
Python,"I realized I didn't know how a web framework worked, so I wrote one! Spiderweb 1.2.1 now live!","I've been writing Django and Flask websites for the better part of a decade, but I realized recently that I don't actually know how this stuff _works_. So rather than crack open a package I was already familiar with, I jumped in with both feet and wrote my own!

[PyPI: Spiderweb 1.2.1](https://pypi.org/project/spiderweb-framework/)  
[Documentation!](https://itsthejoker.github.io/spiderweb/#/)

# What My Project Does

**Spiderweb** is a web framework just large enough to hold a spider. It's an special blend of concepts that I like from Flask, FastAPI, and Django, and is available for use now!

Here's a non-exhaustive lists of things Spiderweb can do:

- Function-based views
- Optional Flask-style URL routing
- Optional Django-style URL routing
- URLs with variables in them
- Full middleware implementation
- Limit routes by HTTP verbs
- Custom error routes
- Built-in dev server
- Gunicorn support
- HTML templates with Jinja2
- Static files support
- Cookies (reading and setting)
- Optional append_slash (with automatic redirects!)
- CSRF middleware
- CORS middleware
- Optional POST data validation middleware with Pydantic
- Session middleware with built-in session store
- Database support (using Peewee, but you can use whatever you want as long as there's a Peewee driver for it)

Example code from [the quickstart](https://itsthejoker.github.io/spiderweb/#/quickstart):

    from spiderweb import SpiderwebRouter
    from spiderweb.response import HttpResponse
    
    app = SpiderwebRouter()
    
    @app.route(""/"")
    def index(request):
        return HttpResponse(""HELLO, WORLD!"")
    
    if __name__ == ""__main__"":
        app.start()

This demonstrates using Flask-style URL routing, but is also an example of how small this can be for serving requests. You can see [a full test file that I've set up here](https://github.com/itsthejoker/spiderweb/blob/main/example.py) that contains a lot of the features enabled in one file.

# Target Audience

This is essentially a toy and really probably shouldn't be deployed in business-critical applications. I'm really proud of it though, and I think it has potential; I encourage you to give it a shot and see if it works for any of your projects!

# Comparison

## Flask

Spiderweb is more opinionated than Flask; while a lot of the core functionality is the same, some of it has just been translated to a slightly different assembly method (for example, assigning views and routes at runtime looks slightly different but is still absolutely feasible). Spiderweb also includes a database connection out of the box, easier configuration, and explicit support (and encouragement!) for middleware.

## Django

Spiderweb is much less capable than Django, but contains lots of small features that I think make Django more fun to use. For example, Spiderweb offers Django-style url declarations (ish), a `reverse()` function to find a URL based on its name, an implementation of the `{% static 'asset' %}` template tag to get its URL, and more!

I also can't come close to Django's ability to make working with forms more palatable, but I do have full CSRF integrations available in Spiderweb with tokens, validation, and more. The CSRF integration is also tied into a complete implementation of Django's Session middleware and it works the same way.

## tl;dr:

I consider Spiderweb to be a middle ground between Flask and Django; there are other web frameworks that I could mention here, but realistically I think that most folks will know where Spiderweb falls based on these two comparisons.

# Links

- [PyPI: Spiderweb 1.2.1](https://pypi.org/project/spiderweb-framework/)
- [Documentation!](https://itsthejoker.github.io/spiderweb/#/)
- [Full (and slightly rambly) project writeup](https://itsthejoker.github.io/spiderweb-the-tiny-web-framework/)
- [Source code on GitHub!](https://github.com/itsthejoker/spiderweb)

Thanks for reading and I hope you choose to give it a try for one of your next projects!",Itsthejoker,1fpxris,https://reddit.com/r/Python/comments/1fpxris/i_realized_i_didnt_know_how_a_web_framework/,https://www.reddit.com/r/Python/comments/1fpxris/i_realized_i_didnt_know_how_a_web_framework/,2024-09-26 14:38:42,177,0.9,177,0,20,0,0,False,False,True,False,False,Showcase,self,t3_1fpxris
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1fpj37t,https://reddit.com/r/Python/comments/1fpj37t/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1fpj37t/thursday_daily_thread_python_careers_courses_and/,2024-09-26 00:00:09,2,0.76,2,0,4,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fpj37t
Python,"[Article] The Essential Guide to Large Language Model‚Äôs Structured Output, and Function Calling","For the past year, I‚Äôve been building production systems using LLMs. When I started back in August 2023, materials were so scarce that many wheels had to be reinvented first. As of today, things have changed, yet the community is still in dire need of educational materials, especially from a production perspective.



Lots of people talk about LLMs, but very few actually apply them to their users/business.



Here is my new contribution to the community, ‚Äú[The Essential Guide to Large Language Model‚Äôs Structured Output, and Function Calling](https://pavelbazin.com/post/the-essential-guide-to-large-language-models-structured-output-and-function-calling?utm_source=reddit&amp;utm_medium=social&amp;utm_campaign=structured_output&amp;utm_content=sub_python)‚Äù article.



It is a hands-on guide (long one) on structured output and function calling, and how to apply them from 0 to 1. Not much of requirements, just some basic Python, the rest is explained.



I had quite a bit of success applying it at the company to the initiative ‚ÄúLet's solve all customer support issues via LLMs for 200K+ users.‚Äù We haven‚Äôt hit 100% of the goal yet, but we are getting there fast, and structured output in particular is what made it possible for us.



Spread the word, and let‚Äôs share more on our experience of applied LLMs beyond demos.",p_bzn,1fpiod8,https://reddit.com/r/Python/comments/1fpiod8/article_the_essential_guide_to_large_language/,https://www.reddit.com/r/Python/comments/1fpiod8/article_the_essential_guide_to_large_language/,2024-09-25 23:39:30,11,0.76,11,0,4,0,0,False,False,True,False,False,Tutorial,self,t3_1fpiod8
Python,Reflex v0.6.0 - Frontend. Backend. Pure Python,"Hey folks, it's been awhile (v0.4.0) since we (reflex-dev/reflex 19k stars) posted in this community! Just wanted to share some of the exciting new features and improvements we've been working on.

GitHub: [https://github.com/reflex-dev/reflex](https://github.com/reflex-dev/reflex)

# What My Project Does

Reflex is the open-source framework empowering Python developers to build web apps faster. Build both your frontend and backend in a single language, Python (pip install reflex), with no JavaScript or web development experience required.

# Target Audience (e.g., Is it meant for production, just a toy project, etc.)

Production-ready--primarily to build internal data, AI, and web apps.

# Comparison (A brief comparison explaining how it differs from existing alternatives.)

Over 60+ components built-in with the flexibility to extend and customize by wrapping your own React components e.g. AG Grid. Strong OOP support, first-class database management (SQLAlchemy), and minimal boilerplate.

# Enhancements and improvements

* **Optimized Performance**: Multiprocess compilation is now available as an opt-in feature, dramatically improving compilation speed for large applications.
* We significantly improved our graphing components. Additionally the charts can be made responsive to the window size by setting width to a percentage.
* A new `/_health` endpoint has been added for easier monitoring in production environments great for people working with k8s.
* The CLI for creating and publishing 3rd party components has been enhanced, making it easier to extend Reflex's functionality.
* Improved error messages and warnings help developers identify and resolve issues more quickly.

# DiskStateManager to maintain state between reloads

When saving a file Reflex now uses a DiskStateManager to maintain state between reloads.  This means that the state is preserved across reloads and you don't lose your application state during a 'reflex run'.

The application state is reset when you stop a 'reflex run' and start it again.

# Consistent theming

* Reflex now supports a consistent theming system across all core components, they now inherit the app theme and are fully customizable.



    app = rx.App(
        theme=rx.theme(
            appearance=""light"",
            has_background=True,
            radius=""large"",
            accent_color=""teal"",
        )
    )

# Responsive support for style props

Reflex now comes with configurable responsive breakpoints for all style props. If you change the window size the component will update to match the new breakpoint, see the example below.

    rx.badge(
        ""Hello World"",
        color=""black"",
        background_color=rx.breakpoints(
            initial=""pink"",
            sm=""lime"",
            md=""sky"",
            lg=""yellow"",
        ),
    )

# Removed features and deprecated functions

The following deprecated functions and components were officially removed to streamline the codebase and align with newer implementations:

* Removed Lucide icons that were deprecated upstream, clearing out outdated elements from version 0.4.6.
* Passing children to `rx.color_mode.button` is no longer allowed (removed in 0.5.0).
* Other minor deprecated features from earlier versions, such as `rx.cached_var` and `REDIS_URL` specifications without a scheme, have been cleaned up.

# Reflex website

We've rebuilt our landing page from the ground up using Reflex!  The website is open source and a great tool to learn Reflex best practices, find it on GitHub @ reflex-dev/reflex-web",elviskahoro,1fpf1lx,https://reddit.com/r/Python/comments/1fpf1lx/reflex_v060_frontend_backend_pure_python/,https://www.reddit.com/r/Python/comments/1fpf1lx/reflex_v060_frontend_backend_pure_python/,2024-09-25 20:54:06,176,0.95,176,0,40,0,0,False,False,True,False,False,Showcase,self,t3_1fpf1lx
Python,"MAD (Machine Learning, AI, Data) Map for real-time Python","At Bytewax (data streaming framework) we care a lot about seamless integration with the Python ecosystem. However, we struggled to find a comprehensive overview of libraries and tools relevant to real-time Python developers. 

While there are excellent overviews of the data landscape, such as Matt Turck's MAD Landscape and Yujian Tang's monthly updated LLM App Stack, these resources don't specifically address the needs of Python developers working with real-time data. This gap led us down the rabbit hole to create our own MAD (Machine Learning, AI, Data) Map.

It features popular open-source tools and is designed to be a clear and valuable resource. So if you see something is missing (or wrong) please leave a comment and I‚Äôll be happy to update it.

https://bytewax.io/blog/bytewax-mad-map",oli_k,1fpd2nv,https://reddit.com/r/Python/comments/1fpd2nv/mad_machine_learning_ai_data_map_for_realtime/,https://www.reddit.com/r/Python/comments/1fpd2nv/mad_machine_learning_ai_data_map_for_realtime/,2024-09-25 19:30:30,7,0.67,7,0,0,0,0,False,False,True,False,False,Resource,self,t3_1fpd2nv
Python,"Practical Applications of Emerging Tech in Data Science
","Hello everyone,

I'm excited to announce that we are launching PyData T√ºrkiye, an initiative of PyData Global. We are thrilled to invite you to our inaugural event happening tomorrow, September 26th!

Join us for an enriching experience with a diverse lineup of speakers from around the globe. The event will be conducted in English and will cover trending technologies and the latest industry trends.

Don't miss out on this opportunity to connect and learn. Register now at:¬†[https://www.meetup.com/pydata-turkiye/events/302866344](https://www.meetup.com/pydata-turkiye/events/302866344)

We look forward to seeing you there!",hasanozdem1r,1fpb1m7,https://reddit.com/r/Python/comments/1fpb1m7/practical_applications_of_emerging_tech_in_data/,https://www.reddit.com/r/Python/comments/1fpb1m7/practical_applications_of_emerging_tech_in_data/,2024-09-25 18:04:55,7,0.78,7,0,0,0,0,False,False,True,False,False,News,self,t3_1fpb1m7
Python,"changing log levels without deploying / restarting
","I've been tinkering with logging in FastAPI and wanted to share something I've been working on. I like logging. I think it's key for debugging and monitoring, but I hate having to deploy / restart to adjust log levels . So, I set out to find a way to change logging levels on the fly.

I wrote a blog post detailing the approach: [Dynamic Logging in FastAPI with Python](https://www.prefab.cloud/blog/dynamic-logging-in-fastapi-with-python/) the library is [https://github.com/prefab-cloud/prefab-cloud-python](https://github.com/prefab-cloud/prefab-cloud-python)

In a nutshell, I used a log filter that's dynamically configurable via Prefab's UI. This setup allows you to change logging levels for both Uvicorn and FastAPI without needing to restart the server. For me, this lets me turning on debug logging for a single user when investigating an issue and generally feel in control of my logging spend.

How are y'all handling logging in their Python applications:

* Have you faced challenges / annoyance with adjusting log levels?
* Do you just not log because logging is a smell?
* What tools or methods have you found effective for managing logs in production?
* Do you think this approach addresses a real need, or are there better solutions out there?

I'd love to get your feedback and hear about your experiences. My goal is to make logging more powerful and flexible for Python developers, and any insights from this community would be incredibly helpful.",jeffdwyer,1fpa5m3,https://reddit.com/r/Python/comments/1fpa5m3/changing_log_levels_without_deploying_restarting/,https://www.reddit.com/r/Python/comments/1fpa5m3/changing_log_levels_without_deploying_restarting/,2024-09-25 17:28:17,17,0.84,17,0,13,0,0,False,False,True,False,False,Discussion,self,t3_1fpa5m3
Python,`streamable`: Stream-like manipulation of iterables,"https://github.com/ebonnal/streamable
# What my project does
A `Stream[T]` decorates an `Iterable[T]` with a **fluent interface** enabling the **chaining of lazy operations**:
- **mapping** (concurrently)
- **flattening** (concurrently)
- **grouping** by key, by batch size, by time interval
- **filtering**
- **truncating**
- **catching** exceptions
- **throttling** the rate of iterations
- **observing** the progress of iterations

For more details and examples, check the [Operations section in the README](https://github.com/ebonnal/streamable?tab=readme-ov-file#-operations)


|||
|--|--|
|üîó *Fluent*|chain methods!|
|üáπ *Typed*|**type-annotated** and [`mypy`](https://github.com/python/mypy)able|
|üí§ *Lazy*|operations are **lazily evaluated** at iteration time|
|üîÑ *Concurrent*|**thread**-based / `asyncio`-based (+new: **process-based**)|
|üõ°Ô∏è *Robust*|unit-tested for **Python 3.7 to 3.12** with 100% coverage|
|ü™∂ *Minimalist*|`pip install streamable` with **no additional dependencies**|

---


# 1. install

```bash
pip install streamable
```

# 2. import
```python
from streamable import Stream
```

# 3. init
Instantiate a `Stream[T]` from an `Iterable[T]`.

```python
integers: Stream[int] = Stream(range(10))
```

# 4. operate
- `Stream`s are ***immutable***: applying an operation returns a new stream.

- Operations are ***lazy***: only evaluated at iteration time. See the [Operations section in the README](https://github.com/ebonnal/streamable?tab=readme-ov-file#-operations).

```python
inverses: Stream[float] = (
    integers
    .map(lambda n: round(1 / n, 2))
    .catch(ZeroDivisionError)
)
```

# 5. iterate
- Iterate over a `Stream[T]` as you would over any other `Iterable[T]`.
- Source elements are ***processed on-the-fly***.

- collect it:
```python
&gt;&gt;&gt; list(inverses)
[1.0, 0.5, 0.33, 0.25, 0.2, 0.17, 0.14, 0.12, 0.11]
&gt;&gt;&gt; set(inverses)
{0.5, 1.0, 0.2, 0.33, 0.25, 0.17, 0.14, 0.12, 0.11}
```

- reduce it:
```python
&gt;&gt;&gt; sum(inverses)
2.82
&gt;&gt;&gt; max(inverses)
1.0
&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; reduce(..., inverses)
```

- loop it:
```python
&gt;&gt;&gt; for inverse in inverses:
&gt;&gt;&gt;    ...
```

- next it:
```python
&gt;&gt;&gt; inverses_iter = iter(inverses)
&gt;&gt;&gt; next(inverses_iter)
1.0
&gt;&gt;&gt; next(inverses_iter)
0.5
```

# Target Audience
As a Data Engineer in a startup I found it especially useful when I had to develop Extract-Transform-Load custom scripts in an easy-to-read way.

Here is a toy example (that you can copy-paste and run) that creates a CSV file containing all 67 quadrupeds from the 1st, 2nd, and 3rd generations of Pok√©mons (kudos to [Pok√©API](https://pokeapi.co/)):
```python
import csv
from datetime import timedelta
import itertools
import requests
from streamable import Stream

with open(""./quadruped_pokemons.csv"", mode=""w"") as file:
    fields = [""id"", ""name"", ""is_legendary"", ""base_happiness"", ""capture_rate""]
    writer = csv.DictWriter(file, fields, extrasaction='ignore')
    writer.writeheader()
    (
        # Infinite Stream[int] of Pokemon ids starting from Pok√©mon #1: Bulbasaur
        Stream(itertools.count(1))
        # Limits to 16 requests per second to be friendly to our fellow Pok√©API devs
        .throttle(per_second=16)
        # GETs pokemons concurrently using a pool of 8 threads
        .map(lambda poke_id: f""https://pokeapi.co/api/v2/pokemon-species/{poke_id}"")
        .map(requests.get, concurrency=8)
        .foreach(requests.Response.raise_for_status)
        .map(requests.Response.json)
        # Stops the iteration when reaching the 1st pokemon of the 4th generation
        .truncate(when=lambda poke: poke[""generation""][""name""] == ""generation-iv"")
        .observe(""pokemons"")
        # Keeps only quadruped Pokemons
        .filter(lambda poke: poke[""shape""][""name""] == ""quadruped"")
        .observe(""quadruped pokemons"")
        # Catches errors due to None ""generation"" or ""shape""
        .catch(
            TypeError,
            when=lambda error: str(error) == ""'NoneType' object is not subscriptable""
        )
        # Writes a batch of pokemons every 5 seconds to the CSV file
        .group(interval=timedelta(seconds=5))
        .foreach(writer.writerows)
        .flatten()
        .observe(""written pokemons"")
        # Catches exceptions and raises the 1st one at the end of the iteration
        .catch(finally_raise=True)
        # Actually triggers an iteration (the lines above define lazy operations)
        .count()
    )
```

# Comparison
A lot of other libraries have filled this desire to chain lazy operations over an iterable and this feels indeed like *""Yet Another Stream-like Lib""* (e.g. see [this stackoverflow question](https://stackoverflow.com/questions/24831476/what-is-the-python-way-of-chaining-maps-and-filters/77978940?noredirect=1#comment138494051_77978940)).

The most supported of them is probably [PyFunctional](https://github.com/EntilZha/PyFunctional), but for my use case I couldn't use it out-of-the-box, due to the lack of:
- generic typing (`class Stream[T](Iterable[T]))`)
- throttling of iteration's rate (`.throttle`)
- logging of iteration's process (`.observe`)
- catching of exceptions (`.catch`)

I could have worked on pull requests implementing these points into PyFunctional but I have rather started from scratch in order to take my shot at:
- Proposing another fluent interface (namings and signatures).
- Leveraging a visitor pattern to decouple the declaration of a `Stream[T]` from the construction of an `Iterator[T]` (at iteration time i.e. in the `__iter__` method).
- Proposing a minimalist design: a `Stream[T]` is just an `Iterable[T]` decorated with chainable lazy operations and it is not responsible for the opinionated logic of creating its data source and consuming its elements:
  - let's use the `reduce` function from `functools` instead of relying on a `stream.reduce` method
  - let's use `parquet.ParquetFile.iter_batches` from `pyarrow` instead of relying on a `stream.from_parquet` method
  - let's use `bigquery.Client.insert_rows_json` from `google.cloud` instead of relying on a `stream.to_bigquery` method
  - same for `json`, `csv`, `psycopg`, `stripe`, ... let's use our favorite specialized libraries

Thank you for your time,
",ebonnal,1fp38jd,https://reddit.com/r/Python/comments/1fp38jd/streamable_streamlike_manipulation_of_iterables/,https://www.reddit.com/r/Python/comments/1fp38jd/streamable_streamlike_manipulation_of_iterables/,2024-09-25 12:30:19,92,0.94,92,0,20,0,0,False,False,True,False,False,Showcase,self,t3_1fp38jd
Python,I made a simple gui to convert videos from one format to another using ffmpeg,"Please, I wrote this simple python app with pyside6 for converting videos from one format to another using ffmpeg. Can you check it out and give me feedback on it? And if you have interesting projects for me, please let me know. Here is the link  to the project.

https://github.com/Tosin-JD/video\_converter

**What My Project Does**

It converts videos from any format to a set of specific audio and video format.

**Target Audience**

It is for those who just want to quickly convert videos from one format to another without paying attention to too much details.

**How it works**

It involves a simple step of just 

1. selecting the file you want to convert

2. Selecting the format

3. Converting the file

",Scary_News_2068,1fp0so7,https://reddit.com/r/Python/comments/1fp0so7/i_made_a_simple_gui_to_convert_videos_from_one/,https://www.reddit.com/r/Python/comments/1fp0so7/i_made_a_simple_gui_to_convert_videos_from_one/,2024-09-25 10:03:29,2,1.0,2,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1fp0so7
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1for63c,https://reddit.com/r/Python/comments/1for63c/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1for63c/wednesday_daily_thread_beginner_questions/,2024-09-25 00:00:09,7,0.78,7,0,9,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1for63c
Python,ParScrape v0.4.5 Released,"# What My project Does:

Scrapes data from sites and uses AI to extract structured data from it.

# Key Features:

* Uses Playwright / Selenium to bypass most simple bot checks.
* Uses AI to extract data from a page and save it various formats such as CSV, XLSX, JSON, Markdown.
* Has rich console output to display data right in your terminal.

# GitHub and PyPI

* PAR Scrape is under active development and getting new features all the time.
* Check out the project on GitHub or for full documentation, installation instructions, and to contribute:¬†[https://github.com/paulrobello/par\_scrape](https://github.com/paulrobello/par_scrape)
* PyPI [https://pypi.org/project/par\_scrape/](https://pypi.org/project/par_scrape/)

# Comparison:

I have seem many command line and web applications for scraping but none that are as simple, flexible and fast as ParScrape

# Target Audience

AI enthusiasts and data hungry hobbyist",probello,1foqa9o,https://reddit.com/r/Python/comments/1foqa9o/parscrape_v045_released/,https://www.reddit.com/r/Python/comments/1foqa9o/parscrape_v045_released/,2024-09-24 23:16:40,32,0.88,32,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1foqa9o
Python,Optimal solution for the Number of Kobon Triangles with Eleven Lines ,"What my project does:   
I created an algorithm that proves the current best construction for k = 11, yielding 32 triangles, is optimal, because the current upper bound, 33, cannot be reached.

Target audience:  
Field of mathematics

Comparison:  
The current accepted best upper bound is currently 33 for k = 11, which is higher than my code proves is possible. It moves the current best arrangement of 32 to being the optimal solution.

[GitHub to the code and the paper](https://github.com/Bombardlos/Upper-Bound-for-the-Number-of-Kobon-Triangles-with-Eleven-Lines)

I kinda don't know what to do with the paper though lol, I don't have a background where I would write or publish papers of any kind, but I thought I should at least have it publicly available so I did my best to write it and upload it here",bigBagus,1fon7hb,https://reddit.com/r/Python/comments/1fon7hb/optimal_solution_for_the_number_of_kobon/,https://www.reddit.com/r/Python/comments/1fon7hb/optimal_solution_for_the_number_of_kobon/,2024-09-24 20:58:08,5,0.86,5,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1fon7hb
Python,Some thoughts on omegaconf and hydra,"I recently finished a tutorial on using omegaconf and hydra for ML projects. At the beginning, I thought ""okay sure this is nice, a flexible way of specifying config options either in a yaml file or at the command line"". By the end, we had developed a complex ML project where we configured different tasks, datasets, training options, optimizers and evaluation settings, all via these nested folders &amp; yaml files, in order to demonstrate hydra's composition, class instantiation, and interpolation abilities. At this point though, all I could think is, ""this just feels like learning another programming language"" and moreover...*why not just do this all in native python to begin with?* I was just left feeling rather unclear on what this solves / makes easier?",QuasiEvil,1fokrl9,https://reddit.com/r/Python/comments/1fokrl9/some_thoughts_on_omegaconf_and_hydra/,https://www.reddit.com/r/Python/comments/1fokrl9/some_thoughts_on_omegaconf_and_hydra/,2024-09-24 19:16:17,15,0.94,15,0,2,0,0,False,False,True,False,False,Discussion,self,t3_1fokrl9
Python,ShareLMAPI: Local Language Model API for Efficient Model Sharing Across Devices and Programs,"# What [ShareLMAPI ](https://github.com/starpig1129/ShareLMAPI)Does

ShareLMAPI is a local language model API that allows **sharing model weights across multiple programs on the same device** and supports **cross-device API calls**. Its goal is to reduce resource consumption by avoiding the need to load models multiple times for different processes or devices. Some of its key features include:

* **Local server and client**: The server allows managing model settings, API configurations, and dynamic model loading. The client supports setting various generation parameters when making API calls.
* **Streaming output support**: For real-time tasks, the API can stream responses, improving efficiency for interactive applications.
* **Supports advanced model loading**: It can load models using techniques like BitsAndBytes and PEFT for efficient handling of large language models.
* **API token-based authentication**: Secures both local and cross-device access to the API.
* **Environment setup with Conda and Docker**: Provides an easy way to manage the environment and deploy the API using containerization.

# Target Audience

This project is aimed at developers and AI practitioners who work with large language models and need a solution to **share models efficiently across applications** on the same device or across multiple devices in a local environment. It is designed for **local deployment** and can be used in small-scale production environments, research, or even as a **developer tool** for testing model-sharing workflows.

# Comparison

While cloud-based services like **Hugging Face** and **OpenAI‚Äôs APIs** provide centralized model access, ShareLMAPI is designed for **local environments**, where developers can run their own models without needing a cloud connection. This makes it ideal for situations where data privacy, low-latency response times, or reduced resource overhead are important. Additionally, **tools like oLLama** focus on model deployment, but ShareLMAPI distinguishes itself by offering **cross-device API calls** and **streaming capabilities** directly in a local setup, while also supporting highly configurable token-based authentication.",Expensive-Rub3117,1foch4h,https://reddit.com/r/Python/comments/1foch4h/sharelmapi_local_language_model_api_for_efficient/,https://www.reddit.com/r/Python/comments/1foch4h/sharelmapi_local_language_model_api_for_efficient/,2024-09-24 13:27:44,10,0.82,10,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1foch4h
Python,benchmark http requests libraries,"I conducted a comparison of the most commonly used HTTP request libraries in Python. The comparison was performed on a local server to ensure consistent network speed across all libraries.

Is this comparison fair, or are there any mistakes that might reduce performance? Or is the comparison accurate?

https://github.com/xsxo/fiberhttp/tree/main/benchmarks",o2mz,1fo1hd2,https://reddit.com/r/Python/comments/1fo1hd2/benchmark_http_requests_libraries/,https://www.reddit.com/r/Python/comments/1fo1hd2/benchmark_http_requests_libraries/,2024-09-24 01:55:06,16,0.76,16,0,20,0,0,False,False,True,False,False,Discussion,self,t3_1fo1hd2
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1fnz87u,https://reddit.com/r/Python/comments/1fnz87u/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1fnz87u/tuesday_daily_thread_advanced_questions/,2024-09-24 00:00:09,1,0.6,1,0,3,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fnz87u
Python,Open-sourced FastAPI reference architecture,"We just open sourced the reference architecture we use for FastAPI projects [here](https://github.com/betaacid/FastAPI-Reference-App).

Would love to discus different ideas and approaches as this is going to be a living document.",BeneficialAd3800,1fnwxxy,https://reddit.com/r/Python/comments/1fnwxxy/opensourced_fastapi_reference_architecture/,https://www.reddit.com/r/Python/comments/1fnwxxy/opensourced_fastapi_reference_architecture/,2024-09-23 22:12:29,65,0.96,65,0,18,0,0,False,False,True,False,False,Discussion,self,t3_1fnwxxy
Python,Best Python Libraries for AI/ML: Which Ones Deserve More Attention?,"Hey folks,

My colleague Nicolas Azevedo just wrote a pretty comprehensive article about Python libraries for AI and Machine Learning. It covers a bunch of stuff from basic data wrangling with Pandas and NumPy to the heavy hitters like TensorFlow and PyTorch.

I thought it was a solid overview, especially how it breaks down when you might use one library over another. Like, when you'd reach for TensorFlow vs PyTorch, that kind of thing.

Anyway, I'm curious:

* What's your favorite Python library for AI/ML stuff?
* Any libraries you think don't get enough love?

Here's the link if you want to check it out: [https://www.scalablepath.com/python/python-libraries-machine-learning](https://www.scalablepath.com/python/python-libraries-machine-learning)",Friendly-TechRec-98,1fnt66a,https://reddit.com/r/Python/comments/1fnt66a/best_python_libraries_for_aiml_which_ones_deserve/,https://www.reddit.com/r/Python/comments/1fnt66a/best_python_libraries_for_aiml_which_ones_deserve/,2024-09-23 19:32:03,55,0.74,55,0,33,0,0,False,False,True,False,False,Discussion,self,t3_1fnt66a
Python,A PyQt TodoMVC cross-OS desktop app,"https://github.com/Jeff-Mott-OR/pyqt-todomvc

What My Project Does and A brief comparison: From project‚Äôs readme:

&gt; In the spirit of [TodoMVC](https://todomvc.com/), I used [PyQt](https://riverbankcomputing.com/software/pyqt/intro) (Python + [Qt](https://doc.qt.io/qt-6/qt-intro.html)) to create a cross-OS desktop todo app. And I used the [fman build system](https://build-system.fman.io/) (aka fbs) to package the Python runtime and the Qt library binaries into a standalone executable and installer for each of the big three OSes.

&gt; But why?  
For fun and no profit. When I learned C++, at first I put off learning a GUI library. But I was interested in and always meant to learn the Qt GUI library. It lets you write desktop GUIs once that will look native for each of the various OSes. Later, after I did a hobby project in Python, I stumbled upon PyQt, a project that exposes the Qt C++ library in Python, and I decided to dive in.",MoTTs_,1fnl415,https://reddit.com/r/Python/comments/1fnl415/a_pyqt_todomvc_crossos_desktop_app/,https://www.reddit.com/r/Python/comments/1fnl415/a_pyqt_todomvc_crossos_desktop_app/,2024-09-23 13:59:05,14,0.89,14,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1fnl415
Python,"ComiQ: Comic-Focused Hybrid OCR Library
","**What My Project Does:**

ComiQ is an advanced Optical Character Recognition (OCR) library specifically designed for comics. It combines traditional OCR engines like EasyOCR and PaddleOCR with Google's Gemini Flash-1.5 model to provide accurate text detection and translation in comic images.

**Features**

* Hybrid OCR approach for improved accuracy of Bounding Box of Comics
* Utilizes Gemini Flash-1.5 model, for fixing errors generated by the OCR Engines.
* Gemini Flash-1.5 model, which is free, and allows 1,500 requests per day(As of 23-09-2024).
* Specialized in detecting text within comic bubbles and panels
* Support for multiple OCR engines
* Easy-to-use Python interface

**Comparison**

* [Speech-Bubble-Aware-Automatic-Colorization](https://github.com/Rabbit1010/Speech-Bubble-Aware-Automatic-Comic-Colorization) : Has Downside of Mis-Detection of Text Bubbles, and Does not Extract Text.
* [Bubble-Detector-YOLOv4](https://github.com/ry-eon/Bubble-Detector-YOLOv4) : Has Downsides, with detection of Directional Text, and Background text bubble, and also dosen't extract Text

**Capabilities**

* Please Visit the [Examples](https://github.com/StoneSteel27/ComiQ/tree/main/examples) Section in the GitHub Page.

**Target Audience:**

* ComiQ, was built for people, who wants to extraxct text and process from Comics image,

  
Your Feedback, and advice are welcome üòä

Github: [https://github.com/StoneSteel27/ComiQ](https://github.com/StoneSteel27/ComiQ)",StoneSteel_1,1fnchtz,https://reddit.com/r/Python/comments/1fnchtz/comiq_comicfocused_hybrid_ocr_library/,https://www.reddit.com/r/Python/comments/1fnchtz/comiq_comicfocused_hybrid_ocr_library/,2024-09-23 04:40:35,13,0.86,13,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1fnchtz
Python,PyTrilogy adds typing and a semantic layer to SQL,"PyTrilogy lets you define strongly typed interfaces for your SQL (think TypeScript vs JavaScript) and directly write queries in that same syntax. It's written in Python and can be used from python directly or compile to SQL to be used by other tools. The unified model definition and query language means you can iterate on the model and your queries in realtime. It aims to be more concise, composable, and reusable than SQL, without sacrificing the best parts of the language.

# What My Project Does

* Provides a lightweight, SQL-like language for defining a semantic layer and writing queries against it
* Supports composing/reusing models and through a python-like import syntax
* Automatic join resolution that provides correctness across grains/aggregation/nulls
* Backends for compiling and executing against DuckDB, Bigquery, Snowflake, SQL Server
* Type-checking + other static validation to surface errors sooner in the development cycle

Links:

* [Interactive Demo/Docs](https://trilogydata.dev/)
* [Github](https://github.com/trilogy-data/pytrilogy)

# Target Audience

Do you work with data analytics and love the declarative nature of SQL, but hate some of the sharp corners? Trilogy's opinionated about a workflow where you get your data model accurate, and can then query expressively and confidently. It's not well suited to transactional work, and isn't an ORM.

Aspirationally, for professional data teams it also helps to decouple tables from consumption, optimize ETL graphs, track lineage, and provide better testing. 

Since it compiles to SQL, there's no lock-in - you can always grab the SQL and run it in your favorite tool.  
The current releases are ""good enough"" to experiment with, but are not a fully polished product. **Contributions welcome!**

# Comparison

For python-based ""metrics and dimensions in a DSL that builds SQL"", it's comparable to [metricflow](https://github.com/dbt-labs/metricflow), [dot-ml](https://github.com/zurferr/dotML), and similar semantic interfaces that can build SQL queries. 

",Prestigious_Bench_96,1fn9bxp,https://reddit.com/r/Python/comments/1fn9bxp/pytrilogy_adds_typing_and_a_semantic_layer_to_sql/,https://www.reddit.com/r/Python/comments/1fn9bxp/pytrilogy_adds_typing_and_a_semantic_layer_to_sql/,2024-09-23 01:40:26,25,0.9,25,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1fn9bxp
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1fn7daq,https://reddit.com/r/Python/comments/1fn7daq/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1fn7daq/monday_daily_thread_project_ideas/,2024-09-23 00:00:10,6,0.7,6,0,2,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fn7daq
Python,Python Library to Validate Tax ID Numbers for Over 100 Countries,"**What My Project Does**

Just published a Python library to validate tax ID numbers. I've built up the API that powers it over many years and just now started building an SDK-style library to make integration as easy as possible.

PyPI:¬†[https://pypi.org/project/taxidpro/](https://pypi.org/project/taxidpro/)

GitHub:¬†[https://github.com/balancer-team/taxidpro-py](https://github.com/balancer-team/taxidpro-py)

**Target Audience**

This is for anyone building a form with a tax ID field, or anyone that has a lot of tax ID data to validate.

**Comparison**

I did have a competitor called TIN Check, who was recently acquired, and now I can't even find where they still offer their service.

**Project Notes**

I've also built a JavaScript library, which I published to npm, and what struck me about attempting the same thing in PyPI is that there are SO many build tools and different approaches.¬†[setup.py](http://setup.py/), pyproject.toml, infinite build tools, on and on. The more I looked, the more options I found, with nothing in particular coming out as a clear standard or clear favorite. As I publish more I will continue to experiment with different tooling. Recommendations welcome!

And feedback on the library welcome of course!",taxidpro,1fmxt7p,https://reddit.com/r/Python/comments/1fmxt7p/python_library_to_validate_tax_id_numbers_for/,https://www.reddit.com/r/Python/comments/1fmxt7p/python_library_to_validate_tax_id_numbers_for/,2024-09-22 16:52:03,0,0.45,0,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1fmxt7p
Python,SQLAlchemy Helper (For VS Code),"Hey guys I made this VS Code extension for SQLAlchemy. It's basically a RAG system built around SQLAlchemy docs that you can query through VS Code. Should help out with basic questions / code gen / etc.

[https://marketplace.visualstudio.com/items?itemName=buildwithlayer.sqlalchemy-integration-expert-jYSzG](https://marketplace.visualstudio.com/items?itemName=buildwithlayer.sqlalchemy-integration-expert-jYSzG)",Junior-Description41,1fmw77x,https://reddit.com/r/Python/comments/1fmw77x/sqlalchemy_helper_for_vs_code/,https://www.reddit.com/r/Python/comments/1fmw77x/sqlalchemy_helper_for_vs_code/,2024-09-22 15:41:01,9,0.85,9,0,1,0,0,False,False,True,False,False,Resource,self,t3_1fmw77x
Python,"Hy 1.0.0, the Lisp dialect for Python, has been released","- [Announcement post](https://github.com/hylang/hy/discussions/2608)
- [Official website](https://hylang.org)
- [Source code](https://github.com/hylang/hy)

# What My Project Does

Hy (or ""Hylang"" for long) is a multi-paradigm general-purpose programming language in the Lisp family. It's implemented as a kind of alternative syntax for Python. Compared to Python, Hy offers a variety of new features, generalizations, and syntactic simplifications, as would be expected of a Lisp. Compared to other Lisps, Hy provides direct access to Python's built-ins and third-party Python libraries, while allowing you to freely mix imperative, functional, and object-oriented styles of programming. [(More on ""Why Hy?"")](http://hylang.org/hy/doc/v1.0.0/whyhy)

Okay, admittedly it's a bit much to refer to Hy as ""my project"". I'm the maintainer, but AUTHORS is up to 113 names now.

# Target Audience

Do you think Python's syntax is too restrictive? Do you think Common Lisp needs more libraries? Do you like the idea of a programming language being able to extend itself with as little pain and as much flexibility as possible? Then I've got the language for you.

After nearly 12 years of on-and-off development and lots of real-world use, I think I can finally say that Hy is production-ready.

# Comparison

Within the very specific niche of Lisps implemented in Python, Hy is to my knowledge the most feature-complete and generally mature. The only other one I know of that's still in active development is [Hissp](https://github.com/gilch/hissp), which is a more minimalist approach to the concept. (Edit: and there's the more deliberately Clojurian [Basilisp](https://github.com/basilisp-lang/basilisp).) [MakrellPy](https://github.com/hcholm/makrell-py) is a recently announced quasi-Lispy metaprogrammatic language implemented in Python. Hissp and MakrellPy are historically descended from Hy whereas Basilisp is unrelated.",Kodiologist,1fmur2b,https://reddit.com/r/Python/comments/1fmur2b/hy_100_the_lisp_dialect_for_python_has_been/,https://www.reddit.com/r/Python/comments/1fmur2b/hy_100_the_lisp_dialect_for_python_has_been/,2024-09-22 14:37:02,112,0.92,112,0,40,0,0,False,False,True,False,False,Showcase,self,t3_1fmur2b
Python,QuickApiClient: Create fully typed and declarative API clients easily,"**What My Project Does**

A library for creating fully typed and declarative API clients, quickly and easily. 

**Target Audience**

It's still early days but should work fine for most use cases. Let me know if there's any features you need that are missing and I'll try to add them.

**Comparison**

There's a few libraries that allow you to create API clients. But their interfaces are (IMO) quite a bit more clunky and most don't seem to support types very well.

**What would an API client with this library look like?**

For a single API endpoint over HTTP GET, it could look like this:

    from dataclasses import dataclass
    import quickapi


    # An example type that will be part of the API response
    @dataclass
    class Fact:
        fact: str
        length: int


    # What the API response should look like
    @dataclass
    class ResponseBody:
        current_page: int
        data: list[Fact]


    # Now we can define our API
    class MyApi(quickapi.BaseApi[ResponseBody]):
        url = ""https://catfact.ninja/facts""
        response_body = ResponseBody

And you would use it like this:

    response = MyApi().execute()

    # That's it! Now `response` is fully typed (including IDE support) and conforms to our `ResponseBody` definition
    assert isinstance(response.body, ResponseBody)
    assert isinstance(response.body.data[0], Fact)


It also supports `attrs` or `pydantic` (or `dataclasses` as above) for your model/type definitions, including validation and types/data conversion.

I have a lot more examples (e.g. POST requests, query string params, authentication, error handling, model validation and conversion, multiple API endpoints) on the main README.

I've shared this one here before but it's been a while and I've added a lot of features since.

Github repo: https://github.com/martinn/quickapiclient",martinn404,1fmqq70,https://reddit.com/r/Python/comments/1fmqq70/quickapiclient_create_fully_typed_and_declarative/,https://www.reddit.com/r/Python/comments/1fmqq70/quickapiclient_create_fully_typed_and_declarative/,2024-09-22 11:06:21,40,0.89,40,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1fmqq70
Python,Introducing FileWizardAi: Organizes your Files with AI-Powered Sorting and Search,"I'm excited to share a project I've been working on called FileWizardAi, a Python and Angular-based tool designed to manage your files. This tool automatically organizes your files into a well-structured directory hierarchy and renames them based on their content, making it easier to declutter your workspace and locate files quickly.

The app cann be launched 100% locally.

Here's the GitHub repo; let me know if you'd like to add other functionalities or if there are bugs to fix. Pull requests are also very welcome:

[https://github.com/AIxHunter/FileWizardAI](https://github.com/AIxHunter/FileWizardAI)",Majestic-Quarter-958,1fmqp4a,https://reddit.com/r/Python/comments/1fmqp4a/introducing_filewizardai_organizes_your_files/,https://www.reddit.com/r/Python/comments/1fmqp4a/introducing_filewizardai_organizes_your_files/,2024-09-22 11:04:25,0,0.32,0,0,2,0,0,False,False,True,False,False,Resource,self,t3_1fmqp4a
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1fmgft6,https://reddit.com/r/Python/comments/1fmgft6/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1fmgft6/sunday_daily_thread_whats_everyone_working_on/,2024-09-22 00:00:10,20,0.84,20,0,22,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fmgft6
Python,Automated Import of Holdings to Google Finance from Excel,"I just finished a project using Python and Selenium to automate managing stock portfolios on Google Finance. üöÄ It exports stock transactions from an Excel file directly to Google Finance!

[Demo Video](https://www.reddit.com/r/developersIndia/comments/1flza04/automated_google_finance_portfolio_management/)

**What My Project Does:**¬†This project automates the import of portfolio holdings into Google Finance by reading data from an Excel file. It simplifies the process by automating portfolio setup, stock management, and updates, allowing users to manage their investments with greater ease.

**Target Audience:**¬†The tool is designed for both personal use and small-scale production environments, ideal for individual investors or small firms looking to streamline portfolio management.

**Comparison:**¬†Unlike manual portfolio setup in Google Finance, this project offers a faster and automated alternative. It also differs from existing solutions by focusing specifically on Excel data input, providing a user-friendly and efficient workflow.

I‚Äôd love any feedback! You can check out the code on my¬†[GitHub](https://github.com/mehulrana5/GoogleFinance-Automation). ",Ok-Foot736,1fma2vq,https://reddit.com/r/Python/comments/1fma2vq/automated_import_of_holdings_to_google_finance/,https://www.reddit.com/r/Python/comments/1fma2vq/automated_import_of_holdings_to_google_finance/,2024-09-21 18:53:46,10,0.75,10,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1fma2vq
Python,üîç Curious about Python‚Äôs Pickle module but not sure where to start? üêç,"I‚Äôve just published a beginner-friendly blog post that introduces the basics of Python‚Äôs Pickle module. üìö Whether you're new to serialization and deserialization or just need a refresher, this post has you covered!

In this blog, you'll learn:
üõ†Ô∏è The Fundamentals: What Pickle is, how it works, and why it‚Äôs essential for Python data handling.
üîß Serialization &amp; Deserialization: Basic concepts and practical examples to get you started.

üîó Read the full blog [here](https://nikhilbaskar.substack.com/p/demystifying-python-pickle-serialization)

Stay tuned, as we‚Äôll be diving into the advanced internals of Pickle in a future post. üåü Feel free to share your thoughts and experiences in the comments! üí¨
",PuddingLeft1268,1fm2y1f,https://reddit.com/r/Python/comments/1fm2y1f/curious_about_pythons_pickle_module_but_not_sure/,https://www.reddit.com/r/Python/comments/1fm2y1f/curious_about_pythons_pickle_module_but_not_sure/,2024-09-21 13:24:29,1,0.66,1,0,1,0,0,False,False,True,False,False,Tutorial,self,t3_1fm2y1f
Python,PerpetualBooster: improved multi-threading and quantile regression support,"* **What My Project Does**
   * It is a gradient boosting algorithm which doesn't need hyperparameter tuning
* **Target Audience**¬†
   * It can be used in production for machine learning tasks.
* **Comparison**
   * It doesn't need hyperparameter tuning compared to alternatives.


PerpetualBooster v0.4.7: Multi-threading &amp; Quantile Regression

Excited to announce the release of PerpetualBooster v0.4.7! 

This update brings significant performance improvements with multi-threading support and adds functionality for quantile regression tasks. PerpetualBooster is a hyperparameter-tuning-free GBM algorithm that simplifies model building. Similar to AutoML, control model complexity with a single ""budget"" parameter for improved performance on unseen data.


Easy to Use:
```python
from perpetual import PerpetualBooster
model = PerpetualBooster(objective=""SquaredLoss"")
model.fit(X, y, budget=1.0)
```

Install:
pip install perpetual


Github repo:
[https://github.com/perpetual-ml/perpetual](https://github.com/perpetual-ml/perpetual)",mutlu_simsek,1flzryh,https://reddit.com/r/Python/comments/1flzryh/perpetualbooster_improved_multithreading_and/,https://www.reddit.com/r/Python/comments/1flzryh/perpetualbooster_improved_multithreading_and/,2024-09-21 10:13:32,8,0.73,8,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1flzryh
Python,"ParLlama v0.3.8 released. Now supports Ollama, OpenAI, GoogleAI, Anthropic, Groq","# What My project Does:

PAR LLAMA is a powerful TUI (Text User Interface) written in Python and designed for easy management and use of Ollama-based Large Language Models as well as interfacing with online Providers such as Ollama, OpenAI, GoogleAI, Anthropic, Groq

# Key Features:

* Easy-to-use interface for interacting with Ollama and cloud hosted LLMs
* Dark and Light mode support, plus custom themes
* Flexible installation options (uv, pipx, pip or dev mode)
* Chat session management
* Custom prompt library support

# GitHub and PyPI

* PAR LLAMA is under active development and getting new features all the time.
* Check out the project on GitHub or for full documentation, installation instructions, and to contribute:¬†[https://github.com/paulrobello/parllama](https://github.com/paulrobello/parllama)
* PyPI [https://pypi.org/project/parllama/](https://pypi.org/project/parllama/)

# Comparison:

I have seem many command line and web applications for interacting with LLM's but have not found any TUI related applications

# Target Audience:

Anybody that loves or wants to love terminal interactions and LLM's",probello,1fltdi8,https://reddit.com/r/Python/comments/1fltdi8/parllama_v038_released_now_supports_ollama_openai/,https://www.reddit.com/r/Python/comments/1fltdi8/parllama_v038_released_now_supports_ollama_openai/,2024-09-21 02:52:54,20,0.76,20,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1fltdi8
Python,Ereddicator v3.1: A Python-based Reddit Content Removal Tool,"**What My Project Does:**

Ereddicator is a Python script that allows you to selectively delete and/or edit your Reddit content: https://github.com/Jelly-Pudding/ereddicator/

Key features include:

* **Simple GUI**
* **Selective Content Removal**: Choose which types of content to delete, including:
   * Comments
   * Posts
   * Saved items
   * Upvoted content
   * Downvoted content
   * Hidden posts
* **Edit-Only Mode**: For comments and posts, you can choose to only edit the content without deleting it. This may be desirable as Reddit is capable of restoring deleted comments.
* **Karma Threshold**: You can set karma thresholds for comments and posts. Content with karma above or equal to the threshold will be preserved.
* **Subreddit Filtering**:
   * Whitelist: Specify subreddits to exclude from processing.
   * Blacklist: Specify subreddits to exclusively process, ignoring all others.
* **Date Range Filtering**: Set a specific date range to process content from, allowing you to target content from a particular time period.
* **Dry Run Mode**: Simulate the removal process without actually making any changes. In this mode, Ereddicator will print out what actions would be taken (e.g. what comments and posts will be deleted) without modifying any of your Reddit content.
* **Advertise Option**: When enabled, there's a 50% chance for each comment or post to be replaced with an advertisement for Ereddicator instead of random text before deletion.

Ereddicator also has an added measure against the original content being read. The content replacement process (with either random text or an advertisement) occurs three times immediately before the final edit or deletion.

**Comparison:**

Shreddit is the main alternative and it has various forms:

1. https://shreddit.com/ - a website that requires payment.
2. https://github.com/andrewbanchich/shreddit - An open-source Rust implementation.
3. The original Shreddit - A Python project that was abandoned in 2017: https://github.com/x89/Shreddit

When it came to deleting my own Reddit history, I was not particularly taken with any of the above options. I definitely did not want to pay, nor did I really want to use something quite outdated (2017 is somehow seven years ago). The rust solution is definitely good and updated and feature-rich, but it is a... Rust solution. And I'm more familiar with Python. Nothing against Rust I just don't know it well at all.

In my opinion, I think one of the advantages of Ereddicator is that while it may not have as many features, it is more user-friendly. There is even an option for Windows users who do not have Python installed to just run an EXE and follow a few instructions.

**Target Audience:**

Ereddicator is just designed for Reddit users who want to clean up their post history in a hopefully simple and straightforward manner.

Please feel free to give this a try and give recommendations for improvement / features to add :)",LolwhatYesme,1flrphi,https://reddit.com/r/Python/comments/1flrphi/ereddicator_v31_a_pythonbased_reddit_content/,https://www.reddit.com/r/Python/comments/1flrphi/ereddicator_v31_a_pythonbased_reddit_content/,2024-09-21 01:18:30,47,0.88,47,0,10,0,0,False,False,True,False,False,Showcase,self,t3_1flrphi
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1flq8cn,https://reddit.com/r/Python/comments/1flq8cn/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1flq8cn/saturday_daily_thread_resource_request_and/,2024-09-21 00:00:13,4,0.71,4,0,3,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1flq8cn
Python,Dive into Machine Learning: Free Python Tutorials &amp; Downloadable Markdown Files!,"Hey Redditors!

I've always been fascinated by how machine learning algorithms work, so I decided to dive deep and create a series of comprehensive tutorials in Python. These tutorials cover every aspect of machine learning, from data preprocessing and model training to evaluation and deployment.

As my collection of tutorials grew, I realized that sharing them with the community could help others on their machine learning journey. So, I created a [repository](https://github.com/xbeat/Machine-Learning) where you can download all these tutorials in Markdown (MD) format, making it easy to use them in Jupyter notebooks or any other platform you prefer.

# What My Project Does:

My project provides a comprehensive collection of machine learning tutorials in Python. Each tutorial is designed to be easy to follow, with step-by-step guides and practical examples. The tutorials cover a wide range of topics, including data preprocessing, model training, evaluation, and deployment. All tutorials are available in Markdown (MD) format, making them easy to use in Jupyter notebooks or any other coding environment.

# How to Access:

 [https://github.com/xbeat/Machine-Learning](https://github.com/xbeat/Machine-Learning) ",kaolay,1fleulk,https://reddit.com/r/Python/comments/1fleulk/dive_into_machine_learning_free_python_tutorials/,https://www.reddit.com/r/Python/comments/1fleulk/dive_into_machine_learning_free_python_tutorials/,2024-09-20 15:31:50,23,0.93,23,0,14,0,0,False,False,True,False,False,Showcase,self,t3_1fleulk
Python,2024 Guide to the Top RAG Frameworks,"We‚Äôve just released our **2024 guide** comparing some of the top **Retrieval-Augmented Generation (RAG)** frameworks, including **Pathway**, **Cohere**, **LlamaIndex**, **LangChain**, and more.

**What Our Guide Covers:**

From our deployment experience, we‚Äôve identified several key factors to consider when selecting a RAG framework:

* **Deployment Flexibility:** Does it support both local and cloud setups? How well does it scale across environments?
* **Data Sources &amp; Connectors:** Can it integrate with common data sources, and does it come with built-in connectors for ease of use?
* **RAG Features:** What retrieval and indexing methods are offered? Are advanced querying techniques supported?
* **Advanced Prompting &amp; Evaluation:** How well does it optimize prompts and handle result evaluation?

**Comparison Highlights:**

Our guide includes a detailed, side-by-side comparison of frameworks like **Pathway** (our framework with over 8k GitHub stars), **Cohere**, **LangChain**, **LlamaIndex**, **Haystack**, and **Assistant API**. Each framework‚Äôs strengths are broken down in terms of deployment, real-time data handling, and more.

If you‚Äôre working on RAG projects in Python or considering which framework to use next, we think you‚Äôll find this helpful!

üîó **Comparison page:** [https://pathway.com/rag-frameworks](https://pathway.com/rag-frameworks)

Looking forward to your thoughts and any feedback on the guide!",Typical-Scene-5794,1fld4p9,https://reddit.com/r/Python/comments/1fld4p9/2024_guide_to_the_top_rag_frameworks/,https://www.reddit.com/r/Python/comments/1fld4p9/2024_guide_to_the_top_rag_frameworks/,2024-09-20 14:18:18,37,0.69,37,0,14,0,0,False,False,True,False,False,Discussion,self,t3_1fld4p9
Python,PyOCI: Publish and install (private) python packages using OCI (docker) registries,"Hi!

Today I'd like to share my side-project [PyOCI](https://github.com/AllexVeldman/pyoci)**.**

It allows using OCI registries to store and manage python packages.  
It's main purpose is offloading storage and access control of private python packages to an image registry you probably already have access to, like \`ghcr.io\`.

**What my project does:**

**PyOCI** acts as a proxy between your package manager (pip, poetry, pipenv, ...) and an OCI registry allowing you to \`pip install\` private packages without the need for yet another cloud provider.

Packages are published to the registry as distinct versions/tags with separate architectures for each build target.

Currently I only tested \`ghcr.io\`, if you'd like to try other registries I would be very happy to hear about your experience.

Because PyOCI acts like a simple pypi index, it can also work with automated dependency updates like Dependabot and Renovate.

**Target audience:**

This project is in an early stage, although I try to keep breaking changes to a minimum.

I think this will mainly benefit:

* personal projects
* small companies that want to limit the number of cloud services
* organizations that want to apply Github's access control to their private packages

Anyone is welcome to try it out using [https://pyoci.allexveldman.nl](https://pyoci.allexveldman.nl)  
Please note that you might hit rate-limits when used excessively.

A self-hosted version, through a docker image and/or CLI, is something I might add in the future.

**Comparison:**

I'm not aware of similar projects, of course if you already have access to a private registry like Artifactory, that would be a better fit.



For more information, including an example poetry setup and Renovate config: [https://github.com/AllexVeldman/pyoci](https://github.com/AllexVeldman/pyoci)  
",Acceptable-Eye9280,1flbkn7,https://reddit.com/r/Python/comments/1flbkn7/pyoci_publish_and_install_private_python_packages/,https://www.reddit.com/r/Python/comments/1flbkn7/pyoci_publish_and_install_private_python_packages/,2024-09-20 13:07:21,7,1.0,7,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1flbkn7
Python,Simple Automation Script For Extracting Zip Files ,"**AutoExtract** is a Python-based tool that monitors a specified folder for ZIP files and automatically extracts them to a designated directory. It keeps track of processed files to avoid duplicate extractions and runs continuously, checking for new ZIP files at regular intervals.

**‚úÖWhat My Project Does:**

* Monitors a folder for new ZIP files
* Automatically extracts ZIP contents to a specified location
* Keeps track of processed files to prevent redundant extractions
* Customizable folder paths and checking intervals

**‚úÖTarget Audience:**

This project is primarily intended for

* **Personal use**: Automate repetitive tasks such as extracting ZIP files from a specified directory.

**‚úÖComparison**

Compared to existing alternatives like desktop file managers with built-in extraction tools:

* **Simplicity**: Unlike GUI tools, this Python-based approach allows automation without manual intervention.
* **Customization**: Users can modify the folder paths, extraction logic, or check intervals, making it more adaptable than off-the-shelf solutions.

GitHub Link - [https://github.com/pratham2402/AutoExtract](https://github.com/pratham2402/AutoExtract)",Psychological_Egg007,1fl6n3u,https://reddit.com/r/Python/comments/1fl6n3u/simple_automation_script_for_extracting_zip_files/,https://www.reddit.com/r/Python/comments/1fl6n3u/simple_automation_script_for_extracting_zip_files/,2024-09-20 07:47:26,15,0.79,15,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1fl6n3u
Python,"Tips on structuring modern python apps (e.g. a web api) that uses types, typeddict, pydantic, etc? ","I worked a lot on python web/api apps like 10-15 years ago but have mostly used other languages since then. Now I'm back to building a python app, using all the latest tools like type hinting, FastAPI, and Pydantic which I'm really enjoying overall.

I feel like code organization is more of a headache than it used to be, though, and I need better patterns than just MVC to keep things organized. E.g. a simple example - if I define a pydantic class for my request body in a controller file and then pass it as an argument to a method on my model, there's automatically a circular import (the model needs to define the type it takes as its argument, and the controller needs to import the model).

I know you can use ""if TYPE\_CHECKING"" but that seems messy and it means you can't use the type at runtime to do something like ""if type(foo) = MyImportedType"".

What are some good file structure conventions to follow that make this easier? ",Crazy-Button5339,1fkz1cb,https://reddit.com/r/Python/comments/1fkz1cb/tips_on_structuring_modern_python_apps_eg_a_web/,https://www.reddit.com/r/Python/comments/1fkz1cb/tips_on_structuring_modern_python_apps_eg_a_web/,2024-09-20 00:07:51,65,0.88,65,0,22,0,0,False,False,True,False,False,Discussion,self,t3_1fkz1cb
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1fkyw3m,https://reddit.com/r/Python/comments/1fkyw3m/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1fkyw3m/friday_daily_thread_rpython_meta_and_freetalk/,2024-09-20 00:00:42,2,0.76,2,0,2,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fkyw3m
Python,Txtify: Like Whisper but with Easy Deployment‚ÄîTranscribe and Translate Audio and Video Effortlessly,"Hey everyone,

I wanted to share **Txtify**, a project I've been working on. It's a free, open-source web application that transcribes and translates audio and video using AI models.

GitHub Repository: [https://github.com/lkmeta/txtify](https://github.com/lkmeta/txtify)

**Online Demo**: Try the online simulation demo at [Txtify Website](https://txtify-web.vercel.app/).[](https://github.com/lkmeta/txtify)

**What My Project Does**

* **Effortless Transcription and Translation**: Converts audio and video files into text using advanced AI models like **Whisper** from Hugging Face.
* **Multi-Language Support**: Transcribe and translate in over **30 languages**.
* **Multiple Output Formats**: Export results in formats such as **.txt**, **.pdf**, **.srt**, **.vtt**, and **.sbv**.
* **Docker Containerization**: Now containerized with Docker for easy deployment and monitoring.

**Target Audience**

* **Translators and Transcriptionists**: Simplify your workflow with accurate transcriptions and translations.
* **Developers**: Integrate Txtify into your projects or contribute to its development.
* **Content Creators**: Easily generate transcripts and subtitles for your media to enhance accessibility.
* **Researchers**: Efficiently process large datasets of audio or video files for analysis.

**Comparison**

**Txtify vs. Other Transcription Services**

* **High-Accuracy Transcriptions**: Utilizes Whisper for state-of-the-art transcription accuracy.
* **Open-Source and Self-Hostable**: Unlike many services that require subscriptions or have limitations, Txtify is FREE to use and modify.
* **Full Control Over Data**: Host it yourself to ensure privacy and security of your data.
* **Easy Deployment with Docker**: Deploy easily on any platform without dependency headaches.

  
**Feedback Welcome**

Hope you find Txtify useful! I'd love to hear your thoughts, feedback, or any suggestions you might have.

* **Reporting Issues**:
   * **Contact Form**: Submit feedback via the [contact page](https://txtify-web.vercel.app/contact).
   * **GitHub Issues**: Open an issue on the [GitHub repository](https://github.com/lkmeta/txtify/issues).",ChoiceUpset5548,1fksqva,https://reddit.com/r/Python/comments/1fksqva/txtify_like_whisper_but_with_easy/,https://www.reddit.com/r/Python/comments/1fksqva/txtify_like_whisper_but_with_easy/,2024-09-19 19:02:34,26,0.87,26,0,19,0,0,False,False,True,False,False,Showcase,self,t3_1fksqva
Python,Best Practices for JSON Conversion,"When should you utilize classes (create a class with functions to create modifications) and when is it suitable to just modify the JSON as needed?

For example, I‚Äôm creating a script that takes in a CSV file and a JSON file. It makes some API calls to Azure Powershell to retrieve some Azure Policy objects in JSON format. It uses the data from the CSV and JSON to make modifications and returns the modified Azure Policy objects in JSON format. Should I create a class that represents an Azure Policy object with functions to create the modification? Or should I just do the conversion outright? Hope I‚Äôm explaining that correctly.",Much-Blackberry-9364,1fko3dn,https://reddit.com/r/Python/comments/1fko3dn/best_practices_for_json_conversion/,https://www.reddit.com/r/Python/comments/1fko3dn/best_practices_for_json_conversion/,2024-09-19 15:48:24,17,0.85,17,0,22,0,0,False,False,True,False,False,Discussion,self,t3_1fko3dn
Python,Phantom: a simple ARP scanner for IoT devices.,"Hello folks! Just released a super beta version of Phantom!!!

**What My Project Does**

Phantom is an¬†**ARP Scanner**¬†mostly designed to detect directly connected IoT devices. The tool provides details like IP addresses, MAC addresses, hostnames, and the manufacturers of the devices based on their MAC addresses. The tool features a graphical user interface (GUI) built with¬†**PySide6**¬†(Qt framework) and utilizes¬†**scapy**¬†for ARP scanning.

**Target Audience: engineers**

Looking for feedbacks and ideas, my idea is to add an arp spoofer and a sniffer to allow monitoring of the IoT devices traffic, thanks in advance!  
[https://github.com/CyberRoute/phantom](https://github.com/CyberRoute/phantom)

**Comparison**

Inspired by:¬†[https://github.com/nyu-mlab/iot-inspector-client](https://github.com/nyu-mlab/iot-inspector-client)

Contributions are very welcome!!!",Technical_Shelter621,1fkni2b,https://reddit.com/r/Python/comments/1fkni2b/phantom_a_simple_arp_scanner_for_iot_devices/,https://www.reddit.com/r/Python/comments/1fkni2b/phantom_a_simple_arp_scanner_for_iot_devices/,2024-09-19 15:23:09,10,0.92,10,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1fkni2b
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1fk7g63,https://reddit.com/r/Python/comments/1fk7g63/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1fk7g63/thursday_daily_thread_python_careers_courses_and/,2024-09-19 00:00:08,3,0.68,3,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fk7g63
Python,Image Clustering and Visualization using deep learning models,"Hi guys, I created an image clustering tool that uses deep learning models(currently ResNet-50 and ViT) to extract features from images and group them based on visual similarity. The script  organizes images into folders by clusters and also creates composite grid images to represent the results.

# What My Project Does

The tool extracts features from your image dataset using deep learning models and clusters the images based on these features. It then organizes the images into directories and generates grid visualizations to help you easily see and manage your image clusters. Additionally, it saves the extracted features in a pickle file to avoid recomputing them every time you adjust the number of clusters or the clustering method.

# Target Audience

This tool is designed for anyone dealing with large image datasets, whether you're working on data management, data cleaning, curation, or analysis tasks. It‚Äôs suitable for both researchers and hobbyists who need an efficient and easy way to organize and visualize their image datasets. While it‚Äôs robust enough for practical applications, it‚Äôs also straightforward enough for those just looking to experiment with image clustering.

# Comparison

Unlike some existing image clustering tools that require you to recompute features each time you change clustering parameters, this tool saves extracted features in a pickle file. This allows you to easily adjust cluster settings without the need for redundant computations. Also, the tool provides both folder-based and visual grid representations of clusters, making it versatile compared to alternatives that may only offer one form of output.

I‚Äôm also looking for suggestions and ideas to enhance the script or  reorganize the code and maybe make it into a python package if possible. If you have any features in mind or improvements you think could be valuable, I‚Äôd love to hear your thoughts!

  
Feel free to check it out and let me know your thoughts!

Github Link: [https://github.com/ahmadjaved97/ImageClusterViz](https://github.com/ahmadjaved97/ImageClusterViz)",Ok-Prior-5465,1fk43ku,https://reddit.com/r/Python/comments/1fk43ku/image_clustering_and_visualization_using_deep/,https://www.reddit.com/r/Python/comments/1fk43ku/image_clustering_and_visualization_using_deep/,2024-09-18 21:24:53,2,0.6,2,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1fk43ku
Python,"Simon Willison: ""Things I've learned serving on the board of the Python Software Foundation""","Pretty good insights on what the PSF is and how it relates to the Python language from Django co-creator Simon Willison:

https://simonwillison.net/2024/Sep/18/board-of-the-python-software-foundation/

The entire post is worth reading, but here are links to specific sections:

* [What is the PSF?](https://simonwillison.net/2024/Sep/18/board-of-the-python-software-foundation/#what-is-the-psf)
* [The PSF employs staff](https://simonwillison.net/2024/Sep/18/board-of-the-python-software-foundation/#the-psf-employs-staff)
* [A lot of this is about money](https://simonwillison.net/2024/Sep/18/board-of-the-python-software-foundation/#a-lot-of-this-is-about-money)
* [The PSF does not directly develop Python itself](https://simonwillison.net/2024/Sep/18/board-of-the-python-software-foundation/#the-psf-does-not-directly-develop-python-itself)
* [PyPI‚Äîthe Python Package Index](https://simonwillison.net/2024/Sep/18/board-of-the-python-software-foundation/#pypi-the-python-package-index)
* [PyCon is a key commitment](https://simonwillison.net/2024/Sep/18/board-of-the-python-software-foundation/#other-psf-activities)
* [Other PSF activities](https://simonwillison.net/2024/Sep/18/board-of-the-python-software-foundation/#other-psf-activities)
* [Work Groups](https://simonwillison.net/2024/Sep/18/board-of-the-python-software-foundation/#work-groups)
* [Acting as a fiscal sponsor](https://simonwillison.net/2024/Sep/18/board-of-the-python-software-foundation/#acting-as-a-fiscal-sponsor)
* [Life as a board member](https://simonwillison.net/2024/Sep/18/board-of-the-python-software-foundation/#life-as-a-board-member)
* [The kinds of things the board talks about](https://simonwillison.net/2024/Sep/18/board-of-the-python-software-foundation/#the-kinds-of-things-the-board-talks-about)
* [Want to know more?](https://simonwillison.net/2024/Sep/18/board-of-the-python-software-foundation/#want-to-know-more-)",AlSweigart,1fjzbk9,https://reddit.com/r/Python/comments/1fjzbk9/simon_willison_things_ive_learned_serving_on_the/,https://www.reddit.com/r/Python/comments/1fjzbk9/simon_willison_things_ive_learned_serving_on_the/,2024-09-18 18:02:49,130,0.95,130,0,30,0,0,False,False,True,False,False,Discussion,self,t3_1fjzbk9
Python,Introducing FastAgency: the fastest way to deploy a console or web app from your AutoGen workflow,"Hey everyone! I‚Äôm one of the core developers of [**AutoGen**](https://github.com/microsoft/autogen), a very popular open-source framework for developing AI agents with over 30k stars on GitHub.

I‚Äôve been working with my team on an open-source project called [**FastAgency**](https://github.com/airtai/fastagency). We designed it to help developers quickly take a prototype built in AutoGen straight to production. We just released a version that lets you run your workflow as either:

* A simple **console application** (great for debugging)
* A **web application** using [Mesop](https://google.github.io/mesop/) with **just a single-line change**!

We would love for you to check it out, give feedback, or contribute! The project is open-source, and contributors are always welcome :)

[https://github.com/airtai/fastagency](https://github.com/airtai/fastagency)",davorrunje,1fjrqui,https://reddit.com/r/Python/comments/1fjrqui/introducing_fastagency_the_fastest_way_to_deploy/,https://www.reddit.com/r/Python/comments/1fjrqui/introducing_fastagency_the_fastest_way_to_deploy/,2024-09-18 12:37:33,24,0.82,24,0,0,0,0,False,False,True,False,False,Resource,self,t3_1fjrqui
Python,Django-Routify for routing your views in classic Django,"Just dropped beta version for my own package which provide decorator routing for your views.

More details in PyPi:  
[https://pypi.org/project/django-routify/](https://pypi.org/project/django-routify/)

I'll also appreciate for star in repo ;D

**Simple example:**

https://preview.redd.it/pa22t6540kpd1.png?width=1039&amp;format=png&amp;auto=webp&amp;s=ae349c01d5e9d93dcfdbfa82176c5eab7aec7dc0",UnderstandingOnly470,1fjqrvn,https://reddit.com/r/Python/comments/1fjqrvn/djangoroutify_for_routing_your_views_in_classic/,https://www.reddit.com/r/Python/comments/1fjqrvn/djangoroutify_for_routing_your_views_in_classic/,2024-09-18 11:46:24,15,0.9,15,0,5,0,0,False,False,True,False,False,News,https://b.thumbs.redditmedia.com/R7NBUTp1OxyKq8BctzmL14-0NirczQZaq_C9abT5SaA.jpg,t3_1fjqrvn
Python,Augmenting Human Actions with Machine Learning Assistance,"Hello, this is a recent project of mine. 

What My Project Does:

Although the key element of the project revolves around basic object detection models I ran this using Meta‚Äôs recent-ish sunglasses with the built in camera and speakers. This allowed me to stream my feed to a computer and have it read back to me the actions I should take. For fun I used this for poker and blackjack but I do plan to implement it later for some more helpful things. All written in python of course.

Target Audience:
Not exactly sure. Mainly did it as a fun project but the core elements do align well for assistive technologies. Implementing core tech can be useful for people with vision impairments or need of extra assistive care.


Comparison:
Looking on YT and GitHub there are already examples of code with software for counting cards and playing poker but I feel like using the Meta glasses really makes things go a lot smoother. Also highlights the use as a means of assistive tech.

YT Video: https://youtu.be/dnTeegJKP9o?si=oozssx1o7dWwRZzw

GitHub: https://github.com/JaredCarrillo207/SHADES",0ne-autumn-leaf,1fjpncn,https://reddit.com/r/Python/comments/1fjpncn/augmenting_human_actions_with_machine_learning/,https://www.reddit.com/r/Python/comments/1fjpncn/augmenting_human_actions_with_machine_learning/,2024-09-18 10:37:20,0,0.5,0,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1fjpncn
Python,threadspipepy: A python library for Instagram Threads APIs,"What My Project Does

It‚Äôs a Python library for sending posts the easiest way to Instagram Threads using the official Meta‚Äôs Threads API, you can upload local files and in which it upload the files to GitHub first and then gets their download link which it sends to the Threads API (and then deletes them later), because Threads only allows the urls to files located on public servers and which is going to be challenging when uploading files that're available locally on your computer, you can also implement the Authorization Window easily to get the authorization code which is needed for the short and long lived access tokens which you can swap for both tokens either using the get\_access\_tokens method or through the ThreadsPipePy CLI helper and many others.

GitHub repository: [https://github.com/paulosabayomi/ThreadsPipe-py](https://github.com/paulosabayomi/ThreadsPipe-py)

Target Audience

Developers who wants to build automated applications or post schedulers and other interactive use cases for Instagram Threads.

Comparison

There are currently no other python libraries for Threads API that uses the official Meta‚Äôs Threads APIs (that‚Äôs one of the reasons why I decided to create ThreadsPipePy) except for the [ThreadsPy](https://pypi.org/project/threads-py/) library which used the unofficial and reversed engineered Threads APIs but have now been deprecated.

Other cool things you might want to know about the library

* It will automatically creates a thread üßµ-like post if the post‚Äôs character length is more than the limit which is 500
* It will also automatically split media files into thread-like posts if the media files are more than the limit which is 10
* It has a CLI helper which makes it easier to generate and refresh access tokens
* It can upload local files and you can also upload files in base64 format

The link to the project on Pypi [https://pypi.org/project/threadspipepy/](https://pypi.org/project/threadspipepy/).

Installation is \`pip3 install threadspipepy\`",paulos_ab,1fjp18l,https://reddit.com/r/Python/comments/1fjp18l/threadspipepy_a_python_library_for_instagram/,https://www.reddit.com/r/Python/comments/1fjp18l/threadspipepy_a_python_library_for_instagram/,2024-09-18 09:56:15,1,1.0,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1fjp18l
Python,New things updated to JetMaker - Python framework to build distributed systems,"# What My Project Does

Jetmaker is an end-to-end framework designed to simplify the development of distributed systems in Python. It enables distributed Python applications to seamlessly access each other's services, resources, objects, and data, making inter-application interactions feel as though they are operating within the same environment. Jetmaker also provides powerful namespace sharing and synchronization tools, allowing distributed applications to work together as a unified, coordinated system.

# Target Audience

It is for Python developers to build systems which need multiple nodes to work together in a heterogenous manner, for different nodes to take different jobs but connect together.

# Comparison

Ray and Dask are great tools for distributing workloads to multiple computers, Jetmaker and they serve different purposes, Jetmaker is designed for individual nodes to communicate with each other.

Github:¬†[https://github.com/gavinwei121/Jetmaker](https://github.com/gavinwei121/Jetmaker)

# Note

My earlier post was removed due to violations with formatting requirements, now it is reformatted and posted again.

Hope everyone enjoy it and tell me your thoughts about Jetmaker. \^\_\^

# What's new

we added Stream Listener in JetMaker, so now developers to attach listeners to process real-time data and messages across the network of nodes. 

You can see it here: [https://remeny-technologies.gitbook.io/jetmaker-documentation/stream-processing-and-event-listener](https://remeny-technologies.gitbook.io/jetmaker-documentation/stream-processing-and-event-listener)

  
",Affectionate_Set_326,1fjkdvo,https://reddit.com/r/Python/comments/1fjkdvo/new_things_updated_to_jetmaker_python_framework/,https://www.reddit.com/r/Python/comments/1fjkdvo/new_things_updated_to_jetmaker_python_framework/,2024-09-18 04:23:09,8,0.91,8,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1fjkdvo
Python,Open-source Dash app that features dashboards with varying levels of complexity,"What My Project Does: This Dash app, whose source code [is available here](https://github.com/kburchfiel/pfn/tree/main/Online_Visualizations/PFN_Dash_App_Demo), demonstrates how to use Dash to create a series of interactive online visualizations, ranging from from simple charts to more complex interactive setups. 

Target Audience: These dashboards and their corresponding source code will hopefully serve as a useful reference for developers who are evaluating different ways to represent data using Dash. 

Comparison: This project has been released under the MIT license and thus offers developers more flexibility than projects released under more restrictive terms. In addition, this app may be more cost-effective than ones created with propietary tools like Tableau, as such tools may require the user to pay a significant amount in licensing fees. Finally, the live demo (available via the following link) allows users to easily review each of the sample dashboards. 

**[Click here](https://pfndashappdemo-ymc7cs3r5q-uc.a.run.app/) to view the Google Cloud Run-hosted version of this app.** *(If no one has accessed the app recently, it will take several seconds to load, as the app is set to run on demand in order to save costs.)*


## Dashboard overviews:

The [Fixed Dashboard](https://pfndashappdemo-ymc7cs3r5q-uc.a.run.app/fixed_dashboard) page shows a very simple dashboard setup that lacks user-defined filter and comparison settings. 


The [Simple Interactive Dashboard](https://pfndashappdemo-ymc7cs3r5q-uc.a.run.app/simple_interactive_dashboard) page displays a relatively straightforward interactive enrollment dashboard. This dashboard didn't require much code to write, but its functionality is rather limited.

The [Flexible Survey Results](https://pfndashappdemo-ymc7cs3r5q-uc.a.run.app/flexible_survey_results_dashboard) and [Flexible Enrollment](https://pfndashappdemo-ymc7cs3r5q-uc.a.run.app/flexible_enrollment_dashboard) dashboard pages allow for a wide range of comparison and color options. These options are made possible by the autopivot() and autobar() functions found within [auto_pivot_and_graph.py](https://github.com/kburchfiel/pfn/blob/main/Online_Visualizations/PFN_Dash_App_Demo/auto_pivot_and_graph.py). (You may also find these functions useful for developing standlone Plotly charts.)

The Flexible Enrollment Dashboard also makes use of an import_layout() function (stored within [import_layout.py](https://github.com/kburchfiel/pfn/blob/main/Online_Visualizations/PFN_Dash_App_Demo/import_layout.py)) in order to reduce the amount of code needed to define the page's structure and menu options. In addition, this dashboard applies the autotable() function in [auto_pivot_and_graph.py](https://github.com/kburchfiel/pfn/blob/main/Online_Visualizations/PFN_Dash_App_Demo/auto_pivot_and_graph.py) to display a tabular view of the data featured in the graph.

The dash-pivottable library makes it very easy to create interactive dashboards. Examples of this library in use can be found within the [Dash Pivottable (Enrollment)](https://pfndashappdemo-ymc7cs3r5q-uc.a.run.app/dash_pivottable_enrollment) and [Dash Pivottable (Survey Results)](https://pfndashappdemo-ymc7cs3r5q-uc.a.run.app/dash_pivottable_survey_results) pages.

## Development notes:

1. I made use of a standalone Jupyter notebook ([notebook_for_testing.ipynb](https://github.com/kburchfiel/pfn/blob/main/Online_Visualizations/PFN_Dash_App_Demo/notebook_for_testing.ipynb)) to test out code before integrating it into my Dash app files.

1. The source data is imported from GitHub. A more realistic approach would retrieve data from an online database; however, that would cause this project to incur a monthly database hosting expense.

1. The [dash-bootstrap-components](https://dash-bootstrap-components.opensource.faculty.ai/docs/components/layout/) library is used extensively within many of these dashboards. It's a great option for making your dashboards more aesthetically pleasing *and* more flexible.

1. This app is hosted on Google Cloud Run, though you can also host it locally by cloning this project. See the [Simple App With Login](https://github.com/kburchfiel/pfn/tree/main/Online_Visualizations/Simple_App_With_Login) Readme for more information on hosting Dash apps within Cloud Run.",BX1959,1fjk4x8,https://reddit.com/r/Python/comments/1fjk4x8/opensource_dash_app_that_features_dashboards_with/,https://www.reddit.com/r/Python/comments/1fjk4x8/opensource_dash_app_that_features_dashboards_with/,2024-09-18 04:08:49,22,0.89,22,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1fjk4x8
Python,"Edifice is like React, but with Python instead of JavaScript, and Qt Widgets instead of the HTML DOM","Edifice v1.0.0 was released last month.

[https://github.com/pyedifice/pyedifice](https://github.com/pyedifice/pyedifice)

Edifice offers a declarative framework for Qt which is like **React**, but with **Python** instead of **JavaScript**, and [**Qt Widgets**](https://doc.qt.io/qt-6/qtwidgets-index.html) instead of the **HTML DOM**. 

# What My Project Does

- Modern **declarative** UI paradigm from web development.
- **100% Python** application development, no language inter-op.
- A **native** Qt desktop app instead of a bundled web browser.
- Fast iteration via **hot-reloading**.
  
# Target Audience

Developers who want to make a desktop user interface in Python because their useful libraries are in Python (think PyTorch).
  
# Comparison

## Edifice vs. Qt Quick

[Qt Quick](https://doc.qt.io/qtforpython-6/PySide6/QtQuick/) is Qt‚Äôs declarative GUI framework for Qt.

Qt Quick programs are written in Python + the special [QML](https://doc.qt.io/qtforpython-6/overviews/qmlapplications.html) language + JavaScript.

Edifice programs are written in Python.

Because Edifice programs are only Python, binding to the UI is much more straightforward. Edifice makes it easy to dynamically create, mutate, shuffle, and destroy sections of the UI. Qt Quick assumes a much more static interface.

Qt Quick is like DOM + HTML + JavaScript, whereas Edifice is like React. QML and HTML are both declarative UI languages but they require imperative logic in another language for dynamism. Edifice and React allow fully dynamic applications to be specified declaratively in one language.

## Others

Here is a survey of [other Python declarative native GUI projects](https://github.com/pyedifice/pyedifice/discussions/43).",jamesdbrock,1fjjjy0,https://reddit.com/r/Python/comments/1fjjjy0/edifice_is_like_react_but_with_python_instead_of/,https://www.reddit.com/r/Python/comments/1fjjjy0/edifice_is_like_react_but_with_python_instead_of/,2024-09-18 03:36:39,128,0.95,128,0,16,0,0,False,False,True,False,False,Showcase,self,t3_1fjjjy0
Python,Best library for creating graphic PDF documents?,"I have an application for which I need to auto-generate some diagrams as PDF files.  The graphics aren't anything particularly fancy, just line drawings and some text.

My first instinct was to generate LaTeX code in Python to draw the graphics with TikZ, but I feel like there's probably a better way without the middleman.  I see there are a variety of different libraries for generating PDFs, so I'm looking for someone who has used one or more of them to maybe point me towards one which would suit my needs the best.


Edit: I should mention that I currently am manually creating the diagrams in LaTeX with TikZ.  It works ""well"" (speaking as someone fluent in LaTeX, I doubt anyone who isn't would think this is a good solution at all), but it feels weird to add an extra step of generating code that generates the files instead of generating the files I need directly.  But TikZ is a good example of the type of control I need - these diagrams aren't super fancy, just showing and labeling arrangements of chairs in rooms.",Prawn1908,1fjftmt,https://reddit.com/r/Python/comments/1fjftmt/best_library_for_creating_graphic_pdf_documents/,https://www.reddit.com/r/Python/comments/1fjftmt/best_library_for_creating_graphic_pdf_documents/,2024-09-18 00:32:28,62,0.95,62,0,46,0,0,False,False,True,False,False,Discussion,self,t3_1fjftmt
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1fjf36s,https://reddit.com/r/Python/comments/1fjf36s/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1fjf36s/wednesday_daily_thread_beginner_questions/,2024-09-18 00:00:09,2,0.67,2,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fjf36s
Python,Template for Python Development with CUDA in Dev Containers,"Hey community!

I‚Äôve created a template repository that enables **Python development over CUDA** within a Dev Container environment. The repo, called [nvidia-devcontainer-base](https://github.com/reissaavedra/nvidia-devcontainer-base), is set up to streamline the process of configuring Python projects that need GPU acceleration using NVIDIA GPUs.

With this template, you can easily spin up a ready-to-go Dev Container that includes CUDA, the NVIDIA Container Toolkit, and everything needed for Python-based development. It‚Äôs perfect for anyone working with CUDA-accelerated Python projects and looking to simplify their setup.

Feel free to fork it, adapt it, and share your thoughts!",reisson_saavedra,1fjb3ur,https://reddit.com/r/Python/comments/1fjb3ur/template_for_python_development_with_cuda_in_dev/,https://www.reddit.com/r/Python/comments/1fjb3ur/template_for_python_development_with_cuda_in_dev/,2024-09-17 21:15:15,1,0.57,1,0,5,0,0,False,False,True,False,False,Resource,self,t3_1fjb3ur
Python,OPAL - Fine Grained Authorization Service,"As we approach 2k commits and 4.4 stars on our Python-based [fine-grained authorization](https://www.permit.io/blog/what-is-fine-grained-authorization-fga) service, I thought it would be great to share it with the community.

**Repository**: [https://github.com/permitio/opal](https://github.com/permitio/opal)

# What My Project Does

**OPAL (Open Policy Administration Layer)** is a full-stack authorization service designed to offer an intuitive experience for developers implementing fine-grained authorization in their applications.

# Architecture Overview

OPAL is built on a server/client architecture that handles both the control and enforcement planes.

**Control Plane (Server)**:

1. Uses GitOps to connect to your authorization policy repositories, ensuring they‚Äôre always in sync.
2. Manages decentralized clients that enforce policies.
3. Configures the data clients need to make policy decisions.

**Enforcement Plane (Client)**:

1. Runs a lightweight, decentralized service with an internal policy engine (such as Open Policy Agent) for making authorization decisions.
2. Works with other engines and the server to manage policy versioning.
3. Uses event-driven synchronization to ensure data accuracy.

Together, these components create a comprehensive authorization solution that supports a variety of modern models, including Role-Based Access Control ([RBAC](https://www.permit.io/blog/best-practices-to-implement-rbac-for-developers)), Attribute-Based Access Control ([ABAC](https://www.permit.io/blog/what-is-attribute-based-access-control)), Relationship Based Access Control ([ReBAC](https://www.permit.io/blog/what-is-rebac)), and Policy-Based Access Control (PBAC).

# Target Audience

OPAL stands out in the authorization space because it‚Äôs written in Python, which is uncommon among similar tools (usually in Go, Rust, or JS). It‚Äôs a great opportunity for Python developers interested in contributing to a web-based product without needing deep domain expertise upfront.

OPAL can be used in Python applications or deployed as containers in cloud-native environments, so it‚Äôs flexible for a wide range of users:

* **DevOps**: for managing policies as code in Kubernetes.
* **Backend/Fullstack Developers**: our primary audience, who use OPAL for fine-grained authorization in their applications.
* **Frontend Developers**: for managing feature toggling across applications.
* **Security Engineers**: for streamlining and auditing permissions.
* **Product Managers**: for configuring and maintaining authorization rules.

At [Permit.io](http://Permit.io), OPAL powers our own authorization-as-a-service product, and it‚Äôs already in use by thousands of developers tackling various authorization and permissions use cases.

# How OPAL Compares

OPAL offers a unique approach to fine-grained authorization. While most tools in this space are tightly coupled with specific engines (focusing on condition- or relationship-based access control), OPAL is engine-agnostic. It‚Äôs designed to provide the best experience for development teams, from policy engine deployment to seamless policy synchronization.

# Conclusion

If you‚Äôre looking to contribute to a Python-based open-source project that doesn‚Äôt require deep domain expertise, OPAL is an excellent choice. I‚Äôm happy to answer any questions or chat more about authorization and OPAL.",Permit_io,1fj6d87,https://reddit.com/r/Python/comments/1fj6d87/opal_fine_grained_authorization_service/,https://www.reddit.com/r/Python/comments/1fj6d87/opal_fine_grained_authorization_service/,2024-09-17 18:10:31,9,0.81,9,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1fj6d87
Python,"Maelstrom 0.12.0: Isolate your tests, and run them fast.","We‚Äôre excited to announce Maelstrom 0.12.0, a test runner for Python that can run tests locally or on a cluster. Our new UI features real-time information about running tests, output from the build, and a new progress bar.

Maelstrom is a suite of test runners, built on top of a general-purpose clustered job engine. Maelstrom packages your tests into micro-containers, then distributes them to be run on an arbitrarily large cluster of test-runners, or locally on your machine using a custom-built, super-fast container runtime.

[https://github.com/maelstrom-software/maelstrom](https://github.com/maelstrom-software/maelstrom)",bobbobbio2000,1fj4618,https://reddit.com/r/Python/comments/1fj4618/maelstrom_0120_isolate_your_tests_and_run_them/,https://www.reddit.com/r/Python/comments/1fj4618/maelstrom_0120_isolate_your_tests_and_run_them/,2024-09-17 16:46:26,18,0.86,18,0,0,0,0,False,False,True,False,False,News,self,t3_1fj4618
Python,I created a modern and customizable tooltip library for PyQt and PySide,"Hey guys,

since I couldn't find any good libraries for showing modern-looking and customizable tooltips in PyQt, I made one myself.



What My Project Does:

It supports fixed placement, automatic placement, fallback placements, an optional triangle, animations, delays and much more. Basically anything can be completely customized and it's extremely easy to use. Also, since it's developed with QtPy, an abstraction layer for multiple versions of PyQt and PySide, you can use it with PyQt5, PyQt6, PySide2, and PySide6.



Target Audience:

This is useful for any Python developer who is working with PyQt or PySide and wants to add modern and customizable tooltips to their application.



Comparison:

To my knowledge, there are no comparable libraries out there.



Preview image: [https://github.com/user-attachments/assets/0313ffc7-560b-4665-a652-e1e2601fcbaa](https://github.com/user-attachments/assets/0313ffc7-560b-4665-a652-e1e2601fcbaa)

Demo video: [https://github.com/user-attachments/assets/fa768d30-f3cc-4883-aa8b-fed3a8824b23](https://github.com/user-attachments/assets/fa768d30-f3cc-4883-aa8b-fed3a8824b23)

Github: [https://github.com/niklashenning/pyqttooltip](https://github.com/niklashenning/pyqttooltip)



Hope some of you will find this useful :)",niklashnng,1fj3bbg,https://reddit.com/r/Python/comments/1fj3bbg/i_created_a_modern_and_customizable_tooltip/,https://www.reddit.com/r/Python/comments/1fj3bbg/i_created_a_modern_and_customizable_tooltip/,2024-09-17 16:13:52,121,0.99,121,0,11,0,0,False,False,True,False,False,Showcase,self,t3_1fj3bbg
Python,Understanding the h‚Äãe‚Äã‚Äälp‚Äã() function,"Ever used the `help` function and wondered what the various symbols (namely `*` and `/`) mean?

    &gt;&gt;&gt; help(sorted)
    Help on built-in function sorted in module builtins:
    
    sorted(iterable, /, *, key=None, reverse=False)
        Return a new list containing all items from the iterable in ascending order.
    
        A custom key function can be supplied to customize the sort order, and the
        reverse flag can be set to request the result in descending order.

I wrote [an article explaining those symbols](https://pym.dev/understanding-help/) as well as the significance of words like ""iterable"" in function signatures.",treyhunner,1fj2lqo,https://reddit.com/r/Python/comments/1fj2lqo/understanding_the_he_lp_function/,https://www.reddit.com/r/Python/comments/1fj2lqo/understanding_the_he_lp_function/,2024-09-17 15:45:40,0,0.36,0,0,3,0,0,False,False,True,False,False,Resource,self,t3_1fj2lqo
Python,GPU acceleration released in Polars,"Together with NVIDIA RAPIDS we (the Polars team) have released GPU-acceleration today. Read more about the implementation and what you can expect: 

[https://pola.rs/posts/gpu-engine-release/](https://pola.rs/posts/gpu-engine-release/)",ritchie46,1fj0kfi,https://reddit.com/r/Python/comments/1fj0kfi/gpu_acceleration_released_in_polars/,https://www.reddit.com/r/Python/comments/1fj0kfi/gpu_acceleration_released_in_polars/,2024-09-17 14:23:20,535,0.98,535,0,55,0,0,False,False,True,False,False,News,self,t3_1fj0kfi
Python,Anime Recommendation Profile ,"What my Project does: So I basically used Python (Jupyter Notebook), to make a Anime Recommendation System w some libraries, If you guys can, Can yall visit the Streamlit for this site and take a look, code is available on Github if yall wanna see that.

Target Audience: Honestly I made this just to solve my own dilemma as well as others problems with Anime Recommenders, So I would say the target audience is just for Anime Fans.

Comparison: Most Anime Recommenders will recommend to you the same series but with another season, which is obviously not plausible considering people actually want new series and not same ones, also some anime recommenders don't have a wide variety of shows and or don't include the Series posters for them.

[https://anirecc.streamlit.app/](https://anirecc.streamlit.app/)

[https://animerec-o31l.onrender.com/](https://animerec-o31l.onrender.com/) (Only use this one if the first one is down) 

Note that if the website is down that means there is basically an overflow of visits, Will fix it once I start hosting on AWS.

[https://github.com/S3oudd/Recommendation](https://github.com/S3oudd/Recommendation)",Psyduck---,1fixweu,https://reddit.com/r/Python/comments/1fixweu/anime_recommendation_profile/,https://www.reddit.com/r/Python/comments/1fixweu/anime_recommendation_profile/,2024-09-17 12:28:52,0,0.5,0,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1fixweu
Python,Python organizer,"üöÄ PyFile Organizer: The Ultimate Tool for Managing Python Scripts! üêç

What My Project Does:

PyFile Organizer is a Python application designed to help developers easily search, organize, tag, and bookmark Python .py files. It offers seamless file management, allowing users to quickly run or edit files with Notepad++ integration.

Target Audience:

This project is ideal for Python developers working on multiple projects and looking for an efficient way to manage their scripts. It‚Äôs perfect for both hobbyists and professionals who want to streamline their workflow. PyFile Organizer is still in development and open for feature suggestions!

Comparison:

Unlike typical file managers, PyFile Organizer is specifically tailored for Python developers. It offers features like file tagging, folder bookmarking, and direct script execution‚Äîall in one convenient tool, reducing the need for external utilities.

https://github.com/nerdygeek2127/PyFile-Organizer",Electrical_Key1642,1fis2x0,https://reddit.com/r/Python/comments/1fis2x0/python_organizer/,https://www.reddit.com/r/Python/comments/1fis2x0/python_organizer/,2024-09-17 06:37:35,6,0.73,6,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1fis2x0
Python,I made a python program that gives LLMs running locally the power to search the internet for LLMs ru,"Hey Reddit!

I'm excited to share a project I've been pouring countless hours into: Web-LLM Assistant. It's a Python program that gives local LLMs running via llama.cpp the power to search the internet and provide up-to-date answers.

Here's how it works:

1. You ask a question to the LLM.
2. The LLM crafts a search query and selects a timeframe.
3. It performs a web search, collecting the top 10 results.
4. The LLM picks the 2 most relevant results and fully web scrapes them.
5. If the information is sufficient, it answers your question.
6. If not, it refines the search up to 5 times to find the best answer.

This means your local LLM can now tackle questions about recent events or topics outside its training data!

Key Features:

* Real-time web searching
* Intelligent result selection
* Full web scraping of chosen results
* Iterative search refinement
* Works with your local LLM setup

I'd love for you to check it out and give it a spin! You can find the project on GitHub:

[https://github.com/TheBlewish/Web-LLM-Assistant-Llama-cpp](https://github.com/TheBlewish/Web-LLM-Assistant-Llama-cpp)

Let me know what you think, and feel free to ask any questions. Your feedback is greatly appreciated!

Edit - I buggered the title my bad it was meant to say:

# gives LLMs running locally the power to search the internet for LLMs rugives LLMs running locally the power to search the internet for LLMs running via llama.cpp

#     ",CuriousAustralianBoy,1finmdu,https://reddit.com/r/Python/comments/1finmdu/i_made_a_python_program_that_gives_llms_running/,https://www.reddit.com/r/Python/comments/1finmdu/i_made_a_python_program_that_gives_llms_running/,2024-09-17 02:35:41,57,0.8,57,0,13,0,0,False,False,True,False,False,Resource,self,t3_1finmdu
Python,Application Server for python apps,"## What My Project Does
I am building the open source project [Clace](https://github.com/claceio/clace). Clace is an application server that builds and deploys containers. Clace allows you to deploy multiple python apps on one machine, manage TLS certs, manage app updates, add OAuth/mTLS authentication, manage secrets etc.

## Target Audience
Clace can be used locally during development, to provide a live reload env with no setup required. Clace can be used for setting up secure internal tools across a team. Clace can be used for hosting any¬†webapp. Clace is on version 0.7.4, I am not aware of any serious bugs.

## Comparison
Other Python application servers require you to set up the application env manually. For example [Nginx Unit](https://unit.nginx.org/howto/flask/) and [Phusion Passenger](https://www.phusionpassenger.com/library/walkthroughs/start/python.html). Clace is much easier to use, it spins up and manages the application in a container. 

## Examples
To install any WSGI app, run
```
clace app create --approve --spec python-wsgi github.com/myuser/myrepo/wsgi_project wsgiapp.localhost:/
```

Add the `--param APP_MODULE=app:app` directive if the default source file is different. Use `python-asgi` spec for ASGI apps.

App create downloads the source code, builds the images (using gunicorn for WSGI and uvicorn for ASGI), starts the container and sets up the reverse proxy (there is no external proxy like Nginx/Traefik/Apache). The only external dependency is Docker or Podman, which should be running on the node. Clace also implements auto-pause for idle apps and atomic updates across multiple apps (all-or-nothing). There are framework specific specs available like python-streamlit, python-fasthtml and python-flask etc.

To do code updates (zero-downtime, with staged blue-green deployment), run

```
clace app reload wsgiapp.localhost:/
```

This gets the latest code from the branch, and updates the app if required. Use `clace app reload all` to update all apps atomically. Add `--dev` to the app create command (with local source folder) for a live reload development environment.

[clace.io](https://clace.io/) has a demo video and docs. Clace runs natively on Linux, macOS and Windows. Do try it out. Thanks for any feedback.
",avkijay,1fin86k,https://reddit.com/r/Python/comments/1fin86k/application_server_for_python_apps/,https://www.reddit.com/r/Python/comments/1fin86k/application_server_for_python_apps/,2024-09-17 02:17:08,12,0.76,12,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1fin86k
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1fik7f7,https://reddit.com/r/Python/comments/1fik7f7/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1fik7f7/tuesday_daily_thread_advanced_questions/,2024-09-17 00:00:08,3,0.81,3,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fik7f7
Python,Package reproducibility in Python notebooks using uv isolated environments,"Serializing package requirements in marimo notebooks, leveraging [PEP 723 ‚Äì Inline script metadata](https://peps.python.org/pep-0723/).

[https://marimo.io/blog/sandboxed-notebooks](https://marimo.io/blog/sandboxed-notebooks)

",mmmmmmyles,1fijqy9,https://reddit.com/r/Python/comments/1fijqy9/package_reproducibility_in_python_notebooks_using/,https://www.reddit.com/r/Python/comments/1fijqy9/package_reproducibility_in_python_notebooks_using/,2024-09-16 23:40:07,21,0.82,21,0,1,0,0,False,False,True,False,False,Resource,self,t3_1fijqy9
Python,Avoid redundant calculations in VS Code Python Jupyter Notebooks,"Hi,

I had a random idea while working in Jupyter Notebooks in VS code, and I want to hear if anyone else has encountered similar problems and is seeking a solution.

Oftentimes, when I work on a data science project in VS Code Jupyter notebooks, I have important variables stored, some of which take some time to compute (it could be only a minute or so, but the time adds up). Occasionally, I, therefore, make the error of rerunning the calculation of the variable without changing anything, but this resets/changes my variable. My solution is, therefore, if you run a redundant calculation in the VS Code Jupyter notebook, an extension will give you a warning like ""Do you really want to run this calculation?"" ensuring you will never make a redundant calculation again.

What do you guys think? Is it unnecessary, or could it be useful?",Artistic_Highlight_1,1fibre9,https://reddit.com/r/Python/comments/1fibre9/avoid_redundant_calculations_in_vs_code_python/,https://www.reddit.com/r/Python/comments/1fibre9/avoid_redundant_calculations_in_vs_code_python/,2024-09-16 18:17:26,0,0.35,0,0,20,0,0,False,False,True,False,False,Discussion,self,t3_1fibre9
Python,Tiny BASIC in Python,"# What My Project Does

Have you ever wanted to program like your grandparents did in 1976? For my first Python project, I developed  Tiny BASIC in Python: [https://github.com/John-Robbins/tbp ](https://github.com/John-Robbins/tbp) (tbp for short). Wanting to dive into programming languages, I needed an easy target language so I could develop all parts of an interpreter.

My target was the [Tiny BASIC](https://en.wikipedia.org/wiki/Tiny_BASIC) language first proposed by Dennis Allison in the first issue of [Dr. Dobb‚Äôs Journal of Computer Calisthenics &amp; Orthodontics in January 1976.](https://archive.org/details/dr_dobbs_journal_vol_01/mode/2up) Special thanks to [Dr. Tom Pittman](http://www.ittybittycomputers.com/IttyBitty/TinyBasic/index.htm) for posting much of the documentation of his implementation sold the same year.

Features:

* Full language support, including the USR function.
* A full **DEBUGGER** built in with breakpoints, single stepping, call stack and variable display.
* Loading and saving programs to/from disk.
* A built-in linter for Tiny BASIC code.
* Complete documentation with development notes (over 17,000 words!)
* Full GitHub Actions CI implementation that work with branch protections for code and the documentation web site.
* 290 individual unit tests with 99.88% coverage across macOS, Windows, and Linux.

The [README](https://github.com/John-Robbins/tbp) for tbp has a GIF showing off tbp's functionality, including using the built in debugger to cheat at a game. Not that I advocate cheating, but it made a good demo!

# Target Audience

Anyone interested in interpreters and debuggers. I hope tbp is easy to read and follow if you‚Äôve never looked at the work a scanner, parser, tree walking interpreter and debugger does. Feel free to ask questions here or in the [repository](https://github.com/John-Robbins/tbp) as I‚Äôm happy to answer

# Comparison

There are several [similar projects](https://github.com/search?q=%22Tiny+BASIC%22+Python&amp;type=repositories&amp;) on GitHub. However, tbp is the only one with a built-in debugger, linter, crazy numbers of unit tests, and far more documentation than you ever wanted.

# Conclusion

As tbp is my first Python project, I would **LOVE** to have any feedback here or in the [repository](https://github.com/John-Robbins/tbp) of what I could do to improve my Python skills. THANK YOU in advance!

In fairness, I should mention that my initial experience with Python wasn‚Äôt as positive as I would have liked. You can read about my thoughts as a Python novice, but experienced developer, included as part of the project documentation [here](https://john-robbins.github.io/tbp/project-notes#python).",JohnRobbinsAVL,1fiad74,https://reddit.com/r/Python/comments/1fiad74/tiny_basic_in_python/,https://www.reddit.com/r/Python/comments/1fiad74/tiny_basic_in_python/,2024-09-16 17:20:12,84,0.95,84,0,12,0,0,False,False,True,False,False,Showcase,self,t3_1fiad74
Python,feather-test: a multiprocess unit testing framework with event driven reporting,"# Introducing Feather Test: An Event-Driven Testing Framework for Python

Hello, I've been working on a new testing framework called Feather Test. It's designed to bring event-driven architecture to Python testing, offering flexibility, parallel execution, and customizable reporting.

## Key Features

- üöÄ Event-driven architecture for flexible test execution and reporting
- ‚ö° Parallel test execution for improved performance
- üìä Customizable reporters for tailored test output
- üß∞ Command-line interface similar to unittest for ease of use
- üé® Support for custom events during test execution

## What My Project Does

Feather Test is a Python testing framework that introduces event-driven architecture to the testing process. It allows developers to:

1. Write tests using a familiar unittest-like syntax
2. Execute tests in parallel for improved performance
3. Create custom reporters for tailored test output
4. Extend the test execution environment with custom test servers
5. Utilize custom events during test execution for more flexible testing scenarios

## Quick Example

Here's a simple test case using Feather Test:

    from feather_test import EventDrivenTestCase
    
    class MyTest(EventDrivenTestCase):
        def test_example(self):
            self.assertTrue(True)
    
        def test_custom_event(self):
            self.event_publisher.publish('custom_event', self.correlation_id, 
                                         data='Custom event data')
            self.assertEqual(1, 1)
    

## Target Audience

Feather Test is designed for:

- Python developers looking for a more flexible and extensible testing framework
- Teams working on medium to large-scale projects that could benefit from parallel test execution
- Developers interested in event-driven architecture and its application to testing
- Anyone looking to customize their test reporting or execution environment


## Comparison

Compared to existing Python testing frameworks like unittest, pytest, or nose, Feather Test offers:

1. **Event-Driven Architecture**: Unlike traditional frameworks, Feather Test uses events for test execution and reporting, allowing for more flexible and decoupled test processes.
2. **Built-in Parallel Execution**: While other frameworks may require plugins or additional configuration, Feather Test supports parallel test execution out of the box.
3. **Customizable Reporters**: Feather Test makes it easy to create custom reporters, giving you full control over how test results are presented and stored.
4. **Extensible Test Servers**: The ability to create custom test servers allows for more advanced test setup and teardown processes, which can be particularly useful for integration or system tests.
5. **Custom Events**: Feather Test allows you to publish and subscribe to custom events during test execution, enabling more complex testing scenarios and better integration with external systems or services.

While Feather Test introduces these new concepts, it maintains a familiar API for those coming from unittest, making it easier for developers to transition and adopt.


## Custom Reporters

One of the coolest features is the ability to create custom reporters. Here's a simple example:

    from feather_test.reporters.base_reporter import BaseReporter
    
    class CustomReporter(BaseReporter):
        def on_test_success(self, correlation_id, test_name, class_name, module_name):
            print(f""‚úÖ Test passed: {module_name}.{class_name}.{test_name}"")
    
        def on_test_failure(self, correlation_id, test_name, class_name, module_name, failure):
            print(f""‚ùå Test failed: {module_name}.{class_name}.{test_name}"")
            print(f""   Reason: {failure}"")
    

## Custom Test Servers

Feather Test also supports custom test servers for extending the test execution environment. Here's a snippet from the documentation:


    import types
    from feather_test.test_server import TestServer
    
    class ContextInjectorServer(TestServer):
        def __init__(self, processes, event_queue):
            super().__init__(processes, event_queue)
            self.setup_hooks()
    
        def setup_hooks(self):
            @self.hook_manager.register('after_import')
            def inject_context_module(context):
                # Create a new module to inject
                injected_module = types.ModuleType('feather_test_context')
    
                # Add utility functions
                def assert_eventually(condition, timeout=5, interval=0.1):
                    import time
                    start_time = time.time()
                    while time.time() - start_time &lt; timeout:
                        if condition():
                            return True
                        time.sleep(interval)
                    raise AssertionError(""Condition not met within the specified timeout"")
    
                injected_module.assert_eventually = assert_eventually
    
                # Add a configuration object
                class Config:
                    DEBUG = True
                    API_URL = ""https://api.example.com""
    
                injected_module.config = Config()
    
                # Add the event publisher to the injected module
                injected_module.event_publisher = context['event_publisher']
    
                # Inject the module into the test module's globals
                context['module'].__dict__['feather_test_context'] = injected_module
    
            @self.hook_manager.register('before_create_test')
            def setup_test_attributes(context):
                # Add attributes or methods to the test class
                context['test_class'].injected_attribute = ""This is an injected attribute""
    

## Why Feather Test?

1. **Flexibility**: The event-driven architecture allows for more flexible test execution and reporting.
2. **Performance**: Built-in support for parallel test execution can significantly speed up your test suite.
3. **Extensibility**: Easy to extend with custom reporters and test servers.
4. **Familiar**: If you're comfortable with unittest, you'll feel right at home with Feather Test.

## Installation

You can install Feather Test using pip:


    pip install feather-test


## Learn More

Check out the full documentation and source code on GitHub: [Feather Test Repository](https://github.com/fictitiouswizard/feather-test)

I'd love to hear your thoughts and feedback! Feel free to ask questions, suggest improvements, or share your experience if you give it a try.",FictitiousWizard,1fi7ds5,https://reddit.com/r/Python/comments/1fi7ds5/feathertest_a_multiprocess_unit_testing_framework/,https://www.reddit.com/r/Python/comments/1fi7ds5/feathertest_a_multiprocess_unit_testing_framework/,2024-09-16 15:22:55,16,0.91,16,0,8,0,0,False,False,True,False,False,Showcase,self,t3_1fi7ds5
Python,Using Wikipedia views to build an alternative to the deprecated Google Correlate,"If you are from the old days of the internet you might remember Google Correlate. 

You could draw a line and it would show you similar search patterns. I kind of miss tinkering with it, so I tried to build my own with Python and open data:

* Scrape Wikipedia page views
* Transform data into a pivot table (columns = title, y = views per day)
* Use similarity search to find correlated articles

And finally we can find the closest neighbor in Python with:

    from sklearn.neighbors import NearestNeighbors
    nn = NearestNeighbors(n_neighbors=25, algorithm='auto',metric='cosine')
    nn.fit(data)
    distances, indices = nn.kneighbors(query.reshape(1,-1), n_neighbors=50)

Source:

[https://franz101.substack.com/p/google-correlate-alternative-similiarity](https://franz101.substack.com/p/google-correlate-alternative-similiarity)",hoerzu,1fi6hlq,https://reddit.com/r/Python/comments/1fi6hlq/using_wikipedia_views_to_build_an_alternative_to/,https://www.reddit.com/r/Python/comments/1fi6hlq/using_wikipedia_views_to_build_an_alternative_to/,2024-09-16 14:46:42,31,0.9,31,0,4,0,0,False,False,True,False,False,Tutorial,self,t3_1fi6hlq
Python,Formatron: a high-performance constrained decoding library,"# What My Project Does

[Formatron](https://github.com/Dan-wanna-M/formatron)¬†allows users to control the output format of language models with minimal overhead. It is lightweight, user-friendly, and seamlessly integrates into existing codebases and frameworks.

# Target audience

Developers who want to make LLM reliably generate structured text(like json)

# Comparison

In summary, Formatron is fast(in fact, fastest in [my tiny benchmark](https://github.com/Dan-wanna-M/formatron/tree/master/benchmarks)) and is a library rather than a framework, so it is more integrable into existing codebases. You can check the details below.

# Features

* üîó **Popular Library Integrations:** Supports transformers, exllamav2, vllm and RWKV.
* üîå **Plugins, not wrappers:** Instead of wrapping third-party libraries in large, cumbersome classes, Formatron offers convenient, clean plugins for different libraries.
* üí° **Library, not framework:** Instead of unifying everything into a bulky framework, Formatron is a flexible library that can be embedded anywhere.
* ‚úçÔ∏è **Fluent Formatting:** Describe your format as easily as writing natural language.
* üìú **Regex and CFG Support:** Effortlessly interleave regular expressions and context-free grammars (CFG) in formats.
* ‚öôÔ∏è **Efficient JSON Generation:** Feature-complete JSON generation based on Pydantic models or json schemas.
* üì§ **Batched Inference:** Freely specify different formats for each sequence in one batch!
* üöÄ **Minimal Runtime Overhead:** With Leo optimization, a specialized compacting algorithm, and CFG caches across generations, Earley algorithm implemented in Rust is aymptotically and practically the fastest algorithm.
* üîß **Customizable**: Everything is configurable, including schema generation, grammar generation, and post-generation processing (such as function calls).

# Comparison to other libraries

|Capability|Formatron|[LM Format Enforcer](https://github.com/noamgat/lm-format-enforcer)|Microsoft's library|[Outlines](https://github.com/outlines-dev/outlines)|
|:-|:-|:-|:-|:-|
||||||
|Regular Expressions|‚úÖ|‚úÖ|‚úÖ|‚úÖ|
|Efficient Regex-constrained Generation|‚úÖ|¬†[performance issues still exist](https://github.com/noamgat/lm-format-enforcer/issues/36)üü°|‚ùå|¬†[scalablity currently suffers](https://github.com/outlines-dev/outlines/issues/680)üü°|
|Context Free Grammars(CFG)|‚úÖ|‚ùå|‚úÖ|¬†[some bugs exist](https://github.com/outlines-dev/outlines/issues/959)üü°|
|Efficient CFG-constrained Generation|‚úÖ|‚ùå|‚ùå|‚ùå|
|Custom Format Extractor|[some limitations exist](https://github.com/Dan-wanna-M/formatron#ast)¬†üü°|‚ùå|‚úÖ|‚úÖ|
|JSON Schema|‚úÖ|‚úÖ|‚úÖ|‚úÖ|
|Function Call From Callable|‚úÖ|‚ùå|‚úÖ|‚úÖ|
|Interleave Python control flow in generation|‚ùå|‚ùå|‚úÖ|‚ùå|
|Batched Generation|‚úÖ|‚úÖ|‚ùå|‚úÖ|
|Beam Search|‚ùå|‚úÖ|‚ùå|‚úÖ|
|Integrates into existing pipelines|‚úÖ|‚úÖ|‚ùå|‚úÖ|
|Optional JSON Fields|‚úÖ|‚úÖ|‚ùå|‚ùå|
|LLM Controls JSON field whitespaces|‚úÖ|‚úÖ|‚ùå|‚úÖ|
|LLM Controls JSON field orderings|‚ùå|‚úÖ|‚ùå|‚ùå|
|JSON Schema with recursive classes|‚úÖ|‚úÖ|‚ùå|‚ùå|",Huanghe_undefined,1fhs4t8,https://reddit.com/r/Python/comments/1fhs4t8/formatron_a_highperformance_constrained_decoding/,https://www.reddit.com/r/Python/comments/1fhs4t8/formatron_a_highperformance_constrained_decoding/,2024-09-16 00:54:20,47,0.83,47,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1fhs4t8
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1fhr1ij,https://reddit.com/r/Python/comments/1fhr1ij/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1fhr1ij/monday_daily_thread_project_ideas/,2024-09-16 00:00:10,4,0.68,4,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fhr1ij
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1fgzlru,https://reddit.com/r/Python/comments/1fgzlru/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1fgzlru/sunday_daily_thread_whats_everyone_working_on/,2024-09-15 00:00:09,10,0.87,10,0,18,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fgzlru
Python,matplotlib tutorial - Spyder 6 IDE,"I've put together a matplotlib tutorial video which should be a good primer for beginners. The video uses the Spyder 6 IDE and its visual aids such as its variable explorer:

[https://www.youtube.com/watch?v=VNvg12tpLCM](https://www.youtube.com/watch?v=VNvg12tpLCM)

Covering:

* Importing the library and library overview 
* Procedural Syntax
* Plot Backend (Inline vs Qt)
* Visually Inspecting a Figure using the GUI
* Colors
* Subplot (Procedural) 
* Object Orientated Programming Syntax
* Recall Parameters
* Get Current Figure and Current Axes
* Subplots (OOP) 
* Subplot Mosaic 
* Add Axes 
* Math and TeX 
* Linked Axes 
* Tick Parameters and Spines 
* Saving the Figure to an Image File 
* 2D Axes and Specialised Polar Axes and 3D Axes 
* Polar Plot 
* Annotation 
* Getting and Setting Properties (Line Plot) 
* Scatter Plot 
* Marker Styles 
* lines and axline 
* Bar Plot 
* Hatching 
* Pie Chart 
* Histogram 
* Box Plot 
* Violin Plot 
* Histogram 2D 
* Hexbin 
* Meshgrid and 3D Data 
* Matrix Show 
* Plot Color 
* Colormaps 
* Plot Color Mesh 
* Contour and Contour Filled Plots 
* 3D, Surface and Wiregrid Plots 
* Animation 
* Image Show 
* Tables 
* Matplotlib Configuration File",PhilipYip,1fgwh2z,https://reddit.com/r/Python/comments/1fgwh2z/matplotlib_tutorial_spyder_6_ide/,https://www.reddit.com/r/Python/comments/1fgwh2z/matplotlib_tutorial_spyder_6_ide/,2024-09-14 21:30:16,43,0.88,43,0,4,0,0,False,False,True,False,False,Tutorial,self,t3_1fgwh2z
Python,Can we talk about Numpy multi-core?,"I hate to be the guy ragging on an open source library but numpy has a serious problem. It‚Äôs 2024, CPUs with &gt;100 cores are not that unusual anymore and core counts will only grow. Numpy supports modern hardware poorly out of the box. 

There are some functions Numpy delegates to BLAS libraries that efficiently use cores but large swaths of Numpy do not and it‚Äôs not apparent from the docs what does and doesn‚Äôt without running benchmarks or inspecting source.

Are there any architectural limitations to fixing Numpy multicore?

CUPY is fantastic well when you can use GPUs. PyTorch is smart about hardware on both CPU and GPU usage but geared toward machine learning and not quite the same use case as Numpy . Numba prange is dope for many things but I often find myself re-implementing standard Numpy functions. I might not be using g it correctly but DASK seems to want to perform memory copies and serialize everything. Numexpr is useful sometime but I sort of abhor feeding it my code as strings and it is missing many Numpy functions. 

The dream would be something like PyTorch but geared toward general scientific computing. It would natively support CPU or GPU computing efficiently. Even better if it properly supported true HPC things like RDMA. Honestly maybe PyTorch is the answer and I just need to learn it better and just extend any missing functionality there. 

The Numpy API is fine. If it simply were a bit more optimized that would be fantastic. If I didn‚Äôt have a stressful job and a family contributing to this sort of thing would be fun as a hobby. 

Maybe I‚Äôm just driving myself crazy and python is the wrong language for performance constrained stuff. Rarely am I doing ops that aren‚Äôt just call libraries on large arrays.  Numba is fine for times of actual element wise algorithms. It should be possible to make python relatively performant. I know and love the ecosystem of scientific libraries like Numpy, scipy, the many plotting libraries etc but increasingly find myself fighting to delegate performance critical stuff to ‚Äúnot python‚Äù, fighting the GIL, lamenting the lack of native ‚Äústructs‚Äù that can hold predefined data and do not need to be picked to be shared in memory etc. somehow it feels like python has the top spot in scientific analysis but is in some ways bad at it. End rant.",secretaliasname,1fgdhvo,https://reddit.com/r/Python/comments/1fgdhvo/can_we_talk_about_numpy_multicore/,https://www.reddit.com/r/Python/comments/1fgdhvo/can_we_talk_about_numpy_multicore/,2024-09-14 03:48:56,127,0.89,127,0,92,0,0,False,False,True,False,False,Discussion,self,t3_1fgdhvo
Python,My first Project!,"What my project does:
It‚Äôs just a silly simple dungeons and dragons esc game to play in the terminal! 

Target audience:
Just a toy project.

Comparison:
When I searched beginner projects and looked at a simple calculator, I got the idea to do this slightly more complex than the calculator.
 
Please check it out! 

https://github.com/bobbybossman1738/DnD-Terminal.git",Severe_Celery_4930,1fgdhdh,https://reddit.com/r/Python/comments/1fgdhdh/my_first_project/,https://www.reddit.com/r/Python/comments/1fgdhdh/my_first_project/,2024-09-14 03:48:14,3,0.81,3,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1fgdhdh
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1fg99we,https://reddit.com/r/Python/comments/1fg99we/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1fg99we/saturday_daily_thread_resource_request_and/,2024-09-14 00:00:13,3,0.81,3,0,3,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fg99we
Python,Push notifications using pushover api,"what my project does:

conveniently can be imported into existing python package and initialized with your own api key/token, sends text notification or image notification to where ever the pushover app exists. logs notifications sent per device or all devices. logs can be reviewed in local json file

  
Target Audience:

Anyone that has a raspberry pi or server they monitor can send push notifications instead of cluttering their email inbox more. if you have a raspberry pi set up with camera can send push notification if movement is detected 

  
comparison: 

I could not find anything else out there like this, so decided to create one 

check it out here: [source code](https://github.com/singhpalwinder/notifications)",princesprofile,1fg66r6,https://reddit.com/r/Python/comments/1fg66r6/push_notifications_using_pushover_api/,https://www.reddit.com/r/Python/comments/1fg66r6/push_notifications_using_pushover_api/,2024-09-13 21:35:15,12,0.78,12,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1fg66r6
Python,It's time to stop using Python 3.8,"14% of PyPI package downloads are from Python 3.8 (https://pypistats.org/packages/\_\_all\_\_). If that includes you, you really should be upgrading, because **as of October there will be no more security updates from Python core team for Python 3.8**.

More here, including why long-term support from Linux distros isn't enough: [https://pythonspeed.com/articles/stop-using-python-3.8/](https://pythonspeed.com/articles/stop-using-python-3.8/)",itamarst,1fg57kt,https://reddit.com/r/Python/comments/1fg57kt/its_time_to_stop_using_python_38/,https://www.reddit.com/r/Python/comments/1fg57kt/its_time_to_stop_using_python_38/,2024-09-13 20:53:12,465,0.92,465,0,134,0,0,False,False,True,False,False,Resource,self,t3_1fg57kt
Python,Kopipasta: pypi package to create LLM prompts,"https://github.com/mkorpela/kopipasta

What it does: A CLI tool to generate prompts with project structure and file contents.

Target audience: anyone who is working on a codebase together with GenAI such as O1, GPT-4o or Claude Sonnet 3.5

I use it everyday for discussions with an LLM about the codebase in question.

Because more context makes LLMs produce better results .. and manual copy is burdening",mkorpela,1ffx8qn,https://reddit.com/r/Python/comments/1ffx8qn/kopipasta_pypi_package_to_create_llm_prompts/,https://www.reddit.com/r/Python/comments/1ffx8qn/kopipasta_pypi_package_to_create_llm_prompts/,2024-09-13 15:15:54,0,0.25,0,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1ffx8qn
Python,pyrtls: rustls-based modern TLS for Python,"What My Project Does

pyrtls is a new set of Python bindings for rustls, providing a secure, modern alternative to the venerable ssl module. I wanted to allow more people to benefit from the work we've done to build a better alternative to OpenSSL-backed TLS, and figured Python users might be interested.

https://github.com/djc/pyrtls

Target Audience

This is basically an MVP. While the underlying rustls project is mature, the bindings are fairly new and could contain bugs. I'd be happy to get feedback from people eager to try out something modern (and more secure).

Comparison

Unlike the ssl module (which dynamically links against OpenSSL), pyrtls is distributed as a set of statically compiled wheels for a whole bunch of platforms and Python versions. It is backed by Rust code, which is all memory-safe (except some core cryptography primitives), and avoids older protocol versions, insecure cipher suites, and risky protocol features. The API is intended to be similar enough to the ssl module that socket wrappers can act as a drop-in replacement.",dochtman,1ffwu5l,https://reddit.com/r/Python/comments/1ffwu5l/pyrtls_rustlsbased_modern_tls_for_python/,https://www.reddit.com/r/Python/comments/1ffwu5l/pyrtls_rustlsbased_modern_tls_for_python/,2024-09-13 14:59:19,18,0.83,18,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1ffwu5l
Python,I wrote a tool for efficiently storing btrfs backups in S3. I'd really appreciate feedback!,"**What My Project Does**

[btrfs2s3](https://github.com/sbrudenell/btrfs2s3) maintains a *tree* of incremental backups in cloud object storage (anything
with an S3-compatible API).

Each backup is just an archive produced by `btrfs send [-p]`.

The root of the tree is a full backup. The other layers of the tree are incremental
backups.

The structure of the tree corresponds to a *schedule*.

Example: you want to keep 1 yearly, 3 monthly and 7 daily backups. It's the 4th day of
the month. The tree of incremental backups will look like this:

- Yearly backup (full)
  - Monthly backup #3 (delta from yearly backup)
  - Monthly backup #2 (delta from yearly backup)
    - Daily backup #7 (delta from monthly backup #2)
    - Daily backup #6 (delta from monthly backup #2)
    - Daily backup #5 (delta from monthly backup #2)
  - Monthly backup #1 (delta from yearly backup)
    - Daily backup #4 (delta from monthly backup #1)
    - Daily backup #3 (delta from monthly backup #1)
    - Daily backup #2 (delta from monthly backup #1)
    - Daily backup #1 (delta from monthly backup #1)

The daily backups will be short-lived and small. Over time, the new data in them will
migrate to the monthly and yearly backups.

Expired backups are automatically deleted.

The design and implementation are tailored to minimize cloud storage and API usage
costs.

`btrfs2s3` will keep one *snapshot* on disk for each *backup* in the cloud. This
one-to-one correspondence is required for incremental backups.

My project doesn't have a public Python programmatic API yet. But I think it shows off the power of Python as great for everything, even low-level system tools.

**Target Audience**

Anyone who self-hosts their data (e.g. nextcloud users).

I've been self-hosting for decades. For a long time, I maintained a backup server at my mom's house, but I realized I wasn't doing a good job of monitoring or maintaining it.

I've had at least one incident where I accidentally `rm -rf`ed precious data. I lost sleep thinking about accidentally deleting *everything*, including backups.

Now, I believe self-hosting your own backups is perilous. I believe the best backups are ones I have *less* control over.

**Comparison**

snapper is a popular tool for maintaining btrfs snapshots, but it doesn't provide backup functionality.

restic provides backups and integrates with S3, but doesn't take advantage of btrfs for super efficient incremental/differential backups. `btrfs2s3` is able to back up data up to the *minute*.",TrenchcoatTechnocrat,1fftfm9,https://reddit.com/r/Python/comments/1fftfm9/i_wrote_a_tool_for_efficiently_storing_btrfs/,https://www.reddit.com/r/Python/comments/1fftfm9/i_wrote_a_tool_for_efficiently_storing_btrfs/,2024-09-13 12:25:31,6,0.8,6,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1fftfm9
Python,MPPT: A Modern Python Package Template,"**Documentation:** [**https://datahonor.com/mppt/**](https://datahonor.com/mppt/)

**GitHub:** [**https://github.com/shenxiangzhuang/mppt**](https://github.com/shenxiangzhuang/mppt)

Hey everyone, I wanted to introduce you to MPPT, a template repo for Python development that streamlines various aspects of the development process. Here are some of its key features:

# Package Management

* Poetry
* Alternative: Uv, PDM, Rye

# Documentation

* Mkdocs with Material theme
* Alternative: Sphinx

# Linter &amp; Formatter &amp; Code Quality Tools

* Ruff
* Black
* Isort
* Flake8
* Mypy
* SonarLint
* Pre-commit

# Testing

* Doctest
* Pytest: pytest, pytest-cov, pytest-sugar
* Hypothesis
* Locust
* Codecov

# Task runner

* Makefile
* Taskfile
* Duty
* Typer
* Just

# Miscellaneous

* Commits:¬†[Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/)
* Change Log:¬†[Keep a Changelog](https://keepachangelog.com/en/1.1.0/)
* Versioning:¬†[Semantic Versioning](https://semver.org/)
* License:¬†[Choose an open source license](https://choosealicense.com/)
* Badge:¬†[Shields.io](https://shields.io/)
* Contributing:¬†[Contributing to Open Source on GitHub](https://guides.github.com/activities/contributing-to-open-source/)
* AI Reviewer:¬†[CodeRabbit](https://coderabbit.ai/)",MathewShen,1ffr5ku,https://reddit.com/r/Python/comments/1ffr5ku/mppt_a_modern_python_package_template/,https://www.reddit.com/r/Python/comments/1ffr5ku/mppt_a_modern_python_package_template/,2024-09-13 10:12:36,5,0.61,5,0,20,0,0,False,False,True,False,False,Resource,self,t3_1ffr5ku
Python,OneDev - a Python Code Aware Git Server,"# What My Project Does

[OneDev](https://github.com/theonedev/onedev) is an open source self-hosted git server with built-in CI/CD, issue board, and package registry. Unlike other git servers, it analyzes your code to make important information readily available to aid code navigation, comprehensation and review.

For python, it is able to:

* Analyze code for symbol navigation and search
* Display/search outline while view source code
* Suggest CI/CD job templates
* Show unit test, coverage and lint report, as well as statistics over time
* Annotate source code with coverage and lint information

An [online demo](https://code.onedev.io/demo/poetry/~files/27fd944e9c0f099e0f73a9aee0598d35d80c9591/src/poetry/vcs/git/backend.py?position=source-235.1-235.38-1&amp;problem-report=Ruff) shows how the source marked with coverage and lint information looks like. Also type '**T**' to search python symbols, or hover mouse over some python symbols to jump to its definition. These facilities are also available in pull request source diff to improve code review experience.

A [tutorial](https://docs.onedev.io/tutorials/misc/python-support) is available guiding how to get all of these for your python projects. It is very easy to follow as long as you have a docker environment.

# Target Audience

This project is in production ready.

# Comparison

Compared to other self-hosted git servers, OneDev features code analysis (currently support Python, C/C++, Java, C#, JavaScript), easy CI/CD job without writing yaml, customizable issue states and fieds, seamless integration of code, release and issues.",robinshen,1ffjap0,https://reddit.com/r/Python/comments/1ffjap0/onedev_a_python_code_aware_git_server/,https://www.reddit.com/r/Python/comments/1ffjap0/onedev_a_python_code_aware_git_server/,2024-09-13 01:47:29,10,0.79,10,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1ffjap0
Python,"maestro, a command-line music player","[https://github.com/PrajwalVandana/maestro-cli](https://github.com/PrajwalVandana/maestro-cli)

**What My Project Does**

maestro¬†is a command-line tool written in Python to play music in the terminal. The idea is to provide everything you could possibly think of for your music experience in one place.

**Target Audience**

Anyone who listens to music!

**Comparison**

Lots of stuff that the big-name services don't have, such as tagging (instead of playlists), a built-in audio visualizer, free listen-along feature (think Spotify Jams), lyric romanization, listen statistics, etc. See the list of features below/in the repo for more!

Unfortunately, you *do* have to download your music to use `maestro`.

**Features**:

* cross-platform!
   * someone got it working on their Linux phone?? crazy stuff
* add songs from YouTube, YouTube Music, or Spotify!
* stream your music!
   * read the technical breakdown here:¬†[https://github.com/PrajwalVandana/maestro-cli/blob/master/data/maestro\_listen\_along.pdf](https://github.com/PrajwalVandana/maestro-cli/blob/master/data/maestro_listen_along.pdf)
* lyrics!
   * romanize foreign-language lyrics
   * translate lyrics!
* clips! (you can define and play clips for a song rather than the entire song)
* filter by tags! (replacing the traditional playlist design)
* listen statistics! (by year and overall, can be filtered by tag, artist, album, etc.)
* shuffle! (along with precise control over the behavior of shuffling when repeating)
   * also ""bounded shuffle"", i.e. a song is guaranteed to be within N places of where it was
* audio visualization directly in the terminal!
   * read the technical breakdown here:¬†[https://github.com/PrajwalVandana/maestro-cli/blob/master/data/maestro\_vis.pdf](https://github.com/PrajwalVandana/maestro-cli/blob/master/data/maestro_vis.pdf)
* Discord integration!
* music discovery!",Colts_Fan10,1ffiezv,https://reddit.com/r/Python/comments/1ffiezv/maestro_a_commandline_music_player/,https://www.reddit.com/r/Python/comments/1ffiezv/maestro_a_commandline_music_player/,2024-09-13 01:02:02,18,0.77,18,0,18,0,0,False,False,True,False,False,Showcase,self,t3_1ffiezv
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1ffh7id,https://reddit.com/r/Python/comments/1ffh7id/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1ffh7id/friday_daily_thread_rpython_meta_and_freetalk/,2024-09-13 00:00:41,1,0.6,1,0,2,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1ffh7id
Python,Introducing Dust DDS - A Data Distribution Service (DDS) middleware implementation for Python,"**What My Project Does:**

**Dust DDS** is a native implementation of the Data Distribution Service (DDS) middleware. DDS is a middleware standard for data-centric connectivity used in real-time, high-performance, and mission-critical applications. Outside the defense and aerospace environments it's probably most well known for being the communication protocol of [ROS2]().

Dust DDS was originally developed in Rust and now accessible in Python. The Python version of Dust DDS is built using the [PyO3](https://pyo3.rs/) crate, allowing all the functionality of the original Dust DDS Rust API to be available to Python developers. To make it easier to use, the Dust DDS package includes a .pyi file generated from the original API. [Documentation](https://s2e-systems.github.io/dust-dds/dust_dds.html) can be found online.

You can find the complete source code on [GitHub](https://github.com/s2e-systems/dust-dds), including the Python bindings generation in this crate: [Dust DDS Python Bindings](https://github.com/s2e-systems/dust-dds/tree/main/bindings/python). 

**Target Audience:**

Dust DDS is designed for developers who are creating, prototyping, or testing distributed systems using DDS. It's suitable for both development and production environments, whether you're working in robotics, IoT, or any other domain requiring reliable data exchange.

**Comparison:**

There are other DDS implementations available, but many require multiple installation steps or only expose a limited subset of DDS functionality. In contrast, Dust DDS can be installed and used on all major platforms with a single command: `pip install dust-dds`",jayrebel351,1ff9eyw,https://reddit.com/r/Python/comments/1ff9eyw/introducing_dust_dds_a_data_distribution_service/,https://www.reddit.com/r/Python/comments/1ff9eyw/introducing_dust_dds_a_data_distribution_service/,2024-09-12 18:17:40,6,0.76,6,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1ff9eyw
Python,Blink code search - source code indexer and instant search tool v1.10.0 released,"https://github.com/ychclone/blink

A indexed search tool for source code. Good for small to medium size code base. It supports fuzzy matching, auto complete and live grep.

I used it everyday to index and search 800 python source codes",_janc_,1ff8l2t,https://reddit.com/r/Python/comments/1ff8l2t/blink_code_search_source_code_indexer_and_instant/,https://www.reddit.com/r/Python/comments/1ff8l2t/blink_code_search_source_code_indexer_and_instant/,2024-09-12 17:43:36,9,0.8,9,0,2,0,0,False,False,True,False,False,Resource,self,t3_1ff8l2t
Python,The a absolute high you get when you solve a coding problem.,"2 years into my career that uses python. Cannot describe the high I get when solving a difficult coding problem after hours or days of dealing with it. I had to walk out one time and take a short walk due to the excitement.

Then again on the other side of that the absolute frustration feeling is awful haha.",NaJoeLibre,1ff847f,https://reddit.com/r/Python/comments/1ff847f/the_a_absolute_high_you_get_when_you_solve_a/,https://www.reddit.com/r/Python/comments/1ff847f/the_a_absolute_high_you_get_when_you_solve_a/,2024-09-12 17:24:02,386,0.95,386,0,54,0,0,False,False,True,False,False,Discussion,self,t3_1ff847f
Python,DBOS-Transact: An Ultra-Lightweight Durable Execution Library,"**What my project does**

Want to share our brand new Python library providing ultra-lightweight durable execution.

https://github.com/dbos-inc/dbos-transact-py


Durable execution means your program is resilient to any failure. If it is ever interrupted or crashes, all your workflows will automatically resume from the last completed step. If you want to see durable execution in action, check out this demo app: 

https://demo-widget-store.cloud.dbos.dev/ 

Or if you‚Äôre like me and want to skip straight to the Python decorators in action, here‚Äôs the demo app‚Äôs backend ‚Äì an online store with reliability and correctness in just 200 LOC:  

https://github.com/dbos-inc/dbos-demo-apps/blob/main/python/widget-store/widget_store/main.py

No matter how many times you try to crash it, it always resumes from exactly where it left off!  And yes, that button really does crash the app.

Under the hood, this works by storing your program's execution state (which workflows are currently executing and which steps they've completed) in a Postgres database. So all you need to use it is a Postgres database to connect to‚Äîthere's no need for a ""workflow server.""  This approach is also incredibly fast, for example 25x faster than AWS Step Functions.

Some more cool features include:

* Scheduled jobs‚Äîrun your workflows exactly-once per time interval, no more need for cron.
* Exactly-once event processing‚Äîuse workflows to process incoming events (for example, from a Kafka topic) exactly-once. No more need for complex code to avoid repeated processing
* Observability‚Äîall workflows automatically emit OpenTelemetry traces.

Docs: https://docs.dbos.dev/

Examples: https://docs.dbos.dev/examples

You can view the webinar about this library here:

https://www.dbos.dev/webcast/dbos-transact-python

**Target Audience**

This is designed for both hobby projects and production workloads.  Anyone who wants a simple way to run python apps reliably would be interested in our library.  You can host locally with our open-source library or get the full set of optimizations by uploading to our cloud.

**Comparison**

There aren‚Äôt many similar libraries out there.  There are other services that provide durable workflows, but they do so through configuring AWS services for you, not providing a library that you can run locally

We'd love to hear what you think!  We‚Äôll be in the comments for the rest of the day to answer any questions you may have.",jedberg,1ff8257,https://reddit.com/r/Python/comments/1ff8257/dbostransact_an_ultralightweight_durable/,https://www.reddit.com/r/Python/comments/1ff8257/dbostransact_an_ultralightweight_durable/,2024-09-12 17:21:37,50,0.97,50,0,12,0,0,False,False,True,False,False,Showcase,self,t3_1ff8257
Python,Bullet Note : A markdown alternative for in class note-taking,"# What my project does

My project is a custom markdown-like format made for in class note taking. It's made to be readable even in it's raw form, customizable and have little added syntax. Notes are translated into html websites

# Some features

# CSS themes

You can add a css file that will be added to every html file

# Abreviations

WIP : You will be able to set custom abreviations to speed up note writing

# Target audience

Mainly made it for myself because I didn't like the syntax of other markdown alternatives. I also had some problem with usage of ""-"" and ""\_"" in syntax messing up the content of my notes (for example in code blocks or some french words)

I think I am not the only one having those problems.

# Comparison

Headings are marked with ""!"" and not ""#"" because pressing alt gr + "" on azerty keyboard to get a # is way slower than just pressing !

# Notes

Project is release under BSD-3-Clause,

# Source code link

[https://github.com/dgsqf/BulletNote](https://github.com/dgsqf/BulletNote)",dgsqef,1ff5vct,https://reddit.com/r/Python/comments/1ff5vct/bullet_note_a_markdown_alternative_for_in_class/,https://www.reddit.com/r/Python/comments/1ff5vct/bullet_note_a_markdown_alternative_for_in_class/,2024-09-12 15:50:45,1,1.0,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1ff5vct
Python,DataService - Async Data Gathering ,"Hello fellow Pythonistas, my first post here.

  
I am working on a library called DataService.

I would like to release it to PyPi soon, but would appreciate getting some feedback beforehand, as I have been working on it entirely by myself and I'm sure it could do with some improvements.

Also, if you would like to participate in an open source project and you have experience in releasing packages, feel free to DM.

  
**What My Project Does**:

  
**DataService** is primarily focused on web scraping, but it‚Äôs versatile enough to handle general data gathering tasks such as fetching from APIs. The library is built on top of several well-known libraries like **BeautifulSoup**, **httpx**, **Pydantic**, and more.Source Code:

Currently, it includes an **HttpXClient** (which, as you might guess, is based on httpx), and I‚Äôm planning to add a **PlayWrightClient** in future releases. The library allows users to build scrapers using a ""callback chain"" pattern, similar to the approach used in Scrapy. While the internal architecture is asynchronous, the public API is designed to be synchronous for ease of use.

[https://github.com/lucaromagnoli/dataservice](https://github.com/lucaromagnoli/dataservice)

Docs:  
[https://dataservice.readthedocs.io/en/latest/index.html](https://dataservice.readthedocs.io/en/latest/index.html)

**Target Audience**:

Anyone interested in web-scraping, web-crawling or more broadly data gathering. 

This project is for anyone interested in **web scraping**, **web crawling**, or broader **data gathering** tasks. Whether you're an experienced developer or someone looking to embed a lightweight solution into your existing projects, DataService should offer flexibility and simplicity.

# 

**Comparison**:

The closest comparison to **DataService** would likely be **Scrapy**. However, unlike Scrapy, which is a full-fledged framework that takes control of the entire process (a ""Hollywood Style"" framework‚Äî*‚ÄúWe will call you‚Äù*, as Martin Fowler would say), DataService is a lightweight library. It‚Äôs easy to integrate into your own codebase without imposing a rigid structure.





Hope you enjoy it and look forward to receiving your feedback!

Luca aka NomadMonad",N0madM0nad,1ff5qwu,https://reddit.com/r/Python/comments/1ff5qwu/dataservice_async_data_gathering/,https://www.reddit.com/r/Python/comments/1ff5qwu/dataservice_async_data_gathering/,2024-09-12 15:45:46,1,1.0,1,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1ff5qwu
Python,"Semantix : Non Pydantic, Non JSON Schema Structured Outputs using LLMs","### What Semantix Does

Current methods for extracting structured outputs from LLMs often rely on libraries such as DSPy, OpenAI Structured Outputs, and Langchain JSON Schema. These libraries typically use Pydantic Models to create JSON schemas representing classes, enums, and types. However, this approach can be costly since many LLMs treat each element of the JSON schema (e.g., `{}`, `:`, `""$""`) as separate tokens, leading to increased costs due to the numerous tokens present in JSON schemas.

Semantix offers a different and more cost-effective solution. Instead of using JSON schemas, Semantix represents classes, enums, and objects in a more textual manner, reducing the number of tokens and lowering inference costs. Additionally, Semantix leverages Python's built-in typing system with minor modifications to provide meaning to parameters, function signatures, classes, enums, and functions. This approach eliminates the need for unnecessary Pydantic models and various classes for different prompting methods. Semantix also makes it easy for developers to create GenAI-powered functions.

### Target Audience

Semantix is designed for developers who have worked with libraries like Langchain and DSPy and are tired of dealing with Pydantic models and JSON schemas. It is also ideal for those who want to add AI features to existing or new applications without learning extensive new libraries.

### Comparison

Semantix supports multimodal inputs, allowing you to use images and videos effortlessly. Unlike other libraries, Semantix requires minimal code changes to achieve excellent results.

Ready to give it a try? Check out our Colab notebook [here](https://colab.research.google.com/github/chandralegend/semantix/blob/main/try.ipynb) and explore our GitHub repository [here](https://github.com/chandralegend/semantix) for more details.",No-Base-1700,1ff2ghv,https://reddit.com/r/Python/comments/1ff2ghv/semantix_non_pydantic_non_json_schema_structured/,https://www.reddit.com/r/Python/comments/1ff2ghv/semantix_non_pydantic_non_json_schema_structured/,2024-09-12 13:22:38,0,0.33,0,0,22,0,0,False,False,True,False,False,Showcase,self,t3_1ff2ghv
Python,Which Python libraries would be most suitable for Time Series Forecasts and Multilinear Regression?,"I am working on a project geared towards addressing the issue of software project time estimation bias. To gather data, I'm building a work-log system that gathers info with respect to time taken to accomplish commonly-known tasks. These data will subsequently be trained using time series and multi linear regression.

Which Python libraries would be the most suitable for achieving these goals?",PopularAd5100,1fexk8e,https://reddit.com/r/Python/comments/1fexk8e/which_python_libraries_would_be_most_suitable_for/,https://www.reddit.com/r/Python/comments/1fexk8e/which_python_libraries_would_be_most_suitable_for/,2024-09-12 08:26:50,19,0.74,19,0,19,0,0,False,False,True,False,False,Discussion,self,t3_1fexk8e
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1fep0y6,https://reddit.com/r/Python/comments/1fep0y6/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1fep0y6/thursday_daily_thread_python_careers_courses_and/,2024-09-12 00:00:10,1,0.67,1,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fep0y6
Python,What is the most popular game made in pygame (or game made completely using python) ever made?,I tried searching it up but all that comes up is saying you can make clones of very popular games in pygame like flappy bird but not an actual originally made pygame game,caden2010750,1feoiw4,https://reddit.com/r/Python/comments/1feoiw4/what_is_the_most_popular_game_made_in_pygame_or/,https://www.reddit.com/r/Python/comments/1feoiw4/what_is_the_most_popular_game_made_in_pygame_or/,2024-09-11 23:36:04,55,0.84,55,0,41,0,0,False,False,True,False,False,Discussion,self,t3_1feoiw4
Python,How to Easily Send HTTP Requests That Mimic a Browser,"**What My Project Does**:

Hey everyone! I've decided to open-source one of my web-scraping tools,¬†[Stealth-Requests](https://github.com/jpjacobpadilla/Stealth-Requests)! It's a Python package designed to make web scraping easier and more effective by mimicking how a browser works when sending requests to websites.

Some of the main features:

* Mimics the headers that browsers like Chrome or Safari use
* Automatically handles dynamic headers like Referer and Host
* Uses the curl\_cffi package to mask the TLS fingerprint of all requests
* Extracts useful information from web pages (like the page title, description, and author)
* Easily converts HTML responses into¬†`lxml`¬†and¬†`BeautifulSoup`¬†objects for easy parsing

**Target Audience**:

The main people who should use this project are Python developers who need a simple way make HTTP requests that look like they are coming from a browser.

**Comparison**:

This project is essentially a layer on top of curl\_cffi, a great project that masks the TLS fingerprint of HTTP requests. This project adds HTTP header handling, automatic User-Agent rotation, as well as has multiple convenient built-in parsing methods.



Hopefully some of you find this project helpful. Consider checking it out, and let me know if you have any suggestions!",jpjacobpadilla,1feo3jo,https://reddit.com/r/Python/comments/1feo3jo/how_to_easily_send_http_requests_that_mimic_a/,https://www.reddit.com/r/Python/comments/1feo3jo/how_to_easily_send_http_requests_that_mimic_a/,2024-09-11 23:16:00,71,0.87,71,0,16,0,0,False,False,True,False,False,Showcase,self,t3_1feo3jo
Python,Python Binding for SOME/IP &amp; Adaptive Autosar with Nebula Platform,"Hey everyone,

I wanted to share some cool news for anyone looking to work with¬†**SOME/IP**¬†and¬†**Adaptive AUTOSAR**¬†in the automotive domain using Python. The¬†**Nebula Platform**¬†now offers a Python binding that makes development easier and more accessible.

Nebula provides a framework for working with service-oriented architectures (SOA) in automotive applications, and they‚Äôve recently extended support with Python bindings. This is particularly useful for those developing on¬†**HPCs (High-Performance Computers)**¬†or embedded systems in the automotive industry, enabling integration of¬†**SOME/IP**¬†for inter-process communication and interaction with¬†**Adaptive AUTOSAR**¬†stacks.

If you're interested, here‚Äôs a¬†[tutorial on setting up your first app with the Nebula Platform](https://nebula-platform.dev/docs/docs/tutorials/tutorial-first-app-python).

It shows you how to:

* Set up your development environment
* Create a Python app that integrates with SOME/IP services
* Interact with Adaptive AUTOSAR components

This is great for anyone looking to bridge the gap between low-level automotive protocols and Python scripting, making rapid prototyping and testing much more approachable in automotive.

Historically, the barrier to entry for working with automotive frameworks like Adaptive AUTOSAR has been quite high. It‚Äôs fantastic to see a¬†**free Adaptive AUTOSAR stack**¬†that supports Python &amp; is production proven ‚Äì as far as I know, this doesn't exist anywhere else today!

I am a dev at Nebula and would love to hear some feedback &lt;3",Organic-Staff1695,1fejrem,https://reddit.com/r/Python/comments/1fejrem/python_binding_for_someip_adaptive_autosar_with/,https://www.reddit.com/r/Python/comments/1fejrem/python_binding_for_someip_adaptive_autosar_with/,2024-09-11 20:07:01,9,0.8,9,0,12,0,0,False,False,True,False,False,Resource,self,t3_1fejrem
Python,Shady packages in pip?,Do the powers that be ever prune the archive? Packages such as [package_name](https://pypi.org/project/package_name/) would be a good condidate for a security vulnerability.,jmreagle,1fee6vv,https://reddit.com/r/Python/comments/1fee6vv/shady_packages_in_pip/,https://www.reddit.com/r/Python/comments/1fee6vv/shady_packages_in_pip/,2024-09-11 16:18:49,0,0.46,0,0,9,0,0,False,False,True,False,False,Discussion,self,t3_1fee6vv
Python,What can I automate at a job that ‚ÄúI‚Äù can‚Äôt see room for automation in? ,"Hi all, I‚Äôm a civil engineer who took a class in Python but truthfully can‚Äôt find any use cases for it.

I don‚Äôt believe I‚Äôll be using python to do complex calculations, as in my field, our bosses need to be able to review all calculations and they request they are done in excel. 

However, I figure there‚Äôs plenty of administrative work that could be automated, I just can‚Äôt figure out what. 

In the mornings, people read their emails and list out action items and send out responses. People read lots of reports and review calculations.

Maybe this field just doesnt have room for automation, but I figure someone here has thought of things others wouldn‚Äôt have that can make their jobs easier. 

Any tips appreciated, thank you! 

Edit - just wanna say thank you to everyone responding! I‚Äôm going to take a deep dive into comments this weekend but there are certainly some smart folks here and I really appreciate the time and suggestions! :)",SignificantConflict3,1fehid0,https://reddit.com/r/Python/comments/1fehid0/what_can_i_automate_at_a_job_that_i_cant_see_room/,https://www.reddit.com/r/Python/comments/1fehid0/what_can_i_automate_at_a_job_that_i_cant_see_room/,2024-09-11 18:33:58,76,0.81,76,0,97,0,0,False,False,True,False,False,Discussion,self,t3_1fehid0
Python,My first open-source project built with Python to inspect databases through CLI fast,"**What My Project Does**:   
  
peepDB is a CLI tool designed for rapid database table inspection without writing SQL. It supports MySQL, PostgreSQL, and MariaDB, allowing users to view all tables or a specific table with simple commands. The tool securely stores connection details, provides output in formatted table or JSON format.

**Target Audience**:   
  
peepDB is aimed at developers debugging database-driven applications, DBAs performing quick checks or audits, data analysts exploring table structures, and those learning about databases who want an easy way to explore data. It's suitable for use in both development and production environments, providing a versatile tool for various database inspection needs.

**Comparison**:   
  
peepDB distinguishes itself from alternatives by focusing solely on quick table viewing, supporting multiple databases out-of-the-box, and securely storing connection details. It requires no SQL knowledge to use, has a minimal footprint compared to larger database management tools, and offers both CLI and Python library interfaces for flexibility.

GitHub Repo: [https://github.com/evangelosmeklis/peepdb](https://github.com/evangelosmeklis/peepdb)  
if you have any suggestions for the project or comments on how to improve let me know",_twelvechess,1febbx0,https://reddit.com/r/Python/comments/1febbx0/my_first_opensource_project_built_with_python_to/,https://www.reddit.com/r/Python/comments/1febbx0/my_first_opensource_project_built_with_python_to/,2024-09-11 14:20:52,44,0.89,44,0,24,0,0,False,False,True,False,False,Showcase,self,t3_1febbx0
Python,Jetmaker(Re-posted): Python framework to build distributed systems,"# What My Project Does

Jetmaker is an end-to-end framework designed to simplify the development of distributed systems in Python. It enables distributed Python applications to seamlessly access each other's services, resources, objects, and data, making inter-application interactions feel as though they are operating within the same environment. Jetmaker also provides powerful namespace sharing and synchronization tools, allowing distributed applications to work together as a unified, coordinated system.

# Target Audience

It is for Python developers to build systems which need multiple nodes to work together in a heterogenous manner, for different nodes to take different jobs but connect together.

# Comparison

Ray and Dask are great tools for distributing workloads to multiple computers, Jetmaker and they serve different purposes, Jetmaker is designed for individual nodes to communicate with each other.

Github: [https://github.com/gavinwei121/Jetmaker](https://github.com/gavinwei121/Jetmaker)

# Note

My earlier post was removed due to violations with formatting requirements, now it is reformatted and posted again.

Hope everyone enjoy it and tell me your thoughts about Jetmaker. \^\_\^

",Affectionate_Set_326,1feacla,https://reddit.com/r/Python/comments/1feacla/jetmakerreposted_python_framework_to_build/,https://www.reddit.com/r/Python/comments/1feacla/jetmakerreposted_python_framework_to_build/,2024-09-11 13:38:46,16,0.81,16,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1feacla
Python,Implementing Python Bindings for Dust DDS with PyO3,"Hi everyone! üëã

I recently wrote an article for my company on how we created Python bindings for our native Rust implementation of the Data Distribution Service (DDS) middleware, called Dust DDS.

While the article isn't exclusively about Python, it dives deep into the process of using PyO3 for binding Rust to Python, going through the design decisions we made and how we programmatically generate the pyi file from the original Rust API. I thought it might be helpful or inspiring for anyone looking to bridge Rust and Python in their projects so you can check it out here: [https://www.s2e-systems.com/2024/09/11/dust\_dds\_python\_bindings/](https://www.s2e-systems.com/2024/09/11/dust_dds_python_bindings/)",jayrebel351,1fe4w3m,https://reddit.com/r/Python/comments/1fe4w3m/implementing_python_bindings_for_dust_dds_with/,https://www.reddit.com/r/Python/comments/1fe4w3m/implementing_python_bindings_for_dust_dds_with/,2024-09-11 08:06:25,24,0.96,24,0,0,0,0,False,False,True,False,False,Resource,self,t3_1fe4w3m
Python,First Website/Tool using Python as backend language,"**What My Project Does:**  
Developed and Launched a web application which estimated Big O Notation (Time and Space Complexity) of YOUR algorithms, and provides performance visualization of your algorithm showing number of iterations being performed over different input sizes.

**Target Audience**:  
It is meant for programmers learning algorithms who can benefit from this tool by analyzing their algorithms and getting performance statistics.

**Comparison**:  
This tool provides visualization of algorithm and it is free to use.

Please check out AlgoMeter AI. It‚Äôs Free / No Sign Up needed. 

[https://www.algometerai.com](https://www.algometerai.com/)

GitHub Repo:¬†[https://github.com/raumildhandhukia/AlgoMeterAIBack](https://github.com/raumildhandhukia/AlgoMeterAIBack)

Edit: Please give me feedback.",raumild12,1fdztpi,https://reddit.com/r/Python/comments/1fdztpi/first_websitetool_using_python_as_backend_language/,https://www.reddit.com/r/Python/comments/1fdztpi/first_websitetool_using_python_as_backend_language/,2024-09-11 02:40:58,1,0.53,1,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1fdztpi
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1fdwqji,https://reddit.com/r/Python/comments/1fdwqji/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1fdwqji/wednesday_daily_thread_beginner_questions/,2024-09-11 00:00:08,3,0.72,3,0,3,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fdwqji
Python,An Extensive Open-Source Collection of AI Agent Implementations with Multiple Use Cases and Levels,"Hi all,

In addition to the RAG Techniques repo (6K stars in a month), I'm excited to share a new repo I've been working on for a while‚ÄîAI Agents!

It‚Äôs open-source and includes 14 different implementations of AI Agents, along with tutorials and visualizations.

This is a great resource for both learning and reference. Feel free to explore, learn, open issues, contribute your own agents, and use it as needed. And of course, join our AI Knowledge Hub Discord community to stay connected!
Enjoy!

https://github.com/NirDiamant/GenAI_Agents",Diamant-AI,1fds4ad,https://reddit.com/r/Python/comments/1fds4ad/an_extensive_opensource_collection_of_ai_agent/,https://www.reddit.com/r/Python/comments/1fds4ad/an_extensive_opensource_collection_of_ai_agent/,2024-09-10 20:32:40,0,0.45,0,0,0,0,0,False,False,True,False,False,Resource,self,t3_1fds4ad
Python,Fight against bot followers on Github!,"# What my project does

Since I've been on Github, I've had hundreds of follow requests on Github from users following +20k other users... Got tired of all these people using bots for followers, so I create another bot to fight against them!

This Python Github action will run every day, and block users that follow me, having more than X following count, highlighting they are probably using a bot to follow lots of people.

If like me, you're tired of this, feel free to use it: [https://github.com/smallwat3r/github-antibot](https://github.com/smallwat3r/github-antibot)

# Target Audience

The target audience is any developer that are annoyed to receive some random notification about a bot following them. Ok, this action won't stop this notification from coming in, but at least it will block the user using the bot, which will remove them from your followers.

Which is actually quite handy, as you can go from time to time in your 'Blocked User' section, and see how many users it actually blocks.

# Comparison

I'm not aware of any tools that currently does this, but I'm likely wrong, so would be interested to see any alternatives.",smallwat3r,1fdmde7,https://reddit.com/r/Python/comments/1fdmde7/fight_against_bot_followers_on_github/,https://www.reddit.com/r/Python/comments/1fdmde7/fight_against_bot_followers_on_github/,2024-09-10 16:38:51,16,0.81,16,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1fdmde7
Python,Dict Hash: Efficient Hashing for Python Dictionaries,"# What My Project Does

[Dict Hash](https://github.com/LucaCappelletti94/dict_hash) is a Python package designed to solve the issue of hashing dictionaries and other complex data structures. By default, dictionaries in Python aren‚Äôt hashable because they‚Äôre mutable, which can be limiting when building systems that rely on efficient lookups, caching, or comparisons. Dict Hash provides a simple and robust solution by allowing dictionaries to be hashed using Python‚Äôs native hash function or other common hashing methods like `sha256`.

It also supports hashing of **Pandas** and **Polars** DataFrames, **NumPy** arrays, and **Numba** objects, making it highly versatile when working with large datasets or specialized data structures. Of course, the package can hash recursively, so even dictionaries containing other dictionaries (or nested structures) can be hashed without trouble. You can even implement the `Hashable` interface and add support for your classes.

One of the key features of Dict Hash is its **approximated mode**, which provides an efficient way to hash large data structures by subsampling. This makes it perfect for scenarios where speed and memory efficiency are more important than exact precision while maintaining **determinism**, meaning that the same input will always result in the same hash, even when using approximation. Typically we use this when processing large datasets or model weights where it is reasonably unlikely that their sketch will have collisions.

We use it extensively in our [cache decorator](https://github.com/zommiommy/cache_decorator).

# Code Examples

1. **Basic hashing of a dictionary using** `dict_hash()`**:** digests the dictionary into a hash using the native Python hash function which may change with different sessions

&amp;#8203;

    from dict_hash import dict_hash
    from random_dict import random_dict
    from random import randint
    
    # Create a random dictionary
    d = random_dict(randint(1, 10), randint(1, 10))
    my_hash = dict_hash(d)
    print(my_hash)

2. **Consistent hashing with** `sha256()`**:**  digests the dictionary into a hash using sha256, which will not change with the session

    from dict_hash import sha256
    from random_dict import random_dict
    from random import randint
    
    # Generate a random dictionary
    d = random_dict(randint(1, 10), randint(1, 10))
    
    # Hash the dictionary using sha256
    my_hash = sha256(d)
    print(my_hash)

3. **Efficient hashing with approximation (Pandas DataFrame):** In this example, **approximation** mode samples rows and columns of the DataFrame to speed up the hashing process without needing to compute over the entire dataset, making it an ideal choice for large datasets.

    import pandas as pd
    from dict_hash import sha256
    
    # Create a large DataFrame
    df = pd.DataFrame({'col1': range(100000), 'col2': range(100000, 200000)})
    
    # Use approximated hashing for efficiency
    approx_hash = sha256(df, use_approximation=True)
    print(approx_hash)

4. **Handling unhashable objects gracefully:** While we try to cover lots of commonly used objects, some are possibly not currently covered. You can choose different behaviours when such an object is encountered - by default, it will raise an exception, but you can also choose to `ignore` such objects.

    from dict_hash import sha256
    
    # Example with a set, which isn't directly hashable
    d = {""key"": set([1, 2, 3])}
    
    # Hash the dictionary, ignoring unhashable objects
    safe_hash = sha256(d, behavior_on_error='ignore')
    print(safe_hash)

# Target Audience

[Dict Hash](https://github.com/LucaCappelletti94/dict_hash) is perfect for developers and researchers working with:

* **Caching systems** that require dictionaries or data structures to be hashed for faster lookups. BTW we have our own called [cache decorator](https://github.com/zommiommy/cache_decorator).
* **Data analysis** workflows involving large **Numpy**,  **Pandas** or **Polars** DataFrames, where efficient hashing can save time and memory by skipping repeated steps.
* **Projects dealing with recursive or complex data structures**, ensuring that any dictionary can be hashed, no matter its contents.

If you have any object that you would like for me to support by default, just open up an issue in the repo and we will discuss it there!

# License 

This project is [open-source](https://github.com/LucaCappelletti94/dict_hash) and released under MIT License.",Personal_Juice_2941,1fdkpkz,https://reddit.com/r/Python/comments/1fdkpkz/dict_hash_efficient_hashing_for_python/,https://www.reddit.com/r/Python/comments/1fdkpkz/dict_hash_efficient_hashing_for_python/,2024-09-10 15:30:44,60,0.86,60,0,21,0,0,False,False,True,False,False,Showcase,self,t3_1fdkpkz
Python,Injecting syscall faults in Python and Ruby,"Since syscalls are near the very bottom of any software stack, their misbehavior can be particularly hard to test for. Stuff like running out of disk space, network connections timing out or bumping into system limits all ultimately manifest as a syscall failing somewhere. If you want your code to be resilient to these kinds of failures, it sure would be nice if you could simulate these situations easily.

See how in the blog post: https://blog.mattstuchlik.com/2024/09/08/injecting-syscall-faults.html",sYnfo,1fdjv06,https://reddit.com/r/Python/comments/1fdjv06/injecting_syscall_faults_in_python_and_ruby/,https://www.reddit.com/r/Python/comments/1fdjv06/injecting_syscall_faults_in_python_and_ruby/,2024-09-10 14:55:37,21,0.83,21,0,1,0,0,False,False,True,False,False,Tutorial,self,t3_1fdjv06
Python,A web UI for SQLAlchemy to integrate into your web apps,"# What my project does

I was missing a UI to visualize my DB schema, quickly check what's in the DB, see the migrations, etc. So you know what happened next :S

I created a very simple PoC to visualize the tables and relationships of a DB, later I'm planning data visualization and alembic migrations view/management/don't know possibly some git integration to check for DB changes on other branches. The idea is to integrate the UI into your existing web application, for the moment I only support FastAPI and Starlette:

`pip install dbstudio`

    from dbstudio.fastapi import get_fastapi_router
    
    app = FastAPI()
    app.mount(""/dbstudio"", get_fastapi_router(engine))

Link to repo:¬†[https://github.com/lucafaggianelli/dbstudio](https://github.com/lucafaggianelli/dbstudio)

# Target Audience

The project is meant to be used during development and not in production as an admin panel or whatever

# Comparison

I was inspired by Prisma, an ORM for NodeJS that ships with its own Studio and ChartDB a tool to visualize DB schemas offline running a SQL query, I didn't find much for the SQLAlchemy world only sqladmin for FastAPI, but it doesn't show the DB schema, is more a data editor and some projects for Flask.

The alternative is to use tools like DB browser for SQLite, pgadmin etc. that are completely decoupled from the python webapp

# Conclusion

So what do you think? Do we need it or I trash it? And what features would you love to see?",lucafaggia,1fdje37,https://reddit.com/r/Python/comments/1fdje37/a_web_ui_for_sqlalchemy_to_integrate_into_your/,https://www.reddit.com/r/Python/comments/1fdje37/a_web_ui_for_sqlalchemy_to_integrate_into_your/,2024-09-10 14:35:43,42,0.87,42,0,11,0,0,False,False,True,False,False,Showcase,self,t3_1fdje37
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1fd4fhr,https://reddit.com/r/Python/comments/1fd4fhr/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1fd4fhr/tuesday_daily_thread_advanced_questions/,2024-09-10 00:00:06,11,0.87,11,0,5,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fd4fhr
Python,Library for generating REST API clients using methods annotated with type hints,"**What My Project Does**

Meatie is a Python metaprogramming library that eliminates the need for boilerplate code when integrating with REST APIs. The library generates code for calling a REST API based on method signatures annotated with type hints. Meatie abstracts away mechanics related to HTTP communication, such as building URLs, encoding query parameters, serializing and deserializing request and response body. With some modest additional configuration, generated methods provide rate limiting, retries, and caching. Meatie works with major HTTP client libraries (request, httpx, aiohttp). It offers integration with Pydantic V1 and V2. The minimum officially supported version is Python 3.9.

**Code Example**

    from typing import Annotated
    from aiohttp import ClientSession
    from meatie import api\_ref, endpoint
    from meatie\_aiohttp import Client
    from meatie\_example.store import Product, Basket, BasketQuote  # Pydantic models
    
    class OnlineStore(Client):
        def __init__(self, session: ClientSession) -&gt; None:
            super().__init__(session)
            
        @endpoint(""/api/v1/products"")
        async def get_products(self) -&gt; list[Product]:
            # Sends an HTTP GET request and parses response's body using Pydantic to list[Product]
            ...
            
        @endpoint(""/api/v1/quote/request"")
        async def post_request_quote(self, basket: Annotated[Basket, api_ref(""body"")]) -&gt; BasketQuote:
            # Dumps a Pydantic model :basket to JSON and sends it as payload of an HTTP POST request.
            ...
            
        @endpoint(""/api/v1/quote/{quote_id}/accept"")
        async def post_accept_quote(self, quote_id: int) -&gt; None:
            # URLs can reference method parameters. Parameters not referenced in the URL are sent as HTTP query params.
            ...

**Source Code**

[https://github.com/pmateusz/meatie](https://github.com/pmateusz/meatie)

**Target Audience**

Production-grade integrations with REST-based external APIs.

**Comparison**

1. Bare HTTP-client library (i.e., httpx, requests, aiohttp) provides API to build and send HTTP requests, receive HTTP responses, and manage a connection pool. Due to low-level API, they allow for a high degree of customization including transport and networking. Building a REST API client using an HTTP client library is similar to implementing a persistence layer on top of a database driver, it is verbose.
2. Code generators (i.e., https://github.com/dmontagu/fastapi\_client) that generate a client API based on OpenAPI specification. They are an attractive and popular choice. They may not be an ideal choice if one needs to integrate with only a small subset of endpoints. Besides, the OpenAPI specification may be incomplete. Finally, the auto-generated code should not be modified which is problematic if corrections are required/desirable.

**Conclusion**

The library aims to fill a gap for a higher-level framework to develop REST API clients. I¬†released the first stable version six months ago. We started using the library in production to implement new API integrations and replace existing ones. The overall experience has been positive so far. The library allowed us to integrate with new endpoints faster, support for retries, rate-limiting, caching, and private endpoints is built in the library, so developers don't need to develop custom extensions. Last but not least, API clients developed with this framework follow a similar structure which simplifies maintenance.",Mundane-Resolve624,1fcz4bd,https://reddit.com/r/Python/comments/1fcz4bd/library_for_generating_rest_api_clients_using/,https://www.reddit.com/r/Python/comments/1fcz4bd/library_for_generating_rest_api_clients_using/,2024-09-09 20:09:59,26,0.91,26,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1fcz4bd
Python,Show: created a precached route calculation for the US,"[https://github.com/ivanbelenky/us-routing](https://github.com/ivanbelenky/us-routing)

* **What My Project Does**
   * routes between continental US points
   * optimized graph for class 1, 12, 123 roads.
* **Target Audience**:
   * whomever that does not want to hit an API for routing
   * whomever that can accept a couple of kilometers/miles of error for each calculated route",leculet,1fcz1ck,https://reddit.com/r/Python/comments/1fcz1ck/show_created_a_precached_route_calculation_for/,https://www.reddit.com/r/Python/comments/1fcz1ck/show_created_a_precached_route_calculation_for/,2024-09-09 20:06:33,9,0.86,9,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1fcz1ck
Python,Build web applications with wwwpy: For backend developers looking to minimize frontend headaches,"All while providing strong customization, extension, and scalability!

Hey guys, my name is Simon and this is my first post.

I'm here for two reasons. One, share some thoughts about libraries you may be familiar with, like: Streamlit, Gradio, Dash, Anvil, Panel, Reflex, Taipy, NiceGUI, Remo, Pyweb, PyJs, Flet, Mesop and Hyperdiv. Two, get to know what problems you are dealing with that pushed you to use one of the above.

Don't get me wrong, the libraries listed have amazing features but I'm purposely looking at the missing parts.

Here are some pain points I've identified:

* Slow UI rendering with big datasets or multiple visualization
* Difficult to scale programming model and UI interaction
* Extending or building components is costly, difficult or involving long toolchains
* Overly simplistic architectures for complex applications
* Scalability challenges in transitioning from demos to fully-fledged applications
* Python runs server-side, while browser capabilities remain distant and restricted by the framework's architecture. (markdown, server side api, pushing updates to the DOM)

The famous libraries mentioned are particularly close to my heart because it's the field where I invested the most time working on. I've been developing software as a consultant for nearly 35 years and in the last 15 I developed web applications and web application libraries for my colleagues, my customers and clients (and also for my friends).

I don't know if this will make sense to you but my goal is clear: making the equivalent of Delphi for web development in Python.¬†

The vision of wwwpy:¬†

* **Jumpstart Your Projects:** With just a couple of commands, get a head start on building web UIs, allowing you to focus on coding and scaling your application.
* **Build Web UIs:** Create web interfaces without the need to focus on the frontend. Everything is Python. You can avoid HTML/DOM/CSS/JavasScript, but you can use the full power of it, if you want. Use the drag-and-drop UI builder for rapid prototyping, while still being able to easily create, extend, and customize UIs as needed.
* **Integrated Development Environment:** use an intuitive UI building experience within the development environment, making it easy to edit properties and components as you go.
* **Direct Code Integration:** UI components are fully reflected in the source code, allowing for manual edits. Every change is versionable and seamlessly integrates with your source code repository.
* **Versatile Scalability:** From quick UI prototypes to large-scale enterprise applications, wwwpy handles everything from simple interfaces to complex projects with external dependencies and integrations.

I already built an initial prototype but I'm currently following the directive: ""go out and talk with people"".¬†

Please share your experiences and challenges with building Python web applications. Your insights will be invaluable in shaping wwwpy into a tool that truly meets your needs, not just mine or my customers'.

Here's a brief video showing a quick interaction with wwwpy prototype: [https://wwwpy.dev](https://wwwpy.dev)  
This is a talk at PyConEs 2023 where I explain the core concepts of wwwpy, focusing on client/server interactions: [Simone Giacomelli - Seamless Server and in-Browser web programming with wwwpy, Pyodide and WASM.](https://www.youtube.com/watch?v=zGYVIbeUWUg)¬†  
This is the infant repo: [https://github.com/wwwpy-labs/wwwpy](https://github.com/wwwpy-labs/wwwpy); I didn't mark this post with 'Showcase' because it's not quite there yet!

If you‚Äôre interested, drop a comment below or send me a direct message. I‚Äôd love to hear your thoughts.",simone_giacomelli,1fcwvuk,https://reddit.com/r/Python/comments/1fcwvuk/build_web_applications_with_wwwpy_for_backend/,https://www.reddit.com/r/Python/comments/1fcwvuk/build_web_applications_with_wwwpy_for_backend/,2024-09-09 18:40:58,50,0.88,50,0,22,0,0,False,False,True,False,False,Discussion,self,t3_1fcwvuk
Python,Reasoning About ML Workflows,"In this post, I discuss some concepts for building effective machine learning workflows, focusing on reproducibility, artifact tracking, and automation. While I use a weather recognition project with Kubeflow Pipelines and Vertex AI as an example, the true goal is to share practical tips and important considerations. I hope somebody finds it useful.  


[https://martynassubonis.substack.com/p/reasoning-about-ml-workflows](https://martynassubonis.substack.com/p/reasoning-about-ml-workflows)",Martynoas,1fcvhpa,https://reddit.com/r/Python/comments/1fcvhpa/reasoning_about_ml_workflows/,https://www.reddit.com/r/Python/comments/1fcvhpa/reasoning_about_ml_workflows/,2024-09-09 17:44:04,7,0.65,7,0,0,0,0,False,False,True,False,False,Resource,self,t3_1fcvhpa
Python,"Introducing django-py-reverse, based on django-js-reverse package","This is a very simple project that I created for my own applications, I think it can still be used by other people so please take a look at it, this is specially useful if you have a running Django project and you need a python client (Desktop, CLI, Mobile).

  
I created it for Desktop application with Kivy.

  
Here are the links!

[https://pypi.org/project/django-js-reverse/](https://pypi.org/project/django-js-reverse/) (The original project)

[https://github.com/robertpro/django-py-reverse](https://github.com/robertpro/django-py-reverse) (Mine)

  
Thanks for reading!",robertpro01,1fct755,https://reddit.com/r/Python/comments/1fct755/introducing_djangopyreverse_based_on/,https://www.reddit.com/r/Python/comments/1fct755/introducing_djangopyreverse_based_on/,2024-09-09 16:09:25,7,0.65,7,0,2,0,0,False,False,True,False,False,Resource,self,t3_1fct755
Python,Opinion: maintenance means upgrading your package,"There were a lot of **loud** responses to the notion of ""loudly complain the package won't work under python 13.3"".

IMNSHO, ""loudly"" does not imply impolite/obnoxious, and if the maintainer wants to maintain, and still hadn't caught on to that something changed, a big fat ""will not work"" is not only appropriate but also polite - someone took the the time the ""maintainer"" probably - unless there was a published issue - didn't take, and haven't wasted anybody's time with empty words. Simply noting ""Won't effin' work"" is a valuable info in itself.

Should we aim to wallow in subservient avoidance of ""this info might not be pleasant"" (ignore moving forward is the only option), or should we state the facts as they are?",Neat-Description-391,1fcrtj2,https://reddit.com/r/Python/comments/1fcrtj2/opinion_maintenance_means_upgrading_your_package/,https://www.reddit.com/r/Python/comments/1fcrtj2/opinion_maintenance_means_upgrading_your_package/,2024-09-09 15:12:45,0,0.19,0,0,44,0,0,False,False,True,False,False,Discussion,self,t3_1fcrtj2
Python,Introducing SyncStar - Creating bootable USB storage devices at community conference kiosks,"# What my project does

SyncStar lets users create bootable USB storage devices with the operating system of their choice. This application is intended to be deployed on kiosk devices and electronic signage where conference guests and booth visitors can avail themselves of its services.

# Features

* Asynchronous multiprocessing allows for flashing multiple storage devices simultaneously
* Programming standards and engineering methodologies are maintained as much as possible
* Frontend is adaptive across various viewport types and browser-side assistive technologies
* Detailed documentation for both consumption and development purposes are readily provided
* Minimal command line interface based configuration with wide range of customizable options
* Stellar overall codebase quality is ensured with 100% coverage of functional backend code
* Over 46 checks are provided for unit based, end-to-end based integration based codebase testing
* GitHub Actions and Pre-Commit CI are enabled to automate maintenance of codebase quality

# Illustrations

* [https://raw.githubusercontent.com/gridhead/syncstar/main/data/dash.png](https://raw.githubusercontent.com/gridhead/syncstar/main/data/dash.png)
* [https://raw.githubusercontent.com/gridhead/syncstar/main/data/expo.png](https://raw.githubusercontent.com/gridhead/syncstar/main/data/expo.png)

# Attempting

If this looks exciting, please consider giving the project a spin. The project is available on official Fedora Linux repositories and the Python Package Index. Please support my efforts by filing [issue tickets](https://github.com/gridhead/syncstar/issues) for software errors or feature requests, [starring](https://github.com/gridhead/syncstar/stargazers) the project repository or [contributing](https://github.com/gridhead/syncstar/pulls) to the codebase.

# Target Audience

This project is meant to be used in conference kiosks by both conference attendees as well as conference organizers. Here is a scenario for someone representing a GNU/Linux distribution community at a FOSS conference eg. a person representing the [CentOS Project](https://centos.org/) community at the [FOSDEM](https://fosdem.org/2024/) conference.

1. Set up the SyncStar service on your GNU/Linux distribution booth laptop or Raspberry Pi
2. Open up the SyncStar dashboard either on the booth laptop or on a smartphone
3. Lay over the swags like your GNU/Linux distribution branded USB flash drives on the booth desk
4. Let a conference attendee ask if the USB flash drives on the booth table are for taking
5. Tell them that they are as long as they get themselves a copy of your GNU/Linux distribution
6. Have them start the live bootable media creation and strike up a conversation with them
7. Allow other attendees to use their own USB flash drives with [discretion](https://en.wikipedia.org/wiki/USB_killer) in parallel
8. Advertise for sidestream communities by keeping their offerings in the collection

# Comparison

* [**Fedorator**](https://github.com/Sanqui/fedorator)
   * The project is currently unmaintained since the last seven years
   * The project depends on certain hardware that can be expensive

Resources

* [Introducing SyncStar - Fedora Magazine](https://fedoramagazine.org/introducing-syncstar/)
* [SyncStar - GitHub](https://github.com/gridhead/syncstar/)
* [SyncStar Wiki - GitHub](https://github.com/gridhead/syncstar/wiki/)
* [SyncStar - PyPI](https://pypi.org/project/syncstar/)
* [SyncStar - Package Sources](https://src.fedoraproject.org/rpms/syncstar)",t0xic0der,1fck0m2,https://reddit.com/r/Python/comments/1fck0m2/introducing_syncstar_creating_bootable_usb/,https://www.reddit.com/r/Python/comments/1fck0m2/introducing_syncstar_creating_bootable_usb/,2024-09-09 07:48:20,25,0.84,25,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1fck0m2
Python,PyWeek 38: A Python Game Jam,"PyWeek is a twice-a-year game jam (that's been running for over 15 years) where you have a week to create a game in Python that fits the theme voted on by the community. You can enter by yourself or with a team of your choosing. The games are judged and voted on by the other PyWeek participants.

Once you've signed, you can immediately go vote on the different themes! Head over here to vote: [https://pyweek.org/p/42/](https://pyweek.org/p/42/)  


**Important Dates**

* Theme is revealed and PyWeek starts: Sunday, September 15th, 2024 (midnight UTC)
* Challenge ends: Sunday, September 22nd (midnight UTC)
* Judging ends &amp; winners announced: Sunday, October 6th (midnight UTC)

  
**Helpful Links &amp; Other Info**

* Sign up on the PyWeek website: [https://pyweek.org/38/](https://pyweek.org/38/)
* PyWeek Rules: [https://pyweek.readthedocs.io/en/latest/rules.html](https://pyweek.readthedocs.io/en/latest/rules.html)

  
If you're interested in working with other folks or have more questions, there is a dedicated channel over on the Python Discord server for PyWeek. You're welcome to ping me directly there.

I'll also try to keep an eye on this thread if folks have questions\~",Kutiekatj9,1fccov9,https://reddit.com/r/Python/comments/1fccov9/pyweek_38_a_python_game_jam/,https://www.reddit.com/r/Python/comments/1fccov9/pyweek_38_a_python_game_jam/,2024-09-09 00:30:15,18,0.81,18,0,2,0,0,False,False,True,False,False,News,self,t3_1fccov9
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1fcc2z6,https://reddit.com/r/Python/comments/1fcc2z6/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1fcc2z6/monday_daily_thread_project_ideas/,2024-09-09 00:00:09,12,0.89,12,0,3,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fcc2z6
Python,Just Released Version 0.4.0 of Django Action Triggers!,"First off, a huge thank you to everyone who provided feedback after the release of version 0.1.0! I've taken your input to heart and have been hard at work iterating. I‚Äôm excited to announce the release of **version 0.4.0** of **django-action-triggers**.

There‚Äôs still more to come in terms of features and addressing suggestions, but here‚Äôs an overview of the current progress.

# What is Django Action Triggers

[Django Action Triggers](https://github.com/Salaah01/django-action-triggers) is a Django library that lets you trigger specific actions based on database events, detected via Django Signals. With this library, you can configure **actions** that run asynchronously when certain triggers (e.g., a model save) are detected.

For example, you could set up a trigger that hits a webhook and sends a message to AWS SQS whenever a new sale record is saved.

# What's New in Version 0.4.0?

Here‚Äôs a quick comparison of **version 0.1.0** vs. **version 0.4.0**:

**Version 0.1.0** features:

* Webhook integration
* RabbitMQ integration
* Kafka integration

**Version 0.4.0** features:

* Webhook integration
* RabbitMQ integration
* Kafka integration
* Redis integration
* AWS SQS (Simple Queue Service) integration
* AWS SNS (Simple Notification Service) integration
* Actions all run asynchronously
* Actions can have a timeout

# Looking Forward

As always, I‚Äôd love to hear your feedback. This project started as a passion project but has become even more exciting as I think about all the new integrations and features I plan to add.

Feel free to check out the repo and documentation, and let me know what you think!

Repo:¬†[https://github.com/Salaah01/django-action-triggers](https://github.com/Salaah01/django-action-triggers)

Documentation:¬†[https://salaah01.github.io/django-action-triggers/](https://salaah01.github.io/django-action-triggers/)",Salaah01,1fc2t9a,https://reddit.com/r/Python/comments/1fc2t9a/just_released_version_040_of_django_action/,https://www.reddit.com/r/Python/comments/1fc2t9a/just_released_version_040_of_django_action/,2024-09-08 17:10:54,22,0.87,22,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1fc2t9a
Python,winaccent - A Python module for getting Windows' accent color or a shade of it,"# What my project does

winaccent allows you to get the Windows' accent color or a shade of it. Works on both Windows 10 and 11 and doesn't require additional dependencies. Useful if you are creating a GUI using Python and you want to style your app with the system's accent color.

# Target audience

It is meant for production.

# Comparison

Unlike other alternatives that only allow you to get the accent color, this project also allows you to get a shade of it. Also, it allows you to listen for accent color changes for easily updating your app's colors to match it.

# Installation

The module can be installed using the following command:

    pip install winaccent

# Documentation &amp; Source code

The documentation and the source code is available here: [https://github.com/Valer100/winaccent](https://github.com/Valer100/winaccent) . Feedback is greatly appreciated. If you found this module useful, please consider starring it on GitHub.",Valer100,1fbvhmr,https://reddit.com/r/Python/comments/1fbvhmr/winaccent_a_python_module_for_getting_windows/,https://www.reddit.com/r/Python/comments/1fbvhmr/winaccent_a_python_module_for_getting_windows/,2024-09-08 11:21:11,33,0.88,33,0,6,0,0,False,False,True,False,False,Showcase,self,t3_1fbvhmr
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1fbku4v,https://reddit.com/r/Python/comments/1fbku4v/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1fbku4v/sunday_daily_thread_whats_everyone_working_on/,2024-09-08 00:00:08,10,0.78,10,0,10,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fbku4v
Python,Python 3.13 RC2 Available Today - Python 3.13 available October 1st,"Python 3.13 will drop on October 1st.

The second release candidate just dropped today.

Don't be afraid to upgrade.

Install the RC2 from [here](https://www.python.org/downloads/release/python-3130rc2/) and run your regression tests for your applications, and be ready to upgrade to Python 3.13 the moment it becomes available on October 1st.

If any of your dependencies fail when running your application on the RC2, immediately raise an issue on their github and complain loudly that they need to make the changes to make it compatible as well as publish binary wheels.


https://www.python.org/downloads/release/python-3130rc2/",chinawcswing,1fbb4qw,https://reddit.com/r/Python/comments/1fbb4qw/python_313_rc2_available_today_python_313/,https://www.reddit.com/r/Python/comments/1fbb4qw/python_313_rc2_available_today_python_313/,2024-09-07 16:36:42,22,0.56,22,0,58,0,0,False,False,True,False,False,News,self,t3_1fbb4qw
Python,Astral.sh (the company behind uv) paid product: is it going to be a Heroku replacement?,"As you might know [Astral](https://astral.sh/), the company behind `uv` and `ruff`, are a small company but have venture capital funding. And right now they are not making money at all (but of course they're building awesome tools!)

I listened to the [Talk Python podcast episode 476](https://talkpython.fm/episodes/show/476/unified-python-packaging-with-uv) where u/mikeckennedy &amp; Charlie Marsh discuss the new capabilities `uv` has.

And it got me thinking, since `uv` is now able to install specific python versions, and since they stated they don't want to charge for features in `uv` ever, but are planning on charging for features adjacent to it that you might need to get your code up and running, could it be they'll be building a Heroku replacement? Certainly when you're wanting to build a Heroku-like thing it can be beneficial to allow users to specify their exact python version and have ways to install it.

I think it might be very cool and I'm sure there's a lot of opportunity in that space.

Does anybody know if Charlie Marsh or other Astral people ever discussed their plan to make money in more detail?",DouweB82,1fbabmr,https://reddit.com/r/Python/comments/1fbabmr/astralsh_the_company_behind_uv_paid_product_is_it/,https://www.reddit.com/r/Python/comments/1fbabmr/astralsh_the_company_behind_uv_paid_product_is_it/,2024-09-07 16:02:16,46,0.84,46,0,9,0,0,False,False,True,False,False,Discussion,self,t3_1fbabmr
Python,Adding Python to Docker in 2 seconds using uv's Python command,"Had great success speeding up our Docker workflow over at Talk Python using the brand new features of uv for managing Python and virtual environments. Wrote it up if you're interested:

[https://mkennedy.codes/posts/python-docker-images-using-uv-s-new-python-features/](https://mkennedy.codes/posts/python-docker-images-using-uv-s-new-python-features/)",mikeckennedy,1fb9qcy,https://reddit.com/r/Python/comments/1fb9qcy/adding_python_to_docker_in_2_seconds_using_uvs/,https://www.reddit.com/r/Python/comments/1fb9qcy/adding_python_to_docker_in_2_seconds_using_uvs/,2024-09-07 15:37:28,162,0.91,162,0,45,0,0,False,False,True,False,False,News,self,t3_1fb9qcy
Python,"Audio Book Reader: Read .epub, .rtf, and .txt as audio books!","[https://github.com/RNRetailer/audio-book-reader](https://github.com/RNRetailer/audio-book-reader)



**What My Project Does**

This program is for the Linux terminal.

It breaks text files into lines and reads them out loud one line at a time.

Your progress for each file is stored in a .json file.

You can choose to skip to a certain line by passing it as a parameter when running the script.

Please make an issue or a pull request if you think any changes are needed.

Thanks!



**Target Audience (e.g., Is it meant for production, just a toy project, etc.)**

Anyone who uses Linux and wants to have a text file read out loud to them.



**Comparison (A brief comparison explaining how it differs from existing alternatives.)**

I haven't looked into alternatives in this space, I just made it on a whim.

",RNRetailer,1fb3f8p,https://reddit.com/r/Python/comments/1fb3f8p/audio_book_reader_read_epub_rtf_and_txt_as_audio/,https://www.reddit.com/r/Python/comments/1fb3f8p/audio_book_reader_read_epub_rtf_and_txt_as_audio/,2024-09-07 09:57:05,38,0.93,38,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1fb3f8p
Python,"Native bit size, Arbitrary-Precision Arithmetic ","Edit^1 : not a homework question, I‚Äôve literally already turned the assignment in, I just want to understand.

Okay so I have a homework question to compare the int factorial and the float factorial of 200 and to explain what I find. For reference 200! results in a answer and 200.0! results in ‚àû. I‚Äôm like 90% sure the professor want an answer along the lines of ‚Äúthe calculated value exceeds (overflows) the maximum value that can be represented by the data type.‚Äù Especially given this is not a compsci class. Great, that‚Äôs easy. BUT I was like why, and so it took me a while because I‚Äôm a pretty new to programming and struggle with a lot of the terminology but I ended up coming across bignum. ~~Now, the general idea of bignum makes sense to me‚Ä¶ I understand how the arrays are structured beyond the bit size of the cpu, what I don‚Äôt understand is where the bit size comes in. Here‚Äôs my thought process: I understand that python uses the bit size to binarily encode the output - I think this is our base array and each individual 0 or 1 is an array.  In order to maximize performance python can assign anywhere from 0 to 1073741823 = 2^30 digits to each array‚Ä¶ ie 10^1073741823 (I‚Äôm not sure why this helps me visualize this number but it does)‚Ä¶. Now here‚Äôs where I get tripped up, how are you able to assign another number to a binary system (I know we‚Äôve turned them into arrays but that‚Äôs still not making sense to me)? And why does this result in 2^31 -1 possible int digits? (I am assuming this is because it‚Äôs using 32 bits as parent arrays? I have python 64 bit so I‚Äôm not really understanding the correlation. Am I thinking about this completely wrong?~~

~~I‚Äôm sorry if some of this is unclear.~~

Edit^1 : Strikethrough because of lack of clarity. The above is me attempting to logic through how this might work. The below is an explanation of what I‚Äôm actually unclear about (reposted from comments): 

I understand that there are 2^32 arrays which can all support 2^30 digit numbers in python. I think what I‚Äôm confused about is that the max number python can compute is dependent upon your systems memory, but shouldn‚Äôt the set of arrays python supports put a limit on the number? Everything I‚Äôve read says the max value is unbounded and only dependent upon the system you are using. I think by trying to logic my way through how that might work has only confused me more. I‚Äôm trying to understand why this number is dependent upon your systems memory and not upon the max value python can compute. I also don‚Äôt understand how exactly python is utilizing the memory of my computer, and how if python is utilizing my cpu how it‚Äôs not limited by the binary (I mean it is, but how is python able to utilize it such that it can compute extremely large values beyond what the compute itself can compute). How does python not have some inherent max value? In my brain the max value must be due to the arrays python ‚Äúsupports‚Äù (not sure that‚Äôs the right word). Sorry that is very obviously unclear in what I‚Äôve originally stated. I was quite tired.",justpeachypay,1fb1yg5,https://reddit.com/r/Python/comments/1fb1yg5/native_bit_size_arbitraryprecision_arithmetic/,https://www.reddit.com/r/Python/comments/1fb1yg5/native_bit_size_arbitraryprecision_arithmetic/,2024-09-07 08:04:53,2,0.55,2,0,13,0,0,False,False,True,False,False,Discussion,self,t3_1fb1yg5
Python,"My first framework, please judge me","Hi all! First post here!

I'm excited to introduce **LightAPI**, a lightweight framework designed for quickly building API endpoints using Python's native libraries. It streamlines the process of creating APIs by reducing boilerplate code while still providing flexibility through SQLAlchemy for ORM and aiohttp for handling async HTTP requests.

I've been working in software development for quite some time, but I haven't contributed much to open source projects until now. LightAPI is my first step in that direction, and I‚Äôd love your help and feedback! 

**What My Project Does:**  
LightAPI simplifies API development by auto-generating RESTful endpoints for SQLAlchemy models. It's built around simplicity and performance, ensuring minimal setup while supporting asynchronous operations through aiohttp. This makes it highly efficient for handling concurrent requests and building fast, scalable applications.

**Target Audience:**  
This framework is ideal for developers who need a **quick, lightweight solution for building APIs, especially for prototyping**, small-to-medium projects, or situations where development speed is critical. While it‚Äôs fully functional, it‚Äôs not yet intended for production-level applications‚Äîthough with the right contributions, it can definitely get there!

**Comparison:**  
Unlike heavier frameworks like Django REST Framework, which provides many advanced features but requires more setup, **LightAPI focuses on minimalism and speed**. It **automates a lot of the boilerplate code for CRUD operations** but doesn‚Äôt compromise on flexibility. When compared to FastAPI, LightAPI is more stripped down‚Äîit doesn't include dependency injection or models out-of-the-box. However, its async-first approach via aiohttp gives it strong performance advantages for smaller, focused use cases where simplicity is key.

**My Future Plans:**  
I'm still figuring out how to handle database migrations automatically, similar to how Django does it. For now, **Alembic** is a great tool to manage schema versioning, but I'm thinking ahead about adding more modularity and customization, similar to how Tornado allows for modular async operations and custom middleware/token handling.

You can find more details about the features and setup in the README file, including sample code that shows how easy it is to get started.

**I'd love for you to help improve LightAPI by:**

- Reviewing the codebase

- Suggesting features

- Submitting pull requests

- Offering advice on how I can improve my coding style, practices, or architecture.

Any suggestions or contributions would be hugely appreciated. I'm open to feedback on all aspects‚Äîfrom performance optimizations to code readability, as I aim to make LightAPI a powerful yet simple tool for developers.

Here‚Äôs the repo: [https://github.com/iklobato/LightAPI](https://github.com/iklobato/LightAPI)

Thanks for your time! Looking forward to collaborating with you all and growing this project together!

Cheers!",Ok-Intern-8921,1fayfdi,https://reddit.com/r/Python/comments/1fayfdi/my_first_framework_please_judge_me/,https://www.reddit.com/r/Python/comments/1fayfdi/my_first_framework_please_judge_me/,2024-09-07 04:06:11,105,0.88,105,0,36,0,0,False,False,True,False,False,Showcase,self,t3_1fayfdi
Python,Saturday Daily Thread: Resource Request and Sharing! Daily Thread,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",AutoModerator,1fatupz,https://reddit.com/r/Python/comments/1fatupz/saturday_daily_thread_resource_request_and/,https://www.reddit.com/r/Python/comments/1fatupz/saturday_daily_thread_resource_request_and/,2024-09-07 00:00:14,9,0.92,9,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fatupz
Python,datamule: download sec filings easily,"# What My Project Does

Makes it easy and fast to download SEC filings in bulk. e.g.

    downloader.download(form='10-K', ticker='META', output_dir='filings')

# Potential applications

Academic research, finance, etc.

# Target Audience

Programmers, academic researchers, and students.

# Comparison

More than 10x as fast for bulk downloads than `edgartools`.

# Installation

    pip install datamule

# Quickstart

Either download the pre-built indices from the links in the readme and set the indices\_path to the folder

    from datamule import Downloader
    downloader = Downloader()
    downloader.set_indices_path(indices_path)

Or run the indexer

    import sec_indexer
    sec_index.run()

Example Downloads

    # Example 1: Download all 10-K filings for Tesla using CIK
    downloader.download(form='10-K', cik='1318605', output_dir='filings')
    
    # Example 2: Download 10-K filings for Tesla and META using CIK
    downloader.download(form='10-K', cik=['1318605','1326801'], output_dir='filings')
    
    # Example 3: Download 10-K filings for Tesla using ticker
    downloader.download(form='10-K', ticker='TSLA', output_dir='filings')
    
    # Example 4: Download 10-K filings for Tesla and META using ticker
    downloader.download(form='10-K', ticker=['TSLA','META'], output_dir='filings')
    
    # Example 5: Download every form 3 for a specific date
    downloader.download(form ='3', date='2024-05-21', output_dir='filings')
    
    # Example 6: Download every 10K for a year
    downloader.download(form='10-K', date=('2024-01-01', '2024-12-31'), output_dir='filings')
    
    # Example 7: Download every form 4 for a list of dates
    downloader.download(form = '4',date=['2024-01-01', '2024-12-31'], output_dir='filings')

# Future

Will be integrated with an API to remove the need to download indices. Should be useful for developing lightweight applications where storage is an issue.

  
Links: [GitHub](https://github.com/john-friedman/datamule-python)",status-code-200,1fasv8j,https://reddit.com/r/Python/comments/1fasv8j/datamule_download_sec_filings_easily/,https://www.reddit.com/r/Python/comments/1fasv8j/datamule_download_sec_filings_easily/,2024-09-06 23:13:23,8,0.79,8,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1fasv8j
Python,"HashStash: A robust data stashing library with multiple engines, serializers, and encodings","# HashStash

Project repository: [https://github.com/quadrismegistus/hashstash](https://github.com/quadrismegistus/hashstash)

# What my project does

For other projects I wanted a simple and reliable way to run or map and cache the results of function calls so I could both efficiently and lazily compute expensive data (e.g. LLM prompt calls). I also wanted to compare and profile the key-value storage engines out there, both file-based (lmdb, sqlitedict, diskcache) and server-based (redis, mongo); as well as serializers like pickle and jsonpickle. And I wanted to try to make my own storage engine, a simple folder/file pairtree, and my own hyper-flexible serializer (which works with lambdas, functions within functions, unhashable types, etc).

# Target audience
This is an all-purpose library primarily meant for use in other free, open-source side projects.

# Comparison
Compare with sqlitedict (as an engine) and jsonpickle (as serializer), but in fact parameterizes these so you can select which key/value storage engine (including a custom, dependency-less one); which serializer (including a custom, flexible, dependency-less one); and whether or which form of compression.

# Installation

HashStash requires no dependencies by default, but you can install optional dependencies to get the best performance.

* Default installation: `pip install hashstash`
* Installation with only the optimal engine (lmdb), compressor (lz4), and dataframe serializer (pandas + pyarrow): `pip install hashstash[rec]`

# Dictionary-like usage

It works like a dictionary (fully implements MutableMapping), except literally anything can be a key or value, including lambdas, local functions, sets, dataframes, dictionaries, etc:

    from hashstash import HashStash
    
    # Create a stash instance
    stash = HashStash()
    
    # traditional dictionary keys,,,
    stash[""bad""] = ""cat""                 # string key
    stash[(""bad"",""good"")] = ""cat""        # tuple key
    
    # ...unhashable keys...
    stash[{""goodness"":""bad""}] = ""cat""    # dict key
    stash[[""bad"",""good""]] = ""cat""        # list key
    stash[{""bad"",""good""}] = ""cat""        # set key
    
    # ...func keys...
    def func_key(x): pass                
    stash[func_key] = ""cat""              # function key
    
    lambda_key = lambda x: x
    stash[lambda_key] = ""cat""            # lambda key
    
    # ...very unhashable keys...
    import pandas as pd
    df_key = pd.DataFrame(                  
        {""name"":[""cat""], 
         ""goodness"":[""bad""]}
    )
    stash[df_key] = ""cat""                # dataframe key  
    
    # all should equal ""cat"":
    assert (
       ""cat""
        == stash[""bad""]
        == stash[(""bad"",""good"")]
        == stash[{""goodness"":""bad""}]
        == stash[[""bad"",""good""]]
        == stash[{""bad"",""good""}]
        == stash[func_key]
        == stash[lambda_key]
        == stash[df_key]
    )

# Stashing function results

HashStash provides two ways of stashing results.

    def expensive_computation(names,goodnesses=['good']):
        import time,random
        time.sleep(3)
        return {
            'name':random.choice(names), 
            'goodness':random.choice(gooodnesses),
            'random': random.random()
        }
    # execute
    stashed_result = functions_stash.run(
        expensive_computation, 
        ['cat', 'dog'], 
        goodnesses=['good','bad']
    )
    
    # subsequent calls will not execute but return stashed result
    stashed_result2 = functions_stash.run(
        expensive_computation, 
        ['cat','dog'], 
        goodnesses=['good','bad']
    )    
    
    # will be equal despite random float in output of function
    assert stashed_result == stashed_result2

Can also use function decorator \\@stashed\_result:

    from hashstash import stashed_result
    
    @stashed_result
    def expensive_computation2(names, goodnesses=['good']):
        return expensive_computation(names, goodnesses=goodnesses)

# Mapping functions

You can also map objects to functions across multiple CPUs in parallel, stashing results, with [`stash.map`](http://stash.map) and `\@stash_mapped`. By default it uses {num\_proc}-2 processors to start computing results in background. In the meantime it returns a `StashMap` object.

    def expensive_computation3(name, goodnesses=['good']):
        time.sleep(random.randint(1,5))
        return {'name':name, 'goodness':random.choice(goodnesses)}
    
    # this returns a custom StashMap object instantly
    stash.map(
        expensive_computation3, 
        ['cat','dog','aardvark','zebra'], 
        goodnesses=['good', 'bad'], 
        num_proc=2
    )

Iterate over results as they come in:

    timestart=time.time()
    for result in stash_map.results_iter():
        print(f'[+{time.time()-timestart:.1f}] {result}')

‚Üì

    [+5.0] {'name': 'cat', 'goodness': 'good'}
    [+5.0] {'name': 'dog', 'goodness': 'good'}
    [+5.0] {'name': 'aardvark', 'goodness': 'good'}
    [+9.0] {'name': 'zebra', 'goodness': 'bad'}

Can also use as a decorator:

    from hashstash import stash_mapped
    
    @stash_mapped('function_stash', num_proc=4)
    def expensive_computation4(name, goodnesses=['good']):
        time.sleep(random.randint(1,5))
        return {'name':name, 'goodness':random.choice(goodnesses)}
    
    # returns a StashMap
    expensive_computation4(['mole','lizard','turkey'])

# Assembling DataFrames

HashStash can assemble DataFrames from cached contents, even nested ones. First, examples from earlier:

    # assemble list of flattened dictionaries from cached contents
    stash.ld                # or stash.assemble_ld()
    
    # assemble dataframe from flattened dictionaries of cached contents
    stash.df                # or stash.assemble_df()

‚Üì

      name goodness    random
    0  dog      bad  0.505760
    1  dog      bad  0.449427
    2  dog      bad  0.044121
    3  dog     good  0.263902
    4  dog     good  0.886157
    5  dog      bad  0.811384
    6  dog      bad  0.294503
    7  cat     good  0.106501
    8  dog      bad  0.103461
    9  cat      bad  0.295524

# Profiles of engines, serializers, and compressers

LMDB engine (followed by custom ""pairtree""), with pickle serializer (followed by custom ""hashstash"" serializer), with no compression (followed by lz4 compression) is the fastest combination of parameters.

[See figures of profiling results here.](https://github.com/quadrismegistus/hashstash?tab=readme-ov-file#profiling)",Rossz-Kutya,1faqtbk,https://reddit.com/r/Python/comments/1faqtbk/hashstash_a_robust_data_stashing_library_with/,https://www.reddit.com/r/Python/comments/1faqtbk/hashstash_a_robust_data_stashing_library_with/,2024-09-06 21:40:10,1,1.0,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1faqtbk
Python,"HashStash: A robust data caching library with multiple storage engines, serializers, and encodings","# HashStash

Project repository: [https://github.com/quadrismegistus/hashstash](https://github.com/quadrismegistus/hashstash)

# What my project does

For other projects I wanted a simple and reliable way to run or map and cache the results of function calls so I could both efficiently and lazily compute expensive data (e.g. LLM prompt calls). I also wanted to compare and profile the key-value storage engines out there, both file-based (lmdb, sqlitedict, diskcache) and server-based (redis, mongo); as well as serializers like pickle and jsonpickle. And I wanted to try to make my own storage engine, a simple folder/file pairtree, and my own hyper-flexible serializer (which works with lambdas, functions within functions, unhashable types, etc).

# Target audience

This is an all-purpose library primarily meant for use in other free, open-source side projects.

# Comparison

Compare with sqlitedict (as an engine) and jsonpickle (as serializer), but in fact parameterizes these so you can select which key/value storage engine (including a custom, dependency-less one); which serializer (including a custom, flexible, dependency-less one); and whether or which form of compression.

# Installation

HashStash requires no dependencies by default, but you can install optional dependencies to get the best performance.

* Default installation: `pip install hashstash`
* Installation with only the optimal engine (lmdb), compressor (lz4), and dataframe serializer (pandas + pyarrow): `pip install hashstash[rec]`

# Dictionary-like usage

It works like a dictionary (fully implements MutableMapping), except literally anything can be a key or value, including lambdas, local functions, sets, dataframes, dictionaries, etc:

    from hashstash import HashStash
    
    # Create a stash instance
    stash = HashStash()
    
    # traditional dictionary keys,,,
    stash[""bad""] = ""cat""                 # string key
    stash[(""bad"",""good"")] = ""cat""        # tuple key
    
    # ...unhashable keys...
    stash[{""goodness"":""bad""}] = ""cat""    # dict key
    stash[[""bad"",""good""]] = ""cat""        # list key
    stash[{""bad"",""good""}] = ""cat""        # set key
    
    # ...func keys...
    def func_key(x): pass                
    stash[func_key] = ""cat""              # function key
    
    lambda_key = lambda x: x
    stash[lambda_key] = ""cat""            # lambda key
    
    # ...very unhashable keys...
    import pandas as pd
    df_key = pd.DataFrame(                  
        {""name"":[""cat""], 
         ""goodness"":[""bad""]}
    )
    stash[df_key] = ""cat""                # dataframe key  
    
    # all should equal ""cat"":
    assert (
       ""cat""
        == stash[""bad""]
        == stash[(""bad"",""good"")]
        == stash[{""goodness"":""bad""}]
        == stash[[""bad"",""good""]]
        == stash[{""bad"",""good""}]
        == stash[func_key]
        == stash[lambda_key]
        == stash[df_key]
    )

# Stashing function results

HashStash provides two ways of stashing results.

    def expensive_computation(names,goodnesses=['good']):
        import time,random
        time.sleep(3)
        return {
            'name':random.choice(names), 
            'goodness':random.choice(gooodnesses),
            'random': random.random()
        }
    # execute
    stashed_result = functions_stash.run(
        expensive_computation, 
        ['cat', 'dog'], 
        goodnesses=['good','bad']
    )
    
    # subsequent calls will not execute but return stashed result
    stashed_result2 = functions_stash.run(
        expensive_computation, 
        ['cat','dog'], 
        goodnesses=['good','bad']
    )    
    
    # will be equal despite random float in output of function
    assert stashed_result == stashed_result2

Can also use function decorator \\@stashed\_result:

    from hashstash import stashed_result
    
    @stashed_result
    def expensive_computation2(names, goodnesses=['good']):
        return expensive_computation(names, goodnesses=goodnesses)

# Mapping functions

You can also map objects to functions across multiple CPUs in parallel, stashing results, with [`stash.map`](http://stash.map) and `\@stash_mapped`. By default it uses {num\_proc}-2 processors to start computing results in background. In the meantime it returns a `StashMap` object.

    def expensive_computation3(name, goodnesses=['good']):
        time.sleep(random.randint(1,5))
        return {'name':name, 'goodness':random.choice(goodnesses)}
    
    # this returns a custom StashMap object instantly
    stash.map(
        expensive_computation3, 
        ['cat','dog','aardvark','zebra'], 
        goodnesses=['good', 'bad'], 
        num_proc=2
    )

Iterate over results as they come in:

    timestart=time.time()
    for result in stash_map.results_iter():
        print(f'[+{time.time()-timestart:.1f}] {result}')

‚Üì

    [+5.0] {'name': 'cat', 'goodness': 'good'}
    [+5.0] {'name': 'dog', 'goodness': 'good'}
    [+5.0] {'name': 'aardvark', 'goodness': 'good'}
    [+9.0] {'name': 'zebra', 'goodness': 'bad'}

Can also use as a decorator:

    from hashstash import stash_mapped
    
    @stash_mapped('function_stash', num_proc=4)
    def expensive_computation4(name, goodnesses=['good']):
        time.sleep(random.randint(1,5))
        return {'name':name, 'goodness':random.choice(goodnesses)}
    
    # returns a StashMap
    expensive_computation4(['mole','lizard','turkey'])

# Assembling DataFrames

HashStash can assemble DataFrames from cached contents, even nested ones. First, examples from earlier:

    # assemble list of flattened dictionaries from cached contents
    stash.ld                # or stash.assemble_ld()
    
    # assemble dataframe from flattened dictionaries of cached contents
    stash.df                # or stash.assemble_df()

‚Üì

      name goodness    random
    0  dog      bad  0.505760
    1  dog      bad  0.449427
    2  dog      bad  0.044121
    3  dog     good  0.263902
    4  dog     good  0.886157
    5  dog      bad  0.811384
    6  dog      bad  0.294503
    7  cat     good  0.106501
    8  dog      bad  0.103461
    9  cat      bad  0.295524

# Profiles of engines, serializers, and compressers

LMDB engine (followed by custom ""pairtree""), with pickle serializer (followed by custom ""hashstash"" serializer), with no compression (followed by lz4 compression) is the fastest combination of parameters.

[See figures of profiling results here.](https://github.com/quadrismegistus/hashstash?tab=readme-ov-file#profiling)",Rossz-Kutya,1faqnxi,https://reddit.com/r/Python/comments/1faqnxi/hashstash_a_robust_data_caching_library_with/,https://www.reddit.com/r/Python/comments/1faqnxi/hashstash_a_robust_data_caching_library_with/,2024-09-06 21:33:31,6,1.0,6,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1faqnxi
Python,EasySubber: Automatic subtitles for your videos,"I‚Äôd like to showcase **EasySubber**, a tool I developed to automatically generate subtitles from video files. If you‚Äôve ever spent hours manually creating subtitles, this project could save you time.

# What My Project Does:

EasySubber uses **Whisper** (OpenAI's speech recognition model) for transcription and **FFmpeg** for audio processing. It supports video files like `.mkv`, `.mp4`, and `.avi`, and automatically generates `.srt` subtitle files. The program includes a simple GUI (built with Tkinter) to ensure accessibility for users who may not be familiar with the command line.

# Target Audience:

EasySubber is primarily aimed at video creators and content developers who need to generate subtitles quickly and easily. However, it‚Äôs also suitable for hobbyists or anyone working with video/audio who wants to automate the transcription process. This is not yet intended for production but is a stable and functional tool that anyone can try out.

# Comparison with Existing Alternatives:

Compared to existing alternatives like Aegisub or commercial subtitle tools, EasySubber focuses on automating the subtitle generation process. It uses Whisper‚Äôs advanced speech recognition for accuracy and simplicity. While other tools require manual intervention or editing, EasySubber minimizes the need for human input, especially for straightforward transcription tasks.

# Demo Video:

If you're interested in seeing how it works, here's a demo video: [EasySubber demo](https://youtu.be/eKg2ikLaR7w)

# Source Code and GitHub:

Check out the source code here: [Source code](https://github.com/ignabelitzky/easy-subber)  
Feel free to follow my work on GitHub: [Ignabelitzky](https://github.com/ignabelitzky)

Let me know if you have any feedback or suggestions on improving EasySubber!",Straight_Tone_8059,1fanpww,https://reddit.com/r/Python/comments/1fanpww/easysubber_automatic_subtitles_for_your_videos/,https://www.reddit.com/r/Python/comments/1fanpww/easysubber_automatic_subtitles_for_your_videos/,2024-09-06 19:29:14,27,0.94,27,0,5,0,0,False,False,True,False,False,Showcase,self,t3_1fanpww
Python,"PyBay 2024 - September 21 - San Francisco, CA","PyBay 2024 is coming up in San Francisco on Saturday, September 21, 2024. Join us for our 9th annual regional Python conference‚Äîa one-day, two-track event packed with insightful talks, great networking, and community connections.

Your ticket includes access to all sessions, networking opportunities with sponsors, lunch, and all-day coffee. If you're in the SF Bay Area or can make it to San Francisco on the 21st, we‚Äôd love to see you there!

Date: September 21, 2024 (Saturday)

Location: San Francisco, CA

More Info: [https://pybay.org/](https://pybay.org/)   
Speakers: [https://pybay.org/speaking/](https://pybay.org/speaking/)   
Tickets: [https://pretix.eu/bapya/pybay-2024/](https://pretix.eu/bapya/pybay-2024/)

We hope to see you at PyBay 2024!",pybay,1fan40b,https://reddit.com/r/Python/comments/1fan40b/pybay_2024_september_21_san_francisco_ca/,https://www.reddit.com/r/Python/comments/1fan40b/pybay_2024_september_21_san_francisco_ca/,2024-09-06 19:03:18,16,0.88,16,0,0,0,0,False,False,True,False,False,News,self,t3_1fan40b
Python,PyJSX - Write JSX directly in Python,"Working with HTML in Python has always been a bit of a pain. If you want something declarative,
there's Jinja, but that is basically a separate language and a lot of Python features are not available.
With PyJSX I wanted to add first-class support for HTML in Python.

Here's the repo: https://github.com/tomasr8/pyjsx

## What my project does

Put simply, it lets you write JSX in Python.
Here's an example:

    # coding: jsx
    from pyjsx import jsx, JSX
    def hello():
        print(&lt;h1&gt;Hello, world!&lt;/h1&gt;)

(There's more to it, but this is the gist). Here's a more complex example:

    # coding: jsx
    from pyjsx import jsx, JSX

    def Header(children, style=None, **rest) -&gt; JSX:
        return &lt;h1 style={style}&gt;{children}&lt;/h1&gt;

    def Main(children, **rest) -&gt; JSX:
        return &lt;main&gt;{children}&lt;/main&gt;

    def App() -&gt; JSX:
        return (
            &lt;div&gt;
                &lt;Header style={{""color"": ""red""}}&gt;Hello, world!&lt;/Header&gt;
                &lt;Main&gt;
                    &lt;p&gt;This was rendered with PyJSX!&lt;/p&gt;
                &lt;/Main&gt;
            &lt;/div&gt;
        )

With the library installed and set up, these examples are directly runnable by the Python interpreter.

## Target audience

This tool could be useful for web apps that render HTML, for example as a replacement for Jinja.
Compared to Jinja, the advantage it that you don't need to learn an entirely new language - you can use
all the tools that Python already has available.

## How It Works

The library uses the codec machinery from the stdlib. It registers a new codec called `jsx`.
All Python files which contain JSX must include `# coding: jsx`. When the interpreter sees that comment,
it looks for the corresponding codec which was registered by the library. The library then transpiles the JSX
into valid Python which is then run.

## Future plans

Ideally getting some IDE support would be nice. At least in VS Code, most features are currently broken
which I see as the biggest downside.

Suggestions welcome! Thanks :)",zedpowa,1falc1s,https://reddit.com/r/Python/comments/1falc1s/pyjsx_write_jsx_directly_in_python/,https://www.reddit.com/r/Python/comments/1falc1s/pyjsx_write_jsx_directly_in_python/,2024-09-06 17:48:05,98,0.83,98,0,59,0,0,False,False,True,False,False,Showcase,self,t3_1falc1s
Python,optimized proximity matrices in basic_colormath 0.4.0,"[ShayHill/basic\_colormath: Simple color conversion and perceptual (DeltaE CIE 2000) difference (github.com)](https://github.com/ShayHill/basic_colormath)

# What My Project Does

If you have numpy installed in your env, basic\_colormath 0.4.0 will provide vectorized versions of most functions along with proximity matrices and cross-proximity matrices.

|Function|Vectorized Function|(Cross-) Proximity Matrix|
|:-|:-|:-|
|float\_to\_8bit\_int|floats\_to\_uint8||
|get\_delta\_e|get\_deltas\_e|get\_delta\_e\_matrix|
|get\_delta\_e\_hex|get\_deltas\_e\_hex|get\_delta\_e\_matrix\_hex|
|get\_delta\_e\_lab|get\_deltas\_e\_lab|get\_delta\_e\_matrix\_lab|
|get\_euclidean|get\_euclideans|get\_euclidean\_matrix|
|get\_euclidean\_hex|get\_euclideans\_hex|get\_euclidean\_matrix\_hex|
|get\_sqeuclidean|get\_sqeuclideans|get\_squeclidean\_matrix|
|get\_sqeuclidean\_hex|get\_sqeuclideans\_hex|get\_sqeuclinean\_matrix\_hex|
|hex\_to\_rgb|hexs\_to\_rgb||
|hsl\_to\_rgb|hsls\_to\_rgb||
|hsv\_to\_rgb|hsvs\_to\_rgb||
|rgb\_to\_hex|rgbs\_to\_hex||
|rgb\_to\_hsl|rgbs\_to\_hsl||
|rgb\_to\_hsv|rgbs\_to\_hsv||
|rgb\_to\_lab|rgbs\_to\_lab||
|mix\_hex|||
|mix\_rgb|||
|scale\_hex|||
|scale\_rgb|||

# Target Audience

Meant for production.

# Comparison

Sadly, python-colormath has been abandoned, long enough now that a numpy function on which it relies has been not only deprecated but removed. If you still need to use python-colormath, patch np.asscalar:

import numpy as np import numpy.typing as npt

def \_patch\_asscalar(a: npt.NDArray\[np.float64\]) -&gt; float: """"""Alias for np.item(). Patch np.asscalar for colormath.

    :param a: numpy array
    :return: input array as scalar
    """"""
    return a.item()
    
    np.asscalar = _patch_asscalar  # type: ignore

",Shay-Hill,1fajezz,https://reddit.com/r/Python/comments/1fajezz/optimized_proximity_matrices_in_basic_colormath/,https://www.reddit.com/r/Python/comments/1fajezz/optimized_proximity_matrices_in_basic_colormath/,2024-09-06 16:27:03,10,1.0,10,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1fajezz
Python,protatoquests: Proxy Rotation Requests,"

I wanted to showcase my newest Python library that I have been using for some months now to perform anonymous webscraping.

Repo: [https://github.com/nicoloboschi/protatoquests](https://github.com/nicoloboschi/protatoquests)

# What My Project Does

Helps with webscraping by rotating proxies to not get blocked by ip-blocking from the server (or rate-limited).

Proxies are gathered from [https://advanced.name/freeproxy](https://advanced.name/freeproxy)  automatically



It's free, open source and based on free proxies

`pip install`protatoquests

    import requests
    import protatoquests
    
    # this one will contact the server directly
    response = requests.get(""https://google.com"")
    # this one will contact the server using an anonymous proxy 
    response = protatoquests.get(""https://google.com"")

  


# Target Audience

Any developer that needs to serious web scraping.

It is not meant for production since it might leak credentials if the server is protected by authentication.



# Comparison

There are some similar alternatives to do the same but they are outdated and they are not a drop-in replacement (you need to get proxies, pass it to library...), such as proxyscrape",nicoloboschi,1faas67,https://reddit.com/r/Python/comments/1faas67/protatoquests_proxy_rotation_requests/,https://www.reddit.com/r/Python/comments/1faas67/protatoquests_proxy_rotation_requests/,2024-09-06 09:14:42,13,0.77,13,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1faas67
Python,Python package for working with LLM's over voice,"Hi All,

Have setup a python package that makes it easy to interact with LLMs over voice

You can set it up on local, and start interacting with LLMs via Microphone and Speaker

**What My Project Does**

The idea is to abstract away the speech-to-text and text-to-speech parts, so you can focus on just the LLM/Agent/RAG application logic.

Currently it is using AssemblyAI for speech-to-text and ElevenLabs for text-to-speech, though that is easy enough to make configurable in the future

Setting up the agent on local would look like this

    voice_agent = VoiceAgent(
    ¬†¬†¬†assemblyai_api_key=getenv('ASSEMBLYAI_API_KEY'),
    ¬†¬†¬†elevenlabs_api_key=getenv('ELEVENLABS_API_KEY')
    )
    
    def on_message_callback(message):
    ¬†¬†¬†print(f""Your message from the microphone: {message}"", end=""\r\n"")
    ¬†¬†¬†# add any application code you want here to handle the user request
    ¬†¬†¬†# e.g. send the message to the OpenAI Chat API
    ¬†¬†¬†return ""{response from the LLM}""
    
    voice_agent.on_message(on_message_callback)
    voice_agent.start()

So you can use any logic you like in the on\_message\_callback handler, i.e not tied down to any specific LLM model or implementation

I just kickstarted this off as a fun project after working a bit with Vapi

Has a few issues, and latency could defo be better. Could be good to look at some integrations/setups using frontend/browsers also.

Would be happy to put some more time into it if there is some interest from the community

Package is open source, as is available on GitHub and PyPI. More info and installation details on it here also

[https://github.com/smaameri/voiceagent](https://github.com/smaameri/voiceagent)

**Target Audience**

Developers working with LLM/AI applications, and want to integrate Voice capabilities. Currently project is in development phase, not production ready

**Comparison**

Vapi has a similar solution, though this is an open source version",Ok_Train_9768,1fa92qm,https://reddit.com/r/Python/comments/1fa92qm/python_package_for_working_with_llms_over_voice/,https://www.reddit.com/r/Python/comments/1fa92qm/python_package_for_working_with_llms_over_voice/,2024-09-06 07:05:43,0,0.45,0,0,10,0,0,False,False,True,False,False,Showcase,self,t3_1fa92qm
Python,Friday Daily Thread: r/Python Meta and Free-Talk Fridays,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",AutoModerator,1fa1gk2,https://reddit.com/r/Python/comments/1fa1gk2/friday_daily_thread_rpython_meta_and_freetalk/,https://www.reddit.com/r/Python/comments/1fa1gk2/friday_daily_thread_rpython_meta_and_freetalk/,2024-09-06 00:00:42,0,0.5,0,0,1,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1fa1gk2
Python,Best Practices for Production PyPi CLI tool deployments,"For those of you have some sort of library / CLI / SDK that you host on Pypi, how do you set up your deployments. Just with Twine? Some sort of Git Hook with a trusted publisher? Or something else. ",YodelingVeterinarian,1f9xduf,https://reddit.com/r/Python/comments/1f9xduf/best_practices_for_production_pypi_cli_tool/,https://www.reddit.com/r/Python/comments/1f9xduf/best_practices_for_production_pypi_cli_tool/,2024-09-05 21:01:19,17,0.82,17,0,10,0,0,False,False,True,False,False,Discussion,self,t3_1f9xduf
Python,PEP695 Migration Tool,"Now that [PEP 695](https://peps.python.org/pep-0695/) is a little over 2 years old and it has been almost a year since it was officially introduced in python 3.12, the new type parameter syntax will slowly become the standard way of defining TypeVars, ParamSpecs and TypeVarTuples as well as creating Type aliases with the `type` keyword. After I spent some time using python the last couple of weeks, I realized that adapting ""old"" projects of mine to the new syntax really takes more time than I'm willing to invest, especially as some have a pretty large codebase.

# What My Project Does

This is why the past few days I spent time building `autopep695`, a tool that automatically rewrites code to conform to PEP 695 syntax for you. 

Install `autopep695` using pip:
`pip install autopep695`

Format code using `autopep695 format &lt;path1&gt; &lt;path2&gt; &lt;pathN&gt; ... [-p | --parallel]` or just check for errors using `autopep695 check &lt;path1&gt; &lt;path2&gt; &lt;pathN&gt;`. I just published this project today which is why I'm still looking for people to test this project on their own codebase, doesn't matter if it's small or large, any feedback is appreciated!

More info, including examples of code that `autopep695` can rewrite for you on the github repo:
https://github.com/yowoda/autopep695

# Target Audience
Any developer that makes use of type annotations in their python projects, whether it's in production or in codebases for private use.

# Comparison
I'm not aware of any similar tools as of right now but correct me if I'm wrong, I would love to know more about other tools that try to achieve similar things!

Edit: the project has been renamed to `autopep695` from `pep695`",Yoda_RL,1f9uai8,https://reddit.com/r/Python/comments/1f9uai8/pep695_migration_tool/,https://www.reddit.com/r/Python/comments/1f9uai8/pep695_migration_tool/,2024-09-05 18:55:26,44,0.92,44,0,18,0,0,False,False,True,False,False,Showcase,self,t3_1f9uai8
Python,"I've been tracking Python, Django, NumPy and several other frameworks in job listings this year","Hi all, I built a website to track programing languages/skills/frameworks in jobs.  
Perhaps unsurprsingly [Python](https://job.zip/trend/python) is [by far the biggest category in software engineering](https://job.zip/hiring-category/software-engineering):

I'm tracking many other Python frameworks and libraries as well:

* [Django](https://job.zip/trend/django)
* [Scikit-learn](https://job.zip/trend/scikit-learn)
* [NumPy](https://job.zip/trend/numpy)
* [Flask](https://job.zip/trend/flask-python)
* [FastAPI](https://job.zip/trend/fastapi)
* [Keras](https://job.zip/trend/keras-software)
* [MicroPython](https://job.zip/trend/micropython)
* [Ruff](https://job.zip/trend/ruff-software)

I hope this is of some use of you, if there's another framework you'd like me track, please let me know!

Also there's a Python component as well, I use Python to identify trends in my dataset. Every month I load up 10 million new jobs and compare them with the months before to identify new types of jobs to add to the site.",forensicams,1f9l9zt,https://reddit.com/r/Python/comments/1f9l9zt/ive_been_tracking_python_django_numpy_and_several/,https://www.reddit.com/r/Python/comments/1f9l9zt/ive_been_tracking_python_django_numpy_and_several/,2024-09-05 12:31:15,127,0.93,127,0,38,0,0,False,False,True,False,False,Discussion,self,t3_1f9l9zt
Python,Yet another 12 factor configuration helper : python-direnv,"Hi Python! I've developed another app to manage environment variables :  [https://github.com/nicolas-graves/python-direnv](https://github.com/nicolas-graves/python-direnv)

# What My Project Does

My project allows you to `load_direnv()` your environment variables like `load_dotenv()`.

It is designed around shell code execution instead of being limited to basic key-value pairs. 

You have to allow .envrc files to run using [direnv](https://direnv.net), else they are considered unsafe and not loaded.

# Target Audience

If you are developing using the [12 factor app principles](https://12factor.net/) and are a user or [direnv](https://direnv.net), [Nix](https://nixos.org/), or [Guix](https://guix.gnu.org/) ; or are interested in having a declarative and reproducible shell environment.

It is more powerful but less safe than existing alternatives, you should probably not switch form a working configuration.

# Comparison

This package is actually quite different from other similar projects. It executes shell code, thus unlocking the full power of your shell.

My use case is to provide a way to load a complete python environment from a single \`\_\_file\_\_\` variable, in any Python project, for a NREPL server.",afanassig,1f9jfgv,https://reddit.com/r/Python/comments/1f9jfgv/yet_another_12_factor_configuration_helper/,https://www.reddit.com/r/Python/comments/1f9jfgv/yet_another_12_factor_configuration_helper/,2024-09-05 10:50:10,20,0.8,20,0,12,0,0,False,False,True,False,False,Showcase,self,t3_1f9jfgv
Python,I couldn't find a guide to get hourly Wikipedia views so I wrote one myself,"I recently noticed fetching Google trends via the unofficial Python api is broken.

If you are running into similar issues, I wrote a guide how to use Wikipedia views as a measure instead:
https://substack.com/@franz101/p-148522892

The tutorial includes how to get daily views (simple) and hourly views (complex)",hoerzu,1f9hcb7,https://reddit.com/r/Python/comments/1f9hcb7/i_couldnt_find_a_guide_to_get_hourly_wikipedia/,https://www.reddit.com/r/Python/comments/1f9hcb7/i_couldnt_find_a_guide_to_get_hourly_wikipedia/,2024-09-05 08:22:54,8,0.64,8,0,5,0,0,False,False,True,False,False,Tutorial,self,t3_1f9hcb7
Python,Python Libraries to Extract Table from PDF,"Here's a blog with a tutorial using multiple Python libraries to extract tables: [https://unstract.com/blog/extract-tables-from-pdf-python/](https://unstract.com/blog/extract-tables-from-pdf-python/)

Video tutorial: [https://www.youtube.com/live/YfW5vVwgbyo?t=2799s](https://www.youtube.com/live/YfW5vVwgbyo?t=2799s) ",Rare_Confusion6373,1f9fv7y,https://reddit.com/r/Python/comments/1f9fv7y/python_libraries_to_extract_table_from_pdf/,https://www.reddit.com/r/Python/comments/1f9fv7y/python_libraries_to_extract_table_from_pdf/,2024-09-05 06:34:57,30,0.83,30,0,3,0,0,False,False,True,False,False,Tutorial,self,t3_1f9fv7y
Python,"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",AutoModerator,1f98kuz,https://reddit.com/r/Python/comments/1f98kuz/thursday_daily_thread_python_careers_courses_and/,https://www.reddit.com/r/Python/comments/1f98kuz/thursday_daily_thread_python_careers_courses_and/,2024-09-05 00:00:13,7,0.9,7,0,4,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1f98kuz
Python,"Nice looking, data display tables in Python? [+Video]","Ahoy, I wanted to share a video my buddies made. They maintain the great\_tables package, a library for building pretty tables with Python, e.g. for publication or the web. If that's something you might want to do, you might want to check this out. 

Here's their video, [https://youtu.be/M5zwlb8OzS0](https://youtu.be/M5zwlb8OzS0)  
Here's the package doc site, [https://posit-dev.github.io/great-tables/](https://posit-dev.github.io/great-tables/)  
Here's the repo, [https://github.com/posit-dev/great-tables](https://github.com/posit-dev/great-tables)

How do you approach creating publication ready tables from your python analytics? ",economicurtis,1f8zg2c,https://reddit.com/r/Python/comments/1f8zg2c/nice_looking_data_display_tables_in_python_video/,https://www.reddit.com/r/Python/comments/1f8zg2c/nice_looking_data_display_tables_in_python_video/,2024-09-04 17:37:18,84,0.93,84,0,16,0,0,False,False,True,False,False,Discussion,self,t3_1f8zg2c
Python,Introducing WSCE: A Custom Shell Environment Built with Python,"Over the past few weeks, I've been working on a custom shell environment called **WSCE**. Built entirely in Python, it mimics the functionality of an operating system and comes packed with features like a fake boot sequence, a text editor, and more. It's designed to provide a unique experience that blends the line between an OS and a shell environment.

# What My Project Does

WSCE is a simulated operating system environment built as a Python-based shell. It offers a range of features such as:

* **FakeBoot:** Emulates the boot process of an actual operating system.
* **Aurora Text Editor:** A simple text editor to mimic basic productivity tools.
* **CommandSearch:** A script that searches a folder for python files to make into custom commands

# Target Audience

This project is primarily a passion project and is not intended for production use. It is targeted at hobbyists, Python developers, and those interested in exploring custom shell environments or unique OS simulations. It's perfect for those who enjoy tinkering with code and experimenting with unconventional software projects.

# Comparison to Existing Alternatives

WSCE stands out because it's not like any other shell environment or operating system out there. Unlike traditional shells or full OS environments, this project focuses on simulating the feel of an OS without the complexity of one. There are existing alternatives like **PowerShell**, **Bash**, or even full-fledged Linux distros, but WSCE is more of a toy project that bridges the gap between a real OS and a fun shell experience. It offers a unique blend of features that you won't find in standard shells or emulators.

Feel free to check out the project on GitHub: [WSCE GitHub Repository](https://github.com/WindowsShellCustomEnviroment/WSCE). I'm open to feedback, suggestions, and contributions!",Awkward-Strike9464,1f8sslp,https://reddit.com/r/Python/comments/1f8sslp/introducing_wsce_a_custom_shell_environment_built/,https://www.reddit.com/r/Python/comments/1f8sslp/introducing_wsce_a_custom_shell_environment_built/,2024-09-04 13:04:03,25,0.9,25,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1f8sslp
Python,Introducing fastapi-endpoints. A file-based router plugin,"Hello everyone. This is a project that I started and decided to make it open-source

# What My Project Does

This is a file-based router for FastAPI. It will include all routers into the FastAPI app automatically as it has an auto-discovery feature.

It helped me with the overhead of defining and including all routers in a project. This is the current version that I am using on 3 of my projects.

# Target Audience

fastapi-endpoints targets FastAPI developers and projects but nevertheless all developers are welcomed to check it out and send their feedback.

# How it works

You can find how it works in the documentation I setup with some scenarios and tutorials.

Documentation: [fastapi-endpoints](https://vladned.github.io/fastapi-endpoints/)

# Code

The code can be found in this repository:

Repository: [vladNed/fastapi-endpoints](https://github.com/vladNed/fastapi-endpoints)

Please let me know what you think, I am here to build stuff not to feed my ego. I would really love to see some suggestions and improvements if any. Thank you",growingVine7,1f8sf9n,https://reddit.com/r/Python/comments/1f8sf9n/introducing_fastapiendpoints_a_filebased_router/,https://www.reddit.com/r/Python/comments/1f8sf9n/introducing_fastapiendpoints_a_filebased_router/,2024-09-04 12:47:09,25,0.91,25,0,3,0,0,False,False,True,False,False,Showcase,self,t3_1f8sf9n
Python,Wednesday Daily Thread: Beginner questions,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",AutoModerator,1f8f4hr,https://reddit.com/r/Python/comments/1f8f4hr/wednesday_daily_thread_beginner_questions/,https://www.reddit.com/r/Python/comments/1f8f4hr/wednesday_daily_thread_beginner_questions/,2024-09-04 00:00:09,5,0.86,5,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1f8f4hr
Python,intra-search : Semantically search within pdf documents.,"Hello everyone, I thought it might be good to share a small project I did a couple of weeks back.

# What My Project Does

It is a simple tool for performing meaning-based / semantic search within a pdf document. It runs entirely in your local machine and uses internet only for downloading the model from huggingface.

I've used [SBERT](https://sbert.net/) (sentence-transformers package) for creating the text embeddings and [pymupdf](https://pymupdf.readthedocs.io/en/latest/) for extracting text from the pdf.

**Usage** : For a detailed explanation checkout [Usage](https://github.com/monish-prabhu/Intra-Search?tab=readme-ov-file#usage)

**Repository :** [github](https://github.com/monish-prabhu/Intra-Search)

**PyPI:** [https://pypi.org/project/intra-search/](https://pypi.org/project/intra-search/)

**Note**

I have tested the tool only with machine generated pdfs (non OCR generated).

# Target Audience

* Anyone who wants to extract phrases from a pdf that are similar to the query.
* Meaning based search within academic papers, legal documents, long manuals etc.

# Comparison

During the time of building, I thought no such tool existed until I eventually stumbled on [semantra](https://github.com/freedmand/semantra).  
[semantra](https://github.com/freedmand/semantra) is a similar tool for semantic search with way more advanced features and integration with open ai's embedding models.",Interesting-Law5193,1f8adlk,https://reddit.com/r/Python/comments/1f8adlk/intrasearch_semantically_search_within_pdf/,https://www.reddit.com/r/Python/comments/1f8adlk/intrasearch_semantically_search_within_pdf/,2024-09-03 20:27:20,17,0.91,17,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1f8adlk
Python,Snappea: A Simple Task Queue for Python,"I've always been obsessed with making software as easy to install and use as possible. That obsession led me to build Snappea: a simple, lightweight alternative to Celery for managing background tasks in Python applications.

# What My Project Does

Snappea is a minimal task queue system that uses SQLite for background job management. It‚Äôs designed to handle tasks that need to run outside the main HTTP request-response loop, without the overhead of more complex systems like Celery.

# Target Audience

Snappea is ideal for developers who are looking for a straightforward solution to background task management. Rather than providing a drop-in replacement for Celery, it provides ""food for thought"" (especially the article). 

# Comparison

Unlike Celery, which comes with a lot of features and corresponding complexity, Snappea focuses on simplicity. By using SQLite as a message queue and avoiding external dependencies, Snappea keeps things lean and easy to manage. It‚Äôs not a drop-in replacement for Celery but a different approach for cases where you don‚Äôt need all the bells and whistles.

# How It Works

Snappea runs a single process, called the Foreman, that scans the SQLite database for new tasks and executes them in worker threads. It uses `inotify` to efficiently wait for new tasks without busy-waiting, making it responsive without wasting resources. The setup is straightforward: just a few database migrations, and you're good to go.

# Code and Article

The above is the shortest summary I could write that's still moderately informative. You can read about the design and thought process behind Snappea in the full [article](https://www.bugsink.com/snappea-design/). The code is available on [GitHub](https://github.com/bugsink/snappea), where you can see exactly how it works. It's not production-grade, but if there‚Äôs enough interest, I might generalize it into something more broadly applicable.

",klaasvanschelven,1f8a152,https://reddit.com/r/Python/comments/1f8a152/snappea_a_simple_task_queue_for_python/,https://www.reddit.com/r/Python/comments/1f8a152/snappea_a_simple_task_queue_for_python/,2024-09-03 20:13:21,31,0.63,31,0,20,0,0,False,False,True,False,False,Showcase,self,t3_1f8a152
Python,cookiecutter-uv: A modern template for quickly starting Python projects with uv,"Hey everyone,

Two years ago, I created a cookiecutter [project](https://github.com/fpgmaas/cookiecutter-poetry) for Python projects using Poetry for dependency management. With the recent launch of [uv](https://docs.astral.sh/uv/), I've started incorporating it into more of my projects, so I decided to develop a new cookiecutter template for projects that use uv.

You can check out the project on [GitHub: cookiecutter-uv](https://github.com/fpgmaas/cookiecutter-uv).

This template includes:

* uv for dependency management
* CI/CD with GitHub Actions
* Formatting and linting with ruff and prettier
* Publishing to PyPI by simply creating a new release on GitHub
* Testing with pytest
* Documentation with MkDocs
* Compatibility testing across multiple Python versions using Tox
* And more...

The documentation is available [here](https://fpgmaas.github.io/cookiecutter-uv). The project is open-source, so feel free to use it as-is or customize it to fit your needs.

Cheers,  
Florian",fpgmaas,1f85wak,https://reddit.com/r/Python/comments/1f85wak/cookiecutteruv_a_modern_template_for_quickly/,https://www.reddit.com/r/Python/comments/1f85wak/cookiecutteruv_a_modern_template_for_quickly/,2024-09-03 17:30:34,86,0.95,86,0,15,0,0,False,False,True,False,False,Resource,self,t3_1f85wak
Python,Module Found - Generate missing modules on the fly,"Hey everyone. I‚Äôve been working on this project as part of a talk I‚Äôm giving at PyCon in my country. The talk is about Python's import system where I explain how the import machinery works behind the scenes and then give example extensions to it. module-found is my attempt at making the **most ridiculous** import extension to Python.

**What My Project Does**  
Ever tried to import a module just to get a ModuleNotFoundError, it's \[current year\], Python should know what I'm trying to import! Whether I forgot to install the module, made a spelling mistake, or the module simply doesn‚Äôt exist. After installing module-found, when Python does not find the module you want to import, it generates a lazy module, then, when a function from that module is accessed it generates the function using OpenAI API.

Example of running pascal\_triangle, showcasing the generated code, then coloring the code with another automatically generated function - [https://raw.githubusercontent.com/LiadOz/module-found/master/static/module\_found\_example.gif](https://raw.githubusercontent.com/LiadOz/module-found/master/static/module_found_example.gif)  
To reiterate, all of the functions used in the example gif were generated by OpenAI.

**Target Audience**  
This is a toy project meant for showcasing, definitely not for production. Fun fact, after my initial implementation whenever I tried to install other packages using pip I got very weird errors that I never saw before and couldn't find the source on google. Apparently, pip tried to import a module that did not exist in my environment, then, module-found generated functions for that module, which did not return what pip had expected. So if you try this project out, make sure it's in a separate environment.

**Comparison**  
[https://pypi.org/project/pipimport/](https://pypi.org/project/pipimport/) - Uses the same import hook mechanism to install modules

Checkout the following if you want to try it out for yourself: [Source code](https://github.com/LiadOz/module-found), [PyPI](https://pypi.org/project/module-found/)",LiadOz,1f83l3f,https://reddit.com/r/Python/comments/1f83l3f/module_found_generate_missing_modules_on_the_fly/,https://www.reddit.com/r/Python/comments/1f83l3f/module_found_generate_missing_modules_on_the_fly/,2024-09-03 16:00:32,6,0.72,6,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1f83l3f
Python,Check missing dependencies won't break your package with pytest-missing-modules,"Supporting optional dependencies, like Matplotlib supporting multiple backends, can be hard usually to tests.

When developing my own packages, I often had to write custom Pytest fixtures that would fake a module is missing, so I could check that my package would still be importable, with and without some optional dependecies.

To avoid rewriting the same code over and over, I packaged it under a Python module: [pytest-missing-modules](https://github.com/jeertmans/pytest-missing-modules).

# What My Project Does

pytest-missing-modules is a rather simple Python module, with a single Pytest fixture, `missing_modules`, that will allow you to create context managers that fake missing modules.

E.g., see below:

```python
# this should be in one of your test files
import importlib
import my_package


def test_missing_numpy(missing_modules):
    with missing_modules(""numpy""):
        # Check that you can still import your package, without NumPy!
        importlib.reload(my_package)
```

Of course, its usage can be much more complex, see the [documentation](https://pytest-missing-modules.readthedocs.io/).

# Target Audience

This tool is especially for packages developer that want to support optional dependencies,
while avoiding complex test setups where multiple Python environments have to be used (e.g., one environment **with** the optional dependency, and one **without**).

# Comparison

I am not aware of any similar tool, but feel free to share if you know one :-)

# What's next

I initially developed this module for my own use, and I felt it would be nice to share with the community. Should you have any question or feature request, please let me know in the comments or on GitHub!",jeertmans,1f8218j,https://reddit.com/r/Python/comments/1f8218j/check_missing_dependencies_wont_break_your/,https://www.reddit.com/r/Python/comments/1f8218j/check_missing_dependencies_wont_break_your/,2024-09-03 14:57:25,18,0.86,18,0,1,0,0,False,False,True,False,False,Showcase,self,t3_1f8218j
Python,"PixelLens for PyCharm: Visualize Numpy, PyTorch,TensorFlow and Pillow data right from the debugger","# PixelLens for PyCharm

I work as a data scientist and I often need to visualize a NumPy array or PyTorch tensor while debugging. Typically, this involves manually running code in the debug console with matplotlib's imshow or cv2's imwrite. This process becomes even more tedious when the data isn't exactly three-dimensional or when the values don't match the expected range.

# Existing solutions

Most existing solutions are either freemium/paid [\[1\]](https://plugins.jetbrains.com/plugin/14371-debug-image-viewer-former-opencv-image-viewer-) or lack essential features [\[2\]](https://plugins.jetbrains.com/plugin/23041-imagewatch), so I decided to create an open-source, forever-free alternative called ""PixelLens for PyCharm"": [github.com/srwi/PyCharm-PixelLens](https://github.com/srwi/PyCharm-PixelLens).

# What My Project Does

With PixelLens, you can easily view all common image data types, and it's very forgiving with respect to both value range and number of dimensions. This means that, most of the time, you can just right-click a variable in the debugger and select ""View as Image"" to see your data.",_ettb_,1f812xx,https://reddit.com/r/Python/comments/1f812xx/pixellens_for_pycharm_visualize_numpy/,https://www.reddit.com/r/Python/comments/1f812xx/pixellens_for_pycharm_visualize_numpy/,2024-09-03 14:17:15,35,0.97,35,0,9,0,0,False,False,True,False,False,Showcase,self,t3_1f812xx
Python,Generators underused in corporate settings?,"I've worked at a couple of places that used Python.  And I've rarely seen anyone regularly using the `yield` keyword.  I also very rarely see people using lazy ""comprehensions"" like

`foo = (parse(line) for line in file)`  
`bar = sum(postprocess(item) for item in foo)`

  
And so, I'll use these features, because to me, they simplify things a lot.  But generally people shy away from them.  And, in some cases, this is going to be because they were burned by prior experiences.  Or in other cases it's because people just don't know about these language features.

  
Has this been your experience?  What was the school of thought that was in place on your prior teams?",messedupwindows123,1f7zh22,https://reddit.com/r/Python/comments/1f7zh22/generators_underused_in_corporate_settings/,https://www.reddit.com/r/Python/comments/1f7zh22/generators_underused_in_corporate_settings/,2024-09-03 13:07:24,111,0.84,111,0,158,0,0,False,False,True,False,False,Discussion,self,t3_1f7zh22
Python,pdf-nupper: n-up (combine) pages in PDF files,"**What My Project Does**

I've been using a Python script to n-up PDF files for some time when printing PDFs. N-upping means combining a few pages to a single page. For example, you can combine a PDF that has lecture slides as 2x2 so 4 slides will be printed in a single page. I pubilshed this in PyPI after some improvements in the hope someone else may find it useful as well. It uses pypdf to handle the grunt work.

**Target Audience**

Anybody who wants to n-up their PDFs before printing. This is useful to reduce the number of sheets printed, especially when you print slides or study material.

**Comparison**

When I first created the script I didn't see anything else that did exactly what I wanted to do the right amount of flexibility and simplicity.

* Project in PyPI:¬†[https://pypi.org/project/pdf-nupper/](https://pypi.org/project/pdf-nupper/)
* Source in Github:¬†[https://github.com/thameera/pdf-nupper](https://github.com/thameera/pdf-nupper)

Any feedback or contributions would be welcome!",systemUp,1f7xfpq,https://reddit.com/r/Python/comments/1f7xfpq/pdfnupper_nup_combine_pages_in_pdf_files/,https://www.reddit.com/r/Python/comments/1f7xfpq/pdfnupper_nup_combine_pages_in_pdf_files/,2024-09-03 11:23:48,24,0.91,24,0,7,0,0,False,False,True,False,False,Showcase,self,t3_1f7xfpq
Python,Spyder 6 IDE Released,"Spyder 6 has been released. The Spyder IDE now has standalone installers for Windows, Linux and Mac. Alternatively it can be installed using a conda-forge Python environment:

[https://github.com/spyder-ide/spyder/releases](https://github.com/spyder-ide/spyder/releases) ",PhilipYip,1f7w2rn,https://reddit.com/r/Python/comments/1f7w2rn/spyder_6_ide_released/,https://www.reddit.com/r/Python/comments/1f7w2rn/spyder_6_ide_released/,2024-09-03 09:59:35,69,0.91,69,0,81,0,0,False,False,True,False,False,News,self,t3_1f7w2rn
Python,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",AutoModerator,1f7lwin,https://reddit.com/r/Python/comments/1f7lwin/tuesday_daily_thread_advanced_questions/,https://www.reddit.com/r/Python/comments/1f7lwin/tuesday_daily_thread_advanced_questions/,2024-09-03 00:00:08,0,0.5,0,0,0,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1f7lwin
Python,Why not just get your plots in numpy?!,"Seriously, that's the [question](https://github.com/bedbad/justpyplot)!

Why not just have simple  
`plot1(values,size,title, scatter=True, pt_color, ...)-&gt;np.ndarray`  
function API that gives you your plot (parts like **figure** and **grid**, axis, labels, etc) as numpy arrays for you to overlay, mask, render, stretch, transform, etc how you need with your usual basic array/tensor operations at whatever location of the frame/canvas/memory you need?

Sample implementation: [https://github.com/bedbad/justpyplot](https://github.com/bedbad/justpyplot)

# What my project does?

Just implements the function above

When I render it, it already beats matplotlib and not by a small margin and it's not the ideal yet:  
  
Plotting itself done in vectorized approach and can be done right utilising the GPUs  fully

plot1, plot2 .. plotN  is just dependency dimensionality you're plotting (1D values, 2D, add more can add more if wanted)

Target Audience? What it Compares against?  
Whoever needs real-time or composable or standalone plotting library or generally use and don't like performance of matplotlib \[[1](https://www.reddit.com/r/Python/comments/u8j6fn/unpopular_opinion_matplotlib_is_a_bad_library/), [2](https://www.reddit.com/r/datascience/comments/19ech38/is_it_just_me_or_is_matplotlib_just_a_garbage/), [3](https://www.reddit.com/r/Python/comments/p59091/anyone_else_despises_matplotlib/)\]

I use something similar thing based on that for all of my work plotting needs and proved to be useful in robotics where you have a physical feedback loop based on the dependency you're plotting when you manipulating it by hand such as steering the drone;  
  
Take a look at the package - this approach may go deeper and cure the foundational matplotlib vices

It makes it a standalone library : `pip install justpyplot`

",Embarrassed-Mix6420,1f7jfgd,https://reddit.com/r/Python/comments/1f7jfgd/why_not_just_get_your_plots_in_numpy/,https://www.reddit.com/r/Python/comments/1f7jfgd/why_not_just_get_your_plots_in_numpy/,2024-09-02 22:07:57,124,0.92,124,0,27,0,0,False,False,True,False,False,Showcase,self,t3_1f7jfgd
Python,Synchronize tasks with Windows' Task Manager,"# What My Project Does

This is the code I use in production to fully automatize the process of synchronizing (creating, updating and deleting) scheduled tasks on our Windows server. Since there aren't a lot of resources online for working with win32 objects, I thought I could share it in the hopes it can help someone. It should work out-of-the-box; I don't intend to create a package out of it, but feel free to adapt it to your needs.

# Target Audience

DevOps people managing a lot of scheduled tasks on Windows machines (or anyone wanting to automate their deployment process, really)

# Example

Given the following example task definitions (the TaskScheduler.build method expects a dict; store the data any way you like; in this exemple, it's a YAML file):

    - Path: \myApp\simplest_task
      RegistrationInfo:
        Description: A task only needs a path and an action to be registered!
      Actions:
        - Type: EXEC
          Path: path\to\exe
    
    - Path: \myApp\daily_task
      RegistrationInfo:
        Description: A task that executes a Python script with a daily trigger and a 5 minute execution limit.
      Settings:
        ExecutionTimeLimit: PT5M
      Triggers:
        - Type: DAILY
          StartBoundary: 2024-09-03T00:00:00  # datetimes will be converted to iso format
      Actions:
        - Type: EXEC
          Path: path\to\python.exe
          Arguments: path\to\myApp\daily_task.py
          WorkingDirectory: path\to\myApp
    
    - Path: \myApp\multi_task
      RegistrationInfo:
        Description: &gt;-
          A task that executes a Python script with multiple triggers and a 1 hour execution limit.
          If it fails, it will be retried 2 times with a 1 minute interval between each try.
          It will start as soon as possible if the last execution was missed.
      Settings:
        ExecutionTimeLimit: PT1H
        RestartCount: 2
        RestartInterval: PT1M
        StartWhenAvailable: true
      Triggers:
        - Type: DAILY
          StartBoundary: 2024-09-03T01:00:00
        - Type: MONTHLY
          StartBoundary: 2024-09-04T02:00:00
          DaysOfMonth:
            - ""1"" # must be str
            - ""2""
        - Type: TIME
          StartBoundary: 2024-09-05T03:00:00
          Repetition:
            Interval: PT10M
      Actions:
        - Type: EXEC
          Path: path\to\python.exe
          Arguments: path\to\myApp\multi_task.py
          WorkingDirectory: path\to\myApp

You can:

    # Initialize
    scheduler = TaskScheduler()
    
    # Load your task definitions
    tasks_definitions = ...
    
    # Build
    tasks = [scheduler.build(task_def) for task_def in task_definitions]
    
    # Register
    for task in tasks:
        scheduler.register(task)
    
    # Delete
    scheduler.delete_task('\\path\\to\\task')  # Only the path is needed
    
    # Sync
    #   - Creates tasks in list but missing from folder
    #   - Updates tasks in list already in folder
    #   - Deletes tasks in folder but missing from list
    # All tasks must belong to the same folder, and the folder can't be root
    # (too risky to delete unrelated tasks)
    scheduler.sync(tasks)

# [Code](https://github.com/jmgrenier/taskscheduler)",Zouack,1f7fmj7,https://reddit.com/r/Python/comments/1f7fmj7/synchronize_tasks_with_windows_task_manager/,https://www.reddit.com/r/Python/comments/1f7fmj7/synchronize_tasks_with_windows_task_manager/,2024-09-02 19:31:20,7,0.77,7,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1f7fmj7
Python,Anatomy of a Textual User Interface,"Hi folks,  
I wrote about building an AI Chat interface with Python and Textual.

[https://textual.textualize.io/blog/2024/09/15/anatomy-of-a-textual-user-interface/](https://textual.textualize.io/blog/2024/09/15/anatomy-of-a-textual-user-interface/)",willm,1f79kwq,https://reddit.com/r/Python/comments/1f79kwq/anatomy_of_a_textual_user_interface/,https://www.reddit.com/r/Python/comments/1f79kwq/anatomy_of_a_textual_user_interface/,2024-09-02 15:29:17,23,0.75,23,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1f79kwq
Python,Deta Space is shutting down. ,"After an incredible run, we've made the difficult decision to shut down Deta Space. You can continue to¬†[login](https://deta.space/login)¬†for 45 days until sunset on¬†**October 17, 2024**, at which point we will start deleting all apps (hosted or installed) and data in Collections.

We've built tools for exporting your data (and code for developers), with tutorials available in the¬†[docs](https://deta.space/docs/en/sunset).

We wanted to thank you for joining the journey so far. Everything we've done wouldn't have been possible without our community, mods, investors, and friends. We hope you'll stick around for what's next.  
[https://deta.space/sunset](https://deta.space/sunset)

(**I'm not from the Team, I am a user**)",RevolutionaryPen4661,1f775pr,https://reddit.com/r/Python/comments/1f775pr/deta_space_is_shutting_down/,https://www.reddit.com/r/Python/comments/1f775pr/deta_space_is_shutting_down/,2024-09-02 13:47:22,0,0.41,0,0,8,0,0,False,False,True,False,False,News,self,t3_1f775pr
Python,Smartcut: Super fast cutting and trimming of videos,"**What My Project Does**

Smartcut is to my knowledge the most robust open-source implementation of frame accurate video cutting without recoding, a.k.a smart cut, smart encoding, smart render, etc. 

It uses PyAV and libavcodec (ffmpeg internals) to encode a small part of the video near the cutpoints and then uses libavformat to stitch the recoded segments and parts of the original video back together into a whole video.

https://github.com/skeskinen/smartcut 

**Target Audience**

This project is for people who want to cut videos really fast from the command line. This could be useful e.g. as part of a script that goes through a directory and quickly cuts off some part of the videos. It could also be used as a part of a video editor project, like I've done in my GUI video editor project.

It is also one of the largest available projects that uses PyAV (the pythonic bindings for libav project) and really showcases the awesomeness of the library. I also contributed 4 patches to PyAV and the maintainer was really cool to work with.

**Comparison**

The github page has a pretty nice list of related projects: https://github.com/skeskinen/smartcut?tab=readme-ov-file#other-projects

The most obvious comparison is to lossless-cut which is a popular open-source video editor written in TypeScript and Electron https://github.com/mifi/lossless-cut

lossless-cut also has a smartcutting mode, but it is an experimental feature that is only tested on h264 videos and doesn't receive support if some files fail to cut properly.

In contrast, I've written a test suite that checks that the implementation is working with various codecs (h264, h265, vp9, av1), container formats (.mp4, .mkv) and audio codecs (mp3, vorbis, opus, aac, flac, wav). The test suite generates bunch of test videos and different cutting points and verifies that input and output videos are the same.

I've also made this demo video with a claim of ""6000% faster than FFmpeg"": https://youtu.be/_OBDNVxydB4 This just means that in this case, smartcutting produces identical output to recoding the video with FFmpeg, while being 60x faster.",Lesser_Scholar,1f767df,https://reddit.com/r/Python/comments/1f767df/smartcut_super_fast_cutting_and_trimming_of_videos/,https://www.reddit.com/r/Python/comments/1f767df/smartcut_super_fast_cutting_and_trimming_of_videos/,2024-09-02 13:04:05,45,0.84,45,0,14,0,0,False,False,True,False,False,Showcase,self,t3_1f767df
Python,Use python -m http.server in SSL,"A script to wrap http.server with SSL support

[https://valarmorghulis.io/tech/202409-python-http-serveri-in-ssl/](https://valarmorghulis.io/tech/202409-python-http-serveri-in-ssl/)

",socrateslee,1f75ga9,https://reddit.com/r/Python/comments/1f75ga9/use_python_m_httpserver_in_ssl/,https://www.reddit.com/r/Python/comments/1f75ga9/use_python_m_httpserver_in_ssl/,2024-09-02 12:25:48,6,0.71,6,0,0,0,0,False,False,True,False,False,Tutorial,self,t3_1f75ga9
Python,"Error ""returned non-zero exit status 4294967274""... Do you know what it could be?","When debugging code to add subtitles to a video file with the Moviepy library I'm getting the error ""returned non-zero exit status 4294967274""... Do you know what it could be?

ffmpeg is unable to correctly interpret the path to the .srt subtitle file, it concatenates a video file and a .SRT file. But it is returning this error...",Slow_Education7476,1f74tcw,https://reddit.com/r/Python/comments/1f74tcw/error_returned_nonzero_exit_status_4294967274_do/,https://www.reddit.com/r/Python/comments/1f74tcw/error_returned_nonzero_exit_status_4294967274_do/,2024-09-02 11:50:56,0,0.17,0,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1f74tcw
Python,Object and Type Unification,"Have had a conversation with ChatGPT about the wildest and craziest idea about unifying \`object\` and \`type\` into a single entity that has the combined functionality of both. Essentially the equivalent (at the lower level) of doing \`class MyEntity(object, type)\`.

[ChatGPT Conversation](https://chatgpt.com/share/a56d0e9d-1458-4111-88e3-0ccabb2d4492)

I'd love to know how stupid of an idea this is. I agree it will never happen, and I overly argued the point as shown in the conversation because I wasn't getting very creative/accurate responses.

To me this is just a cool 'what if'. What if they were? How much of a mess would the interpreter code be to actually physically do it?

More importantly, is it physically possible to unify them, with reasonable backwards compatibility ensured (obviously something nuanced like \`assert hasattr(type, ""\_\_class\_\_"")\` would be impossible to unify).",Simple-Soil-7468,1f731v8,https://reddit.com/r/Python/comments/1f731v8/object_and_type_unification/,https://www.reddit.com/r/Python/comments/1f731v8/object_and_type_unification/,2024-09-02 10:03:15,0,0.2,0,0,7,0,0,False,False,True,False,False,Discussion,self,t3_1f731v8
Python,Logging insanity in FastAPI on Google App Engine? I Built a Custom Solution!,"Hey everyone,

I've been working with FastAPI on Google App Engine (GAE) and found the logging experience to be, well...frustrating. The lack of clear, structured logging across the request lifecycle was a major pain point. So, I decided to create a custom Cloud Logging handler specifically for FastAPI apps deployed on GAE.

‚ú® Introducing FastAPIGAELoggingHandler with fastapi-gae-logging package! ‚ú®

This handler groups logs from the same request lifecycle and ensures the highest log level is propagated consistently. If you've been pulling your hair out trying to get clean, organized logs on GAE, this might just save your sanity.

Key Features:

* Grouping of logs within the same request lifecycle.
* Propagation of the maximum log level.
* Easy integration with your existing FastAPI app.

I‚Äôve written an article detailing how it works and how you can integrate it into your project. Would love to hear your thoughts, feedback, or any other logging pain points you‚Äôve encountered on GAE with FastAPI!

üîó Check out the article: [https://levelup.gitconnected.com/fastapi-logging-in-google-app-engine-is-not-a-nightmare-anymore-with-fastapi-gae-logging-41825ef8e093](https://levelup.gitconnected.com/fastapi-logging-in-google-app-engine-is-not-a-nightmare-anymore-with-fastapi-gae-logging-41825ef8e093)

üîó GitHub Repo: [https://github.com/chrisK824/fastapi-gae-logging](https://github.com/chrisK824/fastapi-gae-logging)

Happy coding! üöÄ",SearchMobile6431,1f70wpp,https://reddit.com/r/Python/comments/1f70wpp/logging_insanity_in_fastapi_on_google_app_engine/,https://www.reddit.com/r/Python/comments/1f70wpp/logging_insanity_in_fastapi_on_google_app_engine/,2024-09-02 07:31:51,12,0.64,12,0,6,0,0,False,False,True,False,False,News,self,t3_1f70wpp
Python,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",AutoModerator,1f6syvh,https://reddit.com/r/Python/comments/1f6syvh/monday_daily_thread_project_ideas/,https://www.reddit.com/r/Python/comments/1f6syvh/monday_daily_thread_project_ideas/,2024-09-02 00:00:09,13,0.83,13,0,2,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1f6syvh
Python,Introducing fastapi-gae-logging,"https://github.com/chrisK824/fastapi-gae-logging

Custom Cloud Logging handler for FastAPI applications deployed in Google App Engine. Groups logs coming from the same request lifecycle and propagates the maximum log level throughout the request lifecycle using middleware and context management.",SearchMobile6431,1f6s12z,https://reddit.com/r/Python/comments/1f6s12z/introducing_fastapigaelogging/,https://www.reddit.com/r/Python/comments/1f6s12z/introducing_fastapigaelogging/,2024-09-01 23:14:06,0,0.38,0,0,2,0,0,False,False,True,False,False,Resource,self,t3_1f6s12z
Python,A Minimal ASGI Server,Here we implement a minimal ASGI server with zero dependencies. Feedback is appreciated! [https://blog.tomhuibregtse.com/a-minimal-asgi-server](https://blog.tomhuibregtse.com/a-minimal-asgi-server),thuibr,1f6rh51,https://reddit.com/r/Python/comments/1f6rh51/a_minimal_asgi_server/,https://www.reddit.com/r/Python/comments/1f6rh51/a_minimal_asgi_server/,2024-09-01 22:48:02,24,0.74,24,0,7,0,0,False,False,True,False,False,Discussion,self,t3_1f6rh51
Python,Built a Tool for Downloading YouTube Videos in Any Quality ‚Äì Feedback Welcome!,"Hey everyone!

What my project does:

I‚Äôve recently developed a small project called¬†**VidDownloader**. It‚Äôs a tool that allows you to download YouTube videos and audio in any quality you prefer. 

Competitors:

Unlike many of the existing solutions that cap downloads at 1080p, VidDownloader supports all available resolutions, so you can get the highest quality possible.

Additionally, the tool lets you convert your downloads to MP4 or MP3 formats, making it easy to use the content on various devices.

Target Audience:

I originally created this as a personal challenge to see if I could build something fully functional, but I thought it might be useful to others as well. It‚Äôs not targeted at any specific audience, just something I made for fun and learning.



If you‚Äôre interested, feel free to check it out and let me know what you think! Your feedback would be really appreciated.

**GitHub Link:**¬†[https://github.com/AndreaSillano/VidDownloader](https://github.com/AndreaSillano/VidDownloader)

Thanks!",Excellent-Lack1217,1f6n44w,https://reddit.com/r/Python/comments/1f6n44w/built_a_tool_for_downloading_youtube_videos_in/,https://www.reddit.com/r/Python/comments/1f6n44w/built_a_tool_for_downloading_youtube_videos_in/,2024-09-01 19:40:33,1,0.67,1,0,0,0,0,False,False,True,False,False,Showcase,self,t3_1f6n44w
Python,What is a free TTS python library/package or REST API for story narration?,"I'm making one of those reddit story videos. The ones with the minecraft parkour and subtitles. I just need a TTS software that I can use in python. Any suggestions?

I just want something that isn't robotic and is clear with no accents.",Primary_Budget_8050,1f6mhzk,https://reddit.com/r/Python/comments/1f6mhzk/what_is_a_free_tts_python_librarypackage_or_rest/,https://www.reddit.com/r/Python/comments/1f6mhzk/what_is_a_free_tts_python_librarypackage_or_rest/,2024-09-01 19:15:04,0,0.27,0,0,3,0,0,False,False,True,False,False,Discussion,self,t3_1f6mhzk
Python,"QCut, a quantum circuit-knitting python package","**What My Project Does:**

QCut is a quantum circuit knitting package for performing wire cuts especially designed to not use reset gates or mid-circuit measurements since on early NISQ devices they pose significant errors, if available at all.

QCut has been designed to work with IQM's qpus, and therefore on the Finnish Quantum Computing Infrastructure ([FiQCI](https://fiqci.fi/)), and tested with an IQM Adonis 5-qubit qpu. Additionally, QCut is built on top of Qiskit 0.45.3 which is the current supported Qiskit version of IQM's Qiskit fork iqm\_qiskit.

You can check it out at¬†[https://github.com/JooNiv/QCut](https://github.com/JooNiv/QCut).

I already have some feature/improvement ideas and am very open to any comments people might have. Thanks in advance üôè

  
**Target Audience**

This project has mostly been a learning project but could well have practical applications in distributed quantum computing research / proof of concept scenarios. I developed it while working on the Finnish Quantum Computing Infrastructure at CSC Finland so this application is not too farfetched.

  
**Comparison**

When it comes to other tools both Qiskit and Pennylane have circuit-knitting functionality. However, Pennaylane's, in its current state, is not viable for real hardware and Qiskit's circuit-knitting-toolbox uses mid-circuit measurements that might not be available on NISQ devices.",JooNiv,1f6j2pm,https://reddit.com/r/Python/comments/1f6j2pm/qcut_a_quantum_circuitknitting_python_package/,https://www.reddit.com/r/Python/comments/1f6j2pm/qcut_a_quantum_circuitknitting_python_package/,2024-09-01 16:50:03,18,0.92,18,0,4,0,0,False,False,True,False,False,Showcase,self,t3_1f6j2pm
Python,Github-dlr: Download individual files and folders from Github recursively.,"# What My Project Does

`Github-dlr` is a terminal tool that lets users download individual folders and files from a Github repository in an easy way without needing to clone the entire project.  
[https://github.com/rocktimsaikia/github-dlr](https://github.com/rocktimsaikia/github-dlr)

# Target Audience

Terminal users who have python installed. Very helpful for users who likes to rice their linux setup which requires downloading different individual wallpapers, config from repositories.

# Motivation:

There has been many instances where I wanted some specific files or folders from public Github repository but there was no direct option to do so. There were some website that helps you do it. But being a terminal power user, I wanted to something that is just few key strokes away. Hence I created Github-dlr. Hope people find it helpful, please leave suggests and reviews. Thank you.",rocktim20,1f6gwks,https://reddit.com/r/Python/comments/1f6gwks/githubdlr_download_individual_files_and_folders/,https://www.reddit.com/r/Python/comments/1f6gwks/githubdlr_download_individual_files_and_folders/,2024-09-01 15:18:04,23,0.78,23,0,12,0,0,False,False,True,False,False,Showcase,self,t3_1f6gwks
Python," Scribo - A simple, efficient and content-first static site generator (SSG)","Hey guys, I was tinkering with a little open source project and thought I'd share it with you all. It's a static site generator using Python that uses Markdown for content and file system-based routing. You can install it using pip. The project's docs site is also built with Scribo, so you can see it in action.

**What My Project Does**

Scribo is an open-source, static site generator (SSG) that helps users create content-first websites for personal blogs, documentations, articles, and more. It's designed to be simple, efficient, and easy to use.

**Target Audience** 

It is useful for bloggers, static sites, writers, writing docs etc. 

**Comparison**

Scribo differs from other SSGs like Jekyll and Hugo in its focus on simplicity and ease of use. It's a lightweight alternative that's still in its early stages.

Github: [https://github.com/sujaudd1n/scribo](https://github.com/sujaudd1n/scribo)",sujaudd1n,1f6f6g3,https://reddit.com/r/Python/comments/1f6f6g3/scribo_a_simple_efficient_and_contentfirst_static/,https://www.reddit.com/r/Python/comments/1f6f6g3/scribo_a_simple_efficient_and_contentfirst_static/,2024-09-01 14:02:34,0,0.44,0,0,2,0,0,False,False,True,False,False,Showcase,self,t3_1f6f6g3
Python,Discover Esmerald: A New Player in the Developer Ecosystem,"Hello, Redditors!

I know a post about Esmerald was done in the past but I believe it deserves another one. 

I wanted to share something intriguing with you all. If you're exploring new tools and frameworks, you might want to check out **Esmerald**, a fresh addition to the developer toolkit landscape.

**What is Esmerald?**

Esmerald is a new framework designed to streamline your development process with a focus on simplicity and efficiency. It‚Äôs crafted to complement existing frameworks rather than compete with them. The goal here is to offer a unique perspective and set of features that can enhance your workflow, not to replace the excellent tools already in use.

**Why Check It Out?**


1. Modular design approach
2. Asynchronous approach for APIs and complex applications
3. Native directive system - Allowing you to run custom python scripts within your custom codebase
4. Pluggable - Extend the core functionality of you python application without with ease with a simple syntax. 
5. Interceptors - Add extra functionality to your APIs before reaching the endpoint.
6. Native settings system and easily extendable.
7. Encoders - Don't let your self be dependent of one single validator library, you can design your own and make it unique to your needs 

And so much more

**Get Involved**

If you‚Äôre interested in exploring what Esmerald has to offer, head over to its [GitHub repository](https://github.com/dymmond/esmerald). Feel free to star the project, contribute, or just give it a look. Your feedback and engagement are highly valued.

**Why Esmerald and Not the Others?**

We‚Äôre not here to compete with the amazing frameworks that are already out there. Instead, Esmerald aims to be a valuable addition to your toolkit, providing new opportunities and insights.

Looking forward to hearing your thoughts and seeing how Esmerald might fit into your development journey or what you would like to see in it.


**EDIT:
 
Detailed more the features of Esmerald, as many pointed out, was missing :)
Thank you for the warning ",Complete-Painter-307,1f6bw3y,https://reddit.com/r/Python/comments/1f6bw3y/discover_esmerald_a_new_player_in_the_developer/,https://www.reddit.com/r/Python/comments/1f6bw3y/discover_esmerald_a_new_player_in_the_developer/,2024-09-01 11:07:07,0,0.29,0,0,33,0,0,False,False,True,False,False,Discussion,self,t3_1f6bw3y
Python,Python Environment variables ,"What are the most secure Python libraries for managing environment variables, and what is the recommended method for storing sensitive data such as API keys in a Python project - should I use a YAML file or an environment file (e.g. .env)?",Some-Conversation517,1f676s2,https://reddit.com/r/Python/comments/1f676s2/python_environment_variables/,https://www.reddit.com/r/Python/comments/1f676s2/python_environment_variables/,2024-09-01 05:35:40,46,0.89,46,0,35,0,0,False,False,True,False,False,Discussion,self,t3_1f676s2
Python,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",AutoModerator,1f617a7,https://reddit.com/r/Python/comments/1f617a7/sunday_daily_thread_whats_everyone_working_on/,https://www.reddit.com/r/Python/comments/1f617a7/sunday_daily_thread_whats_everyone_working_on/,2024-09-01 00:00:09,12,0.81,12,0,12,0,0,False,False,True,False,False,:pythonLogo: Daily Thread,self,t3_1f617a7
Python,Is My CI Pipeline for my Python Library Overkill?,"So this is what my GitHub insights are looking like:

|Date|Clones|Unique Clones|
|:-|:-|:-|
|29 Aug|1376|16|
|30 Aug|1326|9|

The majority of this is just my CI pipeline.

This is a snippet of the strategy section of the CI:

    strategy:
          matrix:
            python-version: [""3.8"", ""3.9"", ""3.10"", ""3.11"", ""3.12""]
            django-version: [32, 42, 51]
            db: [postgres, mysql, sqlite]
            broker: [rabbitmq, kafka]
            exclude:
              # Django 5.1 does not support Python &lt;3.10
              - python-version: ""3.8""
                django-version: 51
              - python-version: ""3.9""
                django-version: 51

Essentially, this is a library that I've been working on and my CI pipeline does tests for Python 3.8+ testing against various types of databases and message brokers.

Is this overkill?

I think it's fine given that this library is supposed to be flexible and not be too opinioned in terms of what database or message broker you wish to use.

Would love some thoughts though.

The library: [https://github.com/Salaah01/django-action-triggers](https://github.com/Salaah01/django-action-triggers)

Btw, I was going to test for different platforms (MacOS, Windows and Ubuntu) but... thought, ""let's take a pause and reassess"".

So please give me your thoughts.

Would especially appreciate thoughts from those who actively maintain libraries.",Salaah01,1f5qlui,https://reddit.com/r/Python/comments/1f5qlui/is_my_ci_pipeline_for_my_python_library_overkill/,https://www.reddit.com/r/Python/comments/1f5qlui/is_my_ci_pipeline_for_my_python_library_overkill/,2024-08-31 15:59:13,5,0.67,5,0,10,0,0,False,False,True,False,False,Discussion,self,t3_1f5qlui
Python,Automate Your Reddit Saved Post Backups with Context Using Reddit Stash,"Hey Everyone,

**What My Project Does**

A while back, I realized that many of the posts I had saved on Reddit for future reference were disappearing. To solve this problem, I developed a Python script called **Reddit Stash**. This tool automatically saves your Reddit saved posts and comments, along with your own posts and comments, and includes the necessary context (e.g., associated comments or parent posts). The script runs daily at around 00:00 CET using GitHub Actions, ensuring your data is backed up without any manual intervention on Dropbox. The files are saved in Markdown format, making them easy to read and reference later.

**Target Audience**

**Reddit Stash** is ideal for users who want to preserve their saved Reddit content without losing context, such as those interested in:

* **Personal Knowledge Management:** Users who save Reddit posts for later reference and want to ensure they keep the full context for future use.
* **Developers/Researchers:** Those planning to use Reddit content in local Retrieval-Augmented Generation (RAG) systems or similar projects.
* **Casual Reddit Users:** Anyone who doesn‚Äôt want to worry about manually backing up their saved content.

Whether you're a serious developer or a casual Reddit user, this tool can save you time and effort.

**Comparison**

While there are existing tools like `reddit-saved-saver` that allow you to save posts and comments, **Reddit Stash** goes a step further by:

* **Including Additional Context:** Reddit Stash captures the full context by saving associated comments when you save a post and parent comments when you save a comment.
* **Automated Daily Backups:** The script runs automatically every day using GitHub Actions, so you don't need to worry about manually backing up your content.
* **Markdown Format:** Content is saved in an easily readable and accessible format.

These features make **Reddit Stash** more comprehensive and user-friendly compared to other available tools.

You can check out the code and setup instructions here: [https://github.com/rhnfzl/reddit-stash](https://github.com/rhnfzl/reddit-stash)

I hope this helps those of you who‚Äôve been looking for a similar solution!",complexrexton,1f5n53a,https://reddit.com/r/Python/comments/1f5n53a/automate_your_reddit_saved_post_backups_with/,https://www.reddit.com/r/Python/comments/1f5n53a/automate_your_reddit_saved_post_backups_with/,2024-08-31 13:21:48,61,0.9,61,0,18,0,0,False,False,True,False,False,Showcase,self,t3_1f5n53a
